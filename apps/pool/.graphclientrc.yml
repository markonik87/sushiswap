sources:
  - name: Exchange
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:sushiswap/sushiswap-avalanche}
  - name: Bar
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:sushi-labs/xsushi}
  - name: Blocks
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:blocklytics/ethereum-blocks}
  - name: EthereumBlocks
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:blocklytics/ethereum-blocks}
  - name: Trident
    handler:
      graphql:
        endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:sushiswap/trident-optimism}
# - name: Staking
  #   handler:
  #     graphql:
  #       endpoint: https://{context.subgraphHost:api.thegraph.com/subgraphs/name}/{context.subgraphName:olastenberg/staking-arbitrum}
additionalTypeDefs: |
  input Pagination {
    pageIndex: Int! = 0
    pageSize: Int! = 20
  }
  type RewardToken {
    address: String!
    symbol: String!
    decimals: Int!
  }
  type Incentive {
    apr: BigDecimal!
    rewardPerDay: BigDecimal!
    rewardToken: RewardToken!
    rewarderAddress: String!
    rewarderType: String!
  }
  type Farm {
    id: ID!
    feeApy: BigDecimal!
    incentives: [Incentive!]!
    chefType: String!
    poolType: String!
  }
  extend type Factory {
    chainId: BigInt!
    chainName: String!
    chainShortName: String!
  }
  extend type Pair {
    volume1d: BigDecimal!
    volume7d: BigDecimal!
    chainId: BigInt!
    chainName: String!
    chainShortName: String!
    farm: Farm
    incentiveApr: BigDecimal!
    feeApr: BigDecimal!
  }
  extend type Bundle {
    chainId: BigInt!
    chainName: String!
  }
  # extend type Farm {
  #   chainId: BigInt!
  #   chainName: String!
  # }
  extend type User {
    chainId: BigInt!
    chainName: String!
  }
  extend type Block {
    chainId: BigInt!
    chainName: String!
  }
  extend type Query {
    crossChainBlocks(
      first: Int,
      skip: Int, 
      where: Block_filter, 
      orderBy: Block_orderBy, 
      orderDirection: OrderDirection, 
      chainIds: [BigInt!]!
    ): [Block!]!
    crossChainPair(id: ID!, now: Int!, chainId: BigInt!): Pair!
    crossChainPairs(
      first: Int,
      skip: Int, 
      pagination: Pagination,
      where: Pair_filter, 
      orderBy: Pair_orderBy, 
      orderDirection: OrderDirection, 
      chainIds: [BigInt!]!,
      oneDayBlockNumbers: [BigInt!]!,
      block: Block_height
      now: Int!,
    ): [Pair!]!
    crossChainBundles(
      first: Int!,
      chainIds: [BigInt!]!
    ): [Bundle!]!
    crossChainUser(
      id: ID!, 
      chainIds: [BigInt!]!, 
      now: Int!, 
      block: Block_height
    ): User!
    crossChainFactories(
      chainIds: [BigInt!]!
    ): [Factory!]!
    # crossChainFarms(first: Int!, chainIds: [BigInt!]!): [Farm!]!
  }

additionalResolvers:
  - ./resolvers.ts

documents:
  - ./query.graphql

codegen:
  contextType: 'MeshContext & { chainId: string; chainName: string; chainShortName: string; subgraphName: string; subgraphHost: string }'
