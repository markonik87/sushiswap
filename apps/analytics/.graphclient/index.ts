// @ts-nocheck
import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
import { GraphQLSchema, ExecutionResult } from 'graphql';

import { compileQuery, isCompiledQuery, CompilerOptions } from 'graphql-jit';
import { AggregateError, isAsyncIterable, mapAsyncIterator } from '@graphql-tools/utils';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  ETHEREUM_BigDecimal: any;
  BigInt: any;
  ETHEREUM_Bytes: any;
  MOONRIVER_BigDecimal: any;
  MOONRIVER_Bytes: any;
  ARBITRUM_BigDecimal: any;
  ARBITRUM_Bytes: any;
  FANTOM_BigDecimal: any;
  FANTOM_Bytes: any;
  XDAI_BigDecimal: any;
  XDAI_Bytes: any;
  AVALANCHE_BigDecimal: any;
  AVALANCHE_Bytes: any;
  MATIC_BigDecimal: any;
  MATIC_Bytes: any;
  BSC_BigDecimal: any;
  BSC_Bytes: any;
};

export type Query = {
  ETHEREUM_user?: Maybe<ETHEREUM_User>;
  ETHEREUM_users: Array<ETHEREUM_User>;
  ETHEREUM_bundle?: Maybe<ETHEREUM_Bundle>;
  ETHEREUM_bundles: Array<ETHEREUM_Bundle>;
  ETHEREUM_factory?: Maybe<ETHEREUM_Factory>;
  ETHEREUM_factories: Array<ETHEREUM_Factory>;
  ETHEREUM_hourData?: Maybe<ETHEREUM_HourData>;
  ETHEREUM_hourDatas: Array<ETHEREUM_HourData>;
  ETHEREUM_dayData?: Maybe<ETHEREUM_DayData>;
  ETHEREUM_dayDatas: Array<ETHEREUM_DayData>;
  ETHEREUM_token?: Maybe<ETHEREUM_Token>;
  ETHEREUM_tokens: Array<ETHEREUM_Token>;
  ETHEREUM_tokenHourData?: Maybe<ETHEREUM_TokenHourData>;
  ETHEREUM_tokenHourDatas: Array<ETHEREUM_TokenHourData>;
  ETHEREUM_tokenDayData?: Maybe<ETHEREUM_TokenDayData>;
  ETHEREUM_tokenDayDatas: Array<ETHEREUM_TokenDayData>;
  ETHEREUM_pair?: Maybe<ETHEREUM_Pair>;
  ETHEREUM_pairs: Array<ETHEREUM_Pair>;
  ETHEREUM_pairHourData?: Maybe<ETHEREUM_PairHourData>;
  ETHEREUM_pairHourDatas: Array<ETHEREUM_PairHourData>;
  ETHEREUM_pairDayData?: Maybe<ETHEREUM_PairDayData>;
  ETHEREUM_pairDayDatas: Array<ETHEREUM_PairDayData>;
  ETHEREUM_liquidityPosition?: Maybe<ETHEREUM_LiquidityPosition>;
  ETHEREUM_liquidityPositions: Array<ETHEREUM_LiquidityPosition>;
  ETHEREUM_liquidityPositionSnapshot?: Maybe<ETHEREUM_LiquidityPositionSnapshot>;
  ETHEREUM_liquidityPositionSnapshots: Array<ETHEREUM_LiquidityPositionSnapshot>;
  ETHEREUM_transaction?: Maybe<ETHEREUM_Transaction>;
  ETHEREUM_transactions: Array<ETHEREUM_Transaction>;
  ETHEREUM_mint?: Maybe<ETHEREUM_Mint>;
  ETHEREUM_mints: Array<ETHEREUM_Mint>;
  ETHEREUM_burn?: Maybe<ETHEREUM_Burn>;
  ETHEREUM_burns: Array<ETHEREUM_Burn>;
  ETHEREUM_swap?: Maybe<ETHEREUM_Swap>;
  ETHEREUM_swaps: Array<ETHEREUM_Swap>;
  ETHEREUM_tokenSearch: Array<ETHEREUM_Token>;
  ETHEREUM_pairSearch: Array<ETHEREUM_Pair>;
  ETHEREUM_userSearch: Array<ETHEREUM_User>;
  /** Access to subgraph metadata */
  ETHEREUM__meta?: Maybe<ETHEREUM__Meta_>;
  MOONRIVER_user?: Maybe<MOONRIVER_User>;
  MOONRIVER_users: Array<MOONRIVER_User>;
  MOONRIVER_bundle?: Maybe<MOONRIVER_Bundle>;
  MOONRIVER_bundles: Array<MOONRIVER_Bundle>;
  MOONRIVER_factory?: Maybe<MOONRIVER_Factory>;
  MOONRIVER_factories: Array<MOONRIVER_Factory>;
  MOONRIVER_hourData?: Maybe<MOONRIVER_HourData>;
  MOONRIVER_hourDatas: Array<MOONRIVER_HourData>;
  MOONRIVER_dayData?: Maybe<MOONRIVER_DayData>;
  MOONRIVER_dayDatas: Array<MOONRIVER_DayData>;
  MOONRIVER_token?: Maybe<MOONRIVER_Token>;
  MOONRIVER_tokens: Array<MOONRIVER_Token>;
  MOONRIVER_tokenHourData?: Maybe<MOONRIVER_TokenHourData>;
  MOONRIVER_tokenHourDatas: Array<MOONRIVER_TokenHourData>;
  MOONRIVER_tokenDayData?: Maybe<MOONRIVER_TokenDayData>;
  MOONRIVER_tokenDayDatas: Array<MOONRIVER_TokenDayData>;
  MOONRIVER_pair?: Maybe<MOONRIVER_Pair>;
  MOONRIVER_pairs: Array<MOONRIVER_Pair>;
  MOONRIVER_pairHourData?: Maybe<MOONRIVER_PairHourData>;
  MOONRIVER_pairHourDatas: Array<MOONRIVER_PairHourData>;
  MOONRIVER_pairDayData?: Maybe<MOONRIVER_PairDayData>;
  MOONRIVER_pairDayDatas: Array<MOONRIVER_PairDayData>;
  MOONRIVER_liquidityPosition?: Maybe<MOONRIVER_LiquidityPosition>;
  MOONRIVER_liquidityPositions: Array<MOONRIVER_LiquidityPosition>;
  MOONRIVER_liquidityPositionSnapshot?: Maybe<MOONRIVER_LiquidityPositionSnapshot>;
  MOONRIVER_liquidityPositionSnapshots: Array<MOONRIVER_LiquidityPositionSnapshot>;
  MOONRIVER_transaction?: Maybe<MOONRIVER_Transaction>;
  MOONRIVER_transactions: Array<MOONRIVER_Transaction>;
  MOONRIVER_mint?: Maybe<MOONRIVER_Mint>;
  MOONRIVER_mints: Array<MOONRIVER_Mint>;
  MOONRIVER_burn?: Maybe<MOONRIVER_Burn>;
  MOONRIVER_burns: Array<MOONRIVER_Burn>;
  MOONRIVER_swap?: Maybe<MOONRIVER_Swap>;
  MOONRIVER_swaps: Array<MOONRIVER_Swap>;
  /** Access to subgraph metadata */
  MOONRIVER__meta?: Maybe<MOONRIVER__Meta_>;
  ARBITRUM_user?: Maybe<ARBITRUM_User>;
  ARBITRUM_users: Array<ARBITRUM_User>;
  ARBITRUM_bundle?: Maybe<ARBITRUM_Bundle>;
  ARBITRUM_bundles: Array<ARBITRUM_Bundle>;
  ARBITRUM_factory?: Maybe<ARBITRUM_Factory>;
  ARBITRUM_factories: Array<ARBITRUM_Factory>;
  ARBITRUM_hourData?: Maybe<ARBITRUM_HourData>;
  ARBITRUM_hourDatas: Array<ARBITRUM_HourData>;
  ARBITRUM_dayData?: Maybe<ARBITRUM_DayData>;
  ARBITRUM_dayDatas: Array<ARBITRUM_DayData>;
  ARBITRUM_token?: Maybe<ARBITRUM_Token>;
  ARBITRUM_tokens: Array<ARBITRUM_Token>;
  ARBITRUM_tokenHourData?: Maybe<ARBITRUM_TokenHourData>;
  ARBITRUM_tokenHourDatas: Array<ARBITRUM_TokenHourData>;
  ARBITRUM_tokenDayData?: Maybe<ARBITRUM_TokenDayData>;
  ARBITRUM_tokenDayDatas: Array<ARBITRUM_TokenDayData>;
  ARBITRUM_pair?: Maybe<ARBITRUM_Pair>;
  ARBITRUM_pairs: Array<ARBITRUM_Pair>;
  ARBITRUM_pairHourData?: Maybe<ARBITRUM_PairHourData>;
  ARBITRUM_pairHourDatas: Array<ARBITRUM_PairHourData>;
  ARBITRUM_pairDayData?: Maybe<ARBITRUM_PairDayData>;
  ARBITRUM_pairDayDatas: Array<ARBITRUM_PairDayData>;
  ARBITRUM_liquidityPosition?: Maybe<ARBITRUM_LiquidityPosition>;
  ARBITRUM_liquidityPositions: Array<ARBITRUM_LiquidityPosition>;
  ARBITRUM_liquidityPositionSnapshot?: Maybe<ARBITRUM_LiquidityPositionSnapshot>;
  ARBITRUM_liquidityPositionSnapshots: Array<ARBITRUM_LiquidityPositionSnapshot>;
  ARBITRUM_transaction?: Maybe<ARBITRUM_Transaction>;
  ARBITRUM_transactions: Array<ARBITRUM_Transaction>;
  ARBITRUM_mint?: Maybe<ARBITRUM_Mint>;
  ARBITRUM_mints: Array<ARBITRUM_Mint>;
  ARBITRUM_burn?: Maybe<ARBITRUM_Burn>;
  ARBITRUM_burns: Array<ARBITRUM_Burn>;
  ARBITRUM_swap?: Maybe<ARBITRUM_Swap>;
  ARBITRUM_swaps: Array<ARBITRUM_Swap>;
  /** Access to subgraph metadata */
  ARBITRUM__meta?: Maybe<ARBITRUM__Meta_>;
  FANTOM_user?: Maybe<FANTOM_User>;
  FANTOM_users: Array<FANTOM_User>;
  FANTOM_bundle?: Maybe<FANTOM_Bundle>;
  FANTOM_bundles: Array<FANTOM_Bundle>;
  FANTOM_factory?: Maybe<FANTOM_Factory>;
  FANTOM_factories: Array<FANTOM_Factory>;
  FANTOM_hourData?: Maybe<FANTOM_HourData>;
  FANTOM_hourDatas: Array<FANTOM_HourData>;
  FANTOM_dayData?: Maybe<FANTOM_DayData>;
  FANTOM_dayDatas: Array<FANTOM_DayData>;
  FANTOM_token?: Maybe<FANTOM_Token>;
  FANTOM_tokens: Array<FANTOM_Token>;
  FANTOM_tokenHourData?: Maybe<FANTOM_TokenHourData>;
  FANTOM_tokenHourDatas: Array<FANTOM_TokenHourData>;
  FANTOM_tokenDayData?: Maybe<FANTOM_TokenDayData>;
  FANTOM_tokenDayDatas: Array<FANTOM_TokenDayData>;
  FANTOM_pair?: Maybe<FANTOM_Pair>;
  FANTOM_pairs: Array<FANTOM_Pair>;
  FANTOM_pairHourData?: Maybe<FANTOM_PairHourData>;
  FANTOM_pairHourDatas: Array<FANTOM_PairHourData>;
  FANTOM_pairDayData?: Maybe<FANTOM_PairDayData>;
  FANTOM_pairDayDatas: Array<FANTOM_PairDayData>;
  FANTOM_liquidityPosition?: Maybe<FANTOM_LiquidityPosition>;
  FANTOM_liquidityPositions: Array<FANTOM_LiquidityPosition>;
  FANTOM_liquidityPositionSnapshot?: Maybe<FANTOM_LiquidityPositionSnapshot>;
  FANTOM_liquidityPositionSnapshots: Array<FANTOM_LiquidityPositionSnapshot>;
  FANTOM_transaction?: Maybe<FANTOM_Transaction>;
  FANTOM_transactions: Array<FANTOM_Transaction>;
  FANTOM_mint?: Maybe<FANTOM_Mint>;
  FANTOM_mints: Array<FANTOM_Mint>;
  FANTOM_burn?: Maybe<FANTOM_Burn>;
  FANTOM_burns: Array<FANTOM_Burn>;
  FANTOM_swap?: Maybe<FANTOM_Swap>;
  FANTOM_swaps: Array<FANTOM_Swap>;
  /** Access to subgraph metadata */
  FANTOM__meta?: Maybe<FANTOM__Meta_>;
  XDAI_user?: Maybe<XDAI_User>;
  XDAI_users: Array<XDAI_User>;
  XDAI_bundle?: Maybe<XDAI_Bundle>;
  XDAI_bundles: Array<XDAI_Bundle>;
  XDAI_factory?: Maybe<XDAI_Factory>;
  XDAI_factories: Array<XDAI_Factory>;
  XDAI_hourData?: Maybe<XDAI_HourData>;
  XDAI_hourDatas: Array<XDAI_HourData>;
  XDAI_dayData?: Maybe<XDAI_DayData>;
  XDAI_dayDatas: Array<XDAI_DayData>;
  XDAI_token?: Maybe<XDAI_Token>;
  XDAI_tokens: Array<XDAI_Token>;
  XDAI_tokenHourData?: Maybe<XDAI_TokenHourData>;
  XDAI_tokenHourDatas: Array<XDAI_TokenHourData>;
  XDAI_tokenDayData?: Maybe<XDAI_TokenDayData>;
  XDAI_tokenDayDatas: Array<XDAI_TokenDayData>;
  XDAI_pair?: Maybe<XDAI_Pair>;
  XDAI_pairs: Array<XDAI_Pair>;
  XDAI_pairHourData?: Maybe<XDAI_PairHourData>;
  XDAI_pairHourDatas: Array<XDAI_PairHourData>;
  XDAI_pairDayData?: Maybe<XDAI_PairDayData>;
  XDAI_pairDayDatas: Array<XDAI_PairDayData>;
  XDAI_liquidityPosition?: Maybe<XDAI_LiquidityPosition>;
  XDAI_liquidityPositions: Array<XDAI_LiquidityPosition>;
  XDAI_liquidityPositionSnapshot?: Maybe<XDAI_LiquidityPositionSnapshot>;
  XDAI_liquidityPositionSnapshots: Array<XDAI_LiquidityPositionSnapshot>;
  XDAI_transaction?: Maybe<XDAI_Transaction>;
  XDAI_transactions: Array<XDAI_Transaction>;
  XDAI_mint?: Maybe<XDAI_Mint>;
  XDAI_mints: Array<XDAI_Mint>;
  XDAI_burn?: Maybe<XDAI_Burn>;
  XDAI_burns: Array<XDAI_Burn>;
  XDAI_swap?: Maybe<XDAI_Swap>;
  XDAI_swaps: Array<XDAI_Swap>;
  /** Access to subgraph metadata */
  XDAI__meta?: Maybe<XDAI__Meta_>;
  AVALANCHE_user?: Maybe<AVALANCHE_User>;
  AVALANCHE_users: Array<AVALANCHE_User>;
  AVALANCHE_bundle?: Maybe<AVALANCHE_Bundle>;
  AVALANCHE_bundles: Array<AVALANCHE_Bundle>;
  AVALANCHE_factory?: Maybe<AVALANCHE_Factory>;
  AVALANCHE_factories: Array<AVALANCHE_Factory>;
  AVALANCHE_hourData?: Maybe<AVALANCHE_HourData>;
  AVALANCHE_hourDatas: Array<AVALANCHE_HourData>;
  AVALANCHE_dayData?: Maybe<AVALANCHE_DayData>;
  AVALANCHE_dayDatas: Array<AVALANCHE_DayData>;
  AVALANCHE_token?: Maybe<AVALANCHE_Token>;
  AVALANCHE_tokens: Array<AVALANCHE_Token>;
  AVALANCHE_tokenHourData?: Maybe<AVALANCHE_TokenHourData>;
  AVALANCHE_tokenHourDatas: Array<AVALANCHE_TokenHourData>;
  AVALANCHE_tokenDayData?: Maybe<AVALANCHE_TokenDayData>;
  AVALANCHE_tokenDayDatas: Array<AVALANCHE_TokenDayData>;
  AVALANCHE_pair?: Maybe<AVALANCHE_Pair>;
  AVALANCHE_pairs: Array<AVALANCHE_Pair>;
  AVALANCHE_pairHourData?: Maybe<AVALANCHE_PairHourData>;
  AVALANCHE_pairHourDatas: Array<AVALANCHE_PairHourData>;
  AVALANCHE_pairDayData?: Maybe<AVALANCHE_PairDayData>;
  AVALANCHE_pairDayDatas: Array<AVALANCHE_PairDayData>;
  AVALANCHE_liquidityPosition?: Maybe<AVALANCHE_LiquidityPosition>;
  AVALANCHE_liquidityPositions: Array<AVALANCHE_LiquidityPosition>;
  AVALANCHE_liquidityPositionSnapshot?: Maybe<AVALANCHE_LiquidityPositionSnapshot>;
  AVALANCHE_liquidityPositionSnapshots: Array<AVALANCHE_LiquidityPositionSnapshot>;
  AVALANCHE_transaction?: Maybe<AVALANCHE_Transaction>;
  AVALANCHE_transactions: Array<AVALANCHE_Transaction>;
  AVALANCHE_mint?: Maybe<AVALANCHE_Mint>;
  AVALANCHE_mints: Array<AVALANCHE_Mint>;
  AVALANCHE_burn?: Maybe<AVALANCHE_Burn>;
  AVALANCHE_burns: Array<AVALANCHE_Burn>;
  AVALANCHE_swap?: Maybe<AVALANCHE_Swap>;
  AVALANCHE_swaps: Array<AVALANCHE_Swap>;
  /** Access to subgraph metadata */
  AVALANCHE__meta?: Maybe<AVALANCHE__Meta_>;
  MATIC_user?: Maybe<MATIC_User>;
  MATIC_users: Array<MATIC_User>;
  MATIC_bundle?: Maybe<MATIC_Bundle>;
  MATIC_bundles: Array<MATIC_Bundle>;
  MATIC_factory?: Maybe<MATIC_Factory>;
  MATIC_factories: Array<MATIC_Factory>;
  MATIC_hourData?: Maybe<MATIC_HourData>;
  MATIC_hourDatas: Array<MATIC_HourData>;
  MATIC_dayData?: Maybe<MATIC_DayData>;
  MATIC_dayDatas: Array<MATIC_DayData>;
  MATIC_token?: Maybe<MATIC_Token>;
  MATIC_tokens: Array<MATIC_Token>;
  MATIC_tokenHourData?: Maybe<MATIC_TokenHourData>;
  MATIC_tokenHourDatas: Array<MATIC_TokenHourData>;
  MATIC_tokenDayData?: Maybe<MATIC_TokenDayData>;
  MATIC_tokenDayDatas: Array<MATIC_TokenDayData>;
  MATIC_pair?: Maybe<MATIC_Pair>;
  MATIC_pairs: Array<MATIC_Pair>;
  MATIC_pairHourData?: Maybe<MATIC_PairHourData>;
  MATIC_pairHourDatas: Array<MATIC_PairHourData>;
  MATIC_pairDayData?: Maybe<MATIC_PairDayData>;
  MATIC_pairDayDatas: Array<MATIC_PairDayData>;
  MATIC_liquidityPosition?: Maybe<MATIC_LiquidityPosition>;
  MATIC_liquidityPositions: Array<MATIC_LiquidityPosition>;
  MATIC_liquidityPositionSnapshot?: Maybe<MATIC_LiquidityPositionSnapshot>;
  MATIC_liquidityPositionSnapshots: Array<MATIC_LiquidityPositionSnapshot>;
  MATIC_transaction?: Maybe<MATIC_Transaction>;
  MATIC_transactions: Array<MATIC_Transaction>;
  MATIC_mint?: Maybe<MATIC_Mint>;
  MATIC_mints: Array<MATIC_Mint>;
  MATIC_burn?: Maybe<MATIC_Burn>;
  MATIC_burns: Array<MATIC_Burn>;
  MATIC_swap?: Maybe<MATIC_Swap>;
  MATIC_swaps: Array<MATIC_Swap>;
  /** Access to subgraph metadata */
  MATIC__meta?: Maybe<MATIC__Meta_>;
  BSC_user?: Maybe<BSC_User>;
  BSC_users: Array<BSC_User>;
  BSC_bundle?: Maybe<BSC_Bundle>;
  BSC_bundles: Array<BSC_Bundle>;
  BSC_factory?: Maybe<BSC_Factory>;
  BSC_factories: Array<BSC_Factory>;
  BSC_hourData?: Maybe<BSC_HourData>;
  BSC_hourDatas: Array<BSC_HourData>;
  BSC_dayData?: Maybe<BSC_DayData>;
  BSC_dayDatas: Array<BSC_DayData>;
  BSC_token?: Maybe<BSC_Token>;
  BSC_tokens: Array<BSC_Token>;
  BSC_tokenHourData?: Maybe<BSC_TokenHourData>;
  BSC_tokenHourDatas: Array<BSC_TokenHourData>;
  BSC_tokenDayData?: Maybe<BSC_TokenDayData>;
  BSC_tokenDayDatas: Array<BSC_TokenDayData>;
  BSC_pair?: Maybe<BSC_Pair>;
  BSC_pairs: Array<BSC_Pair>;
  BSC_pairHourData?: Maybe<BSC_PairHourData>;
  BSC_pairHourDatas: Array<BSC_PairHourData>;
  BSC_pairDayData?: Maybe<BSC_PairDayData>;
  BSC_pairDayDatas: Array<BSC_PairDayData>;
  BSC_liquidityPosition?: Maybe<BSC_LiquidityPosition>;
  BSC_liquidityPositions: Array<BSC_LiquidityPosition>;
  BSC_liquidityPositionSnapshot?: Maybe<BSC_LiquidityPositionSnapshot>;
  BSC_liquidityPositionSnapshots: Array<BSC_LiquidityPositionSnapshot>;
  BSC_transaction?: Maybe<BSC_Transaction>;
  BSC_transactions: Array<BSC_Transaction>;
  BSC_mint?: Maybe<BSC_Mint>;
  BSC_mints: Array<BSC_Mint>;
  BSC_burn?: Maybe<BSC_Burn>;
  BSC_burns: Array<BSC_Burn>;
  BSC_swap?: Maybe<BSC_Swap>;
  BSC_swaps: Array<BSC_Swap>;
  /** Access to subgraph metadata */
  BSC__meta?: Maybe<BSC__Meta_>;
};


export type QueryETHEREUM_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_User_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_User_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Bundle_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Bundle_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Factory_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Factory_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_HourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_HourData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_DayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_DayData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Token_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Token_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_TokenHourData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_TokenDayData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Pair_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_PairHourData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_PairDayData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_LiquidityPosition_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Transaction_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Transaction_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Mint_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Mint_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Burn_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Burn_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Swap_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Swap_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_tokenSearchArgs = {
  text: Scalars['String'];
  first?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_pairSearchArgs = {
  text: Scalars['String'];
  first?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_userSearchArgs = {
  text: Scalars['String'];
  first?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM__metaArgs = {
  block?: InputMaybe<ETHEREUM_Block_height>;
};


export type QueryMOONRIVER_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_User_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_User_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Bundle_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Bundle_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Factory_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Factory_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_HourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_HourData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_DayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_DayData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Token_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Token_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_TokenHourData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_TokenDayData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Pair_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Pair_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_PairHourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_PairHourData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_PairDayData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_LiquidityPosition_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Transaction_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Transaction_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Mint_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Mint_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Burn_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Burn_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Swap_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Swap_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER__metaArgs = {
  block?: InputMaybe<MOONRIVER_Block_height>;
};


export type QueryARBITRUM_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_User_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_User_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Bundle_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Bundle_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Factory_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Factory_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_HourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_HourData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_DayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_DayData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Token_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Token_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_TokenHourData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_TokenDayData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Pair_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_PairHourData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_PairDayData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_LiquidityPosition_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Transaction_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Transaction_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Mint_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Mint_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Burn_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Burn_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Swap_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Swap_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM__metaArgs = {
  block?: InputMaybe<ARBITRUM_Block_height>;
};


export type QueryFANTOM_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_User_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_User_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Bundle_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Bundle_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Factory_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Factory_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_HourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_HourData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_DayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_DayData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Token_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Token_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_TokenHourData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_TokenDayData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Pair_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Pair_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_PairHourData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_PairDayData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_LiquidityPosition_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Transaction_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Transaction_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Mint_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Mint_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Burn_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Burn_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Swap_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Swap_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM__metaArgs = {
  block?: InputMaybe<FANTOM_Block_height>;
};


export type QueryXDAI_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_User_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_User_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Bundle_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Bundle_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Factory_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Factory_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_HourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_HourData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_DayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_DayData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Token_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Token_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_TokenHourData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_TokenDayData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Pair_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Pair_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_PairHourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_PairHourData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_PairDayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_PairDayData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_LiquidityPosition_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Transaction_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Transaction_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Mint_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Mint_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Burn_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Burn_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Swap_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Swap_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI__metaArgs = {
  block?: InputMaybe<XDAI_Block_height>;
};


export type QueryAVALANCHE_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_User_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_User_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Bundle_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Bundle_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Factory_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Factory_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_HourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_HourData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_DayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_DayData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Token_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Token_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_TokenHourData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_TokenDayData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Pair_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Pair_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_PairHourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_PairHourData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_PairDayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_PairDayData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_LiquidityPosition_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Transaction_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Transaction_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Mint_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Mint_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Burn_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Burn_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Swap_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Swap_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE__metaArgs = {
  block?: InputMaybe<AVALANCHE_Block_height>;
};


export type QueryMATIC_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_User_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_User_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Bundle_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Bundle_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Factory_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Factory_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_HourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_HourData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_DayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_DayData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Token_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Token_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_TokenHourData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_TokenDayData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Pair_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Pair_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_PairHourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_PairHourData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_PairDayData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_LiquidityPosition_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Transaction_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Transaction_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Mint_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Mint_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Burn_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Burn_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Swap_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Swap_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC__metaArgs = {
  block?: InputMaybe<MATIC_Block_height>;
};


export type QueryBSC_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_User_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_User_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Bundle_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Bundle_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Factory_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Factory_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_HourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_HourData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_DayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_DayData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Token_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Token_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_TokenHourData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_TokenDayData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Pair_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Pair_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_PairHourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_PairHourData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_PairDayData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_LiquidityPosition_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Transaction_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Transaction_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Mint_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Mint_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Burn_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Burn_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Swap_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Swap_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC__metaArgs = {
  block?: InputMaybe<BSC_Block_height>;
};

export type Subscription = {
  ETHEREUM_user?: Maybe<ETHEREUM_User>;
  ETHEREUM_users: Array<ETHEREUM_User>;
  ETHEREUM_bundle?: Maybe<ETHEREUM_Bundle>;
  ETHEREUM_bundles: Array<ETHEREUM_Bundle>;
  ETHEREUM_factory?: Maybe<ETHEREUM_Factory>;
  ETHEREUM_factories: Array<ETHEREUM_Factory>;
  ETHEREUM_hourData?: Maybe<ETHEREUM_HourData>;
  ETHEREUM_hourDatas: Array<ETHEREUM_HourData>;
  ETHEREUM_dayData?: Maybe<ETHEREUM_DayData>;
  ETHEREUM_dayDatas: Array<ETHEREUM_DayData>;
  ETHEREUM_token?: Maybe<ETHEREUM_Token>;
  ETHEREUM_tokens: Array<ETHEREUM_Token>;
  ETHEREUM_tokenHourData?: Maybe<ETHEREUM_TokenHourData>;
  ETHEREUM_tokenHourDatas: Array<ETHEREUM_TokenHourData>;
  ETHEREUM_tokenDayData?: Maybe<ETHEREUM_TokenDayData>;
  ETHEREUM_tokenDayDatas: Array<ETHEREUM_TokenDayData>;
  ETHEREUM_pair?: Maybe<ETHEREUM_Pair>;
  ETHEREUM_pairs: Array<ETHEREUM_Pair>;
  ETHEREUM_pairHourData?: Maybe<ETHEREUM_PairHourData>;
  ETHEREUM_pairHourDatas: Array<ETHEREUM_PairHourData>;
  ETHEREUM_pairDayData?: Maybe<ETHEREUM_PairDayData>;
  ETHEREUM_pairDayDatas: Array<ETHEREUM_PairDayData>;
  ETHEREUM_liquidityPosition?: Maybe<ETHEREUM_LiquidityPosition>;
  ETHEREUM_liquidityPositions: Array<ETHEREUM_LiquidityPosition>;
  ETHEREUM_liquidityPositionSnapshot?: Maybe<ETHEREUM_LiquidityPositionSnapshot>;
  ETHEREUM_liquidityPositionSnapshots: Array<ETHEREUM_LiquidityPositionSnapshot>;
  ETHEREUM_transaction?: Maybe<ETHEREUM_Transaction>;
  ETHEREUM_transactions: Array<ETHEREUM_Transaction>;
  ETHEREUM_mint?: Maybe<ETHEREUM_Mint>;
  ETHEREUM_mints: Array<ETHEREUM_Mint>;
  ETHEREUM_burn?: Maybe<ETHEREUM_Burn>;
  ETHEREUM_burns: Array<ETHEREUM_Burn>;
  ETHEREUM_swap?: Maybe<ETHEREUM_Swap>;
  ETHEREUM_swaps: Array<ETHEREUM_Swap>;
  /** Access to subgraph metadata */
  ETHEREUM__meta?: Maybe<ETHEREUM__Meta_>;
  MOONRIVER_user?: Maybe<MOONRIVER_User>;
  MOONRIVER_users: Array<MOONRIVER_User>;
  MOONRIVER_bundle?: Maybe<MOONRIVER_Bundle>;
  MOONRIVER_bundles: Array<MOONRIVER_Bundle>;
  MOONRIVER_factory?: Maybe<MOONRIVER_Factory>;
  MOONRIVER_factories: Array<MOONRIVER_Factory>;
  MOONRIVER_hourData?: Maybe<MOONRIVER_HourData>;
  MOONRIVER_hourDatas: Array<MOONRIVER_HourData>;
  MOONRIVER_dayData?: Maybe<MOONRIVER_DayData>;
  MOONRIVER_dayDatas: Array<MOONRIVER_DayData>;
  MOONRIVER_token?: Maybe<MOONRIVER_Token>;
  MOONRIVER_tokens: Array<MOONRIVER_Token>;
  MOONRIVER_tokenHourData?: Maybe<MOONRIVER_TokenHourData>;
  MOONRIVER_tokenHourDatas: Array<MOONRIVER_TokenHourData>;
  MOONRIVER_tokenDayData?: Maybe<MOONRIVER_TokenDayData>;
  MOONRIVER_tokenDayDatas: Array<MOONRIVER_TokenDayData>;
  MOONRIVER_pair?: Maybe<MOONRIVER_Pair>;
  MOONRIVER_pairs: Array<MOONRIVER_Pair>;
  MOONRIVER_pairHourData?: Maybe<MOONRIVER_PairHourData>;
  MOONRIVER_pairHourDatas: Array<MOONRIVER_PairHourData>;
  MOONRIVER_pairDayData?: Maybe<MOONRIVER_PairDayData>;
  MOONRIVER_pairDayDatas: Array<MOONRIVER_PairDayData>;
  MOONRIVER_liquidityPosition?: Maybe<MOONRIVER_LiquidityPosition>;
  MOONRIVER_liquidityPositions: Array<MOONRIVER_LiquidityPosition>;
  MOONRIVER_liquidityPositionSnapshot?: Maybe<MOONRIVER_LiquidityPositionSnapshot>;
  MOONRIVER_liquidityPositionSnapshots: Array<MOONRIVER_LiquidityPositionSnapshot>;
  MOONRIVER_transaction?: Maybe<MOONRIVER_Transaction>;
  MOONRIVER_transactions: Array<MOONRIVER_Transaction>;
  MOONRIVER_mint?: Maybe<MOONRIVER_Mint>;
  MOONRIVER_mints: Array<MOONRIVER_Mint>;
  MOONRIVER_burn?: Maybe<MOONRIVER_Burn>;
  MOONRIVER_burns: Array<MOONRIVER_Burn>;
  MOONRIVER_swap?: Maybe<MOONRIVER_Swap>;
  MOONRIVER_swaps: Array<MOONRIVER_Swap>;
  /** Access to subgraph metadata */
  MOONRIVER__meta?: Maybe<MOONRIVER__Meta_>;
  ARBITRUM_user?: Maybe<ARBITRUM_User>;
  ARBITRUM_users: Array<ARBITRUM_User>;
  ARBITRUM_bundle?: Maybe<ARBITRUM_Bundle>;
  ARBITRUM_bundles: Array<ARBITRUM_Bundle>;
  ARBITRUM_factory?: Maybe<ARBITRUM_Factory>;
  ARBITRUM_factories: Array<ARBITRUM_Factory>;
  ARBITRUM_hourData?: Maybe<ARBITRUM_HourData>;
  ARBITRUM_hourDatas: Array<ARBITRUM_HourData>;
  ARBITRUM_dayData?: Maybe<ARBITRUM_DayData>;
  ARBITRUM_dayDatas: Array<ARBITRUM_DayData>;
  ARBITRUM_token?: Maybe<ARBITRUM_Token>;
  ARBITRUM_tokens: Array<ARBITRUM_Token>;
  ARBITRUM_tokenHourData?: Maybe<ARBITRUM_TokenHourData>;
  ARBITRUM_tokenHourDatas: Array<ARBITRUM_TokenHourData>;
  ARBITRUM_tokenDayData?: Maybe<ARBITRUM_TokenDayData>;
  ARBITRUM_tokenDayDatas: Array<ARBITRUM_TokenDayData>;
  ARBITRUM_pair?: Maybe<ARBITRUM_Pair>;
  ARBITRUM_pairs: Array<ARBITRUM_Pair>;
  ARBITRUM_pairHourData?: Maybe<ARBITRUM_PairHourData>;
  ARBITRUM_pairHourDatas: Array<ARBITRUM_PairHourData>;
  ARBITRUM_pairDayData?: Maybe<ARBITRUM_PairDayData>;
  ARBITRUM_pairDayDatas: Array<ARBITRUM_PairDayData>;
  ARBITRUM_liquidityPosition?: Maybe<ARBITRUM_LiquidityPosition>;
  ARBITRUM_liquidityPositions: Array<ARBITRUM_LiquidityPosition>;
  ARBITRUM_liquidityPositionSnapshot?: Maybe<ARBITRUM_LiquidityPositionSnapshot>;
  ARBITRUM_liquidityPositionSnapshots: Array<ARBITRUM_LiquidityPositionSnapshot>;
  ARBITRUM_transaction?: Maybe<ARBITRUM_Transaction>;
  ARBITRUM_transactions: Array<ARBITRUM_Transaction>;
  ARBITRUM_mint?: Maybe<ARBITRUM_Mint>;
  ARBITRUM_mints: Array<ARBITRUM_Mint>;
  ARBITRUM_burn?: Maybe<ARBITRUM_Burn>;
  ARBITRUM_burns: Array<ARBITRUM_Burn>;
  ARBITRUM_swap?: Maybe<ARBITRUM_Swap>;
  ARBITRUM_swaps: Array<ARBITRUM_Swap>;
  /** Access to subgraph metadata */
  ARBITRUM__meta?: Maybe<ARBITRUM__Meta_>;
  FANTOM_user?: Maybe<FANTOM_User>;
  FANTOM_users: Array<FANTOM_User>;
  FANTOM_bundle?: Maybe<FANTOM_Bundle>;
  FANTOM_bundles: Array<FANTOM_Bundle>;
  FANTOM_factory?: Maybe<FANTOM_Factory>;
  FANTOM_factories: Array<FANTOM_Factory>;
  FANTOM_hourData?: Maybe<FANTOM_HourData>;
  FANTOM_hourDatas: Array<FANTOM_HourData>;
  FANTOM_dayData?: Maybe<FANTOM_DayData>;
  FANTOM_dayDatas: Array<FANTOM_DayData>;
  FANTOM_token?: Maybe<FANTOM_Token>;
  FANTOM_tokens: Array<FANTOM_Token>;
  FANTOM_tokenHourData?: Maybe<FANTOM_TokenHourData>;
  FANTOM_tokenHourDatas: Array<FANTOM_TokenHourData>;
  FANTOM_tokenDayData?: Maybe<FANTOM_TokenDayData>;
  FANTOM_tokenDayDatas: Array<FANTOM_TokenDayData>;
  FANTOM_pair?: Maybe<FANTOM_Pair>;
  FANTOM_pairs: Array<FANTOM_Pair>;
  FANTOM_pairHourData?: Maybe<FANTOM_PairHourData>;
  FANTOM_pairHourDatas: Array<FANTOM_PairHourData>;
  FANTOM_pairDayData?: Maybe<FANTOM_PairDayData>;
  FANTOM_pairDayDatas: Array<FANTOM_PairDayData>;
  FANTOM_liquidityPosition?: Maybe<FANTOM_LiquidityPosition>;
  FANTOM_liquidityPositions: Array<FANTOM_LiquidityPosition>;
  FANTOM_liquidityPositionSnapshot?: Maybe<FANTOM_LiquidityPositionSnapshot>;
  FANTOM_liquidityPositionSnapshots: Array<FANTOM_LiquidityPositionSnapshot>;
  FANTOM_transaction?: Maybe<FANTOM_Transaction>;
  FANTOM_transactions: Array<FANTOM_Transaction>;
  FANTOM_mint?: Maybe<FANTOM_Mint>;
  FANTOM_mints: Array<FANTOM_Mint>;
  FANTOM_burn?: Maybe<FANTOM_Burn>;
  FANTOM_burns: Array<FANTOM_Burn>;
  FANTOM_swap?: Maybe<FANTOM_Swap>;
  FANTOM_swaps: Array<FANTOM_Swap>;
  /** Access to subgraph metadata */
  FANTOM__meta?: Maybe<FANTOM__Meta_>;
  XDAI_user?: Maybe<XDAI_User>;
  XDAI_users: Array<XDAI_User>;
  XDAI_bundle?: Maybe<XDAI_Bundle>;
  XDAI_bundles: Array<XDAI_Bundle>;
  XDAI_factory?: Maybe<XDAI_Factory>;
  XDAI_factories: Array<XDAI_Factory>;
  XDAI_hourData?: Maybe<XDAI_HourData>;
  XDAI_hourDatas: Array<XDAI_HourData>;
  XDAI_dayData?: Maybe<XDAI_DayData>;
  XDAI_dayDatas: Array<XDAI_DayData>;
  XDAI_token?: Maybe<XDAI_Token>;
  XDAI_tokens: Array<XDAI_Token>;
  XDAI_tokenHourData?: Maybe<XDAI_TokenHourData>;
  XDAI_tokenHourDatas: Array<XDAI_TokenHourData>;
  XDAI_tokenDayData?: Maybe<XDAI_TokenDayData>;
  XDAI_tokenDayDatas: Array<XDAI_TokenDayData>;
  XDAI_pair?: Maybe<XDAI_Pair>;
  XDAI_pairs: Array<XDAI_Pair>;
  XDAI_pairHourData?: Maybe<XDAI_PairHourData>;
  XDAI_pairHourDatas: Array<XDAI_PairHourData>;
  XDAI_pairDayData?: Maybe<XDAI_PairDayData>;
  XDAI_pairDayDatas: Array<XDAI_PairDayData>;
  XDAI_liquidityPosition?: Maybe<XDAI_LiquidityPosition>;
  XDAI_liquidityPositions: Array<XDAI_LiquidityPosition>;
  XDAI_liquidityPositionSnapshot?: Maybe<XDAI_LiquidityPositionSnapshot>;
  XDAI_liquidityPositionSnapshots: Array<XDAI_LiquidityPositionSnapshot>;
  XDAI_transaction?: Maybe<XDAI_Transaction>;
  XDAI_transactions: Array<XDAI_Transaction>;
  XDAI_mint?: Maybe<XDAI_Mint>;
  XDAI_mints: Array<XDAI_Mint>;
  XDAI_burn?: Maybe<XDAI_Burn>;
  XDAI_burns: Array<XDAI_Burn>;
  XDAI_swap?: Maybe<XDAI_Swap>;
  XDAI_swaps: Array<XDAI_Swap>;
  /** Access to subgraph metadata */
  XDAI__meta?: Maybe<XDAI__Meta_>;
  AVALANCHE_user?: Maybe<AVALANCHE_User>;
  AVALANCHE_users: Array<AVALANCHE_User>;
  AVALANCHE_bundle?: Maybe<AVALANCHE_Bundle>;
  AVALANCHE_bundles: Array<AVALANCHE_Bundle>;
  AVALANCHE_factory?: Maybe<AVALANCHE_Factory>;
  AVALANCHE_factories: Array<AVALANCHE_Factory>;
  AVALANCHE_hourData?: Maybe<AVALANCHE_HourData>;
  AVALANCHE_hourDatas: Array<AVALANCHE_HourData>;
  AVALANCHE_dayData?: Maybe<AVALANCHE_DayData>;
  AVALANCHE_dayDatas: Array<AVALANCHE_DayData>;
  AVALANCHE_token?: Maybe<AVALANCHE_Token>;
  AVALANCHE_tokens: Array<AVALANCHE_Token>;
  AVALANCHE_tokenHourData?: Maybe<AVALANCHE_TokenHourData>;
  AVALANCHE_tokenHourDatas: Array<AVALANCHE_TokenHourData>;
  AVALANCHE_tokenDayData?: Maybe<AVALANCHE_TokenDayData>;
  AVALANCHE_tokenDayDatas: Array<AVALANCHE_TokenDayData>;
  AVALANCHE_pair?: Maybe<AVALANCHE_Pair>;
  AVALANCHE_pairs: Array<AVALANCHE_Pair>;
  AVALANCHE_pairHourData?: Maybe<AVALANCHE_PairHourData>;
  AVALANCHE_pairHourDatas: Array<AVALANCHE_PairHourData>;
  AVALANCHE_pairDayData?: Maybe<AVALANCHE_PairDayData>;
  AVALANCHE_pairDayDatas: Array<AVALANCHE_PairDayData>;
  AVALANCHE_liquidityPosition?: Maybe<AVALANCHE_LiquidityPosition>;
  AVALANCHE_liquidityPositions: Array<AVALANCHE_LiquidityPosition>;
  AVALANCHE_liquidityPositionSnapshot?: Maybe<AVALANCHE_LiquidityPositionSnapshot>;
  AVALANCHE_liquidityPositionSnapshots: Array<AVALANCHE_LiquidityPositionSnapshot>;
  AVALANCHE_transaction?: Maybe<AVALANCHE_Transaction>;
  AVALANCHE_transactions: Array<AVALANCHE_Transaction>;
  AVALANCHE_mint?: Maybe<AVALANCHE_Mint>;
  AVALANCHE_mints: Array<AVALANCHE_Mint>;
  AVALANCHE_burn?: Maybe<AVALANCHE_Burn>;
  AVALANCHE_burns: Array<AVALANCHE_Burn>;
  AVALANCHE_swap?: Maybe<AVALANCHE_Swap>;
  AVALANCHE_swaps: Array<AVALANCHE_Swap>;
  /** Access to subgraph metadata */
  AVALANCHE__meta?: Maybe<AVALANCHE__Meta_>;
  MATIC_user?: Maybe<MATIC_User>;
  MATIC_users: Array<MATIC_User>;
  MATIC_bundle?: Maybe<MATIC_Bundle>;
  MATIC_bundles: Array<MATIC_Bundle>;
  MATIC_factory?: Maybe<MATIC_Factory>;
  MATIC_factories: Array<MATIC_Factory>;
  MATIC_hourData?: Maybe<MATIC_HourData>;
  MATIC_hourDatas: Array<MATIC_HourData>;
  MATIC_dayData?: Maybe<MATIC_DayData>;
  MATIC_dayDatas: Array<MATIC_DayData>;
  MATIC_token?: Maybe<MATIC_Token>;
  MATIC_tokens: Array<MATIC_Token>;
  MATIC_tokenHourData?: Maybe<MATIC_TokenHourData>;
  MATIC_tokenHourDatas: Array<MATIC_TokenHourData>;
  MATIC_tokenDayData?: Maybe<MATIC_TokenDayData>;
  MATIC_tokenDayDatas: Array<MATIC_TokenDayData>;
  MATIC_pair?: Maybe<MATIC_Pair>;
  MATIC_pairs: Array<MATIC_Pair>;
  MATIC_pairHourData?: Maybe<MATIC_PairHourData>;
  MATIC_pairHourDatas: Array<MATIC_PairHourData>;
  MATIC_pairDayData?: Maybe<MATIC_PairDayData>;
  MATIC_pairDayDatas: Array<MATIC_PairDayData>;
  MATIC_liquidityPosition?: Maybe<MATIC_LiquidityPosition>;
  MATIC_liquidityPositions: Array<MATIC_LiquidityPosition>;
  MATIC_liquidityPositionSnapshot?: Maybe<MATIC_LiquidityPositionSnapshot>;
  MATIC_liquidityPositionSnapshots: Array<MATIC_LiquidityPositionSnapshot>;
  MATIC_transaction?: Maybe<MATIC_Transaction>;
  MATIC_transactions: Array<MATIC_Transaction>;
  MATIC_mint?: Maybe<MATIC_Mint>;
  MATIC_mints: Array<MATIC_Mint>;
  MATIC_burn?: Maybe<MATIC_Burn>;
  MATIC_burns: Array<MATIC_Burn>;
  MATIC_swap?: Maybe<MATIC_Swap>;
  MATIC_swaps: Array<MATIC_Swap>;
  /** Access to subgraph metadata */
  MATIC__meta?: Maybe<MATIC__Meta_>;
  BSC_user?: Maybe<BSC_User>;
  BSC_users: Array<BSC_User>;
  BSC_bundle?: Maybe<BSC_Bundle>;
  BSC_bundles: Array<BSC_Bundle>;
  BSC_factory?: Maybe<BSC_Factory>;
  BSC_factories: Array<BSC_Factory>;
  BSC_hourData?: Maybe<BSC_HourData>;
  BSC_hourDatas: Array<BSC_HourData>;
  BSC_dayData?: Maybe<BSC_DayData>;
  BSC_dayDatas: Array<BSC_DayData>;
  BSC_token?: Maybe<BSC_Token>;
  BSC_tokens: Array<BSC_Token>;
  BSC_tokenHourData?: Maybe<BSC_TokenHourData>;
  BSC_tokenHourDatas: Array<BSC_TokenHourData>;
  BSC_tokenDayData?: Maybe<BSC_TokenDayData>;
  BSC_tokenDayDatas: Array<BSC_TokenDayData>;
  BSC_pair?: Maybe<BSC_Pair>;
  BSC_pairs: Array<BSC_Pair>;
  BSC_pairHourData?: Maybe<BSC_PairHourData>;
  BSC_pairHourDatas: Array<BSC_PairHourData>;
  BSC_pairDayData?: Maybe<BSC_PairDayData>;
  BSC_pairDayDatas: Array<BSC_PairDayData>;
  BSC_liquidityPosition?: Maybe<BSC_LiquidityPosition>;
  BSC_liquidityPositions: Array<BSC_LiquidityPosition>;
  BSC_liquidityPositionSnapshot?: Maybe<BSC_LiquidityPositionSnapshot>;
  BSC_liquidityPositionSnapshots: Array<BSC_LiquidityPositionSnapshot>;
  BSC_transaction?: Maybe<BSC_Transaction>;
  BSC_transactions: Array<BSC_Transaction>;
  BSC_mint?: Maybe<BSC_Mint>;
  BSC_mints: Array<BSC_Mint>;
  BSC_burn?: Maybe<BSC_Burn>;
  BSC_burns: Array<BSC_Burn>;
  BSC_swap?: Maybe<BSC_Swap>;
  BSC_swaps: Array<BSC_Swap>;
  /** Access to subgraph metadata */
  BSC__meta?: Maybe<BSC__Meta_>;
};


export type SubscriptionETHEREUM_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_User_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_User_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Bundle_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Bundle_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Factory_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Factory_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_HourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_HourData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_DayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_DayData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Token_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Token_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_TokenHourData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_TokenDayData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Pair_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_PairHourData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_PairDayData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_LiquidityPosition_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Transaction_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Transaction_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Mint_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Mint_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Burn_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Burn_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Swap_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Swap_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM__metaArgs = {
  block?: InputMaybe<ETHEREUM_Block_height>;
};


export type SubscriptionMOONRIVER_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_User_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_User_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Bundle_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Bundle_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Factory_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Factory_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_HourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_HourData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_DayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_DayData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Token_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Token_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_TokenHourData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_TokenDayData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Pair_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Pair_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_PairHourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_PairHourData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_PairDayData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_LiquidityPosition_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Transaction_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Transaction_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Mint_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Mint_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Burn_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Burn_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Swap_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Swap_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER__metaArgs = {
  block?: InputMaybe<MOONRIVER_Block_height>;
};


export type SubscriptionARBITRUM_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_User_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_User_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Bundle_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Bundle_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Factory_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Factory_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_HourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_HourData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_DayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_DayData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Token_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Token_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_TokenHourData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_TokenDayData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Pair_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_PairHourData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_PairDayData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_LiquidityPosition_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Transaction_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Transaction_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Mint_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Mint_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Burn_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Burn_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Swap_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Swap_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM__metaArgs = {
  block?: InputMaybe<ARBITRUM_Block_height>;
};


export type SubscriptionFANTOM_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_User_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_User_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Bundle_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Bundle_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Factory_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Factory_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_HourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_HourData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_DayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_DayData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Token_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Token_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_TokenHourData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_TokenDayData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Pair_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Pair_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_PairHourData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_PairDayData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_LiquidityPosition_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Transaction_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Transaction_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Mint_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Mint_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Burn_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Burn_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Swap_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Swap_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM__metaArgs = {
  block?: InputMaybe<FANTOM_Block_height>;
};


export type SubscriptionXDAI_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_User_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_User_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Bundle_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Bundle_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Factory_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Factory_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_HourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_HourData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_DayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_DayData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Token_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Token_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_TokenHourData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_TokenDayData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Pair_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Pair_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_PairHourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_PairHourData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_PairDayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_PairDayData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_LiquidityPosition_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Transaction_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Transaction_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Mint_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Mint_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Burn_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Burn_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Swap_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Swap_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI__metaArgs = {
  block?: InputMaybe<XDAI_Block_height>;
};


export type SubscriptionAVALANCHE_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_User_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_User_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Bundle_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Bundle_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Factory_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Factory_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_HourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_HourData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_DayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_DayData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Token_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Token_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_TokenHourData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_TokenDayData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Pair_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Pair_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_PairHourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_PairHourData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_PairDayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_PairDayData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_LiquidityPosition_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Transaction_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Transaction_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Mint_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Mint_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Burn_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Burn_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Swap_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Swap_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE__metaArgs = {
  block?: InputMaybe<AVALANCHE_Block_height>;
};


export type SubscriptionMATIC_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_User_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_User_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Bundle_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Bundle_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Factory_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Factory_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_HourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_HourData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_DayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_DayData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Token_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Token_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_TokenHourData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_TokenDayData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Pair_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Pair_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_PairHourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_PairHourData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_PairDayData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_LiquidityPosition_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Transaction_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Transaction_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Mint_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Mint_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Burn_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Burn_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Swap_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Swap_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC__metaArgs = {
  block?: InputMaybe<MATIC_Block_height>;
};


export type SubscriptionBSC_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_User_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_User_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Bundle_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Bundle_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Factory_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Factory_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_HourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_HourData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_DayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_DayData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Token_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Token_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_TokenHourData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_TokenDayData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Pair_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Pair_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_PairHourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_PairHourData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_PairDayData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_LiquidityPosition_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Transaction_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Transaction_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Mint_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Mint_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Burn_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Burn_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Swap_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Swap_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC__metaArgs = {
  block?: InputMaybe<BSC_Block_height>;
};

/** The block at which the query should be executed. */
export type ETHEREUM_Block_height = {
  /** Value containing a block hash */
  hash?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  /** Value containing a block number */
  number?: InputMaybe<Scalars['Int']>;
  /**
   * Value containing the minimum block number.
   * In the case of `number_gte`, the query will be executed on the latest block only if
   * the subgraph has progressed to or past the minimum block number.
   * Defaults to the latest block when omitted.
   *
   */
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type ETHEREUM_Bundle = {
  id: Scalars['ID'];
  ethPrice: Scalars['ETHEREUM_BigDecimal'];
};

export type ETHEREUM_Bundle_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ethPrice?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  ethPrice_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  ethPrice_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  ethPrice_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  ethPrice_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  ethPrice_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  ethPrice_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  ethPrice_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
};

export type ETHEREUM_Bundle_orderBy =
  | 'id'
  | 'ethPrice';

export type ETHEREUM_Burn = {
  id: Scalars['ID'];
  transaction: ETHEREUM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: ETHEREUM_Pair;
  liquidity: Scalars['ETHEREUM_BigDecimal'];
  sender?: Maybe<Scalars['ETHEREUM_Bytes']>;
  amount0?: Maybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1?: Maybe<Scalars['ETHEREUM_BigDecimal']>;
  to?: Maybe<Scalars['ETHEREUM_Bytes']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['ETHEREUM_BigDecimal']>;
  complete: Scalars['Boolean'];
  feeTo?: Maybe<Scalars['ETHEREUM_Bytes']>;
  feeLiquidity?: Maybe<Scalars['ETHEREUM_BigDecimal']>;
};

export type ETHEREUM_Burn_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidity?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  sender?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_not?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  amount0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  to?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_not?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  complete?: InputMaybe<Scalars['Boolean']>;
  complete_not?: InputMaybe<Scalars['Boolean']>;
  complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
  complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  feeTo?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
};

export type ETHEREUM_Burn_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'to'
  | 'logIndex'
  | 'amountUSD'
  | 'complete'
  | 'feeTo'
  | 'feeLiquidity';

export type ETHEREUM_DayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: ETHEREUM_Factory;
  volumeETH: Scalars['ETHEREUM_BigDecimal'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  untrackedVolume: Scalars['ETHEREUM_BigDecimal'];
  liquidityETH: Scalars['ETHEREUM_BigDecimal'];
  liquidityUSD: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type ETHEREUM_DayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ETHEREUM_DayData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type ETHEREUM_Factory = {
  id: Scalars['ID'];
  pairCount: Scalars['BigInt'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  volumeETH: Scalars['ETHEREUM_BigDecimal'];
  untrackedVolumeUSD: Scalars['ETHEREUM_BigDecimal'];
  liquidityUSD: Scalars['ETHEREUM_BigDecimal'];
  liquidityETH: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  tokenCount: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  pairs: Array<ETHEREUM_Pair>;
  tokens: Array<ETHEREUM_Token>;
  hourData: Array<ETHEREUM_HourData>;
  dayData: Array<ETHEREUM_DayData>;
};


export type ETHEREUM_FactorypairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Pair_filter>;
};


export type ETHEREUM_FactorytokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Token_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Token_filter>;
};


export type ETHEREUM_FactoryhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_HourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_HourData_filter>;
};


export type ETHEREUM_FactorydayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_DayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_DayData_filter>;
};

export type ETHEREUM_Factory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  pairCount?: InputMaybe<Scalars['BigInt']>;
  pairCount_not?: InputMaybe<Scalars['BigInt']>;
  pairCount_gt?: InputMaybe<Scalars['BigInt']>;
  pairCount_lt?: InputMaybe<Scalars['BigInt']>;
  pairCount_gte?: InputMaybe<Scalars['BigInt']>;
  pairCount_lte?: InputMaybe<Scalars['BigInt']>;
  pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount?: InputMaybe<Scalars['BigInt']>;
  tokenCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount?: InputMaybe<Scalars['BigInt']>;
  userCount_not?: InputMaybe<Scalars['BigInt']>;
  userCount_gt?: InputMaybe<Scalars['BigInt']>;
  userCount_lt?: InputMaybe<Scalars['BigInt']>;
  userCount_gte?: InputMaybe<Scalars['BigInt']>;
  userCount_lte?: InputMaybe<Scalars['BigInt']>;
  userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ETHEREUM_Factory_orderBy =
  | 'id'
  | 'pairCount'
  | 'volumeUSD'
  | 'volumeETH'
  | 'untrackedVolumeUSD'
  | 'liquidityUSD'
  | 'liquidityETH'
  | 'txCount'
  | 'tokenCount'
  | 'userCount'
  | 'pairs'
  | 'tokens'
  | 'hourData'
  | 'dayData';

export type ETHEREUM_HourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: ETHEREUM_Factory;
  volumeETH: Scalars['ETHEREUM_BigDecimal'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  untrackedVolume: Scalars['ETHEREUM_BigDecimal'];
  liquidityETH: Scalars['ETHEREUM_BigDecimal'];
  liquidityUSD: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type ETHEREUM_HourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ETHEREUM_HourData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type ETHEREUM_LiquidityPosition = {
  id: Scalars['ID'];
  user: ETHEREUM_User;
  pair: ETHEREUM_Pair;
  liquidityTokenBalance: Scalars['ETHEREUM_BigDecimal'];
  snapshots: Array<Maybe<ETHEREUM_LiquidityPositionSnapshot>>;
  block: Scalars['Int'];
  timestamp: Scalars['Int'];
};


export type ETHEREUM_LiquidityPositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_LiquidityPositionSnapshot_filter>;
};

export type ETHEREUM_LiquidityPositionSnapshot = {
  id: Scalars['ID'];
  liquidityPosition: ETHEREUM_LiquidityPosition;
  timestamp: Scalars['Int'];
  block: Scalars['Int'];
  user: ETHEREUM_User;
  pair: ETHEREUM_Pair;
  token0PriceUSD: Scalars['ETHEREUM_BigDecimal'];
  token1PriceUSD: Scalars['ETHEREUM_BigDecimal'];
  reserve0: Scalars['ETHEREUM_BigDecimal'];
  reserve1: Scalars['ETHEREUM_BigDecimal'];
  reserveUSD: Scalars['ETHEREUM_BigDecimal'];
  liquidityTokenTotalSupply: Scalars['ETHEREUM_BigDecimal'];
  liquidityTokenBalance: Scalars['ETHEREUM_BigDecimal'];
};

export type ETHEREUM_LiquidityPositionSnapshot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityPosition?: InputMaybe<Scalars['String']>;
  liquidityPosition_not?: InputMaybe<Scalars['String']>;
  liquidityPosition_gt?: InputMaybe<Scalars['String']>;
  liquidityPosition_lt?: InputMaybe<Scalars['String']>;
  liquidityPosition_gte?: InputMaybe<Scalars['String']>;
  liquidityPosition_lte?: InputMaybe<Scalars['String']>;
  liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0PriceUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0PriceUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0PriceUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0PriceUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0PriceUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0PriceUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0PriceUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  token0PriceUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  token1PriceUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1PriceUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1PriceUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1PriceUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1PriceUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1PriceUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1PriceUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  token1PriceUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityTokenTotalSupply?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenTotalSupply_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityTokenBalance?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
};

export type ETHEREUM_LiquidityPositionSnapshot_orderBy =
  | 'id'
  | 'liquidityPosition'
  | 'timestamp'
  | 'block'
  | 'user'
  | 'pair'
  | 'token0PriceUSD'
  | 'token1PriceUSD'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'liquidityTokenTotalSupply'
  | 'liquidityTokenBalance';

export type ETHEREUM_LiquidityPosition_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityTokenBalance?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type ETHEREUM_LiquidityPosition_orderBy =
  | 'id'
  | 'user'
  | 'pair'
  | 'liquidityTokenBalance'
  | 'snapshots'
  | 'block'
  | 'timestamp';

export type ETHEREUM_Mint = {
  id: Scalars['ID'];
  transaction: ETHEREUM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: ETHEREUM_Pair;
  to: Scalars['ETHEREUM_Bytes'];
  liquidity: Scalars['ETHEREUM_BigDecimal'];
  sender?: Maybe<Scalars['ETHEREUM_Bytes']>;
  amount0?: Maybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1?: Maybe<Scalars['ETHEREUM_BigDecimal']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['ETHEREUM_BigDecimal']>;
  feeTo?: Maybe<Scalars['ETHEREUM_Bytes']>;
  feeLiquidity?: Maybe<Scalars['ETHEREUM_BigDecimal']>;
};

export type ETHEREUM_Mint_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_not?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  liquidity?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  sender?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_not?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  amount0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  feeTo?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
};

export type ETHEREUM_Mint_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'to'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'logIndex'
  | 'amountUSD'
  | 'feeTo'
  | 'feeLiquidity';

/** Defines the order direction, either ascending or descending */
export type ETHEREUM_OrderDirection =
  | 'asc'
  | 'desc';

export type ETHEREUM_Pair = {
  id: Scalars['ID'];
  factory: ETHEREUM_Factory;
  name: Scalars['String'];
  token0: ETHEREUM_Token;
  token1: ETHEREUM_Token;
  reserve0: Scalars['ETHEREUM_BigDecimal'];
  reserve1: Scalars['ETHEREUM_BigDecimal'];
  totalSupply: Scalars['ETHEREUM_BigDecimal'];
  reserveETH: Scalars['ETHEREUM_BigDecimal'];
  reserveUSD: Scalars['ETHEREUM_BigDecimal'];
  trackedReserveETH: Scalars['ETHEREUM_BigDecimal'];
  token0Price: Scalars['ETHEREUM_BigDecimal'];
  token1Price: Scalars['ETHEREUM_BigDecimal'];
  volumeToken0: Scalars['ETHEREUM_BigDecimal'];
  volumeToken1: Scalars['ETHEREUM_BigDecimal'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  untrackedVolumeUSD: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidityProviderCount: Scalars['BigInt'];
  liquidityPositions: Array<ETHEREUM_LiquidityPosition>;
  liquidityPositionSnapshots: Array<ETHEREUM_LiquidityPositionSnapshot>;
  dayData: Array<ETHEREUM_PairDayData>;
  hourData: Array<ETHEREUM_PairHourData>;
  mints: Array<ETHEREUM_Mint>;
  burns: Array<ETHEREUM_Burn>;
  swaps: Array<ETHEREUM_Swap>;
  timestamp: Scalars['BigInt'];
  block: Scalars['BigInt'];
};


export type ETHEREUM_PairliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_LiquidityPosition_filter>;
};


export type ETHEREUM_PairliquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_LiquidityPositionSnapshot_filter>;
};


export type ETHEREUM_PairdayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_PairDayData_filter>;
};


export type ETHEREUM_PairhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_PairHourData_filter>;
};


export type ETHEREUM_PairmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Mint_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Mint_filter>;
};


export type ETHEREUM_PairburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Burn_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Burn_filter>;
};


export type ETHEREUM_PairswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Swap_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Swap_filter>;
};

export type ETHEREUM_PairDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: ETHEREUM_Pair;
  token0: ETHEREUM_Token;
  token1: ETHEREUM_Token;
  reserve0: Scalars['ETHEREUM_BigDecimal'];
  reserve1: Scalars['ETHEREUM_BigDecimal'];
  totalSupply: Scalars['ETHEREUM_BigDecimal'];
  reserveUSD: Scalars['ETHEREUM_BigDecimal'];
  volumeToken0: Scalars['ETHEREUM_BigDecimal'];
  volumeToken1: Scalars['ETHEREUM_BigDecimal'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type ETHEREUM_PairDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ETHEREUM_PairDayData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type ETHEREUM_PairHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: ETHEREUM_Pair;
  reserve0: Scalars['ETHEREUM_BigDecimal'];
  reserve1: Scalars['ETHEREUM_BigDecimal'];
  reserveUSD: Scalars['ETHEREUM_BigDecimal'];
  volumeToken0: Scalars['ETHEREUM_BigDecimal'];
  volumeToken1: Scalars['ETHEREUM_BigDecimal'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type ETHEREUM_PairHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ETHEREUM_PairHourData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type ETHEREUM_Pair_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  trackedReserveETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  trackedReserveETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  trackedReserveETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  trackedReserveETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  trackedReserveETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  trackedReserveETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  trackedReserveETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  trackedReserveETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  token0Price?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0Price_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0Price_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0Price_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0Price_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0Price_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0Price_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  token0Price_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  token1Price?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1Price_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1Price_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1Price_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1Price_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1Price_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1Price_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  token1Price_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ETHEREUM_Pair_orderBy =
  | 'id'
  | 'factory'
  | 'name'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveETH'
  | 'reserveUSD'
  | 'trackedReserveETH'
  | 'token0Price'
  | 'token1Price'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidityProviderCount'
  | 'liquidityPositions'
  | 'liquidityPositionSnapshots'
  | 'dayData'
  | 'hourData'
  | 'mints'
  | 'burns'
  | 'swaps'
  | 'timestamp'
  | 'block';

export type ETHEREUM_Swap = {
  id: Scalars['ID'];
  transaction: ETHEREUM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: ETHEREUM_Pair;
  sender: Scalars['ETHEREUM_Bytes'];
  amount0In: Scalars['ETHEREUM_BigDecimal'];
  amount1In: Scalars['ETHEREUM_BigDecimal'];
  amount0Out: Scalars['ETHEREUM_BigDecimal'];
  amount1Out: Scalars['ETHEREUM_BigDecimal'];
  to: Scalars['ETHEREUM_Bytes'];
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD: Scalars['ETHEREUM_BigDecimal'];
};

export type ETHEREUM_Swap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_not?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  amount0In?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0In_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0In_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0In_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0In_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0In_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0In_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount0In_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount1In?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1In_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1In_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1In_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1In_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1In_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1In_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount1In_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount0Out?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0Out_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0Out_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0Out_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0Out_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0Out_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0Out_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount0Out_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount1Out?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1Out_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1Out_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1Out_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1Out_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1Out_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1Out_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount1Out_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  to?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_not?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
};

export type ETHEREUM_Swap_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'sender'
  | 'amount0In'
  | 'amount1In'
  | 'amount0Out'
  | 'amount1Out'
  | 'to'
  | 'logIndex'
  | 'amountUSD';

export type ETHEREUM_Token = {
  id: Scalars['ID'];
  factory: ETHEREUM_Factory;
  symbol: Scalars['String'];
  name: Scalars['String'];
  decimals: Scalars['BigInt'];
  totalSupply: Scalars['BigInt'];
  volume: Scalars['ETHEREUM_BigDecimal'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  untrackedVolumeUSD: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['ETHEREUM_BigDecimal'];
  derivedETH: Scalars['ETHEREUM_BigDecimal'];
  hourData: Array<ETHEREUM_TokenHourData>;
  dayData: Array<ETHEREUM_TokenDayData>;
  basePairs: Array<ETHEREUM_Pair>;
  quotePairs: Array<ETHEREUM_Pair>;
  basePairsDayData: Array<ETHEREUM_PairDayData>;
  quotePairsDayData: Array<ETHEREUM_PairDayData>;
};


export type ETHEREUM_TokenhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_TokenHourData_filter>;
};


export type ETHEREUM_TokendayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_TokenDayData_filter>;
};


export type ETHEREUM_TokenbasePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Pair_filter>;
};


export type ETHEREUM_TokenquotePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Pair_filter>;
};


export type ETHEREUM_TokenbasePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_PairDayData_filter>;
};


export type ETHEREUM_TokenquotePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_PairDayData_filter>;
};

export type ETHEREUM_TokenDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: ETHEREUM_Token;
  volume: Scalars['ETHEREUM_BigDecimal'];
  volumeETH: Scalars['ETHEREUM_BigDecimal'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['ETHEREUM_BigDecimal'];
  liquidityETH: Scalars['ETHEREUM_BigDecimal'];
  liquidityUSD: Scalars['ETHEREUM_BigDecimal'];
  priceUSD: Scalars['ETHEREUM_BigDecimal'];
};

export type ETHEREUM_TokenDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
};

export type ETHEREUM_TokenDayData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type ETHEREUM_TokenHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: ETHEREUM_Token;
  volume: Scalars['ETHEREUM_BigDecimal'];
  volumeETH: Scalars['ETHEREUM_BigDecimal'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['ETHEREUM_BigDecimal'];
  liquidityETH: Scalars['ETHEREUM_BigDecimal'];
  liquidityUSD: Scalars['ETHEREUM_BigDecimal'];
  priceUSD: Scalars['ETHEREUM_BigDecimal'];
};

export type ETHEREUM_TokenHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
};

export type ETHEREUM_TokenHourData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type ETHEREUM_Token_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  decimals?: InputMaybe<Scalars['BigInt']>;
  decimals_not?: InputMaybe<Scalars['BigInt']>;
  decimals_gt?: InputMaybe<Scalars['BigInt']>;
  decimals_lt?: InputMaybe<Scalars['BigInt']>;
  decimals_gte?: InputMaybe<Scalars['BigInt']>;
  decimals_lte?: InputMaybe<Scalars['BigInt']>;
  decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  derivedETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  derivedETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  derivedETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  derivedETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  derivedETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  derivedETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  derivedETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  derivedETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
};

export type ETHEREUM_Token_orderBy =
  | 'id'
  | 'factory'
  | 'symbol'
  | 'name'
  | 'decimals'
  | 'totalSupply'
  | 'volume'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'derivedETH'
  | 'hourData'
  | 'dayData'
  | 'basePairs'
  | 'quotePairs'
  | 'basePairsDayData'
  | 'quotePairsDayData';

export type ETHEREUM_Transaction = {
  id: Scalars['ID'];
  blockNumber: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  mints: Array<Maybe<ETHEREUM_Mint>>;
  burns: Array<Maybe<ETHEREUM_Burn>>;
  swaps: Array<Maybe<ETHEREUM_Swap>>;
};


export type ETHEREUM_TransactionmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Mint_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Mint_filter>;
};


export type ETHEREUM_TransactionburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Burn_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Burn_filter>;
};


export type ETHEREUM_TransactionswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Swap_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Swap_filter>;
};

export type ETHEREUM_Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  mints?: InputMaybe<Array<Scalars['String']>>;
  mints_not?: InputMaybe<Array<Scalars['String']>>;
  mints_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns?: InputMaybe<Array<Scalars['String']>>;
  burns_not?: InputMaybe<Array<Scalars['String']>>;
  burns_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps?: InputMaybe<Array<Scalars['String']>>;
  swaps_not?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type ETHEREUM_Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'mints'
  | 'burns'
  | 'swaps';

export type ETHEREUM_User = {
  id: Scalars['ID'];
  liquidityPositions: Array<ETHEREUM_LiquidityPosition>;
};


export type ETHEREUM_UserliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_LiquidityPosition_filter>;
};

export type ETHEREUM_User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
};

export type ETHEREUM_User_orderBy =
  | 'id'
  | 'liquidityPositions';

export type ETHEREUM__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['ETHEREUM_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
};

/** The type for the top-level _meta field */
export type ETHEREUM__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: ETHEREUM__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type _SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

/** The block at which the query should be executed. */
export type MOONRIVER_Block_height = {
  /** Value containing a block hash */
  hash?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  /** Value containing a block number */
  number?: InputMaybe<Scalars['Int']>;
  /**
   * Value containing the minimum block number.
   * In the case of `number_gte`, the query will be executed on the latest block only if
   * the subgraph has progressed to or past the minimum block number.
   * Defaults to the latest block when omitted.
   *
   */
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type MOONRIVER_Bundle = {
  id: Scalars['ID'];
  ethPrice: Scalars['MOONRIVER_BigDecimal'];
};

export type MOONRIVER_Bundle_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ethPrice?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  ethPrice_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  ethPrice_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  ethPrice_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  ethPrice_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  ethPrice_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  ethPrice_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  ethPrice_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
};

export type MOONRIVER_Bundle_orderBy =
  | 'id'
  | 'ethPrice';

export type MOONRIVER_Burn = {
  id: Scalars['ID'];
  transaction: MOONRIVER_Transaction;
  timestamp: Scalars['BigInt'];
  pair: MOONRIVER_Pair;
  liquidity: Scalars['MOONRIVER_BigDecimal'];
  sender?: Maybe<Scalars['MOONRIVER_Bytes']>;
  amount0?: Maybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1?: Maybe<Scalars['MOONRIVER_BigDecimal']>;
  to?: Maybe<Scalars['MOONRIVER_Bytes']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['MOONRIVER_BigDecimal']>;
  complete: Scalars['Boolean'];
  feeTo?: Maybe<Scalars['MOONRIVER_Bytes']>;
  feeLiquidity?: Maybe<Scalars['MOONRIVER_BigDecimal']>;
};

export type MOONRIVER_Burn_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidity?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  sender?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_not?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  amount0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  to?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_not?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  to_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  complete?: InputMaybe<Scalars['Boolean']>;
  complete_not?: InputMaybe<Scalars['Boolean']>;
  complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
  complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  feeTo?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
};

export type MOONRIVER_Burn_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'to'
  | 'logIndex'
  | 'amountUSD'
  | 'complete'
  | 'feeTo'
  | 'feeLiquidity';

export type MOONRIVER_DayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: MOONRIVER_Factory;
  volumeETH: Scalars['MOONRIVER_BigDecimal'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  untrackedVolume: Scalars['MOONRIVER_BigDecimal'];
  liquidityETH: Scalars['MOONRIVER_BigDecimal'];
  liquidityUSD: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type MOONRIVER_DayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MOONRIVER_DayData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type MOONRIVER_Factory = {
  id: Scalars['ID'];
  pairCount: Scalars['BigInt'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  volumeETH: Scalars['MOONRIVER_BigDecimal'];
  untrackedVolumeUSD: Scalars['MOONRIVER_BigDecimal'];
  liquidityUSD: Scalars['MOONRIVER_BigDecimal'];
  liquidityETH: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
  tokenCount: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  pairs: Array<MOONRIVER_Pair>;
  tokens: Array<MOONRIVER_Token>;
  hourData: Array<MOONRIVER_HourData>;
  dayData: Array<MOONRIVER_DayData>;
};


export type MOONRIVER_FactorypairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Pair_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Pair_filter>;
};


export type MOONRIVER_FactorytokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Token_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Token_filter>;
};


export type MOONRIVER_FactoryhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_HourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_HourData_filter>;
};


export type MOONRIVER_FactorydayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_DayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_DayData_filter>;
};

export type MOONRIVER_Factory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  pairCount?: InputMaybe<Scalars['BigInt']>;
  pairCount_not?: InputMaybe<Scalars['BigInt']>;
  pairCount_gt?: InputMaybe<Scalars['BigInt']>;
  pairCount_lt?: InputMaybe<Scalars['BigInt']>;
  pairCount_gte?: InputMaybe<Scalars['BigInt']>;
  pairCount_lte?: InputMaybe<Scalars['BigInt']>;
  pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount?: InputMaybe<Scalars['BigInt']>;
  tokenCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount?: InputMaybe<Scalars['BigInt']>;
  userCount_not?: InputMaybe<Scalars['BigInt']>;
  userCount_gt?: InputMaybe<Scalars['BigInt']>;
  userCount_lt?: InputMaybe<Scalars['BigInt']>;
  userCount_gte?: InputMaybe<Scalars['BigInt']>;
  userCount_lte?: InputMaybe<Scalars['BigInt']>;
  userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MOONRIVER_Factory_orderBy =
  | 'id'
  | 'pairCount'
  | 'volumeUSD'
  | 'volumeETH'
  | 'untrackedVolumeUSD'
  | 'liquidityUSD'
  | 'liquidityETH'
  | 'txCount'
  | 'tokenCount'
  | 'userCount'
  | 'pairs'
  | 'tokens'
  | 'hourData'
  | 'dayData';

export type MOONRIVER_HourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: MOONRIVER_Factory;
  volumeETH: Scalars['MOONRIVER_BigDecimal'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  untrackedVolume: Scalars['MOONRIVER_BigDecimal'];
  liquidityETH: Scalars['MOONRIVER_BigDecimal'];
  liquidityUSD: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type MOONRIVER_HourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MOONRIVER_HourData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type MOONRIVER_LiquidityPosition = {
  id: Scalars['ID'];
  user: MOONRIVER_User;
  pair: MOONRIVER_Pair;
  liquidityTokenBalance: Scalars['MOONRIVER_BigDecimal'];
  snapshots: Array<Maybe<MOONRIVER_LiquidityPositionSnapshot>>;
  block: Scalars['Int'];
  timestamp: Scalars['Int'];
};


export type MOONRIVER_LiquidityPositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_LiquidityPositionSnapshot_filter>;
};

export type MOONRIVER_LiquidityPositionSnapshot = {
  id: Scalars['ID'];
  liquidityPosition: MOONRIVER_LiquidityPosition;
  timestamp: Scalars['Int'];
  block: Scalars['Int'];
  user: MOONRIVER_User;
  pair: MOONRIVER_Pair;
  token0PriceUSD: Scalars['MOONRIVER_BigDecimal'];
  token1PriceUSD: Scalars['MOONRIVER_BigDecimal'];
  reserve0: Scalars['MOONRIVER_BigDecimal'];
  reserve1: Scalars['MOONRIVER_BigDecimal'];
  reserveUSD: Scalars['MOONRIVER_BigDecimal'];
  liquidityTokenTotalSupply: Scalars['MOONRIVER_BigDecimal'];
  liquidityTokenBalance: Scalars['MOONRIVER_BigDecimal'];
};

export type MOONRIVER_LiquidityPositionSnapshot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityPosition?: InputMaybe<Scalars['String']>;
  liquidityPosition_not?: InputMaybe<Scalars['String']>;
  liquidityPosition_gt?: InputMaybe<Scalars['String']>;
  liquidityPosition_lt?: InputMaybe<Scalars['String']>;
  liquidityPosition_gte?: InputMaybe<Scalars['String']>;
  liquidityPosition_lte?: InputMaybe<Scalars['String']>;
  liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0PriceUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0PriceUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0PriceUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0PriceUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0PriceUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0PriceUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0PriceUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  token0PriceUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  token1PriceUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1PriceUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1PriceUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1PriceUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1PriceUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1PriceUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1PriceUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  token1PriceUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityTokenTotalSupply?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenTotalSupply_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityTokenBalance?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
};

export type MOONRIVER_LiquidityPositionSnapshot_orderBy =
  | 'id'
  | 'liquidityPosition'
  | 'timestamp'
  | 'block'
  | 'user'
  | 'pair'
  | 'token0PriceUSD'
  | 'token1PriceUSD'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'liquidityTokenTotalSupply'
  | 'liquidityTokenBalance';

export type MOONRIVER_LiquidityPosition_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityTokenBalance?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type MOONRIVER_LiquidityPosition_orderBy =
  | 'id'
  | 'user'
  | 'pair'
  | 'liquidityTokenBalance'
  | 'snapshots'
  | 'block'
  | 'timestamp';

export type MOONRIVER_Mint = {
  id: Scalars['ID'];
  transaction: MOONRIVER_Transaction;
  timestamp: Scalars['BigInt'];
  pair: MOONRIVER_Pair;
  to: Scalars['MOONRIVER_Bytes'];
  liquidity: Scalars['MOONRIVER_BigDecimal'];
  sender?: Maybe<Scalars['MOONRIVER_Bytes']>;
  amount0?: Maybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1?: Maybe<Scalars['MOONRIVER_BigDecimal']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['MOONRIVER_BigDecimal']>;
  feeTo?: Maybe<Scalars['MOONRIVER_Bytes']>;
  feeLiquidity?: Maybe<Scalars['MOONRIVER_BigDecimal']>;
};

export type MOONRIVER_Mint_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_not?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  to_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  liquidity?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  sender?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_not?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  amount0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  feeTo?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
};

export type MOONRIVER_Mint_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'to'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'logIndex'
  | 'amountUSD'
  | 'feeTo'
  | 'feeLiquidity';

/** Defines the order direction, either ascending or descending */
export type MOONRIVER_OrderDirection =
  | 'asc'
  | 'desc';

export type MOONRIVER_Pair = {
  id: Scalars['ID'];
  factory: MOONRIVER_Factory;
  name: Scalars['String'];
  token0: MOONRIVER_Token;
  token1: MOONRIVER_Token;
  reserve0: Scalars['MOONRIVER_BigDecimal'];
  reserve1: Scalars['MOONRIVER_BigDecimal'];
  totalSupply: Scalars['MOONRIVER_BigDecimal'];
  reserveETH: Scalars['MOONRIVER_BigDecimal'];
  reserveUSD: Scalars['MOONRIVER_BigDecimal'];
  trackedReserveETH: Scalars['MOONRIVER_BigDecimal'];
  token0Price: Scalars['MOONRIVER_BigDecimal'];
  token1Price: Scalars['MOONRIVER_BigDecimal'];
  volumeToken0: Scalars['MOONRIVER_BigDecimal'];
  volumeToken1: Scalars['MOONRIVER_BigDecimal'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  untrackedVolumeUSD: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidityProviderCount: Scalars['BigInt'];
  liquidityPositions: Array<MOONRIVER_LiquidityPosition>;
  liquidityPositionSnapshots: Array<MOONRIVER_LiquidityPositionSnapshot>;
  dayData: Array<MOONRIVER_PairDayData>;
  hourData: Array<MOONRIVER_PairHourData>;
  mints: Array<MOONRIVER_Mint>;
  burns: Array<MOONRIVER_Burn>;
  swaps: Array<MOONRIVER_Swap>;
  timestamp: Scalars['BigInt'];
  block: Scalars['BigInt'];
};


export type MOONRIVER_PairliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_LiquidityPosition_filter>;
};


export type MOONRIVER_PairliquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_LiquidityPositionSnapshot_filter>;
};


export type MOONRIVER_PairdayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_PairDayData_filter>;
};


export type MOONRIVER_PairhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_PairHourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_PairHourData_filter>;
};


export type MOONRIVER_PairmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Mint_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Mint_filter>;
};


export type MOONRIVER_PairburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Burn_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Burn_filter>;
};


export type MOONRIVER_PairswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Swap_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Swap_filter>;
};

export type MOONRIVER_PairDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: MOONRIVER_Pair;
  token0: MOONRIVER_Token;
  token1: MOONRIVER_Token;
  reserve0: Scalars['MOONRIVER_BigDecimal'];
  reserve1: Scalars['MOONRIVER_BigDecimal'];
  totalSupply: Scalars['MOONRIVER_BigDecimal'];
  reserveUSD: Scalars['MOONRIVER_BigDecimal'];
  volumeToken0: Scalars['MOONRIVER_BigDecimal'];
  volumeToken1: Scalars['MOONRIVER_BigDecimal'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type MOONRIVER_PairDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MOONRIVER_PairDayData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type MOONRIVER_PairHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: MOONRIVER_Pair;
  reserve0: Scalars['MOONRIVER_BigDecimal'];
  reserve1: Scalars['MOONRIVER_BigDecimal'];
  reserveUSD: Scalars['MOONRIVER_BigDecimal'];
  volumeToken0: Scalars['MOONRIVER_BigDecimal'];
  volumeToken1: Scalars['MOONRIVER_BigDecimal'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type MOONRIVER_PairHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MOONRIVER_PairHourData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type MOONRIVER_Pair_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  trackedReserveETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  trackedReserveETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  trackedReserveETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  trackedReserveETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  trackedReserveETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  trackedReserveETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  trackedReserveETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  trackedReserveETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  token0Price?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0Price_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0Price_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0Price_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0Price_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0Price_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0Price_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  token0Price_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  token1Price?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1Price_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1Price_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1Price_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1Price_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1Price_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1Price_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  token1Price_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MOONRIVER_Pair_orderBy =
  | 'id'
  | 'factory'
  | 'name'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveETH'
  | 'reserveUSD'
  | 'trackedReserveETH'
  | 'token0Price'
  | 'token1Price'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidityProviderCount'
  | 'liquidityPositions'
  | 'liquidityPositionSnapshots'
  | 'dayData'
  | 'hourData'
  | 'mints'
  | 'burns'
  | 'swaps'
  | 'timestamp'
  | 'block';

export type MOONRIVER_Swap = {
  id: Scalars['ID'];
  transaction: MOONRIVER_Transaction;
  timestamp: Scalars['BigInt'];
  pair: MOONRIVER_Pair;
  sender: Scalars['MOONRIVER_Bytes'];
  amount0In: Scalars['MOONRIVER_BigDecimal'];
  amount1In: Scalars['MOONRIVER_BigDecimal'];
  amount0Out: Scalars['MOONRIVER_BigDecimal'];
  amount1Out: Scalars['MOONRIVER_BigDecimal'];
  to: Scalars['MOONRIVER_Bytes'];
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD: Scalars['MOONRIVER_BigDecimal'];
};

export type MOONRIVER_Swap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_not?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  amount0In?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0In_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0In_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0In_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0In_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0In_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0In_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount0In_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount1In?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1In_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1In_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1In_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1In_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1In_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1In_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount1In_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount0Out?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0Out_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0Out_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0Out_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0Out_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0Out_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0Out_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount0Out_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount1Out?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1Out_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1Out_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1Out_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1Out_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1Out_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1Out_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount1Out_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  to?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_not?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  to_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
};

export type MOONRIVER_Swap_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'sender'
  | 'amount0In'
  | 'amount1In'
  | 'amount0Out'
  | 'amount1Out'
  | 'to'
  | 'logIndex'
  | 'amountUSD';

export type MOONRIVER_Token = {
  id: Scalars['ID'];
  factory: MOONRIVER_Factory;
  symbol: Scalars['String'];
  name: Scalars['String'];
  decimals: Scalars['BigInt'];
  totalSupply: Scalars['BigInt'];
  volume: Scalars['MOONRIVER_BigDecimal'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  untrackedVolumeUSD: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['MOONRIVER_BigDecimal'];
  derivedETH: Scalars['MOONRIVER_BigDecimal'];
  whitelistPairs: Array<MOONRIVER_Pair>;
  hourData: Array<MOONRIVER_TokenHourData>;
  dayData: Array<MOONRIVER_TokenDayData>;
  basePairs: Array<MOONRIVER_Pair>;
  quotePairs: Array<MOONRIVER_Pair>;
  basePairsDayData: Array<MOONRIVER_PairDayData>;
  quotePairsDayData: Array<MOONRIVER_PairDayData>;
};


export type MOONRIVER_TokenwhitelistPairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Pair_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Pair_filter>;
};


export type MOONRIVER_TokenhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_TokenHourData_filter>;
};


export type MOONRIVER_TokendayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_TokenDayData_filter>;
};


export type MOONRIVER_TokenbasePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Pair_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Pair_filter>;
};


export type MOONRIVER_TokenquotePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Pair_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Pair_filter>;
};


export type MOONRIVER_TokenbasePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_PairDayData_filter>;
};


export type MOONRIVER_TokenquotePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_PairDayData_filter>;
};

export type MOONRIVER_TokenDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: MOONRIVER_Token;
  volume: Scalars['MOONRIVER_BigDecimal'];
  volumeETH: Scalars['MOONRIVER_BigDecimal'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['MOONRIVER_BigDecimal'];
  liquidityETH: Scalars['MOONRIVER_BigDecimal'];
  liquidityUSD: Scalars['MOONRIVER_BigDecimal'];
  priceUSD: Scalars['MOONRIVER_BigDecimal'];
};

export type MOONRIVER_TokenDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
};

export type MOONRIVER_TokenDayData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type MOONRIVER_TokenHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: MOONRIVER_Token;
  volume: Scalars['MOONRIVER_BigDecimal'];
  volumeETH: Scalars['MOONRIVER_BigDecimal'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['MOONRIVER_BigDecimal'];
  liquidityETH: Scalars['MOONRIVER_BigDecimal'];
  liquidityUSD: Scalars['MOONRIVER_BigDecimal'];
  priceUSD: Scalars['MOONRIVER_BigDecimal'];
};

export type MOONRIVER_TokenHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
};

export type MOONRIVER_TokenHourData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type MOONRIVER_Token_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  decimals?: InputMaybe<Scalars['BigInt']>;
  decimals_not?: InputMaybe<Scalars['BigInt']>;
  decimals_gt?: InputMaybe<Scalars['BigInt']>;
  decimals_lt?: InputMaybe<Scalars['BigInt']>;
  decimals_gte?: InputMaybe<Scalars['BigInt']>;
  decimals_lte?: InputMaybe<Scalars['BigInt']>;
  decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  derivedETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  derivedETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  derivedETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  derivedETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  derivedETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  derivedETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  derivedETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  derivedETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  whitelistPairs?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type MOONRIVER_Token_orderBy =
  | 'id'
  | 'factory'
  | 'symbol'
  | 'name'
  | 'decimals'
  | 'totalSupply'
  | 'volume'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'derivedETH'
  | 'whitelistPairs'
  | 'hourData'
  | 'dayData'
  | 'basePairs'
  | 'quotePairs'
  | 'basePairsDayData'
  | 'quotePairsDayData';

export type MOONRIVER_Transaction = {
  id: Scalars['ID'];
  blockNumber: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  mints: Array<Maybe<MOONRIVER_Mint>>;
  burns: Array<Maybe<MOONRIVER_Burn>>;
  swaps: Array<Maybe<MOONRIVER_Swap>>;
};


export type MOONRIVER_TransactionmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Mint_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Mint_filter>;
};


export type MOONRIVER_TransactionburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Burn_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Burn_filter>;
};


export type MOONRIVER_TransactionswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Swap_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Swap_filter>;
};

export type MOONRIVER_Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  mints?: InputMaybe<Array<Scalars['String']>>;
  mints_not?: InputMaybe<Array<Scalars['String']>>;
  mints_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns?: InputMaybe<Array<Scalars['String']>>;
  burns_not?: InputMaybe<Array<Scalars['String']>>;
  burns_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps?: InputMaybe<Array<Scalars['String']>>;
  swaps_not?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type MOONRIVER_Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'mints'
  | 'burns'
  | 'swaps';

export type MOONRIVER_User = {
  id: Scalars['ID'];
  liquidityPositions: Array<MOONRIVER_LiquidityPosition>;
};


export type MOONRIVER_UserliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_LiquidityPosition_filter>;
};

export type MOONRIVER_User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
};

export type MOONRIVER_User_orderBy =
  | 'id'
  | 'liquidityPositions';

export type MOONRIVER__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['MOONRIVER_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
};

/** The type for the top-level _meta field */
export type MOONRIVER__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: MOONRIVER__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

/** The block at which the query should be executed. */
export type ARBITRUM_Block_height = {
  /** Value containing a block hash */
  hash?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  /** Value containing a block number */
  number?: InputMaybe<Scalars['Int']>;
  /**
   * Value containing the minimum block number.
   * In the case of `number_gte`, the query will be executed on the latest block only if
   * the subgraph has progressed to or past the minimum block number.
   * Defaults to the latest block when omitted.
   *
   */
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type ARBITRUM_Bundle = {
  id: Scalars['ID'];
  ethPrice: Scalars['ARBITRUM_BigDecimal'];
};

export type ARBITRUM_Bundle_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ethPrice?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  ethPrice_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  ethPrice_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  ethPrice_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  ethPrice_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  ethPrice_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  ethPrice_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  ethPrice_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
};

export type ARBITRUM_Bundle_orderBy =
  | 'id'
  | 'ethPrice';

export type ARBITRUM_Burn = {
  id: Scalars['ID'];
  transaction: ARBITRUM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: ARBITRUM_Pair;
  liquidity: Scalars['ARBITRUM_BigDecimal'];
  sender?: Maybe<Scalars['ARBITRUM_Bytes']>;
  amount0?: Maybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1?: Maybe<Scalars['ARBITRUM_BigDecimal']>;
  to?: Maybe<Scalars['ARBITRUM_Bytes']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['ARBITRUM_BigDecimal']>;
  complete: Scalars['Boolean'];
  feeTo?: Maybe<Scalars['ARBITRUM_Bytes']>;
  feeLiquidity?: Maybe<Scalars['ARBITRUM_BigDecimal']>;
};

export type ARBITRUM_Burn_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidity?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  sender?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_not?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  amount0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  to?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_not?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  complete?: InputMaybe<Scalars['Boolean']>;
  complete_not?: InputMaybe<Scalars['Boolean']>;
  complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
  complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  feeTo?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
};

export type ARBITRUM_Burn_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'to'
  | 'logIndex'
  | 'amountUSD'
  | 'complete'
  | 'feeTo'
  | 'feeLiquidity';

export type ARBITRUM_DayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: ARBITRUM_Factory;
  volumeETH: Scalars['ARBITRUM_BigDecimal'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  untrackedVolume: Scalars['ARBITRUM_BigDecimal'];
  liquidityETH: Scalars['ARBITRUM_BigDecimal'];
  liquidityUSD: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type ARBITRUM_DayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ARBITRUM_DayData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type ARBITRUM_Factory = {
  id: Scalars['ID'];
  pairCount: Scalars['BigInt'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  volumeETH: Scalars['ARBITRUM_BigDecimal'];
  untrackedVolumeUSD: Scalars['ARBITRUM_BigDecimal'];
  liquidityUSD: Scalars['ARBITRUM_BigDecimal'];
  liquidityETH: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  tokenCount: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  pairs: Array<ARBITRUM_Pair>;
  tokens: Array<ARBITRUM_Token>;
  hourData: Array<ARBITRUM_HourData>;
  dayData: Array<ARBITRUM_DayData>;
};


export type ARBITRUM_FactorypairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Pair_filter>;
};


export type ARBITRUM_FactorytokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Token_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Token_filter>;
};


export type ARBITRUM_FactoryhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_HourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_HourData_filter>;
};


export type ARBITRUM_FactorydayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_DayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_DayData_filter>;
};

export type ARBITRUM_Factory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  pairCount?: InputMaybe<Scalars['BigInt']>;
  pairCount_not?: InputMaybe<Scalars['BigInt']>;
  pairCount_gt?: InputMaybe<Scalars['BigInt']>;
  pairCount_lt?: InputMaybe<Scalars['BigInt']>;
  pairCount_gte?: InputMaybe<Scalars['BigInt']>;
  pairCount_lte?: InputMaybe<Scalars['BigInt']>;
  pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount?: InputMaybe<Scalars['BigInt']>;
  tokenCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount?: InputMaybe<Scalars['BigInt']>;
  userCount_not?: InputMaybe<Scalars['BigInt']>;
  userCount_gt?: InputMaybe<Scalars['BigInt']>;
  userCount_lt?: InputMaybe<Scalars['BigInt']>;
  userCount_gte?: InputMaybe<Scalars['BigInt']>;
  userCount_lte?: InputMaybe<Scalars['BigInt']>;
  userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ARBITRUM_Factory_orderBy =
  | 'id'
  | 'pairCount'
  | 'volumeUSD'
  | 'volumeETH'
  | 'untrackedVolumeUSD'
  | 'liquidityUSD'
  | 'liquidityETH'
  | 'txCount'
  | 'tokenCount'
  | 'userCount'
  | 'pairs'
  | 'tokens'
  | 'hourData'
  | 'dayData';

export type ARBITRUM_HourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: ARBITRUM_Factory;
  volumeETH: Scalars['ARBITRUM_BigDecimal'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  untrackedVolume: Scalars['ARBITRUM_BigDecimal'];
  liquidityETH: Scalars['ARBITRUM_BigDecimal'];
  liquidityUSD: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type ARBITRUM_HourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ARBITRUM_HourData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type ARBITRUM_LiquidityPosition = {
  id: Scalars['ID'];
  user: ARBITRUM_User;
  pair: ARBITRUM_Pair;
  liquidityTokenBalance: Scalars['ARBITRUM_BigDecimal'];
  snapshots: Array<Maybe<ARBITRUM_LiquidityPositionSnapshot>>;
  block: Scalars['Int'];
  timestamp: Scalars['Int'];
};


export type ARBITRUM_LiquidityPositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_LiquidityPositionSnapshot_filter>;
};

export type ARBITRUM_LiquidityPositionSnapshot = {
  id: Scalars['ID'];
  liquidityPosition: ARBITRUM_LiquidityPosition;
  timestamp: Scalars['Int'];
  block: Scalars['Int'];
  user: ARBITRUM_User;
  pair: ARBITRUM_Pair;
  token0PriceUSD: Scalars['ARBITRUM_BigDecimal'];
  token1PriceUSD: Scalars['ARBITRUM_BigDecimal'];
  reserve0: Scalars['ARBITRUM_BigDecimal'];
  reserve1: Scalars['ARBITRUM_BigDecimal'];
  reserveUSD: Scalars['ARBITRUM_BigDecimal'];
  liquidityTokenTotalSupply: Scalars['ARBITRUM_BigDecimal'];
  liquidityTokenBalance: Scalars['ARBITRUM_BigDecimal'];
};

export type ARBITRUM_LiquidityPositionSnapshot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityPosition?: InputMaybe<Scalars['String']>;
  liquidityPosition_not?: InputMaybe<Scalars['String']>;
  liquidityPosition_gt?: InputMaybe<Scalars['String']>;
  liquidityPosition_lt?: InputMaybe<Scalars['String']>;
  liquidityPosition_gte?: InputMaybe<Scalars['String']>;
  liquidityPosition_lte?: InputMaybe<Scalars['String']>;
  liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0PriceUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0PriceUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0PriceUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0PriceUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0PriceUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0PriceUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0PriceUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  token0PriceUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  token1PriceUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1PriceUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1PriceUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1PriceUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1PriceUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1PriceUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1PriceUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  token1PriceUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityTokenTotalSupply?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenTotalSupply_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityTokenBalance?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
};

export type ARBITRUM_LiquidityPositionSnapshot_orderBy =
  | 'id'
  | 'liquidityPosition'
  | 'timestamp'
  | 'block'
  | 'user'
  | 'pair'
  | 'token0PriceUSD'
  | 'token1PriceUSD'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'liquidityTokenTotalSupply'
  | 'liquidityTokenBalance';

export type ARBITRUM_LiquidityPosition_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityTokenBalance?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type ARBITRUM_LiquidityPosition_orderBy =
  | 'id'
  | 'user'
  | 'pair'
  | 'liquidityTokenBalance'
  | 'snapshots'
  | 'block'
  | 'timestamp';

export type ARBITRUM_Mint = {
  id: Scalars['ID'];
  transaction: ARBITRUM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: ARBITRUM_Pair;
  to: Scalars['ARBITRUM_Bytes'];
  liquidity: Scalars['ARBITRUM_BigDecimal'];
  sender?: Maybe<Scalars['ARBITRUM_Bytes']>;
  amount0?: Maybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1?: Maybe<Scalars['ARBITRUM_BigDecimal']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['ARBITRUM_BigDecimal']>;
  feeTo?: Maybe<Scalars['ARBITRUM_Bytes']>;
  feeLiquidity?: Maybe<Scalars['ARBITRUM_BigDecimal']>;
};

export type ARBITRUM_Mint_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_not?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  liquidity?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  sender?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_not?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  amount0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  feeTo?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
};

export type ARBITRUM_Mint_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'to'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'logIndex'
  | 'amountUSD'
  | 'feeTo'
  | 'feeLiquidity';

/** Defines the order direction, either ascending or descending */
export type ARBITRUM_OrderDirection =
  | 'asc'
  | 'desc';

export type ARBITRUM_Pair = {
  id: Scalars['ID'];
  factory: ARBITRUM_Factory;
  name: Scalars['String'];
  token0: ARBITRUM_Token;
  token1: ARBITRUM_Token;
  reserve0: Scalars['ARBITRUM_BigDecimal'];
  reserve1: Scalars['ARBITRUM_BigDecimal'];
  totalSupply: Scalars['ARBITRUM_BigDecimal'];
  reserveETH: Scalars['ARBITRUM_BigDecimal'];
  reserveUSD: Scalars['ARBITRUM_BigDecimal'];
  trackedReserveETH: Scalars['ARBITRUM_BigDecimal'];
  token0Price: Scalars['ARBITRUM_BigDecimal'];
  token1Price: Scalars['ARBITRUM_BigDecimal'];
  volumeToken0: Scalars['ARBITRUM_BigDecimal'];
  volumeToken1: Scalars['ARBITRUM_BigDecimal'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  untrackedVolumeUSD: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidityProviderCount: Scalars['BigInt'];
  liquidityPositions: Array<ARBITRUM_LiquidityPosition>;
  liquidityPositionSnapshots: Array<ARBITRUM_LiquidityPositionSnapshot>;
  dayData: Array<ARBITRUM_PairDayData>;
  hourData: Array<ARBITRUM_PairHourData>;
  mints: Array<ARBITRUM_Mint>;
  burns: Array<ARBITRUM_Burn>;
  swaps: Array<ARBITRUM_Swap>;
  timestamp: Scalars['BigInt'];
  block: Scalars['BigInt'];
};


export type ARBITRUM_PairliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_LiquidityPosition_filter>;
};


export type ARBITRUM_PairliquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_LiquidityPositionSnapshot_filter>;
};


export type ARBITRUM_PairdayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_PairDayData_filter>;
};


export type ARBITRUM_PairhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_PairHourData_filter>;
};


export type ARBITRUM_PairmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Mint_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Mint_filter>;
};


export type ARBITRUM_PairburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Burn_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Burn_filter>;
};


export type ARBITRUM_PairswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Swap_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Swap_filter>;
};

export type ARBITRUM_PairDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: ARBITRUM_Pair;
  token0: ARBITRUM_Token;
  token1: ARBITRUM_Token;
  reserve0: Scalars['ARBITRUM_BigDecimal'];
  reserve1: Scalars['ARBITRUM_BigDecimal'];
  totalSupply: Scalars['ARBITRUM_BigDecimal'];
  reserveUSD: Scalars['ARBITRUM_BigDecimal'];
  volumeToken0: Scalars['ARBITRUM_BigDecimal'];
  volumeToken1: Scalars['ARBITRUM_BigDecimal'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type ARBITRUM_PairDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ARBITRUM_PairDayData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type ARBITRUM_PairHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: ARBITRUM_Pair;
  reserve0: Scalars['ARBITRUM_BigDecimal'];
  reserve1: Scalars['ARBITRUM_BigDecimal'];
  reserveUSD: Scalars['ARBITRUM_BigDecimal'];
  volumeToken0: Scalars['ARBITRUM_BigDecimal'];
  volumeToken1: Scalars['ARBITRUM_BigDecimal'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type ARBITRUM_PairHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ARBITRUM_PairHourData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type ARBITRUM_Pair_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  trackedReserveETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  trackedReserveETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  trackedReserveETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  trackedReserveETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  trackedReserveETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  trackedReserveETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  trackedReserveETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  trackedReserveETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  token0Price?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0Price_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0Price_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0Price_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0Price_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0Price_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0Price_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  token0Price_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  token1Price?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1Price_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1Price_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1Price_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1Price_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1Price_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1Price_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  token1Price_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ARBITRUM_Pair_orderBy =
  | 'id'
  | 'factory'
  | 'name'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveETH'
  | 'reserveUSD'
  | 'trackedReserveETH'
  | 'token0Price'
  | 'token1Price'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidityProviderCount'
  | 'liquidityPositions'
  | 'liquidityPositionSnapshots'
  | 'dayData'
  | 'hourData'
  | 'mints'
  | 'burns'
  | 'swaps'
  | 'timestamp'
  | 'block';

export type ARBITRUM_Swap = {
  id: Scalars['ID'];
  transaction: ARBITRUM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: ARBITRUM_Pair;
  sender: Scalars['ARBITRUM_Bytes'];
  amount0In: Scalars['ARBITRUM_BigDecimal'];
  amount1In: Scalars['ARBITRUM_BigDecimal'];
  amount0Out: Scalars['ARBITRUM_BigDecimal'];
  amount1Out: Scalars['ARBITRUM_BigDecimal'];
  to: Scalars['ARBITRUM_Bytes'];
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD: Scalars['ARBITRUM_BigDecimal'];
};

export type ARBITRUM_Swap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_not?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  amount0In?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0In_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0In_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0In_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0In_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0In_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0In_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount0In_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount1In?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1In_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1In_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1In_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1In_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1In_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1In_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount1In_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount0Out?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0Out_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0Out_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0Out_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0Out_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0Out_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0Out_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount0Out_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount1Out?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1Out_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1Out_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1Out_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1Out_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1Out_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1Out_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount1Out_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  to?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_not?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
};

export type ARBITRUM_Swap_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'sender'
  | 'amount0In'
  | 'amount1In'
  | 'amount0Out'
  | 'amount1Out'
  | 'to'
  | 'logIndex'
  | 'amountUSD';

export type ARBITRUM_Token = {
  id: Scalars['ID'];
  factory: ARBITRUM_Factory;
  symbol: Scalars['String'];
  name: Scalars['String'];
  decimals: Scalars['BigInt'];
  totalSupply: Scalars['BigInt'];
  volume: Scalars['ARBITRUM_BigDecimal'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  untrackedVolumeUSD: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['ARBITRUM_BigDecimal'];
  derivedETH: Scalars['ARBITRUM_BigDecimal'];
  whitelistPairs: Array<ARBITRUM_Pair>;
  hourData: Array<ARBITRUM_TokenHourData>;
  dayData: Array<ARBITRUM_TokenDayData>;
  basePairs: Array<ARBITRUM_Pair>;
  quotePairs: Array<ARBITRUM_Pair>;
  basePairsDayData: Array<ARBITRUM_PairDayData>;
  quotePairsDayData: Array<ARBITRUM_PairDayData>;
};


export type ARBITRUM_TokenwhitelistPairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Pair_filter>;
};


export type ARBITRUM_TokenhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_TokenHourData_filter>;
};


export type ARBITRUM_TokendayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_TokenDayData_filter>;
};


export type ARBITRUM_TokenbasePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Pair_filter>;
};


export type ARBITRUM_TokenquotePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Pair_filter>;
};


export type ARBITRUM_TokenbasePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_PairDayData_filter>;
};


export type ARBITRUM_TokenquotePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_PairDayData_filter>;
};

export type ARBITRUM_TokenDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: ARBITRUM_Token;
  volume: Scalars['ARBITRUM_BigDecimal'];
  volumeETH: Scalars['ARBITRUM_BigDecimal'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['ARBITRUM_BigDecimal'];
  liquidityETH: Scalars['ARBITRUM_BigDecimal'];
  liquidityUSD: Scalars['ARBITRUM_BigDecimal'];
  priceUSD: Scalars['ARBITRUM_BigDecimal'];
};

export type ARBITRUM_TokenDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
};

export type ARBITRUM_TokenDayData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type ARBITRUM_TokenHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: ARBITRUM_Token;
  volume: Scalars['ARBITRUM_BigDecimal'];
  volumeETH: Scalars['ARBITRUM_BigDecimal'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['ARBITRUM_BigDecimal'];
  liquidityETH: Scalars['ARBITRUM_BigDecimal'];
  liquidityUSD: Scalars['ARBITRUM_BigDecimal'];
  priceUSD: Scalars['ARBITRUM_BigDecimal'];
};

export type ARBITRUM_TokenHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
};

export type ARBITRUM_TokenHourData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type ARBITRUM_Token_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  decimals?: InputMaybe<Scalars['BigInt']>;
  decimals_not?: InputMaybe<Scalars['BigInt']>;
  decimals_gt?: InputMaybe<Scalars['BigInt']>;
  decimals_lt?: InputMaybe<Scalars['BigInt']>;
  decimals_gte?: InputMaybe<Scalars['BigInt']>;
  decimals_lte?: InputMaybe<Scalars['BigInt']>;
  decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  derivedETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  derivedETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  derivedETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  derivedETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  derivedETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  derivedETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  derivedETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  derivedETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  whitelistPairs?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type ARBITRUM_Token_orderBy =
  | 'id'
  | 'factory'
  | 'symbol'
  | 'name'
  | 'decimals'
  | 'totalSupply'
  | 'volume'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'derivedETH'
  | 'whitelistPairs'
  | 'hourData'
  | 'dayData'
  | 'basePairs'
  | 'quotePairs'
  | 'basePairsDayData'
  | 'quotePairsDayData';

export type ARBITRUM_Transaction = {
  id: Scalars['ID'];
  blockNumber: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  mints: Array<Maybe<ARBITRUM_Mint>>;
  burns: Array<Maybe<ARBITRUM_Burn>>;
  swaps: Array<Maybe<ARBITRUM_Swap>>;
};


export type ARBITRUM_TransactionmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Mint_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Mint_filter>;
};


export type ARBITRUM_TransactionburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Burn_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Burn_filter>;
};


export type ARBITRUM_TransactionswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Swap_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Swap_filter>;
};

export type ARBITRUM_Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  mints?: InputMaybe<Array<Scalars['String']>>;
  mints_not?: InputMaybe<Array<Scalars['String']>>;
  mints_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns?: InputMaybe<Array<Scalars['String']>>;
  burns_not?: InputMaybe<Array<Scalars['String']>>;
  burns_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps?: InputMaybe<Array<Scalars['String']>>;
  swaps_not?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type ARBITRUM_Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'mints'
  | 'burns'
  | 'swaps';

export type ARBITRUM_User = {
  id: Scalars['ID'];
  liquidityPositions: Array<ARBITRUM_LiquidityPosition>;
};


export type ARBITRUM_UserliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_LiquidityPosition_filter>;
};

export type ARBITRUM_User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
};

export type ARBITRUM_User_orderBy =
  | 'id'
  | 'liquidityPositions';

export type ARBITRUM__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['ARBITRUM_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
};

/** The type for the top-level _meta field */
export type ARBITRUM__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: ARBITRUM__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

/** The block at which the query should be executed. */
export type FANTOM_Block_height = {
  /** Value containing a block hash */
  hash?: InputMaybe<Scalars['FANTOM_Bytes']>;
  /** Value containing a block number */
  number?: InputMaybe<Scalars['Int']>;
  /**
   * Value containing the minimum block number.
   * In the case of `number_gte`, the query will be executed on the latest block only if
   * the subgraph has progressed to or past the minimum block number.
   * Defaults to the latest block when omitted.
   *
   */
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type FANTOM_Bundle = {
  id: Scalars['ID'];
  ethPrice: Scalars['FANTOM_BigDecimal'];
};

export type FANTOM_Bundle_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ethPrice?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  ethPrice_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  ethPrice_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  ethPrice_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  ethPrice_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  ethPrice_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  ethPrice_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  ethPrice_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
};

export type FANTOM_Bundle_orderBy =
  | 'id'
  | 'ethPrice';

export type FANTOM_Burn = {
  id: Scalars['ID'];
  transaction: FANTOM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: FANTOM_Pair;
  liquidity: Scalars['FANTOM_BigDecimal'];
  sender?: Maybe<Scalars['FANTOM_Bytes']>;
  amount0?: Maybe<Scalars['FANTOM_BigDecimal']>;
  amount1?: Maybe<Scalars['FANTOM_BigDecimal']>;
  to?: Maybe<Scalars['FANTOM_Bytes']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['FANTOM_BigDecimal']>;
  complete: Scalars['Boolean'];
  feeTo?: Maybe<Scalars['FANTOM_Bytes']>;
  feeLiquidity?: Maybe<Scalars['FANTOM_BigDecimal']>;
};

export type FANTOM_Burn_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidity?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  sender?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_not?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  amount0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  to?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_not?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  complete?: InputMaybe<Scalars['Boolean']>;
  complete_not?: InputMaybe<Scalars['Boolean']>;
  complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
  complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  feeTo?: InputMaybe<Scalars['FANTOM_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['FANTOM_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
};

export type FANTOM_Burn_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'to'
  | 'logIndex'
  | 'amountUSD'
  | 'complete'
  | 'feeTo'
  | 'feeLiquidity';

export type FANTOM_DayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: FANTOM_Factory;
  volumeETH: Scalars['FANTOM_BigDecimal'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  untrackedVolume: Scalars['FANTOM_BigDecimal'];
  liquidityETH: Scalars['FANTOM_BigDecimal'];
  liquidityUSD: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type FANTOM_DayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type FANTOM_DayData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type FANTOM_Factory = {
  id: Scalars['ID'];
  pairCount: Scalars['BigInt'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  volumeETH: Scalars['FANTOM_BigDecimal'];
  untrackedVolumeUSD: Scalars['FANTOM_BigDecimal'];
  liquidityUSD: Scalars['FANTOM_BigDecimal'];
  liquidityETH: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
  tokenCount: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  pairs: Array<FANTOM_Pair>;
  tokens: Array<FANTOM_Token>;
  hourData: Array<FANTOM_HourData>;
  dayData: Array<FANTOM_DayData>;
};


export type FANTOM_FactorypairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Pair_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Pair_filter>;
};


export type FANTOM_FactorytokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Token_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Token_filter>;
};


export type FANTOM_FactoryhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_HourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_HourData_filter>;
};


export type FANTOM_FactorydayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_DayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_DayData_filter>;
};

export type FANTOM_Factory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  pairCount?: InputMaybe<Scalars['BigInt']>;
  pairCount_not?: InputMaybe<Scalars['BigInt']>;
  pairCount_gt?: InputMaybe<Scalars['BigInt']>;
  pairCount_lt?: InputMaybe<Scalars['BigInt']>;
  pairCount_gte?: InputMaybe<Scalars['BigInt']>;
  pairCount_lte?: InputMaybe<Scalars['BigInt']>;
  pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount?: InputMaybe<Scalars['BigInt']>;
  tokenCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount?: InputMaybe<Scalars['BigInt']>;
  userCount_not?: InputMaybe<Scalars['BigInt']>;
  userCount_gt?: InputMaybe<Scalars['BigInt']>;
  userCount_lt?: InputMaybe<Scalars['BigInt']>;
  userCount_gte?: InputMaybe<Scalars['BigInt']>;
  userCount_lte?: InputMaybe<Scalars['BigInt']>;
  userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type FANTOM_Factory_orderBy =
  | 'id'
  | 'pairCount'
  | 'volumeUSD'
  | 'volumeETH'
  | 'untrackedVolumeUSD'
  | 'liquidityUSD'
  | 'liquidityETH'
  | 'txCount'
  | 'tokenCount'
  | 'userCount'
  | 'pairs'
  | 'tokens'
  | 'hourData'
  | 'dayData';

export type FANTOM_HourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: FANTOM_Factory;
  volumeETH: Scalars['FANTOM_BigDecimal'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  untrackedVolume: Scalars['FANTOM_BigDecimal'];
  liquidityETH: Scalars['FANTOM_BigDecimal'];
  liquidityUSD: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type FANTOM_HourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type FANTOM_HourData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type FANTOM_LiquidityPosition = {
  id: Scalars['ID'];
  user: FANTOM_User;
  pair: FANTOM_Pair;
  liquidityTokenBalance: Scalars['FANTOM_BigDecimal'];
  snapshots: Array<Maybe<FANTOM_LiquidityPositionSnapshot>>;
  block: Scalars['Int'];
  timestamp: Scalars['Int'];
};


export type FANTOM_LiquidityPositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_LiquidityPositionSnapshot_filter>;
};

export type FANTOM_LiquidityPositionSnapshot = {
  id: Scalars['ID'];
  liquidityPosition: FANTOM_LiquidityPosition;
  timestamp: Scalars['Int'];
  block: Scalars['Int'];
  user: FANTOM_User;
  pair: FANTOM_Pair;
  token0PriceUSD: Scalars['FANTOM_BigDecimal'];
  token1PriceUSD: Scalars['FANTOM_BigDecimal'];
  reserve0: Scalars['FANTOM_BigDecimal'];
  reserve1: Scalars['FANTOM_BigDecimal'];
  reserveUSD: Scalars['FANTOM_BigDecimal'];
  liquidityTokenTotalSupply: Scalars['FANTOM_BigDecimal'];
  liquidityTokenBalance: Scalars['FANTOM_BigDecimal'];
};

export type FANTOM_LiquidityPositionSnapshot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityPosition?: InputMaybe<Scalars['String']>;
  liquidityPosition_not?: InputMaybe<Scalars['String']>;
  liquidityPosition_gt?: InputMaybe<Scalars['String']>;
  liquidityPosition_lt?: InputMaybe<Scalars['String']>;
  liquidityPosition_gte?: InputMaybe<Scalars['String']>;
  liquidityPosition_lte?: InputMaybe<Scalars['String']>;
  liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0PriceUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0PriceUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0PriceUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0PriceUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0PriceUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0PriceUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0PriceUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  token0PriceUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  token1PriceUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1PriceUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1PriceUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1PriceUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1PriceUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1PriceUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1PriceUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  token1PriceUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityTokenTotalSupply?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenTotalSupply_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityTokenBalance?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
};

export type FANTOM_LiquidityPositionSnapshot_orderBy =
  | 'id'
  | 'liquidityPosition'
  | 'timestamp'
  | 'block'
  | 'user'
  | 'pair'
  | 'token0PriceUSD'
  | 'token1PriceUSD'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'liquidityTokenTotalSupply'
  | 'liquidityTokenBalance';

export type FANTOM_LiquidityPosition_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityTokenBalance?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type FANTOM_LiquidityPosition_orderBy =
  | 'id'
  | 'user'
  | 'pair'
  | 'liquidityTokenBalance'
  | 'snapshots'
  | 'block'
  | 'timestamp';

export type FANTOM_Mint = {
  id: Scalars['ID'];
  transaction: FANTOM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: FANTOM_Pair;
  to: Scalars['FANTOM_Bytes'];
  liquidity: Scalars['FANTOM_BigDecimal'];
  sender?: Maybe<Scalars['FANTOM_Bytes']>;
  amount0?: Maybe<Scalars['FANTOM_BigDecimal']>;
  amount1?: Maybe<Scalars['FANTOM_BigDecimal']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['FANTOM_BigDecimal']>;
  feeTo?: Maybe<Scalars['FANTOM_Bytes']>;
  feeLiquidity?: Maybe<Scalars['FANTOM_BigDecimal']>;
};

export type FANTOM_Mint_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_not?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  liquidity?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  sender?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_not?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  amount0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  feeTo?: InputMaybe<Scalars['FANTOM_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['FANTOM_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
};

export type FANTOM_Mint_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'to'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'logIndex'
  | 'amountUSD'
  | 'feeTo'
  | 'feeLiquidity';

/** Defines the order direction, either ascending or descending */
export type FANTOM_OrderDirection =
  | 'asc'
  | 'desc';

export type FANTOM_Pair = {
  id: Scalars['ID'];
  factory: FANTOM_Factory;
  name: Scalars['String'];
  token0: FANTOM_Token;
  token1: FANTOM_Token;
  reserve0: Scalars['FANTOM_BigDecimal'];
  reserve1: Scalars['FANTOM_BigDecimal'];
  totalSupply: Scalars['FANTOM_BigDecimal'];
  reserveETH: Scalars['FANTOM_BigDecimal'];
  reserveUSD: Scalars['FANTOM_BigDecimal'];
  trackedReserveETH: Scalars['FANTOM_BigDecimal'];
  token0Price: Scalars['FANTOM_BigDecimal'];
  token1Price: Scalars['FANTOM_BigDecimal'];
  volumeToken0: Scalars['FANTOM_BigDecimal'];
  volumeToken1: Scalars['FANTOM_BigDecimal'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  untrackedVolumeUSD: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidityProviderCount: Scalars['BigInt'];
  liquidityPositions: Array<FANTOM_LiquidityPosition>;
  liquidityPositionSnapshots: Array<FANTOM_LiquidityPositionSnapshot>;
  dayData: Array<FANTOM_PairDayData>;
  hourData: Array<FANTOM_PairHourData>;
  mints: Array<FANTOM_Mint>;
  burns: Array<FANTOM_Burn>;
  swaps: Array<FANTOM_Swap>;
  timestamp: Scalars['BigInt'];
  block: Scalars['BigInt'];
};


export type FANTOM_PairliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_LiquidityPosition_filter>;
};


export type FANTOM_PairliquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_LiquidityPositionSnapshot_filter>;
};


export type FANTOM_PairdayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_PairDayData_filter>;
};


export type FANTOM_PairhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_PairHourData_filter>;
};


export type FANTOM_PairmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Mint_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Mint_filter>;
};


export type FANTOM_PairburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Burn_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Burn_filter>;
};


export type FANTOM_PairswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Swap_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Swap_filter>;
};

export type FANTOM_PairDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: FANTOM_Pair;
  token0: FANTOM_Token;
  token1: FANTOM_Token;
  reserve0: Scalars['FANTOM_BigDecimal'];
  reserve1: Scalars['FANTOM_BigDecimal'];
  totalSupply: Scalars['FANTOM_BigDecimal'];
  reserveUSD: Scalars['FANTOM_BigDecimal'];
  volumeToken0: Scalars['FANTOM_BigDecimal'];
  volumeToken1: Scalars['FANTOM_BigDecimal'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type FANTOM_PairDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type FANTOM_PairDayData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type FANTOM_PairHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: FANTOM_Pair;
  reserve0: Scalars['FANTOM_BigDecimal'];
  reserve1: Scalars['FANTOM_BigDecimal'];
  reserveUSD: Scalars['FANTOM_BigDecimal'];
  volumeToken0: Scalars['FANTOM_BigDecimal'];
  volumeToken1: Scalars['FANTOM_BigDecimal'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type FANTOM_PairHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type FANTOM_PairHourData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type FANTOM_Pair_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  trackedReserveETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  trackedReserveETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  trackedReserveETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  trackedReserveETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  trackedReserveETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  trackedReserveETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  trackedReserveETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  trackedReserveETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  token0Price?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0Price_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0Price_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0Price_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0Price_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0Price_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0Price_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  token0Price_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  token1Price?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1Price_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1Price_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1Price_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1Price_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1Price_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1Price_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  token1Price_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type FANTOM_Pair_orderBy =
  | 'id'
  | 'factory'
  | 'name'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveETH'
  | 'reserveUSD'
  | 'trackedReserveETH'
  | 'token0Price'
  | 'token1Price'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidityProviderCount'
  | 'liquidityPositions'
  | 'liquidityPositionSnapshots'
  | 'dayData'
  | 'hourData'
  | 'mints'
  | 'burns'
  | 'swaps'
  | 'timestamp'
  | 'block';

export type FANTOM_Swap = {
  id: Scalars['ID'];
  transaction: FANTOM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: FANTOM_Pair;
  sender: Scalars['FANTOM_Bytes'];
  amount0In: Scalars['FANTOM_BigDecimal'];
  amount1In: Scalars['FANTOM_BigDecimal'];
  amount0Out: Scalars['FANTOM_BigDecimal'];
  amount1Out: Scalars['FANTOM_BigDecimal'];
  to: Scalars['FANTOM_Bytes'];
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD: Scalars['FANTOM_BigDecimal'];
};

export type FANTOM_Swap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_not?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  amount0In?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0In_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0In_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0In_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0In_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0In_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0In_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount0In_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount1In?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1In_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1In_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1In_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1In_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1In_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1In_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount1In_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount0Out?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0Out_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0Out_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0Out_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0Out_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0Out_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0Out_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount0Out_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount1Out?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1Out_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1Out_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1Out_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1Out_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1Out_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1Out_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount1Out_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  to?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_not?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
};

export type FANTOM_Swap_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'sender'
  | 'amount0In'
  | 'amount1In'
  | 'amount0Out'
  | 'amount1Out'
  | 'to'
  | 'logIndex'
  | 'amountUSD';

export type FANTOM_Token = {
  id: Scalars['ID'];
  factory: FANTOM_Factory;
  symbol: Scalars['String'];
  name: Scalars['String'];
  decimals: Scalars['BigInt'];
  totalSupply: Scalars['BigInt'];
  volume: Scalars['FANTOM_BigDecimal'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  untrackedVolumeUSD: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['FANTOM_BigDecimal'];
  derivedETH: Scalars['FANTOM_BigDecimal'];
  hourData: Array<FANTOM_TokenHourData>;
  dayData: Array<FANTOM_TokenDayData>;
  basePairs: Array<FANTOM_Pair>;
  quotePairs: Array<FANTOM_Pair>;
  basePairsDayData: Array<FANTOM_PairDayData>;
  quotePairsDayData: Array<FANTOM_PairDayData>;
};


export type FANTOM_TokenhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_TokenHourData_filter>;
};


export type FANTOM_TokendayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_TokenDayData_filter>;
};


export type FANTOM_TokenbasePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Pair_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Pair_filter>;
};


export type FANTOM_TokenquotePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Pair_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Pair_filter>;
};


export type FANTOM_TokenbasePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_PairDayData_filter>;
};


export type FANTOM_TokenquotePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_PairDayData_filter>;
};

export type FANTOM_TokenDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: FANTOM_Token;
  volume: Scalars['FANTOM_BigDecimal'];
  volumeETH: Scalars['FANTOM_BigDecimal'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['FANTOM_BigDecimal'];
  liquidityETH: Scalars['FANTOM_BigDecimal'];
  liquidityUSD: Scalars['FANTOM_BigDecimal'];
  priceUSD: Scalars['FANTOM_BigDecimal'];
};

export type FANTOM_TokenDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
};

export type FANTOM_TokenDayData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type FANTOM_TokenHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: FANTOM_Token;
  volume: Scalars['FANTOM_BigDecimal'];
  volumeETH: Scalars['FANTOM_BigDecimal'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['FANTOM_BigDecimal'];
  liquidityETH: Scalars['FANTOM_BigDecimal'];
  liquidityUSD: Scalars['FANTOM_BigDecimal'];
  priceUSD: Scalars['FANTOM_BigDecimal'];
};

export type FANTOM_TokenHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
};

export type FANTOM_TokenHourData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type FANTOM_Token_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  decimals?: InputMaybe<Scalars['BigInt']>;
  decimals_not?: InputMaybe<Scalars['BigInt']>;
  decimals_gt?: InputMaybe<Scalars['BigInt']>;
  decimals_lt?: InputMaybe<Scalars['BigInt']>;
  decimals_gte?: InputMaybe<Scalars['BigInt']>;
  decimals_lte?: InputMaybe<Scalars['BigInt']>;
  decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  derivedETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  derivedETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  derivedETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  derivedETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  derivedETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  derivedETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  derivedETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  derivedETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
};

export type FANTOM_Token_orderBy =
  | 'id'
  | 'factory'
  | 'symbol'
  | 'name'
  | 'decimals'
  | 'totalSupply'
  | 'volume'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'derivedETH'
  | 'hourData'
  | 'dayData'
  | 'basePairs'
  | 'quotePairs'
  | 'basePairsDayData'
  | 'quotePairsDayData';

export type FANTOM_Transaction = {
  id: Scalars['ID'];
  blockNumber: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  mints: Array<Maybe<FANTOM_Mint>>;
  burns: Array<Maybe<FANTOM_Burn>>;
  swaps: Array<Maybe<FANTOM_Swap>>;
};


export type FANTOM_TransactionmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Mint_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Mint_filter>;
};


export type FANTOM_TransactionburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Burn_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Burn_filter>;
};


export type FANTOM_TransactionswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Swap_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Swap_filter>;
};

export type FANTOM_Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  mints?: InputMaybe<Array<Scalars['String']>>;
  mints_not?: InputMaybe<Array<Scalars['String']>>;
  mints_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns?: InputMaybe<Array<Scalars['String']>>;
  burns_not?: InputMaybe<Array<Scalars['String']>>;
  burns_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps?: InputMaybe<Array<Scalars['String']>>;
  swaps_not?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type FANTOM_Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'mints'
  | 'burns'
  | 'swaps';

export type FANTOM_User = {
  id: Scalars['ID'];
  liquidityPositions: Array<FANTOM_LiquidityPosition>;
};


export type FANTOM_UserliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_LiquidityPosition_filter>;
};

export type FANTOM_User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
};

export type FANTOM_User_orderBy =
  | 'id'
  | 'liquidityPositions';

export type FANTOM__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['FANTOM_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
};

/** The type for the top-level _meta field */
export type FANTOM__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: FANTOM__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

/** The block at which the query should be executed. */
export type XDAI_Block_height = {
  /** Value containing a block hash */
  hash?: InputMaybe<Scalars['XDAI_Bytes']>;
  /** Value containing a block number */
  number?: InputMaybe<Scalars['Int']>;
  /**
   * Value containing the minimum block number.
   * In the case of `number_gte`, the query will be executed on the latest block only if
   * the subgraph has progressed to or past the minimum block number.
   * Defaults to the latest block when omitted.
   *
   */
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type XDAI_Bundle = {
  id: Scalars['ID'];
  ethPrice: Scalars['XDAI_BigDecimal'];
};

export type XDAI_Bundle_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ethPrice?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  ethPrice_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  ethPrice_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  ethPrice_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  ethPrice_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  ethPrice_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  ethPrice_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  ethPrice_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
};

export type XDAI_Bundle_orderBy =
  | 'id'
  | 'ethPrice';

export type XDAI_Burn = {
  id: Scalars['ID'];
  transaction: XDAI_Transaction;
  timestamp: Scalars['BigInt'];
  pair: XDAI_Pair;
  liquidity: Scalars['XDAI_BigDecimal'];
  sender?: Maybe<Scalars['XDAI_Bytes']>;
  amount0?: Maybe<Scalars['XDAI_BigDecimal']>;
  amount1?: Maybe<Scalars['XDAI_BigDecimal']>;
  to?: Maybe<Scalars['XDAI_Bytes']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['XDAI_BigDecimal']>;
  complete: Scalars['Boolean'];
  feeTo?: Maybe<Scalars['XDAI_Bytes']>;
  feeLiquidity?: Maybe<Scalars['XDAI_BigDecimal']>;
};

export type XDAI_Burn_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidity?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  sender?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_not?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  amount0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  to?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_not?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  to_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  complete?: InputMaybe<Scalars['Boolean']>;
  complete_not?: InputMaybe<Scalars['Boolean']>;
  complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
  complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  feeTo?: InputMaybe<Scalars['XDAI_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['XDAI_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
};

export type XDAI_Burn_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'to'
  | 'logIndex'
  | 'amountUSD'
  | 'complete'
  | 'feeTo'
  | 'feeLiquidity';

export type XDAI_DayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: XDAI_Factory;
  volumeETH: Scalars['XDAI_BigDecimal'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  untrackedVolume: Scalars['XDAI_BigDecimal'];
  liquidityETH: Scalars['XDAI_BigDecimal'];
  liquidityUSD: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type XDAI_DayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type XDAI_DayData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type XDAI_Factory = {
  id: Scalars['ID'];
  pairCount: Scalars['BigInt'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  volumeETH: Scalars['XDAI_BigDecimal'];
  untrackedVolumeUSD: Scalars['XDAI_BigDecimal'];
  liquidityUSD: Scalars['XDAI_BigDecimal'];
  liquidityETH: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
  tokenCount: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  pairs: Array<XDAI_Pair>;
  tokens: Array<XDAI_Token>;
  hourData: Array<XDAI_HourData>;
  dayData: Array<XDAI_DayData>;
};


export type XDAI_FactorypairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Pair_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Pair_filter>;
};


export type XDAI_FactorytokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Token_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Token_filter>;
};


export type XDAI_FactoryhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_HourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_HourData_filter>;
};


export type XDAI_FactorydayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_DayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_DayData_filter>;
};

export type XDAI_Factory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  pairCount?: InputMaybe<Scalars['BigInt']>;
  pairCount_not?: InputMaybe<Scalars['BigInt']>;
  pairCount_gt?: InputMaybe<Scalars['BigInt']>;
  pairCount_lt?: InputMaybe<Scalars['BigInt']>;
  pairCount_gte?: InputMaybe<Scalars['BigInt']>;
  pairCount_lte?: InputMaybe<Scalars['BigInt']>;
  pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount?: InputMaybe<Scalars['BigInt']>;
  tokenCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount?: InputMaybe<Scalars['BigInt']>;
  userCount_not?: InputMaybe<Scalars['BigInt']>;
  userCount_gt?: InputMaybe<Scalars['BigInt']>;
  userCount_lt?: InputMaybe<Scalars['BigInt']>;
  userCount_gte?: InputMaybe<Scalars['BigInt']>;
  userCount_lte?: InputMaybe<Scalars['BigInt']>;
  userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type XDAI_Factory_orderBy =
  | 'id'
  | 'pairCount'
  | 'volumeUSD'
  | 'volumeETH'
  | 'untrackedVolumeUSD'
  | 'liquidityUSD'
  | 'liquidityETH'
  | 'txCount'
  | 'tokenCount'
  | 'userCount'
  | 'pairs'
  | 'tokens'
  | 'hourData'
  | 'dayData';

export type XDAI_HourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: XDAI_Factory;
  volumeETH: Scalars['XDAI_BigDecimal'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  untrackedVolume: Scalars['XDAI_BigDecimal'];
  liquidityETH: Scalars['XDAI_BigDecimal'];
  liquidityUSD: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type XDAI_HourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type XDAI_HourData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type XDAI_LiquidityPosition = {
  id: Scalars['ID'];
  user: XDAI_User;
  pair: XDAI_Pair;
  liquidityTokenBalance: Scalars['XDAI_BigDecimal'];
  snapshots: Array<Maybe<XDAI_LiquidityPositionSnapshot>>;
  block: Scalars['Int'];
  timestamp: Scalars['Int'];
};


export type XDAI_LiquidityPositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_LiquidityPositionSnapshot_filter>;
};

export type XDAI_LiquidityPositionSnapshot = {
  id: Scalars['ID'];
  liquidityPosition: XDAI_LiquidityPosition;
  timestamp: Scalars['Int'];
  block: Scalars['Int'];
  user: XDAI_User;
  pair: XDAI_Pair;
  token0PriceUSD: Scalars['XDAI_BigDecimal'];
  token1PriceUSD: Scalars['XDAI_BigDecimal'];
  reserve0: Scalars['XDAI_BigDecimal'];
  reserve1: Scalars['XDAI_BigDecimal'];
  reserveUSD: Scalars['XDAI_BigDecimal'];
  liquidityTokenTotalSupply: Scalars['XDAI_BigDecimal'];
  liquidityTokenBalance: Scalars['XDAI_BigDecimal'];
};

export type XDAI_LiquidityPositionSnapshot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityPosition?: InputMaybe<Scalars['String']>;
  liquidityPosition_not?: InputMaybe<Scalars['String']>;
  liquidityPosition_gt?: InputMaybe<Scalars['String']>;
  liquidityPosition_lt?: InputMaybe<Scalars['String']>;
  liquidityPosition_gte?: InputMaybe<Scalars['String']>;
  liquidityPosition_lte?: InputMaybe<Scalars['String']>;
  liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0PriceUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0PriceUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0PriceUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0PriceUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0PriceUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0PriceUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0PriceUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  token0PriceUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  token1PriceUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1PriceUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1PriceUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1PriceUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1PriceUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1PriceUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1PriceUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  token1PriceUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityTokenTotalSupply?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenTotalSupply_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityTokenBalance?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
};

export type XDAI_LiquidityPositionSnapshot_orderBy =
  | 'id'
  | 'liquidityPosition'
  | 'timestamp'
  | 'block'
  | 'user'
  | 'pair'
  | 'token0PriceUSD'
  | 'token1PriceUSD'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'liquidityTokenTotalSupply'
  | 'liquidityTokenBalance';

export type XDAI_LiquidityPosition_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityTokenBalance?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type XDAI_LiquidityPosition_orderBy =
  | 'id'
  | 'user'
  | 'pair'
  | 'liquidityTokenBalance'
  | 'snapshots'
  | 'block'
  | 'timestamp';

export type XDAI_Mint = {
  id: Scalars['ID'];
  transaction: XDAI_Transaction;
  timestamp: Scalars['BigInt'];
  pair: XDAI_Pair;
  to: Scalars['XDAI_Bytes'];
  liquidity: Scalars['XDAI_BigDecimal'];
  sender?: Maybe<Scalars['XDAI_Bytes']>;
  amount0?: Maybe<Scalars['XDAI_BigDecimal']>;
  amount1?: Maybe<Scalars['XDAI_BigDecimal']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['XDAI_BigDecimal']>;
  feeTo?: Maybe<Scalars['XDAI_Bytes']>;
  feeLiquidity?: Maybe<Scalars['XDAI_BigDecimal']>;
};

export type XDAI_Mint_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_not?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  to_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  liquidity?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  sender?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_not?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  amount0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  feeTo?: InputMaybe<Scalars['XDAI_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['XDAI_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
};

export type XDAI_Mint_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'to'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'logIndex'
  | 'amountUSD'
  | 'feeTo'
  | 'feeLiquidity';

/** Defines the order direction, either ascending or descending */
export type XDAI_OrderDirection =
  | 'asc'
  | 'desc';

export type XDAI_Pair = {
  id: Scalars['ID'];
  factory: XDAI_Factory;
  name: Scalars['String'];
  token0: XDAI_Token;
  token1: XDAI_Token;
  reserve0: Scalars['XDAI_BigDecimal'];
  reserve1: Scalars['XDAI_BigDecimal'];
  totalSupply: Scalars['XDAI_BigDecimal'];
  reserveETH: Scalars['XDAI_BigDecimal'];
  reserveUSD: Scalars['XDAI_BigDecimal'];
  trackedReserveETH: Scalars['XDAI_BigDecimal'];
  token0Price: Scalars['XDAI_BigDecimal'];
  token1Price: Scalars['XDAI_BigDecimal'];
  volumeToken0: Scalars['XDAI_BigDecimal'];
  volumeToken1: Scalars['XDAI_BigDecimal'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  untrackedVolumeUSD: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidityProviderCount: Scalars['BigInt'];
  liquidityPositions: Array<XDAI_LiquidityPosition>;
  liquidityPositionSnapshots: Array<XDAI_LiquidityPositionSnapshot>;
  dayData: Array<XDAI_PairDayData>;
  hourData: Array<XDAI_PairHourData>;
  mints: Array<XDAI_Mint>;
  burns: Array<XDAI_Burn>;
  swaps: Array<XDAI_Swap>;
  timestamp: Scalars['BigInt'];
  block: Scalars['BigInt'];
};


export type XDAI_PairliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_LiquidityPosition_filter>;
};


export type XDAI_PairliquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_LiquidityPositionSnapshot_filter>;
};


export type XDAI_PairdayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_PairDayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_PairDayData_filter>;
};


export type XDAI_PairhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_PairHourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_PairHourData_filter>;
};


export type XDAI_PairmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Mint_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Mint_filter>;
};


export type XDAI_PairburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Burn_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Burn_filter>;
};


export type XDAI_PairswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Swap_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Swap_filter>;
};

export type XDAI_PairDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: XDAI_Pair;
  token0: XDAI_Token;
  token1: XDAI_Token;
  reserve0: Scalars['XDAI_BigDecimal'];
  reserve1: Scalars['XDAI_BigDecimal'];
  totalSupply: Scalars['XDAI_BigDecimal'];
  reserveUSD: Scalars['XDAI_BigDecimal'];
  volumeToken0: Scalars['XDAI_BigDecimal'];
  volumeToken1: Scalars['XDAI_BigDecimal'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type XDAI_PairDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type XDAI_PairDayData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type XDAI_PairHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: XDAI_Pair;
  reserve0: Scalars['XDAI_BigDecimal'];
  reserve1: Scalars['XDAI_BigDecimal'];
  reserveUSD: Scalars['XDAI_BigDecimal'];
  volumeToken0: Scalars['XDAI_BigDecimal'];
  volumeToken1: Scalars['XDAI_BigDecimal'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type XDAI_PairHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type XDAI_PairHourData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type XDAI_Pair_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  trackedReserveETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  trackedReserveETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  trackedReserveETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  trackedReserveETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  trackedReserveETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  trackedReserveETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  trackedReserveETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  trackedReserveETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  token0Price?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0Price_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0Price_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0Price_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0Price_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0Price_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0Price_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  token0Price_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  token1Price?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1Price_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1Price_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1Price_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1Price_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1Price_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1Price_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  token1Price_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type XDAI_Pair_orderBy =
  | 'id'
  | 'factory'
  | 'name'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveETH'
  | 'reserveUSD'
  | 'trackedReserveETH'
  | 'token0Price'
  | 'token1Price'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidityProviderCount'
  | 'liquidityPositions'
  | 'liquidityPositionSnapshots'
  | 'dayData'
  | 'hourData'
  | 'mints'
  | 'burns'
  | 'swaps'
  | 'timestamp'
  | 'block';

export type XDAI_Swap = {
  id: Scalars['ID'];
  transaction: XDAI_Transaction;
  timestamp: Scalars['BigInt'];
  pair: XDAI_Pair;
  sender: Scalars['XDAI_Bytes'];
  amount0In: Scalars['XDAI_BigDecimal'];
  amount1In: Scalars['XDAI_BigDecimal'];
  amount0Out: Scalars['XDAI_BigDecimal'];
  amount1Out: Scalars['XDAI_BigDecimal'];
  to: Scalars['XDAI_Bytes'];
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD: Scalars['XDAI_BigDecimal'];
};

export type XDAI_Swap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_not?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  amount0In?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0In_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0In_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0In_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0In_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0In_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0In_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount0In_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount1In?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1In_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1In_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1In_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1In_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1In_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1In_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount1In_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount0Out?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0Out_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0Out_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0Out_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0Out_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0Out_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0Out_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount0Out_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount1Out?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1Out_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1Out_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1Out_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1Out_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1Out_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1Out_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount1Out_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  to?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_not?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  to_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
};

export type XDAI_Swap_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'sender'
  | 'amount0In'
  | 'amount1In'
  | 'amount0Out'
  | 'amount1Out'
  | 'to'
  | 'logIndex'
  | 'amountUSD';

export type XDAI_Token = {
  id: Scalars['ID'];
  factory: XDAI_Factory;
  symbol: Scalars['String'];
  name: Scalars['String'];
  decimals: Scalars['BigInt'];
  totalSupply: Scalars['BigInt'];
  volume: Scalars['XDAI_BigDecimal'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  untrackedVolumeUSD: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['XDAI_BigDecimal'];
  derivedETH: Scalars['XDAI_BigDecimal'];
  whitelistPairs: Array<XDAI_Pair>;
  hourData: Array<XDAI_TokenHourData>;
  dayData: Array<XDAI_TokenDayData>;
  basePairs: Array<XDAI_Pair>;
  quotePairs: Array<XDAI_Pair>;
  basePairsDayData: Array<XDAI_PairDayData>;
  quotePairsDayData: Array<XDAI_PairDayData>;
};


export type XDAI_TokenwhitelistPairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Pair_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Pair_filter>;
};


export type XDAI_TokenhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_TokenHourData_filter>;
};


export type XDAI_TokendayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_TokenDayData_filter>;
};


export type XDAI_TokenbasePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Pair_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Pair_filter>;
};


export type XDAI_TokenquotePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Pair_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Pair_filter>;
};


export type XDAI_TokenbasePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_PairDayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_PairDayData_filter>;
};


export type XDAI_TokenquotePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_PairDayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_PairDayData_filter>;
};

export type XDAI_TokenDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: XDAI_Token;
  volume: Scalars['XDAI_BigDecimal'];
  volumeETH: Scalars['XDAI_BigDecimal'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['XDAI_BigDecimal'];
  liquidityETH: Scalars['XDAI_BigDecimal'];
  liquidityUSD: Scalars['XDAI_BigDecimal'];
  priceUSD: Scalars['XDAI_BigDecimal'];
};

export type XDAI_TokenDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
};

export type XDAI_TokenDayData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type XDAI_TokenHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: XDAI_Token;
  volume: Scalars['XDAI_BigDecimal'];
  volumeETH: Scalars['XDAI_BigDecimal'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['XDAI_BigDecimal'];
  liquidityETH: Scalars['XDAI_BigDecimal'];
  liquidityUSD: Scalars['XDAI_BigDecimal'];
  priceUSD: Scalars['XDAI_BigDecimal'];
};

export type XDAI_TokenHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
};

export type XDAI_TokenHourData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type XDAI_Token_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  decimals?: InputMaybe<Scalars['BigInt']>;
  decimals_not?: InputMaybe<Scalars['BigInt']>;
  decimals_gt?: InputMaybe<Scalars['BigInt']>;
  decimals_lt?: InputMaybe<Scalars['BigInt']>;
  decimals_gte?: InputMaybe<Scalars['BigInt']>;
  decimals_lte?: InputMaybe<Scalars['BigInt']>;
  decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  derivedETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  derivedETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  derivedETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  derivedETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  derivedETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  derivedETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  derivedETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  derivedETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  whitelistPairs?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type XDAI_Token_orderBy =
  | 'id'
  | 'factory'
  | 'symbol'
  | 'name'
  | 'decimals'
  | 'totalSupply'
  | 'volume'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'derivedETH'
  | 'whitelistPairs'
  | 'hourData'
  | 'dayData'
  | 'basePairs'
  | 'quotePairs'
  | 'basePairsDayData'
  | 'quotePairsDayData';

export type XDAI_Transaction = {
  id: Scalars['ID'];
  blockNumber: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  mints: Array<Maybe<XDAI_Mint>>;
  burns: Array<Maybe<XDAI_Burn>>;
  swaps: Array<Maybe<XDAI_Swap>>;
};


export type XDAI_TransactionmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Mint_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Mint_filter>;
};


export type XDAI_TransactionburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Burn_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Burn_filter>;
};


export type XDAI_TransactionswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Swap_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Swap_filter>;
};

export type XDAI_Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  mints?: InputMaybe<Array<Scalars['String']>>;
  mints_not?: InputMaybe<Array<Scalars['String']>>;
  mints_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns?: InputMaybe<Array<Scalars['String']>>;
  burns_not?: InputMaybe<Array<Scalars['String']>>;
  burns_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps?: InputMaybe<Array<Scalars['String']>>;
  swaps_not?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type XDAI_Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'mints'
  | 'burns'
  | 'swaps';

export type XDAI_User = {
  id: Scalars['ID'];
  liquidityPositions: Array<XDAI_LiquidityPosition>;
};


export type XDAI_UserliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_LiquidityPosition_filter>;
};

export type XDAI_User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
};

export type XDAI_User_orderBy =
  | 'id'
  | 'liquidityPositions';

export type XDAI__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['XDAI_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
};

/** The type for the top-level _meta field */
export type XDAI__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: XDAI__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

/** The block at which the query should be executed. */
export type AVALANCHE_Block_height = {
  /** Value containing a block hash */
  hash?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  /** Value containing a block number */
  number?: InputMaybe<Scalars['Int']>;
  /**
   * Value containing the minimum block number.
   * In the case of `number_gte`, the query will be executed on the latest block only if
   * the subgraph has progressed to or past the minimum block number.
   * Defaults to the latest block when omitted.
   *
   */
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type AVALANCHE_Bundle = {
  id: Scalars['ID'];
  ethPrice: Scalars['AVALANCHE_BigDecimal'];
};

export type AVALANCHE_Bundle_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ethPrice?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  ethPrice_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  ethPrice_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  ethPrice_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  ethPrice_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  ethPrice_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  ethPrice_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  ethPrice_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
};

export type AVALANCHE_Bundle_orderBy =
  | 'id'
  | 'ethPrice';

export type AVALANCHE_Burn = {
  id: Scalars['ID'];
  transaction: AVALANCHE_Transaction;
  timestamp: Scalars['BigInt'];
  pair: AVALANCHE_Pair;
  liquidity: Scalars['AVALANCHE_BigDecimal'];
  sender?: Maybe<Scalars['AVALANCHE_Bytes']>;
  amount0?: Maybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1?: Maybe<Scalars['AVALANCHE_BigDecimal']>;
  to?: Maybe<Scalars['AVALANCHE_Bytes']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['AVALANCHE_BigDecimal']>;
  complete: Scalars['Boolean'];
  feeTo?: Maybe<Scalars['AVALANCHE_Bytes']>;
  feeLiquidity?: Maybe<Scalars['AVALANCHE_BigDecimal']>;
};

export type AVALANCHE_Burn_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidity?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  sender?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_not?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  amount0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  to?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_not?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  to_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  complete?: InputMaybe<Scalars['Boolean']>;
  complete_not?: InputMaybe<Scalars['Boolean']>;
  complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
  complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  feeTo?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
};

export type AVALANCHE_Burn_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'to'
  | 'logIndex'
  | 'amountUSD'
  | 'complete'
  | 'feeTo'
  | 'feeLiquidity';

export type AVALANCHE_DayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: AVALANCHE_Factory;
  volumeETH: Scalars['AVALANCHE_BigDecimal'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  untrackedVolume: Scalars['AVALANCHE_BigDecimal'];
  liquidityETH: Scalars['AVALANCHE_BigDecimal'];
  liquidityUSD: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type AVALANCHE_DayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type AVALANCHE_DayData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type AVALANCHE_Factory = {
  id: Scalars['ID'];
  pairCount: Scalars['BigInt'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  volumeETH: Scalars['AVALANCHE_BigDecimal'];
  untrackedVolumeUSD: Scalars['AVALANCHE_BigDecimal'];
  liquidityUSD: Scalars['AVALANCHE_BigDecimal'];
  liquidityETH: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
  tokenCount: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  pairs: Array<AVALANCHE_Pair>;
  tokens: Array<AVALANCHE_Token>;
  hourData: Array<AVALANCHE_HourData>;
  dayData: Array<AVALANCHE_DayData>;
};


export type AVALANCHE_FactorypairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Pair_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Pair_filter>;
};


export type AVALANCHE_FactorytokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Token_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Token_filter>;
};


export type AVALANCHE_FactoryhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_HourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_HourData_filter>;
};


export type AVALANCHE_FactorydayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_DayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_DayData_filter>;
};

export type AVALANCHE_Factory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  pairCount?: InputMaybe<Scalars['BigInt']>;
  pairCount_not?: InputMaybe<Scalars['BigInt']>;
  pairCount_gt?: InputMaybe<Scalars['BigInt']>;
  pairCount_lt?: InputMaybe<Scalars['BigInt']>;
  pairCount_gte?: InputMaybe<Scalars['BigInt']>;
  pairCount_lte?: InputMaybe<Scalars['BigInt']>;
  pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount?: InputMaybe<Scalars['BigInt']>;
  tokenCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount?: InputMaybe<Scalars['BigInt']>;
  userCount_not?: InputMaybe<Scalars['BigInt']>;
  userCount_gt?: InputMaybe<Scalars['BigInt']>;
  userCount_lt?: InputMaybe<Scalars['BigInt']>;
  userCount_gte?: InputMaybe<Scalars['BigInt']>;
  userCount_lte?: InputMaybe<Scalars['BigInt']>;
  userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type AVALANCHE_Factory_orderBy =
  | 'id'
  | 'pairCount'
  | 'volumeUSD'
  | 'volumeETH'
  | 'untrackedVolumeUSD'
  | 'liquidityUSD'
  | 'liquidityETH'
  | 'txCount'
  | 'tokenCount'
  | 'userCount'
  | 'pairs'
  | 'tokens'
  | 'hourData'
  | 'dayData';

export type AVALANCHE_HourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: AVALANCHE_Factory;
  volumeETH: Scalars['AVALANCHE_BigDecimal'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  untrackedVolume: Scalars['AVALANCHE_BigDecimal'];
  liquidityETH: Scalars['AVALANCHE_BigDecimal'];
  liquidityUSD: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type AVALANCHE_HourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type AVALANCHE_HourData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type AVALANCHE_LiquidityPosition = {
  id: Scalars['ID'];
  user: AVALANCHE_User;
  pair: AVALANCHE_Pair;
  liquidityTokenBalance: Scalars['AVALANCHE_BigDecimal'];
  snapshots: Array<Maybe<AVALANCHE_LiquidityPositionSnapshot>>;
  block: Scalars['Int'];
  timestamp: Scalars['Int'];
};


export type AVALANCHE_LiquidityPositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_LiquidityPositionSnapshot_filter>;
};

export type AVALANCHE_LiquidityPositionSnapshot = {
  id: Scalars['ID'];
  liquidityPosition: AVALANCHE_LiquidityPosition;
  timestamp: Scalars['Int'];
  block: Scalars['Int'];
  user: AVALANCHE_User;
  pair: AVALANCHE_Pair;
  token0PriceUSD: Scalars['AVALANCHE_BigDecimal'];
  token1PriceUSD: Scalars['AVALANCHE_BigDecimal'];
  reserve0: Scalars['AVALANCHE_BigDecimal'];
  reserve1: Scalars['AVALANCHE_BigDecimal'];
  reserveUSD: Scalars['AVALANCHE_BigDecimal'];
  liquidityTokenTotalSupply: Scalars['AVALANCHE_BigDecimal'];
  liquidityTokenBalance: Scalars['AVALANCHE_BigDecimal'];
};

export type AVALANCHE_LiquidityPositionSnapshot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityPosition?: InputMaybe<Scalars['String']>;
  liquidityPosition_not?: InputMaybe<Scalars['String']>;
  liquidityPosition_gt?: InputMaybe<Scalars['String']>;
  liquidityPosition_lt?: InputMaybe<Scalars['String']>;
  liquidityPosition_gte?: InputMaybe<Scalars['String']>;
  liquidityPosition_lte?: InputMaybe<Scalars['String']>;
  liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0PriceUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0PriceUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0PriceUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0PriceUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0PriceUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0PriceUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0PriceUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  token0PriceUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  token1PriceUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1PriceUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1PriceUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1PriceUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1PriceUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1PriceUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1PriceUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  token1PriceUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityTokenTotalSupply?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenTotalSupply_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityTokenBalance?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
};

export type AVALANCHE_LiquidityPositionSnapshot_orderBy =
  | 'id'
  | 'liquidityPosition'
  | 'timestamp'
  | 'block'
  | 'user'
  | 'pair'
  | 'token0PriceUSD'
  | 'token1PriceUSD'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'liquidityTokenTotalSupply'
  | 'liquidityTokenBalance';

export type AVALANCHE_LiquidityPosition_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityTokenBalance?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type AVALANCHE_LiquidityPosition_orderBy =
  | 'id'
  | 'user'
  | 'pair'
  | 'liquidityTokenBalance'
  | 'snapshots'
  | 'block'
  | 'timestamp';

export type AVALANCHE_Mint = {
  id: Scalars['ID'];
  transaction: AVALANCHE_Transaction;
  timestamp: Scalars['BigInt'];
  pair: AVALANCHE_Pair;
  to: Scalars['AVALANCHE_Bytes'];
  liquidity: Scalars['AVALANCHE_BigDecimal'];
  sender?: Maybe<Scalars['AVALANCHE_Bytes']>;
  amount0?: Maybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1?: Maybe<Scalars['AVALANCHE_BigDecimal']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['AVALANCHE_BigDecimal']>;
  feeTo?: Maybe<Scalars['AVALANCHE_Bytes']>;
  feeLiquidity?: Maybe<Scalars['AVALANCHE_BigDecimal']>;
};

export type AVALANCHE_Mint_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_not?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  to_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  liquidity?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  sender?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_not?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  amount0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  feeTo?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
};

export type AVALANCHE_Mint_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'to'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'logIndex'
  | 'amountUSD'
  | 'feeTo'
  | 'feeLiquidity';

/** Defines the order direction, either ascending or descending */
export type AVALANCHE_OrderDirection =
  | 'asc'
  | 'desc';

export type AVALANCHE_Pair = {
  id: Scalars['ID'];
  factory: AVALANCHE_Factory;
  name: Scalars['String'];
  token0: AVALANCHE_Token;
  token1: AVALANCHE_Token;
  reserve0: Scalars['AVALANCHE_BigDecimal'];
  reserve1: Scalars['AVALANCHE_BigDecimal'];
  totalSupply: Scalars['AVALANCHE_BigDecimal'];
  reserveETH: Scalars['AVALANCHE_BigDecimal'];
  reserveUSD: Scalars['AVALANCHE_BigDecimal'];
  trackedReserveETH: Scalars['AVALANCHE_BigDecimal'];
  token0Price: Scalars['AVALANCHE_BigDecimal'];
  token1Price: Scalars['AVALANCHE_BigDecimal'];
  volumeToken0: Scalars['AVALANCHE_BigDecimal'];
  volumeToken1: Scalars['AVALANCHE_BigDecimal'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  untrackedVolumeUSD: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidityProviderCount: Scalars['BigInt'];
  liquidityPositions: Array<AVALANCHE_LiquidityPosition>;
  liquidityPositionSnapshots: Array<AVALANCHE_LiquidityPositionSnapshot>;
  dayData: Array<AVALANCHE_PairDayData>;
  hourData: Array<AVALANCHE_PairHourData>;
  mints: Array<AVALANCHE_Mint>;
  burns: Array<AVALANCHE_Burn>;
  swaps: Array<AVALANCHE_Swap>;
  timestamp: Scalars['BigInt'];
  block: Scalars['BigInt'];
};


export type AVALANCHE_PairliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_LiquidityPosition_filter>;
};


export type AVALANCHE_PairliquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_LiquidityPositionSnapshot_filter>;
};


export type AVALANCHE_PairdayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_PairDayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_PairDayData_filter>;
};


export type AVALANCHE_PairhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_PairHourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_PairHourData_filter>;
};


export type AVALANCHE_PairmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Mint_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Mint_filter>;
};


export type AVALANCHE_PairburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Burn_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Burn_filter>;
};


export type AVALANCHE_PairswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Swap_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Swap_filter>;
};

export type AVALANCHE_PairDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: AVALANCHE_Pair;
  token0: AVALANCHE_Token;
  token1: AVALANCHE_Token;
  reserve0: Scalars['AVALANCHE_BigDecimal'];
  reserve1: Scalars['AVALANCHE_BigDecimal'];
  totalSupply: Scalars['AVALANCHE_BigDecimal'];
  reserveUSD: Scalars['AVALANCHE_BigDecimal'];
  volumeToken0: Scalars['AVALANCHE_BigDecimal'];
  volumeToken1: Scalars['AVALANCHE_BigDecimal'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type AVALANCHE_PairDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type AVALANCHE_PairDayData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type AVALANCHE_PairHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: AVALANCHE_Pair;
  reserve0: Scalars['AVALANCHE_BigDecimal'];
  reserve1: Scalars['AVALANCHE_BigDecimal'];
  reserveUSD: Scalars['AVALANCHE_BigDecimal'];
  volumeToken0: Scalars['AVALANCHE_BigDecimal'];
  volumeToken1: Scalars['AVALANCHE_BigDecimal'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type AVALANCHE_PairHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type AVALANCHE_PairHourData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type AVALANCHE_Pair_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  trackedReserveETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  trackedReserveETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  trackedReserveETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  trackedReserveETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  trackedReserveETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  trackedReserveETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  trackedReserveETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  trackedReserveETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  token0Price?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0Price_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0Price_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0Price_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0Price_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0Price_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0Price_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  token0Price_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  token1Price?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1Price_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1Price_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1Price_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1Price_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1Price_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1Price_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  token1Price_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type AVALANCHE_Pair_orderBy =
  | 'id'
  | 'factory'
  | 'name'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveETH'
  | 'reserveUSD'
  | 'trackedReserveETH'
  | 'token0Price'
  | 'token1Price'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidityProviderCount'
  | 'liquidityPositions'
  | 'liquidityPositionSnapshots'
  | 'dayData'
  | 'hourData'
  | 'mints'
  | 'burns'
  | 'swaps'
  | 'timestamp'
  | 'block';

export type AVALANCHE_Swap = {
  id: Scalars['ID'];
  transaction: AVALANCHE_Transaction;
  timestamp: Scalars['BigInt'];
  pair: AVALANCHE_Pair;
  sender: Scalars['AVALANCHE_Bytes'];
  amount0In: Scalars['AVALANCHE_BigDecimal'];
  amount1In: Scalars['AVALANCHE_BigDecimal'];
  amount0Out: Scalars['AVALANCHE_BigDecimal'];
  amount1Out: Scalars['AVALANCHE_BigDecimal'];
  to: Scalars['AVALANCHE_Bytes'];
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD: Scalars['AVALANCHE_BigDecimal'];
};

export type AVALANCHE_Swap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_not?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  amount0In?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0In_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0In_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0In_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0In_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0In_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0In_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount0In_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount1In?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1In_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1In_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1In_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1In_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1In_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1In_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount1In_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount0Out?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0Out_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0Out_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0Out_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0Out_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0Out_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0Out_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount0Out_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount1Out?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1Out_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1Out_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1Out_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1Out_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1Out_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1Out_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount1Out_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  to?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_not?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  to_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
};

export type AVALANCHE_Swap_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'sender'
  | 'amount0In'
  | 'amount1In'
  | 'amount0Out'
  | 'amount1Out'
  | 'to'
  | 'logIndex'
  | 'amountUSD';

export type AVALANCHE_Token = {
  id: Scalars['ID'];
  factory: AVALANCHE_Factory;
  symbol: Scalars['String'];
  name: Scalars['String'];
  decimals: Scalars['BigInt'];
  totalSupply: Scalars['BigInt'];
  volume: Scalars['AVALANCHE_BigDecimal'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  untrackedVolumeUSD: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['AVALANCHE_BigDecimal'];
  derivedETH: Scalars['AVALANCHE_BigDecimal'];
  whitelistPairs: Array<AVALANCHE_Pair>;
  hourData: Array<AVALANCHE_TokenHourData>;
  dayData: Array<AVALANCHE_TokenDayData>;
  basePairs: Array<AVALANCHE_Pair>;
  quotePairs: Array<AVALANCHE_Pair>;
  basePairsDayData: Array<AVALANCHE_PairDayData>;
  quotePairsDayData: Array<AVALANCHE_PairDayData>;
};


export type AVALANCHE_TokenwhitelistPairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Pair_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Pair_filter>;
};


export type AVALANCHE_TokenhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_TokenHourData_filter>;
};


export type AVALANCHE_TokendayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_TokenDayData_filter>;
};


export type AVALANCHE_TokenbasePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Pair_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Pair_filter>;
};


export type AVALANCHE_TokenquotePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Pair_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Pair_filter>;
};


export type AVALANCHE_TokenbasePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_PairDayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_PairDayData_filter>;
};


export type AVALANCHE_TokenquotePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_PairDayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_PairDayData_filter>;
};

export type AVALANCHE_TokenDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: AVALANCHE_Token;
  volume: Scalars['AVALANCHE_BigDecimal'];
  volumeETH: Scalars['AVALANCHE_BigDecimal'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['AVALANCHE_BigDecimal'];
  liquidityETH: Scalars['AVALANCHE_BigDecimal'];
  liquidityUSD: Scalars['AVALANCHE_BigDecimal'];
  priceUSD: Scalars['AVALANCHE_BigDecimal'];
};

export type AVALANCHE_TokenDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
};

export type AVALANCHE_TokenDayData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type AVALANCHE_TokenHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: AVALANCHE_Token;
  volume: Scalars['AVALANCHE_BigDecimal'];
  volumeETH: Scalars['AVALANCHE_BigDecimal'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['AVALANCHE_BigDecimal'];
  liquidityETH: Scalars['AVALANCHE_BigDecimal'];
  liquidityUSD: Scalars['AVALANCHE_BigDecimal'];
  priceUSD: Scalars['AVALANCHE_BigDecimal'];
};

export type AVALANCHE_TokenHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
};

export type AVALANCHE_TokenHourData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type AVALANCHE_Token_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  decimals?: InputMaybe<Scalars['BigInt']>;
  decimals_not?: InputMaybe<Scalars['BigInt']>;
  decimals_gt?: InputMaybe<Scalars['BigInt']>;
  decimals_lt?: InputMaybe<Scalars['BigInt']>;
  decimals_gte?: InputMaybe<Scalars['BigInt']>;
  decimals_lte?: InputMaybe<Scalars['BigInt']>;
  decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  derivedETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  derivedETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  derivedETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  derivedETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  derivedETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  derivedETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  derivedETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  derivedETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  whitelistPairs?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type AVALANCHE_Token_orderBy =
  | 'id'
  | 'factory'
  | 'symbol'
  | 'name'
  | 'decimals'
  | 'totalSupply'
  | 'volume'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'derivedETH'
  | 'whitelistPairs'
  | 'hourData'
  | 'dayData'
  | 'basePairs'
  | 'quotePairs'
  | 'basePairsDayData'
  | 'quotePairsDayData';

export type AVALANCHE_Transaction = {
  id: Scalars['ID'];
  blockNumber: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  mints: Array<Maybe<AVALANCHE_Mint>>;
  burns: Array<Maybe<AVALANCHE_Burn>>;
  swaps: Array<Maybe<AVALANCHE_Swap>>;
};


export type AVALANCHE_TransactionmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Mint_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Mint_filter>;
};


export type AVALANCHE_TransactionburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Burn_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Burn_filter>;
};


export type AVALANCHE_TransactionswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Swap_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Swap_filter>;
};

export type AVALANCHE_Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  mints?: InputMaybe<Array<Scalars['String']>>;
  mints_not?: InputMaybe<Array<Scalars['String']>>;
  mints_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns?: InputMaybe<Array<Scalars['String']>>;
  burns_not?: InputMaybe<Array<Scalars['String']>>;
  burns_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps?: InputMaybe<Array<Scalars['String']>>;
  swaps_not?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type AVALANCHE_Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'mints'
  | 'burns'
  | 'swaps';

export type AVALANCHE_User = {
  id: Scalars['ID'];
  liquidityPositions: Array<AVALANCHE_LiquidityPosition>;
};


export type AVALANCHE_UserliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_LiquidityPosition_filter>;
};

export type AVALANCHE_User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
};

export type AVALANCHE_User_orderBy =
  | 'id'
  | 'liquidityPositions';

export type AVALANCHE__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['AVALANCHE_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
};

/** The type for the top-level _meta field */
export type AVALANCHE__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: AVALANCHE__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

/** The block at which the query should be executed. */
export type MATIC_Block_height = {
  /** Value containing a block hash */
  hash?: InputMaybe<Scalars['MATIC_Bytes']>;
  /** Value containing a block number */
  number?: InputMaybe<Scalars['Int']>;
  /**
   * Value containing the minimum block number.
   * In the case of `number_gte`, the query will be executed on the latest block only if
   * the subgraph has progressed to or past the minimum block number.
   * Defaults to the latest block when omitted.
   *
   */
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type MATIC_Bundle = {
  id: Scalars['ID'];
  ethPrice: Scalars['MATIC_BigDecimal'];
};

export type MATIC_Bundle_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ethPrice?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  ethPrice_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  ethPrice_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  ethPrice_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  ethPrice_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  ethPrice_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  ethPrice_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  ethPrice_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
};

export type MATIC_Bundle_orderBy =
  | 'id'
  | 'ethPrice';

export type MATIC_Burn = {
  id: Scalars['ID'];
  transaction: MATIC_Transaction;
  timestamp: Scalars['BigInt'];
  pair: MATIC_Pair;
  liquidity: Scalars['MATIC_BigDecimal'];
  sender?: Maybe<Scalars['MATIC_Bytes']>;
  amount0?: Maybe<Scalars['MATIC_BigDecimal']>;
  amount1?: Maybe<Scalars['MATIC_BigDecimal']>;
  to?: Maybe<Scalars['MATIC_Bytes']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['MATIC_BigDecimal']>;
  complete: Scalars['Boolean'];
  feeTo?: Maybe<Scalars['MATIC_Bytes']>;
  feeLiquidity?: Maybe<Scalars['MATIC_BigDecimal']>;
};

export type MATIC_Burn_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidity?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  sender?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_not?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  amount0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  to?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_not?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  to_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  complete?: InputMaybe<Scalars['Boolean']>;
  complete_not?: InputMaybe<Scalars['Boolean']>;
  complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
  complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  feeTo?: InputMaybe<Scalars['MATIC_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['MATIC_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
};

export type MATIC_Burn_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'to'
  | 'logIndex'
  | 'amountUSD'
  | 'complete'
  | 'feeTo'
  | 'feeLiquidity';

export type MATIC_DayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: MATIC_Factory;
  volumeETH: Scalars['MATIC_BigDecimal'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  untrackedVolume: Scalars['MATIC_BigDecimal'];
  liquidityETH: Scalars['MATIC_BigDecimal'];
  liquidityUSD: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type MATIC_DayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MATIC_DayData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type MATIC_Factory = {
  id: Scalars['ID'];
  pairCount: Scalars['BigInt'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  volumeETH: Scalars['MATIC_BigDecimal'];
  untrackedVolumeUSD: Scalars['MATIC_BigDecimal'];
  liquidityUSD: Scalars['MATIC_BigDecimal'];
  liquidityETH: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
  tokenCount: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  pairs: Array<MATIC_Pair>;
  tokens: Array<MATIC_Token>;
  hourData: Array<MATIC_HourData>;
  dayData: Array<MATIC_DayData>;
};


export type MATIC_FactorypairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Pair_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Pair_filter>;
};


export type MATIC_FactorytokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Token_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Token_filter>;
};


export type MATIC_FactoryhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_HourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_HourData_filter>;
};


export type MATIC_FactorydayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_DayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_DayData_filter>;
};

export type MATIC_Factory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  pairCount?: InputMaybe<Scalars['BigInt']>;
  pairCount_not?: InputMaybe<Scalars['BigInt']>;
  pairCount_gt?: InputMaybe<Scalars['BigInt']>;
  pairCount_lt?: InputMaybe<Scalars['BigInt']>;
  pairCount_gte?: InputMaybe<Scalars['BigInt']>;
  pairCount_lte?: InputMaybe<Scalars['BigInt']>;
  pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount?: InputMaybe<Scalars['BigInt']>;
  tokenCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount?: InputMaybe<Scalars['BigInt']>;
  userCount_not?: InputMaybe<Scalars['BigInt']>;
  userCount_gt?: InputMaybe<Scalars['BigInt']>;
  userCount_lt?: InputMaybe<Scalars['BigInt']>;
  userCount_gte?: InputMaybe<Scalars['BigInt']>;
  userCount_lte?: InputMaybe<Scalars['BigInt']>;
  userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MATIC_Factory_orderBy =
  | 'id'
  | 'pairCount'
  | 'volumeUSD'
  | 'volumeETH'
  | 'untrackedVolumeUSD'
  | 'liquidityUSD'
  | 'liquidityETH'
  | 'txCount'
  | 'tokenCount'
  | 'userCount'
  | 'pairs'
  | 'tokens'
  | 'hourData'
  | 'dayData';

export type MATIC_HourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: MATIC_Factory;
  volumeETH: Scalars['MATIC_BigDecimal'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  untrackedVolume: Scalars['MATIC_BigDecimal'];
  liquidityETH: Scalars['MATIC_BigDecimal'];
  liquidityUSD: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type MATIC_HourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MATIC_HourData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type MATIC_LiquidityPosition = {
  id: Scalars['ID'];
  user: MATIC_User;
  pair: MATIC_Pair;
  liquidityTokenBalance: Scalars['MATIC_BigDecimal'];
  snapshots: Array<Maybe<MATIC_LiquidityPositionSnapshot>>;
  block: Scalars['Int'];
  timestamp: Scalars['Int'];
};


export type MATIC_LiquidityPositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_LiquidityPositionSnapshot_filter>;
};

export type MATIC_LiquidityPositionSnapshot = {
  id: Scalars['ID'];
  liquidityPosition: MATIC_LiquidityPosition;
  timestamp: Scalars['Int'];
  block: Scalars['Int'];
  user: MATIC_User;
  pair: MATIC_Pair;
  token0PriceUSD: Scalars['MATIC_BigDecimal'];
  token1PriceUSD: Scalars['MATIC_BigDecimal'];
  reserve0: Scalars['MATIC_BigDecimal'];
  reserve1: Scalars['MATIC_BigDecimal'];
  reserveUSD: Scalars['MATIC_BigDecimal'];
  liquidityTokenTotalSupply: Scalars['MATIC_BigDecimal'];
  liquidityTokenBalance: Scalars['MATIC_BigDecimal'];
};

export type MATIC_LiquidityPositionSnapshot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityPosition?: InputMaybe<Scalars['String']>;
  liquidityPosition_not?: InputMaybe<Scalars['String']>;
  liquidityPosition_gt?: InputMaybe<Scalars['String']>;
  liquidityPosition_lt?: InputMaybe<Scalars['String']>;
  liquidityPosition_gte?: InputMaybe<Scalars['String']>;
  liquidityPosition_lte?: InputMaybe<Scalars['String']>;
  liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0PriceUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0PriceUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0PriceUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0PriceUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0PriceUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0PriceUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0PriceUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  token0PriceUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  token1PriceUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1PriceUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1PriceUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1PriceUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1PriceUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1PriceUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1PriceUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  token1PriceUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityTokenTotalSupply?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenTotalSupply_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityTokenBalance?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
};

export type MATIC_LiquidityPositionSnapshot_orderBy =
  | 'id'
  | 'liquidityPosition'
  | 'timestamp'
  | 'block'
  | 'user'
  | 'pair'
  | 'token0PriceUSD'
  | 'token1PriceUSD'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'liquidityTokenTotalSupply'
  | 'liquidityTokenBalance';

export type MATIC_LiquidityPosition_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityTokenBalance?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type MATIC_LiquidityPosition_orderBy =
  | 'id'
  | 'user'
  | 'pair'
  | 'liquidityTokenBalance'
  | 'snapshots'
  | 'block'
  | 'timestamp';

export type MATIC_Mint = {
  id: Scalars['ID'];
  transaction: MATIC_Transaction;
  timestamp: Scalars['BigInt'];
  pair: MATIC_Pair;
  to: Scalars['MATIC_Bytes'];
  liquidity: Scalars['MATIC_BigDecimal'];
  sender?: Maybe<Scalars['MATIC_Bytes']>;
  amount0?: Maybe<Scalars['MATIC_BigDecimal']>;
  amount1?: Maybe<Scalars['MATIC_BigDecimal']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['MATIC_BigDecimal']>;
  feeTo?: Maybe<Scalars['MATIC_Bytes']>;
  feeLiquidity?: Maybe<Scalars['MATIC_BigDecimal']>;
};

export type MATIC_Mint_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_not?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  to_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  liquidity?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  sender?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_not?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  amount0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  feeTo?: InputMaybe<Scalars['MATIC_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['MATIC_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
};

export type MATIC_Mint_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'to'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'logIndex'
  | 'amountUSD'
  | 'feeTo'
  | 'feeLiquidity';

/** Defines the order direction, either ascending or descending */
export type MATIC_OrderDirection =
  | 'asc'
  | 'desc';

export type MATIC_Pair = {
  id: Scalars['ID'];
  factory: MATIC_Factory;
  name: Scalars['String'];
  token0: MATIC_Token;
  token1: MATIC_Token;
  reserve0: Scalars['MATIC_BigDecimal'];
  reserve1: Scalars['MATIC_BigDecimal'];
  totalSupply: Scalars['MATIC_BigDecimal'];
  reserveETH: Scalars['MATIC_BigDecimal'];
  reserveUSD: Scalars['MATIC_BigDecimal'];
  trackedReserveETH: Scalars['MATIC_BigDecimal'];
  token0Price: Scalars['MATIC_BigDecimal'];
  token1Price: Scalars['MATIC_BigDecimal'];
  volumeToken0: Scalars['MATIC_BigDecimal'];
  volumeToken1: Scalars['MATIC_BigDecimal'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  untrackedVolumeUSD: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidityProviderCount: Scalars['BigInt'];
  liquidityPositions: Array<MATIC_LiquidityPosition>;
  liquidityPositionSnapshots: Array<MATIC_LiquidityPositionSnapshot>;
  dayData: Array<MATIC_PairDayData>;
  hourData: Array<MATIC_PairHourData>;
  mints: Array<MATIC_Mint>;
  burns: Array<MATIC_Burn>;
  swaps: Array<MATIC_Swap>;
  timestamp: Scalars['BigInt'];
  block: Scalars['BigInt'];
};


export type MATIC_PairliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_LiquidityPosition_filter>;
};


export type MATIC_PairliquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_LiquidityPositionSnapshot_filter>;
};


export type MATIC_PairdayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_PairDayData_filter>;
};


export type MATIC_PairhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_PairHourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_PairHourData_filter>;
};


export type MATIC_PairmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Mint_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Mint_filter>;
};


export type MATIC_PairburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Burn_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Burn_filter>;
};


export type MATIC_PairswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Swap_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Swap_filter>;
};

export type MATIC_PairDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: MATIC_Pair;
  token0: MATIC_Token;
  token1: MATIC_Token;
  reserve0: Scalars['MATIC_BigDecimal'];
  reserve1: Scalars['MATIC_BigDecimal'];
  totalSupply: Scalars['MATIC_BigDecimal'];
  reserveUSD: Scalars['MATIC_BigDecimal'];
  volumeToken0: Scalars['MATIC_BigDecimal'];
  volumeToken1: Scalars['MATIC_BigDecimal'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type MATIC_PairDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MATIC_PairDayData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type MATIC_PairHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: MATIC_Pair;
  reserve0: Scalars['MATIC_BigDecimal'];
  reserve1: Scalars['MATIC_BigDecimal'];
  reserveUSD: Scalars['MATIC_BigDecimal'];
  volumeToken0: Scalars['MATIC_BigDecimal'];
  volumeToken1: Scalars['MATIC_BigDecimal'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type MATIC_PairHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MATIC_PairHourData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type MATIC_Pair_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  trackedReserveETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  trackedReserveETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  trackedReserveETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  trackedReserveETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  trackedReserveETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  trackedReserveETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  trackedReserveETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  trackedReserveETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  token0Price?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0Price_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0Price_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0Price_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0Price_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0Price_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0Price_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  token0Price_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  token1Price?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1Price_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1Price_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1Price_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1Price_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1Price_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1Price_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  token1Price_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MATIC_Pair_orderBy =
  | 'id'
  | 'factory'
  | 'name'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveETH'
  | 'reserveUSD'
  | 'trackedReserveETH'
  | 'token0Price'
  | 'token1Price'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidityProviderCount'
  | 'liquidityPositions'
  | 'liquidityPositionSnapshots'
  | 'dayData'
  | 'hourData'
  | 'mints'
  | 'burns'
  | 'swaps'
  | 'timestamp'
  | 'block';

export type MATIC_Swap = {
  id: Scalars['ID'];
  transaction: MATIC_Transaction;
  timestamp: Scalars['BigInt'];
  pair: MATIC_Pair;
  sender: Scalars['MATIC_Bytes'];
  amount0In: Scalars['MATIC_BigDecimal'];
  amount1In: Scalars['MATIC_BigDecimal'];
  amount0Out: Scalars['MATIC_BigDecimal'];
  amount1Out: Scalars['MATIC_BigDecimal'];
  to: Scalars['MATIC_Bytes'];
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD: Scalars['MATIC_BigDecimal'];
};

export type MATIC_Swap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_not?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  amount0In?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0In_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0In_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0In_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0In_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0In_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0In_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount0In_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount1In?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1In_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1In_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1In_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1In_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1In_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1In_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount1In_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount0Out?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0Out_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0Out_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0Out_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0Out_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0Out_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0Out_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount0Out_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount1Out?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1Out_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1Out_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1Out_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1Out_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1Out_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1Out_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount1Out_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  to?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_not?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  to_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
};

export type MATIC_Swap_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'sender'
  | 'amount0In'
  | 'amount1In'
  | 'amount0Out'
  | 'amount1Out'
  | 'to'
  | 'logIndex'
  | 'amountUSD';

export type MATIC_Token = {
  id: Scalars['ID'];
  factory: MATIC_Factory;
  symbol: Scalars['String'];
  name: Scalars['String'];
  decimals: Scalars['BigInt'];
  totalSupply: Scalars['BigInt'];
  volume: Scalars['MATIC_BigDecimal'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  untrackedVolumeUSD: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['MATIC_BigDecimal'];
  derivedETH: Scalars['MATIC_BigDecimal'];
  whitelistPairs: Array<MATIC_Pair>;
  hourData: Array<MATIC_TokenHourData>;
  dayData: Array<MATIC_TokenDayData>;
  basePairs: Array<MATIC_Pair>;
  quotePairs: Array<MATIC_Pair>;
  basePairsDayData: Array<MATIC_PairDayData>;
  quotePairsDayData: Array<MATIC_PairDayData>;
};


export type MATIC_TokenwhitelistPairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Pair_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Pair_filter>;
};


export type MATIC_TokenhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_TokenHourData_filter>;
};


export type MATIC_TokendayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_TokenDayData_filter>;
};


export type MATIC_TokenbasePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Pair_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Pair_filter>;
};


export type MATIC_TokenquotePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Pair_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Pair_filter>;
};


export type MATIC_TokenbasePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_PairDayData_filter>;
};


export type MATIC_TokenquotePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_PairDayData_filter>;
};

export type MATIC_TokenDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: MATIC_Token;
  volume: Scalars['MATIC_BigDecimal'];
  volumeETH: Scalars['MATIC_BigDecimal'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['MATIC_BigDecimal'];
  liquidityETH: Scalars['MATIC_BigDecimal'];
  liquidityUSD: Scalars['MATIC_BigDecimal'];
  priceUSD: Scalars['MATIC_BigDecimal'];
};

export type MATIC_TokenDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
};

export type MATIC_TokenDayData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type MATIC_TokenHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: MATIC_Token;
  volume: Scalars['MATIC_BigDecimal'];
  volumeETH: Scalars['MATIC_BigDecimal'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['MATIC_BigDecimal'];
  liquidityETH: Scalars['MATIC_BigDecimal'];
  liquidityUSD: Scalars['MATIC_BigDecimal'];
  priceUSD: Scalars['MATIC_BigDecimal'];
};

export type MATIC_TokenHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
};

export type MATIC_TokenHourData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type MATIC_Token_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  decimals?: InputMaybe<Scalars['BigInt']>;
  decimals_not?: InputMaybe<Scalars['BigInt']>;
  decimals_gt?: InputMaybe<Scalars['BigInt']>;
  decimals_lt?: InputMaybe<Scalars['BigInt']>;
  decimals_gte?: InputMaybe<Scalars['BigInt']>;
  decimals_lte?: InputMaybe<Scalars['BigInt']>;
  decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  derivedETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  derivedETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  derivedETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  derivedETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  derivedETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  derivedETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  derivedETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  derivedETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  whitelistPairs?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type MATIC_Token_orderBy =
  | 'id'
  | 'factory'
  | 'symbol'
  | 'name'
  | 'decimals'
  | 'totalSupply'
  | 'volume'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'derivedETH'
  | 'whitelistPairs'
  | 'hourData'
  | 'dayData'
  | 'basePairs'
  | 'quotePairs'
  | 'basePairsDayData'
  | 'quotePairsDayData';

export type MATIC_Transaction = {
  id: Scalars['ID'];
  blockNumber: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  mints: Array<Maybe<MATIC_Mint>>;
  burns: Array<Maybe<MATIC_Burn>>;
  swaps: Array<Maybe<MATIC_Swap>>;
};


export type MATIC_TransactionmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Mint_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Mint_filter>;
};


export type MATIC_TransactionburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Burn_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Burn_filter>;
};


export type MATIC_TransactionswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Swap_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Swap_filter>;
};

export type MATIC_Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  mints?: InputMaybe<Array<Scalars['String']>>;
  mints_not?: InputMaybe<Array<Scalars['String']>>;
  mints_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns?: InputMaybe<Array<Scalars['String']>>;
  burns_not?: InputMaybe<Array<Scalars['String']>>;
  burns_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps?: InputMaybe<Array<Scalars['String']>>;
  swaps_not?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type MATIC_Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'mints'
  | 'burns'
  | 'swaps';

export type MATIC_User = {
  id: Scalars['ID'];
  liquidityPositions: Array<MATIC_LiquidityPosition>;
};


export type MATIC_UserliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_LiquidityPosition_filter>;
};

export type MATIC_User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
};

export type MATIC_User_orderBy =
  | 'id'
  | 'liquidityPositions';

export type MATIC__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['MATIC_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
};

/** The type for the top-level _meta field */
export type MATIC__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: MATIC__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

/** The block at which the query should be executed. */
export type BSC_Block_height = {
  /** Value containing a block hash */
  hash?: InputMaybe<Scalars['BSC_Bytes']>;
  /** Value containing a block number */
  number?: InputMaybe<Scalars['Int']>;
  /**
   * Value containing the minimum block number.
   * In the case of `number_gte`, the query will be executed on the latest block only if
   * the subgraph has progressed to or past the minimum block number.
   * Defaults to the latest block when omitted.
   *
   */
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type BSC_Bundle = {
  id: Scalars['ID'];
  ethPrice: Scalars['BSC_BigDecimal'];
};

export type BSC_Bundle_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ethPrice?: InputMaybe<Scalars['BSC_BigDecimal']>;
  ethPrice_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  ethPrice_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  ethPrice_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  ethPrice_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  ethPrice_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  ethPrice_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  ethPrice_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
};

export type BSC_Bundle_orderBy =
  | 'id'
  | 'ethPrice';

export type BSC_Burn = {
  id: Scalars['ID'];
  transaction: BSC_Transaction;
  timestamp: Scalars['BigInt'];
  pair: BSC_Pair;
  liquidity: Scalars['BSC_BigDecimal'];
  sender?: Maybe<Scalars['BSC_Bytes']>;
  amount0?: Maybe<Scalars['BSC_BigDecimal']>;
  amount1?: Maybe<Scalars['BSC_BigDecimal']>;
  to?: Maybe<Scalars['BSC_Bytes']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['BSC_BigDecimal']>;
  complete: Scalars['Boolean'];
  feeTo?: Maybe<Scalars['BSC_Bytes']>;
  feeLiquidity?: Maybe<Scalars['BSC_BigDecimal']>;
};

export type BSC_Burn_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidity?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  sender?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_not?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  amount0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  to?: InputMaybe<Scalars['BSC_Bytes']>;
  to_not?: InputMaybe<Scalars['BSC_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  to_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  complete?: InputMaybe<Scalars['Boolean']>;
  complete_not?: InputMaybe<Scalars['Boolean']>;
  complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
  complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  feeTo?: InputMaybe<Scalars['BSC_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['BSC_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
};

export type BSC_Burn_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'to'
  | 'logIndex'
  | 'amountUSD'
  | 'complete'
  | 'feeTo'
  | 'feeLiquidity';

export type BSC_DayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: BSC_Factory;
  volumeETH: Scalars['BSC_BigDecimal'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  untrackedVolume: Scalars['BSC_BigDecimal'];
  liquidityETH: Scalars['BSC_BigDecimal'];
  liquidityUSD: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type BSC_DayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type BSC_DayData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type BSC_Factory = {
  id: Scalars['ID'];
  pairCount: Scalars['BigInt'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  volumeETH: Scalars['BSC_BigDecimal'];
  untrackedVolumeUSD: Scalars['BSC_BigDecimal'];
  liquidityUSD: Scalars['BSC_BigDecimal'];
  liquidityETH: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
  tokenCount: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  pairs: Array<BSC_Pair>;
  tokens: Array<BSC_Token>;
  hourData: Array<BSC_HourData>;
  dayData: Array<BSC_DayData>;
};


export type BSC_FactorypairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Pair_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Pair_filter>;
};


export type BSC_FactorytokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Token_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Token_filter>;
};


export type BSC_FactoryhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_HourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_HourData_filter>;
};


export type BSC_FactorydayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_DayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_DayData_filter>;
};

export type BSC_Factory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  pairCount?: InputMaybe<Scalars['BigInt']>;
  pairCount_not?: InputMaybe<Scalars['BigInt']>;
  pairCount_gt?: InputMaybe<Scalars['BigInt']>;
  pairCount_lt?: InputMaybe<Scalars['BigInt']>;
  pairCount_gte?: InputMaybe<Scalars['BigInt']>;
  pairCount_lte?: InputMaybe<Scalars['BigInt']>;
  pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount?: InputMaybe<Scalars['BigInt']>;
  tokenCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount?: InputMaybe<Scalars['BigInt']>;
  userCount_not?: InputMaybe<Scalars['BigInt']>;
  userCount_gt?: InputMaybe<Scalars['BigInt']>;
  userCount_lt?: InputMaybe<Scalars['BigInt']>;
  userCount_gte?: InputMaybe<Scalars['BigInt']>;
  userCount_lte?: InputMaybe<Scalars['BigInt']>;
  userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type BSC_Factory_orderBy =
  | 'id'
  | 'pairCount'
  | 'volumeUSD'
  | 'volumeETH'
  | 'untrackedVolumeUSD'
  | 'liquidityUSD'
  | 'liquidityETH'
  | 'txCount'
  | 'tokenCount'
  | 'userCount'
  | 'pairs'
  | 'tokens'
  | 'hourData'
  | 'dayData';

export type BSC_HourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: BSC_Factory;
  volumeETH: Scalars['BSC_BigDecimal'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  untrackedVolume: Scalars['BSC_BigDecimal'];
  liquidityETH: Scalars['BSC_BigDecimal'];
  liquidityUSD: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type BSC_HourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type BSC_HourData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type BSC_LiquidityPosition = {
  id: Scalars['ID'];
  user: BSC_User;
  pair: BSC_Pair;
  liquidityTokenBalance: Scalars['BSC_BigDecimal'];
  snapshots: Array<Maybe<BSC_LiquidityPositionSnapshot>>;
  block: Scalars['Int'];
  timestamp: Scalars['Int'];
};


export type BSC_LiquidityPositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_LiquidityPositionSnapshot_filter>;
};

export type BSC_LiquidityPositionSnapshot = {
  id: Scalars['ID'];
  liquidityPosition: BSC_LiquidityPosition;
  timestamp: Scalars['Int'];
  block: Scalars['Int'];
  user: BSC_User;
  pair: BSC_Pair;
  token0PriceUSD: Scalars['BSC_BigDecimal'];
  token1PriceUSD: Scalars['BSC_BigDecimal'];
  reserve0: Scalars['BSC_BigDecimal'];
  reserve1: Scalars['BSC_BigDecimal'];
  reserveUSD: Scalars['BSC_BigDecimal'];
  liquidityTokenTotalSupply: Scalars['BSC_BigDecimal'];
  liquidityTokenBalance: Scalars['BSC_BigDecimal'];
};

export type BSC_LiquidityPositionSnapshot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityPosition?: InputMaybe<Scalars['String']>;
  liquidityPosition_not?: InputMaybe<Scalars['String']>;
  liquidityPosition_gt?: InputMaybe<Scalars['String']>;
  liquidityPosition_lt?: InputMaybe<Scalars['String']>;
  liquidityPosition_gte?: InputMaybe<Scalars['String']>;
  liquidityPosition_lte?: InputMaybe<Scalars['String']>;
  liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0PriceUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0PriceUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0PriceUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0PriceUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0PriceUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0PriceUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0PriceUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  token0PriceUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  token1PriceUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1PriceUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1PriceUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1PriceUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1PriceUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1PriceUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1PriceUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  token1PriceUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityTokenTotalSupply?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenTotalSupply_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityTokenBalance?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
};

export type BSC_LiquidityPositionSnapshot_orderBy =
  | 'id'
  | 'liquidityPosition'
  | 'timestamp'
  | 'block'
  | 'user'
  | 'pair'
  | 'token0PriceUSD'
  | 'token1PriceUSD'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'liquidityTokenTotalSupply'
  | 'liquidityTokenBalance';

export type BSC_LiquidityPosition_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityTokenBalance?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type BSC_LiquidityPosition_orderBy =
  | 'id'
  | 'user'
  | 'pair'
  | 'liquidityTokenBalance'
  | 'snapshots'
  | 'block'
  | 'timestamp';

export type BSC_Mint = {
  id: Scalars['ID'];
  transaction: BSC_Transaction;
  timestamp: Scalars['BigInt'];
  pair: BSC_Pair;
  to: Scalars['BSC_Bytes'];
  liquidity: Scalars['BSC_BigDecimal'];
  sender?: Maybe<Scalars['BSC_Bytes']>;
  amount0?: Maybe<Scalars['BSC_BigDecimal']>;
  amount1?: Maybe<Scalars['BSC_BigDecimal']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['BSC_BigDecimal']>;
  feeTo?: Maybe<Scalars['BSC_Bytes']>;
  feeLiquidity?: Maybe<Scalars['BSC_BigDecimal']>;
};

export type BSC_Mint_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['BSC_Bytes']>;
  to_not?: InputMaybe<Scalars['BSC_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  to_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  liquidity?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  sender?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_not?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  amount0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  feeTo?: InputMaybe<Scalars['BSC_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['BSC_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
};

export type BSC_Mint_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'to'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'logIndex'
  | 'amountUSD'
  | 'feeTo'
  | 'feeLiquidity';

/** Defines the order direction, either ascending or descending */
export type BSC_OrderDirection =
  | 'asc'
  | 'desc';

export type BSC_Pair = {
  id: Scalars['ID'];
  factory: BSC_Factory;
  name: Scalars['String'];
  token0: BSC_Token;
  token1: BSC_Token;
  reserve0: Scalars['BSC_BigDecimal'];
  reserve1: Scalars['BSC_BigDecimal'];
  totalSupply: Scalars['BSC_BigDecimal'];
  reserveETH: Scalars['BSC_BigDecimal'];
  reserveUSD: Scalars['BSC_BigDecimal'];
  trackedReserveETH: Scalars['BSC_BigDecimal'];
  token0Price: Scalars['BSC_BigDecimal'];
  token1Price: Scalars['BSC_BigDecimal'];
  volumeToken0: Scalars['BSC_BigDecimal'];
  volumeToken1: Scalars['BSC_BigDecimal'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  untrackedVolumeUSD: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidityProviderCount: Scalars['BigInt'];
  liquidityPositions: Array<BSC_LiquidityPosition>;
  liquidityPositionSnapshots: Array<BSC_LiquidityPositionSnapshot>;
  dayData: Array<BSC_PairDayData>;
  hourData: Array<BSC_PairHourData>;
  mints: Array<BSC_Mint>;
  burns: Array<BSC_Burn>;
  swaps: Array<BSC_Swap>;
  timestamp: Scalars['BigInt'];
  block: Scalars['BigInt'];
};


export type BSC_PairliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_LiquidityPosition_filter>;
};


export type BSC_PairliquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_LiquidityPositionSnapshot_filter>;
};


export type BSC_PairdayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_PairDayData_filter>;
};


export type BSC_PairhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_PairHourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_PairHourData_filter>;
};


export type BSC_PairmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Mint_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Mint_filter>;
};


export type BSC_PairburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Burn_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Burn_filter>;
};


export type BSC_PairswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Swap_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Swap_filter>;
};

export type BSC_PairDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: BSC_Pair;
  token0: BSC_Token;
  token1: BSC_Token;
  reserve0: Scalars['BSC_BigDecimal'];
  reserve1: Scalars['BSC_BigDecimal'];
  totalSupply: Scalars['BSC_BigDecimal'];
  reserveUSD: Scalars['BSC_BigDecimal'];
  volumeToken0: Scalars['BSC_BigDecimal'];
  volumeToken1: Scalars['BSC_BigDecimal'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type BSC_PairDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type BSC_PairDayData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type BSC_PairHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: BSC_Pair;
  reserve0: Scalars['BSC_BigDecimal'];
  reserve1: Scalars['BSC_BigDecimal'];
  reserveUSD: Scalars['BSC_BigDecimal'];
  volumeToken0: Scalars['BSC_BigDecimal'];
  volumeToken1: Scalars['BSC_BigDecimal'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type BSC_PairHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type BSC_PairHourData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type BSC_Pair_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  trackedReserveETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  trackedReserveETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  trackedReserveETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  trackedReserveETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  trackedReserveETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  trackedReserveETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  trackedReserveETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  trackedReserveETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  token0Price?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0Price_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0Price_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0Price_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0Price_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0Price_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0Price_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  token0Price_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  token1Price?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1Price_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1Price_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1Price_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1Price_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1Price_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1Price_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  token1Price_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type BSC_Pair_orderBy =
  | 'id'
  | 'factory'
  | 'name'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveETH'
  | 'reserveUSD'
  | 'trackedReserveETH'
  | 'token0Price'
  | 'token1Price'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidityProviderCount'
  | 'liquidityPositions'
  | 'liquidityPositionSnapshots'
  | 'dayData'
  | 'hourData'
  | 'mints'
  | 'burns'
  | 'swaps'
  | 'timestamp'
  | 'block';

export type BSC_Swap = {
  id: Scalars['ID'];
  transaction: BSC_Transaction;
  timestamp: Scalars['BigInt'];
  pair: BSC_Pair;
  sender: Scalars['BSC_Bytes'];
  amount0In: Scalars['BSC_BigDecimal'];
  amount1In: Scalars['BSC_BigDecimal'];
  amount0Out: Scalars['BSC_BigDecimal'];
  amount1Out: Scalars['BSC_BigDecimal'];
  to: Scalars['BSC_Bytes'];
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD: Scalars['BSC_BigDecimal'];
};

export type BSC_Swap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_not?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  amount0In?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0In_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0In_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0In_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0In_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0In_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0In_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount0In_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount1In?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1In_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1In_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1In_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1In_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1In_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1In_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount1In_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount0Out?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0Out_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0Out_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0Out_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0Out_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0Out_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0Out_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount0Out_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount1Out?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1Out_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1Out_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1Out_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1Out_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1Out_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1Out_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount1Out_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  to?: InputMaybe<Scalars['BSC_Bytes']>;
  to_not?: InputMaybe<Scalars['BSC_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  to_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
};

export type BSC_Swap_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'sender'
  | 'amount0In'
  | 'amount1In'
  | 'amount0Out'
  | 'amount1Out'
  | 'to'
  | 'logIndex'
  | 'amountUSD';

export type BSC_Token = {
  id: Scalars['ID'];
  factory: BSC_Factory;
  symbol: Scalars['String'];
  name: Scalars['String'];
  decimals: Scalars['BigInt'];
  totalSupply: Scalars['BigInt'];
  volume: Scalars['BSC_BigDecimal'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  untrackedVolumeUSD: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['BSC_BigDecimal'];
  derivedETH: Scalars['BSC_BigDecimal'];
  whitelistPairs: Array<BSC_Pair>;
  hourData: Array<BSC_TokenHourData>;
  dayData: Array<BSC_TokenDayData>;
  basePairs: Array<BSC_Pair>;
  quotePairs: Array<BSC_Pair>;
  basePairsDayData: Array<BSC_PairDayData>;
  quotePairsDayData: Array<BSC_PairDayData>;
};


export type BSC_TokenwhitelistPairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Pair_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Pair_filter>;
};


export type BSC_TokenhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_TokenHourData_filter>;
};


export type BSC_TokendayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_TokenDayData_filter>;
};


export type BSC_TokenbasePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Pair_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Pair_filter>;
};


export type BSC_TokenquotePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Pair_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Pair_filter>;
};


export type BSC_TokenbasePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_PairDayData_filter>;
};


export type BSC_TokenquotePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_PairDayData_filter>;
};

export type BSC_TokenDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: BSC_Token;
  volume: Scalars['BSC_BigDecimal'];
  volumeETH: Scalars['BSC_BigDecimal'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['BSC_BigDecimal'];
  liquidityETH: Scalars['BSC_BigDecimal'];
  liquidityUSD: Scalars['BSC_BigDecimal'];
  priceUSD: Scalars['BSC_BigDecimal'];
};

export type BSC_TokenDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
};

export type BSC_TokenDayData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type BSC_TokenHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: BSC_Token;
  volume: Scalars['BSC_BigDecimal'];
  volumeETH: Scalars['BSC_BigDecimal'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['BSC_BigDecimal'];
  liquidityETH: Scalars['BSC_BigDecimal'];
  liquidityUSD: Scalars['BSC_BigDecimal'];
  priceUSD: Scalars['BSC_BigDecimal'];
};

export type BSC_TokenHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
};

export type BSC_TokenHourData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type BSC_Token_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  decimals?: InputMaybe<Scalars['BigInt']>;
  decimals_not?: InputMaybe<Scalars['BigInt']>;
  decimals_gt?: InputMaybe<Scalars['BigInt']>;
  decimals_lt?: InputMaybe<Scalars['BigInt']>;
  decimals_gte?: InputMaybe<Scalars['BigInt']>;
  decimals_lte?: InputMaybe<Scalars['BigInt']>;
  decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  derivedETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  derivedETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  derivedETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  derivedETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  derivedETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  derivedETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  derivedETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  derivedETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  whitelistPairs?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type BSC_Token_orderBy =
  | 'id'
  | 'factory'
  | 'symbol'
  | 'name'
  | 'decimals'
  | 'totalSupply'
  | 'volume'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'derivedETH'
  | 'whitelistPairs'
  | 'hourData'
  | 'dayData'
  | 'basePairs'
  | 'quotePairs'
  | 'basePairsDayData'
  | 'quotePairsDayData';

export type BSC_Transaction = {
  id: Scalars['ID'];
  blockNumber: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  mints: Array<Maybe<BSC_Mint>>;
  burns: Array<Maybe<BSC_Burn>>;
  swaps: Array<Maybe<BSC_Swap>>;
};


export type BSC_TransactionmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Mint_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Mint_filter>;
};


export type BSC_TransactionburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Burn_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Burn_filter>;
};


export type BSC_TransactionswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Swap_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Swap_filter>;
};

export type BSC_Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  mints?: InputMaybe<Array<Scalars['String']>>;
  mints_not?: InputMaybe<Array<Scalars['String']>>;
  mints_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns?: InputMaybe<Array<Scalars['String']>>;
  burns_not?: InputMaybe<Array<Scalars['String']>>;
  burns_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps?: InputMaybe<Array<Scalars['String']>>;
  swaps_not?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type BSC_Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'mints'
  | 'burns'
  | 'swaps';

export type BSC_User = {
  id: Scalars['ID'];
  liquidityPositions: Array<BSC_LiquidityPosition>;
};


export type BSC_UserliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_LiquidityPosition_filter>;
};

export type BSC_User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
};

export type BSC_User_orderBy =
  | 'id'
  | 'liquidityPositions';

export type BSC__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['BSC_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
};

/** The type for the top-level _meta field */
export type BSC__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: BSC__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type WithIndex<TObject> = TObject & Record<string, any>;
export type ResolversObject<TObject> = WithIndex<TObject>;

export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | ResolverWithResolve<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = ResolversObject<{
  Query: ResolverTypeWrapper<{}>;
  Subscription: ResolverTypeWrapper<{}>;
  ETHEREUM_BigDecimal: ResolverTypeWrapper<Scalars['ETHEREUM_BigDecimal']>;
  BigInt: ResolverTypeWrapper<Scalars['BigInt']>;
  ETHEREUM_Block_height: ETHEREUM_Block_height;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
  ETHEREUM_Bundle: ResolverTypeWrapper<ETHEREUM_Bundle>;
  ETHEREUM_Bundle_filter: ETHEREUM_Bundle_filter;
  ETHEREUM_Bundle_orderBy: ETHEREUM_Bundle_orderBy;
  ETHEREUM_Burn: ResolverTypeWrapper<ETHEREUM_Burn>;
  ETHEREUM_Burn_filter: ETHEREUM_Burn_filter;
  ETHEREUM_Burn_orderBy: ETHEREUM_Burn_orderBy;
  ETHEREUM_Bytes: ResolverTypeWrapper<Scalars['ETHEREUM_Bytes']>;
  ETHEREUM_DayData: ResolverTypeWrapper<ETHEREUM_DayData>;
  ETHEREUM_DayData_filter: ETHEREUM_DayData_filter;
  ETHEREUM_DayData_orderBy: ETHEREUM_DayData_orderBy;
  ETHEREUM_Factory: ResolverTypeWrapper<ETHEREUM_Factory>;
  ETHEREUM_Factory_filter: ETHEREUM_Factory_filter;
  ETHEREUM_Factory_orderBy: ETHEREUM_Factory_orderBy;
  Float: ResolverTypeWrapper<Scalars['Float']>;
  ETHEREUM_HourData: ResolverTypeWrapper<ETHEREUM_HourData>;
  ETHEREUM_HourData_filter: ETHEREUM_HourData_filter;
  ETHEREUM_HourData_orderBy: ETHEREUM_HourData_orderBy;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  Int: ResolverTypeWrapper<Scalars['Int']>;
  ETHEREUM_LiquidityPosition: ResolverTypeWrapper<ETHEREUM_LiquidityPosition>;
  ETHEREUM_LiquidityPositionSnapshot: ResolverTypeWrapper<ETHEREUM_LiquidityPositionSnapshot>;
  ETHEREUM_LiquidityPositionSnapshot_filter: ETHEREUM_LiquidityPositionSnapshot_filter;
  ETHEREUM_LiquidityPositionSnapshot_orderBy: ETHEREUM_LiquidityPositionSnapshot_orderBy;
  ETHEREUM_LiquidityPosition_filter: ETHEREUM_LiquidityPosition_filter;
  ETHEREUM_LiquidityPosition_orderBy: ETHEREUM_LiquidityPosition_orderBy;
  ETHEREUM_Mint: ResolverTypeWrapper<ETHEREUM_Mint>;
  ETHEREUM_Mint_filter: ETHEREUM_Mint_filter;
  ETHEREUM_Mint_orderBy: ETHEREUM_Mint_orderBy;
  ETHEREUM_OrderDirection: ETHEREUM_OrderDirection;
  ETHEREUM_Pair: ResolverTypeWrapper<ETHEREUM_Pair>;
  ETHEREUM_PairDayData: ResolverTypeWrapper<ETHEREUM_PairDayData>;
  ETHEREUM_PairDayData_filter: ETHEREUM_PairDayData_filter;
  ETHEREUM_PairDayData_orderBy: ETHEREUM_PairDayData_orderBy;
  ETHEREUM_PairHourData: ResolverTypeWrapper<ETHEREUM_PairHourData>;
  ETHEREUM_PairHourData_filter: ETHEREUM_PairHourData_filter;
  ETHEREUM_PairHourData_orderBy: ETHEREUM_PairHourData_orderBy;
  ETHEREUM_Pair_filter: ETHEREUM_Pair_filter;
  ETHEREUM_Pair_orderBy: ETHEREUM_Pair_orderBy;
  String: ResolverTypeWrapper<Scalars['String']>;
  ETHEREUM_Swap: ResolverTypeWrapper<ETHEREUM_Swap>;
  ETHEREUM_Swap_filter: ETHEREUM_Swap_filter;
  ETHEREUM_Swap_orderBy: ETHEREUM_Swap_orderBy;
  ETHEREUM_Token: ResolverTypeWrapper<ETHEREUM_Token>;
  ETHEREUM_TokenDayData: ResolverTypeWrapper<ETHEREUM_TokenDayData>;
  ETHEREUM_TokenDayData_filter: ETHEREUM_TokenDayData_filter;
  ETHEREUM_TokenDayData_orderBy: ETHEREUM_TokenDayData_orderBy;
  ETHEREUM_TokenHourData: ResolverTypeWrapper<ETHEREUM_TokenHourData>;
  ETHEREUM_TokenHourData_filter: ETHEREUM_TokenHourData_filter;
  ETHEREUM_TokenHourData_orderBy: ETHEREUM_TokenHourData_orderBy;
  ETHEREUM_Token_filter: ETHEREUM_Token_filter;
  ETHEREUM_Token_orderBy: ETHEREUM_Token_orderBy;
  ETHEREUM_Transaction: ResolverTypeWrapper<ETHEREUM_Transaction>;
  ETHEREUM_Transaction_filter: ETHEREUM_Transaction_filter;
  ETHEREUM_Transaction_orderBy: ETHEREUM_Transaction_orderBy;
  ETHEREUM_User: ResolverTypeWrapper<ETHEREUM_User>;
  ETHEREUM_User_filter: ETHEREUM_User_filter;
  ETHEREUM_User_orderBy: ETHEREUM_User_orderBy;
  ETHEREUM__Block_: ResolverTypeWrapper<ETHEREUM__Block_>;
  ETHEREUM__Meta_: ResolverTypeWrapper<ETHEREUM__Meta_>;
  _SubgraphErrorPolicy_: _SubgraphErrorPolicy_;
  MOONRIVER_BigDecimal: ResolverTypeWrapper<Scalars['MOONRIVER_BigDecimal']>;
  MOONRIVER_Block_height: MOONRIVER_Block_height;
  MOONRIVER_Bundle: ResolverTypeWrapper<MOONRIVER_Bundle>;
  MOONRIVER_Bundle_filter: MOONRIVER_Bundle_filter;
  MOONRIVER_Bundle_orderBy: MOONRIVER_Bundle_orderBy;
  MOONRIVER_Burn: ResolverTypeWrapper<MOONRIVER_Burn>;
  MOONRIVER_Burn_filter: MOONRIVER_Burn_filter;
  MOONRIVER_Burn_orderBy: MOONRIVER_Burn_orderBy;
  MOONRIVER_Bytes: ResolverTypeWrapper<Scalars['MOONRIVER_Bytes']>;
  MOONRIVER_DayData: ResolverTypeWrapper<MOONRIVER_DayData>;
  MOONRIVER_DayData_filter: MOONRIVER_DayData_filter;
  MOONRIVER_DayData_orderBy: MOONRIVER_DayData_orderBy;
  MOONRIVER_Factory: ResolverTypeWrapper<MOONRIVER_Factory>;
  MOONRIVER_Factory_filter: MOONRIVER_Factory_filter;
  MOONRIVER_Factory_orderBy: MOONRIVER_Factory_orderBy;
  MOONRIVER_HourData: ResolverTypeWrapper<MOONRIVER_HourData>;
  MOONRIVER_HourData_filter: MOONRIVER_HourData_filter;
  MOONRIVER_HourData_orderBy: MOONRIVER_HourData_orderBy;
  MOONRIVER_LiquidityPosition: ResolverTypeWrapper<MOONRIVER_LiquidityPosition>;
  MOONRIVER_LiquidityPositionSnapshot: ResolverTypeWrapper<MOONRIVER_LiquidityPositionSnapshot>;
  MOONRIVER_LiquidityPositionSnapshot_filter: MOONRIVER_LiquidityPositionSnapshot_filter;
  MOONRIVER_LiquidityPositionSnapshot_orderBy: MOONRIVER_LiquidityPositionSnapshot_orderBy;
  MOONRIVER_LiquidityPosition_filter: MOONRIVER_LiquidityPosition_filter;
  MOONRIVER_LiquidityPosition_orderBy: MOONRIVER_LiquidityPosition_orderBy;
  MOONRIVER_Mint: ResolverTypeWrapper<MOONRIVER_Mint>;
  MOONRIVER_Mint_filter: MOONRIVER_Mint_filter;
  MOONRIVER_Mint_orderBy: MOONRIVER_Mint_orderBy;
  MOONRIVER_OrderDirection: MOONRIVER_OrderDirection;
  MOONRIVER_Pair: ResolverTypeWrapper<MOONRIVER_Pair>;
  MOONRIVER_PairDayData: ResolverTypeWrapper<MOONRIVER_PairDayData>;
  MOONRIVER_PairDayData_filter: MOONRIVER_PairDayData_filter;
  MOONRIVER_PairDayData_orderBy: MOONRIVER_PairDayData_orderBy;
  MOONRIVER_PairHourData: ResolverTypeWrapper<MOONRIVER_PairHourData>;
  MOONRIVER_PairHourData_filter: MOONRIVER_PairHourData_filter;
  MOONRIVER_PairHourData_orderBy: MOONRIVER_PairHourData_orderBy;
  MOONRIVER_Pair_filter: MOONRIVER_Pair_filter;
  MOONRIVER_Pair_orderBy: MOONRIVER_Pair_orderBy;
  MOONRIVER_Swap: ResolverTypeWrapper<MOONRIVER_Swap>;
  MOONRIVER_Swap_filter: MOONRIVER_Swap_filter;
  MOONRIVER_Swap_orderBy: MOONRIVER_Swap_orderBy;
  MOONRIVER_Token: ResolverTypeWrapper<MOONRIVER_Token>;
  MOONRIVER_TokenDayData: ResolverTypeWrapper<MOONRIVER_TokenDayData>;
  MOONRIVER_TokenDayData_filter: MOONRIVER_TokenDayData_filter;
  MOONRIVER_TokenDayData_orderBy: MOONRIVER_TokenDayData_orderBy;
  MOONRIVER_TokenHourData: ResolverTypeWrapper<MOONRIVER_TokenHourData>;
  MOONRIVER_TokenHourData_filter: MOONRIVER_TokenHourData_filter;
  MOONRIVER_TokenHourData_orderBy: MOONRIVER_TokenHourData_orderBy;
  MOONRIVER_Token_filter: MOONRIVER_Token_filter;
  MOONRIVER_Token_orderBy: MOONRIVER_Token_orderBy;
  MOONRIVER_Transaction: ResolverTypeWrapper<MOONRIVER_Transaction>;
  MOONRIVER_Transaction_filter: MOONRIVER_Transaction_filter;
  MOONRIVER_Transaction_orderBy: MOONRIVER_Transaction_orderBy;
  MOONRIVER_User: ResolverTypeWrapper<MOONRIVER_User>;
  MOONRIVER_User_filter: MOONRIVER_User_filter;
  MOONRIVER_User_orderBy: MOONRIVER_User_orderBy;
  MOONRIVER__Block_: ResolverTypeWrapper<MOONRIVER__Block_>;
  MOONRIVER__Meta_: ResolverTypeWrapper<MOONRIVER__Meta_>;
  ARBITRUM_BigDecimal: ResolverTypeWrapper<Scalars['ARBITRUM_BigDecimal']>;
  ARBITRUM_Block_height: ARBITRUM_Block_height;
  ARBITRUM_Bundle: ResolverTypeWrapper<ARBITRUM_Bundle>;
  ARBITRUM_Bundle_filter: ARBITRUM_Bundle_filter;
  ARBITRUM_Bundle_orderBy: ARBITRUM_Bundle_orderBy;
  ARBITRUM_Burn: ResolverTypeWrapper<ARBITRUM_Burn>;
  ARBITRUM_Burn_filter: ARBITRUM_Burn_filter;
  ARBITRUM_Burn_orderBy: ARBITRUM_Burn_orderBy;
  ARBITRUM_Bytes: ResolverTypeWrapper<Scalars['ARBITRUM_Bytes']>;
  ARBITRUM_DayData: ResolverTypeWrapper<ARBITRUM_DayData>;
  ARBITRUM_DayData_filter: ARBITRUM_DayData_filter;
  ARBITRUM_DayData_orderBy: ARBITRUM_DayData_orderBy;
  ARBITRUM_Factory: ResolverTypeWrapper<ARBITRUM_Factory>;
  ARBITRUM_Factory_filter: ARBITRUM_Factory_filter;
  ARBITRUM_Factory_orderBy: ARBITRUM_Factory_orderBy;
  ARBITRUM_HourData: ResolverTypeWrapper<ARBITRUM_HourData>;
  ARBITRUM_HourData_filter: ARBITRUM_HourData_filter;
  ARBITRUM_HourData_orderBy: ARBITRUM_HourData_orderBy;
  ARBITRUM_LiquidityPosition: ResolverTypeWrapper<ARBITRUM_LiquidityPosition>;
  ARBITRUM_LiquidityPositionSnapshot: ResolverTypeWrapper<ARBITRUM_LiquidityPositionSnapshot>;
  ARBITRUM_LiquidityPositionSnapshot_filter: ARBITRUM_LiquidityPositionSnapshot_filter;
  ARBITRUM_LiquidityPositionSnapshot_orderBy: ARBITRUM_LiquidityPositionSnapshot_orderBy;
  ARBITRUM_LiquidityPosition_filter: ARBITRUM_LiquidityPosition_filter;
  ARBITRUM_LiquidityPosition_orderBy: ARBITRUM_LiquidityPosition_orderBy;
  ARBITRUM_Mint: ResolverTypeWrapper<ARBITRUM_Mint>;
  ARBITRUM_Mint_filter: ARBITRUM_Mint_filter;
  ARBITRUM_Mint_orderBy: ARBITRUM_Mint_orderBy;
  ARBITRUM_OrderDirection: ARBITRUM_OrderDirection;
  ARBITRUM_Pair: ResolverTypeWrapper<ARBITRUM_Pair>;
  ARBITRUM_PairDayData: ResolverTypeWrapper<ARBITRUM_PairDayData>;
  ARBITRUM_PairDayData_filter: ARBITRUM_PairDayData_filter;
  ARBITRUM_PairDayData_orderBy: ARBITRUM_PairDayData_orderBy;
  ARBITRUM_PairHourData: ResolverTypeWrapper<ARBITRUM_PairHourData>;
  ARBITRUM_PairHourData_filter: ARBITRUM_PairHourData_filter;
  ARBITRUM_PairHourData_orderBy: ARBITRUM_PairHourData_orderBy;
  ARBITRUM_Pair_filter: ARBITRUM_Pair_filter;
  ARBITRUM_Pair_orderBy: ARBITRUM_Pair_orderBy;
  ARBITRUM_Swap: ResolverTypeWrapper<ARBITRUM_Swap>;
  ARBITRUM_Swap_filter: ARBITRUM_Swap_filter;
  ARBITRUM_Swap_orderBy: ARBITRUM_Swap_orderBy;
  ARBITRUM_Token: ResolverTypeWrapper<ARBITRUM_Token>;
  ARBITRUM_TokenDayData: ResolverTypeWrapper<ARBITRUM_TokenDayData>;
  ARBITRUM_TokenDayData_filter: ARBITRUM_TokenDayData_filter;
  ARBITRUM_TokenDayData_orderBy: ARBITRUM_TokenDayData_orderBy;
  ARBITRUM_TokenHourData: ResolverTypeWrapper<ARBITRUM_TokenHourData>;
  ARBITRUM_TokenHourData_filter: ARBITRUM_TokenHourData_filter;
  ARBITRUM_TokenHourData_orderBy: ARBITRUM_TokenHourData_orderBy;
  ARBITRUM_Token_filter: ARBITRUM_Token_filter;
  ARBITRUM_Token_orderBy: ARBITRUM_Token_orderBy;
  ARBITRUM_Transaction: ResolverTypeWrapper<ARBITRUM_Transaction>;
  ARBITRUM_Transaction_filter: ARBITRUM_Transaction_filter;
  ARBITRUM_Transaction_orderBy: ARBITRUM_Transaction_orderBy;
  ARBITRUM_User: ResolverTypeWrapper<ARBITRUM_User>;
  ARBITRUM_User_filter: ARBITRUM_User_filter;
  ARBITRUM_User_orderBy: ARBITRUM_User_orderBy;
  ARBITRUM__Block_: ResolverTypeWrapper<ARBITRUM__Block_>;
  ARBITRUM__Meta_: ResolverTypeWrapper<ARBITRUM__Meta_>;
  FANTOM_BigDecimal: ResolverTypeWrapper<Scalars['FANTOM_BigDecimal']>;
  FANTOM_Block_height: FANTOM_Block_height;
  FANTOM_Bundle: ResolverTypeWrapper<FANTOM_Bundle>;
  FANTOM_Bundle_filter: FANTOM_Bundle_filter;
  FANTOM_Bundle_orderBy: FANTOM_Bundle_orderBy;
  FANTOM_Burn: ResolverTypeWrapper<FANTOM_Burn>;
  FANTOM_Burn_filter: FANTOM_Burn_filter;
  FANTOM_Burn_orderBy: FANTOM_Burn_orderBy;
  FANTOM_Bytes: ResolverTypeWrapper<Scalars['FANTOM_Bytes']>;
  FANTOM_DayData: ResolverTypeWrapper<FANTOM_DayData>;
  FANTOM_DayData_filter: FANTOM_DayData_filter;
  FANTOM_DayData_orderBy: FANTOM_DayData_orderBy;
  FANTOM_Factory: ResolverTypeWrapper<FANTOM_Factory>;
  FANTOM_Factory_filter: FANTOM_Factory_filter;
  FANTOM_Factory_orderBy: FANTOM_Factory_orderBy;
  FANTOM_HourData: ResolverTypeWrapper<FANTOM_HourData>;
  FANTOM_HourData_filter: FANTOM_HourData_filter;
  FANTOM_HourData_orderBy: FANTOM_HourData_orderBy;
  FANTOM_LiquidityPosition: ResolverTypeWrapper<FANTOM_LiquidityPosition>;
  FANTOM_LiquidityPositionSnapshot: ResolverTypeWrapper<FANTOM_LiquidityPositionSnapshot>;
  FANTOM_LiquidityPositionSnapshot_filter: FANTOM_LiquidityPositionSnapshot_filter;
  FANTOM_LiquidityPositionSnapshot_orderBy: FANTOM_LiquidityPositionSnapshot_orderBy;
  FANTOM_LiquidityPosition_filter: FANTOM_LiquidityPosition_filter;
  FANTOM_LiquidityPosition_orderBy: FANTOM_LiquidityPosition_orderBy;
  FANTOM_Mint: ResolverTypeWrapper<FANTOM_Mint>;
  FANTOM_Mint_filter: FANTOM_Mint_filter;
  FANTOM_Mint_orderBy: FANTOM_Mint_orderBy;
  FANTOM_OrderDirection: FANTOM_OrderDirection;
  FANTOM_Pair: ResolverTypeWrapper<FANTOM_Pair>;
  FANTOM_PairDayData: ResolverTypeWrapper<FANTOM_PairDayData>;
  FANTOM_PairDayData_filter: FANTOM_PairDayData_filter;
  FANTOM_PairDayData_orderBy: FANTOM_PairDayData_orderBy;
  FANTOM_PairHourData: ResolverTypeWrapper<FANTOM_PairHourData>;
  FANTOM_PairHourData_filter: FANTOM_PairHourData_filter;
  FANTOM_PairHourData_orderBy: FANTOM_PairHourData_orderBy;
  FANTOM_Pair_filter: FANTOM_Pair_filter;
  FANTOM_Pair_orderBy: FANTOM_Pair_orderBy;
  FANTOM_Swap: ResolverTypeWrapper<FANTOM_Swap>;
  FANTOM_Swap_filter: FANTOM_Swap_filter;
  FANTOM_Swap_orderBy: FANTOM_Swap_orderBy;
  FANTOM_Token: ResolverTypeWrapper<FANTOM_Token>;
  FANTOM_TokenDayData: ResolverTypeWrapper<FANTOM_TokenDayData>;
  FANTOM_TokenDayData_filter: FANTOM_TokenDayData_filter;
  FANTOM_TokenDayData_orderBy: FANTOM_TokenDayData_orderBy;
  FANTOM_TokenHourData: ResolverTypeWrapper<FANTOM_TokenHourData>;
  FANTOM_TokenHourData_filter: FANTOM_TokenHourData_filter;
  FANTOM_TokenHourData_orderBy: FANTOM_TokenHourData_orderBy;
  FANTOM_Token_filter: FANTOM_Token_filter;
  FANTOM_Token_orderBy: FANTOM_Token_orderBy;
  FANTOM_Transaction: ResolverTypeWrapper<FANTOM_Transaction>;
  FANTOM_Transaction_filter: FANTOM_Transaction_filter;
  FANTOM_Transaction_orderBy: FANTOM_Transaction_orderBy;
  FANTOM_User: ResolverTypeWrapper<FANTOM_User>;
  FANTOM_User_filter: FANTOM_User_filter;
  FANTOM_User_orderBy: FANTOM_User_orderBy;
  FANTOM__Block_: ResolverTypeWrapper<FANTOM__Block_>;
  FANTOM__Meta_: ResolverTypeWrapper<FANTOM__Meta_>;
  XDAI_BigDecimal: ResolverTypeWrapper<Scalars['XDAI_BigDecimal']>;
  XDAI_Block_height: XDAI_Block_height;
  XDAI_Bundle: ResolverTypeWrapper<XDAI_Bundle>;
  XDAI_Bundle_filter: XDAI_Bundle_filter;
  XDAI_Bundle_orderBy: XDAI_Bundle_orderBy;
  XDAI_Burn: ResolverTypeWrapper<XDAI_Burn>;
  XDAI_Burn_filter: XDAI_Burn_filter;
  XDAI_Burn_orderBy: XDAI_Burn_orderBy;
  XDAI_Bytes: ResolverTypeWrapper<Scalars['XDAI_Bytes']>;
  XDAI_DayData: ResolverTypeWrapper<XDAI_DayData>;
  XDAI_DayData_filter: XDAI_DayData_filter;
  XDAI_DayData_orderBy: XDAI_DayData_orderBy;
  XDAI_Factory: ResolverTypeWrapper<XDAI_Factory>;
  XDAI_Factory_filter: XDAI_Factory_filter;
  XDAI_Factory_orderBy: XDAI_Factory_orderBy;
  XDAI_HourData: ResolverTypeWrapper<XDAI_HourData>;
  XDAI_HourData_filter: XDAI_HourData_filter;
  XDAI_HourData_orderBy: XDAI_HourData_orderBy;
  XDAI_LiquidityPosition: ResolverTypeWrapper<XDAI_LiquidityPosition>;
  XDAI_LiquidityPositionSnapshot: ResolverTypeWrapper<XDAI_LiquidityPositionSnapshot>;
  XDAI_LiquidityPositionSnapshot_filter: XDAI_LiquidityPositionSnapshot_filter;
  XDAI_LiquidityPositionSnapshot_orderBy: XDAI_LiquidityPositionSnapshot_orderBy;
  XDAI_LiquidityPosition_filter: XDAI_LiquidityPosition_filter;
  XDAI_LiquidityPosition_orderBy: XDAI_LiquidityPosition_orderBy;
  XDAI_Mint: ResolverTypeWrapper<XDAI_Mint>;
  XDAI_Mint_filter: XDAI_Mint_filter;
  XDAI_Mint_orderBy: XDAI_Mint_orderBy;
  XDAI_OrderDirection: XDAI_OrderDirection;
  XDAI_Pair: ResolverTypeWrapper<XDAI_Pair>;
  XDAI_PairDayData: ResolverTypeWrapper<XDAI_PairDayData>;
  XDAI_PairDayData_filter: XDAI_PairDayData_filter;
  XDAI_PairDayData_orderBy: XDAI_PairDayData_orderBy;
  XDAI_PairHourData: ResolverTypeWrapper<XDAI_PairHourData>;
  XDAI_PairHourData_filter: XDAI_PairHourData_filter;
  XDAI_PairHourData_orderBy: XDAI_PairHourData_orderBy;
  XDAI_Pair_filter: XDAI_Pair_filter;
  XDAI_Pair_orderBy: XDAI_Pair_orderBy;
  XDAI_Swap: ResolverTypeWrapper<XDAI_Swap>;
  XDAI_Swap_filter: XDAI_Swap_filter;
  XDAI_Swap_orderBy: XDAI_Swap_orderBy;
  XDAI_Token: ResolverTypeWrapper<XDAI_Token>;
  XDAI_TokenDayData: ResolverTypeWrapper<XDAI_TokenDayData>;
  XDAI_TokenDayData_filter: XDAI_TokenDayData_filter;
  XDAI_TokenDayData_orderBy: XDAI_TokenDayData_orderBy;
  XDAI_TokenHourData: ResolverTypeWrapper<XDAI_TokenHourData>;
  XDAI_TokenHourData_filter: XDAI_TokenHourData_filter;
  XDAI_TokenHourData_orderBy: XDAI_TokenHourData_orderBy;
  XDAI_Token_filter: XDAI_Token_filter;
  XDAI_Token_orderBy: XDAI_Token_orderBy;
  XDAI_Transaction: ResolverTypeWrapper<XDAI_Transaction>;
  XDAI_Transaction_filter: XDAI_Transaction_filter;
  XDAI_Transaction_orderBy: XDAI_Transaction_orderBy;
  XDAI_User: ResolverTypeWrapper<XDAI_User>;
  XDAI_User_filter: XDAI_User_filter;
  XDAI_User_orderBy: XDAI_User_orderBy;
  XDAI__Block_: ResolverTypeWrapper<XDAI__Block_>;
  XDAI__Meta_: ResolverTypeWrapper<XDAI__Meta_>;
  AVALANCHE_BigDecimal: ResolverTypeWrapper<Scalars['AVALANCHE_BigDecimal']>;
  AVALANCHE_Block_height: AVALANCHE_Block_height;
  AVALANCHE_Bundle: ResolverTypeWrapper<AVALANCHE_Bundle>;
  AVALANCHE_Bundle_filter: AVALANCHE_Bundle_filter;
  AVALANCHE_Bundle_orderBy: AVALANCHE_Bundle_orderBy;
  AVALANCHE_Burn: ResolverTypeWrapper<AVALANCHE_Burn>;
  AVALANCHE_Burn_filter: AVALANCHE_Burn_filter;
  AVALANCHE_Burn_orderBy: AVALANCHE_Burn_orderBy;
  AVALANCHE_Bytes: ResolverTypeWrapper<Scalars['AVALANCHE_Bytes']>;
  AVALANCHE_DayData: ResolverTypeWrapper<AVALANCHE_DayData>;
  AVALANCHE_DayData_filter: AVALANCHE_DayData_filter;
  AVALANCHE_DayData_orderBy: AVALANCHE_DayData_orderBy;
  AVALANCHE_Factory: ResolverTypeWrapper<AVALANCHE_Factory>;
  AVALANCHE_Factory_filter: AVALANCHE_Factory_filter;
  AVALANCHE_Factory_orderBy: AVALANCHE_Factory_orderBy;
  AVALANCHE_HourData: ResolverTypeWrapper<AVALANCHE_HourData>;
  AVALANCHE_HourData_filter: AVALANCHE_HourData_filter;
  AVALANCHE_HourData_orderBy: AVALANCHE_HourData_orderBy;
  AVALANCHE_LiquidityPosition: ResolverTypeWrapper<AVALANCHE_LiquidityPosition>;
  AVALANCHE_LiquidityPositionSnapshot: ResolverTypeWrapper<AVALANCHE_LiquidityPositionSnapshot>;
  AVALANCHE_LiquidityPositionSnapshot_filter: AVALANCHE_LiquidityPositionSnapshot_filter;
  AVALANCHE_LiquidityPositionSnapshot_orderBy: AVALANCHE_LiquidityPositionSnapshot_orderBy;
  AVALANCHE_LiquidityPosition_filter: AVALANCHE_LiquidityPosition_filter;
  AVALANCHE_LiquidityPosition_orderBy: AVALANCHE_LiquidityPosition_orderBy;
  AVALANCHE_Mint: ResolverTypeWrapper<AVALANCHE_Mint>;
  AVALANCHE_Mint_filter: AVALANCHE_Mint_filter;
  AVALANCHE_Mint_orderBy: AVALANCHE_Mint_orderBy;
  AVALANCHE_OrderDirection: AVALANCHE_OrderDirection;
  AVALANCHE_Pair: ResolverTypeWrapper<AVALANCHE_Pair>;
  AVALANCHE_PairDayData: ResolverTypeWrapper<AVALANCHE_PairDayData>;
  AVALANCHE_PairDayData_filter: AVALANCHE_PairDayData_filter;
  AVALANCHE_PairDayData_orderBy: AVALANCHE_PairDayData_orderBy;
  AVALANCHE_PairHourData: ResolverTypeWrapper<AVALANCHE_PairHourData>;
  AVALANCHE_PairHourData_filter: AVALANCHE_PairHourData_filter;
  AVALANCHE_PairHourData_orderBy: AVALANCHE_PairHourData_orderBy;
  AVALANCHE_Pair_filter: AVALANCHE_Pair_filter;
  AVALANCHE_Pair_orderBy: AVALANCHE_Pair_orderBy;
  AVALANCHE_Swap: ResolverTypeWrapper<AVALANCHE_Swap>;
  AVALANCHE_Swap_filter: AVALANCHE_Swap_filter;
  AVALANCHE_Swap_orderBy: AVALANCHE_Swap_orderBy;
  AVALANCHE_Token: ResolverTypeWrapper<AVALANCHE_Token>;
  AVALANCHE_TokenDayData: ResolverTypeWrapper<AVALANCHE_TokenDayData>;
  AVALANCHE_TokenDayData_filter: AVALANCHE_TokenDayData_filter;
  AVALANCHE_TokenDayData_orderBy: AVALANCHE_TokenDayData_orderBy;
  AVALANCHE_TokenHourData: ResolverTypeWrapper<AVALANCHE_TokenHourData>;
  AVALANCHE_TokenHourData_filter: AVALANCHE_TokenHourData_filter;
  AVALANCHE_TokenHourData_orderBy: AVALANCHE_TokenHourData_orderBy;
  AVALANCHE_Token_filter: AVALANCHE_Token_filter;
  AVALANCHE_Token_orderBy: AVALANCHE_Token_orderBy;
  AVALANCHE_Transaction: ResolverTypeWrapper<AVALANCHE_Transaction>;
  AVALANCHE_Transaction_filter: AVALANCHE_Transaction_filter;
  AVALANCHE_Transaction_orderBy: AVALANCHE_Transaction_orderBy;
  AVALANCHE_User: ResolverTypeWrapper<AVALANCHE_User>;
  AVALANCHE_User_filter: AVALANCHE_User_filter;
  AVALANCHE_User_orderBy: AVALANCHE_User_orderBy;
  AVALANCHE__Block_: ResolverTypeWrapper<AVALANCHE__Block_>;
  AVALANCHE__Meta_: ResolverTypeWrapper<AVALANCHE__Meta_>;
  MATIC_BigDecimal: ResolverTypeWrapper<Scalars['MATIC_BigDecimal']>;
  MATIC_Block_height: MATIC_Block_height;
  MATIC_Bundle: ResolverTypeWrapper<MATIC_Bundle>;
  MATIC_Bundle_filter: MATIC_Bundle_filter;
  MATIC_Bundle_orderBy: MATIC_Bundle_orderBy;
  MATIC_Burn: ResolverTypeWrapper<MATIC_Burn>;
  MATIC_Burn_filter: MATIC_Burn_filter;
  MATIC_Burn_orderBy: MATIC_Burn_orderBy;
  MATIC_Bytes: ResolverTypeWrapper<Scalars['MATIC_Bytes']>;
  MATIC_DayData: ResolverTypeWrapper<MATIC_DayData>;
  MATIC_DayData_filter: MATIC_DayData_filter;
  MATIC_DayData_orderBy: MATIC_DayData_orderBy;
  MATIC_Factory: ResolverTypeWrapper<MATIC_Factory>;
  MATIC_Factory_filter: MATIC_Factory_filter;
  MATIC_Factory_orderBy: MATIC_Factory_orderBy;
  MATIC_HourData: ResolverTypeWrapper<MATIC_HourData>;
  MATIC_HourData_filter: MATIC_HourData_filter;
  MATIC_HourData_orderBy: MATIC_HourData_orderBy;
  MATIC_LiquidityPosition: ResolverTypeWrapper<MATIC_LiquidityPosition>;
  MATIC_LiquidityPositionSnapshot: ResolverTypeWrapper<MATIC_LiquidityPositionSnapshot>;
  MATIC_LiquidityPositionSnapshot_filter: MATIC_LiquidityPositionSnapshot_filter;
  MATIC_LiquidityPositionSnapshot_orderBy: MATIC_LiquidityPositionSnapshot_orderBy;
  MATIC_LiquidityPosition_filter: MATIC_LiquidityPosition_filter;
  MATIC_LiquidityPosition_orderBy: MATIC_LiquidityPosition_orderBy;
  MATIC_Mint: ResolverTypeWrapper<MATIC_Mint>;
  MATIC_Mint_filter: MATIC_Mint_filter;
  MATIC_Mint_orderBy: MATIC_Mint_orderBy;
  MATIC_OrderDirection: MATIC_OrderDirection;
  MATIC_Pair: ResolverTypeWrapper<MATIC_Pair>;
  MATIC_PairDayData: ResolverTypeWrapper<MATIC_PairDayData>;
  MATIC_PairDayData_filter: MATIC_PairDayData_filter;
  MATIC_PairDayData_orderBy: MATIC_PairDayData_orderBy;
  MATIC_PairHourData: ResolverTypeWrapper<MATIC_PairHourData>;
  MATIC_PairHourData_filter: MATIC_PairHourData_filter;
  MATIC_PairHourData_orderBy: MATIC_PairHourData_orderBy;
  MATIC_Pair_filter: MATIC_Pair_filter;
  MATIC_Pair_orderBy: MATIC_Pair_orderBy;
  MATIC_Swap: ResolverTypeWrapper<MATIC_Swap>;
  MATIC_Swap_filter: MATIC_Swap_filter;
  MATIC_Swap_orderBy: MATIC_Swap_orderBy;
  MATIC_Token: ResolverTypeWrapper<MATIC_Token>;
  MATIC_TokenDayData: ResolverTypeWrapper<MATIC_TokenDayData>;
  MATIC_TokenDayData_filter: MATIC_TokenDayData_filter;
  MATIC_TokenDayData_orderBy: MATIC_TokenDayData_orderBy;
  MATIC_TokenHourData: ResolverTypeWrapper<MATIC_TokenHourData>;
  MATIC_TokenHourData_filter: MATIC_TokenHourData_filter;
  MATIC_TokenHourData_orderBy: MATIC_TokenHourData_orderBy;
  MATIC_Token_filter: MATIC_Token_filter;
  MATIC_Token_orderBy: MATIC_Token_orderBy;
  MATIC_Transaction: ResolverTypeWrapper<MATIC_Transaction>;
  MATIC_Transaction_filter: MATIC_Transaction_filter;
  MATIC_Transaction_orderBy: MATIC_Transaction_orderBy;
  MATIC_User: ResolverTypeWrapper<MATIC_User>;
  MATIC_User_filter: MATIC_User_filter;
  MATIC_User_orderBy: MATIC_User_orderBy;
  MATIC__Block_: ResolverTypeWrapper<MATIC__Block_>;
  MATIC__Meta_: ResolverTypeWrapper<MATIC__Meta_>;
  BSC_BigDecimal: ResolverTypeWrapper<Scalars['BSC_BigDecimal']>;
  BSC_Block_height: BSC_Block_height;
  BSC_Bundle: ResolverTypeWrapper<BSC_Bundle>;
  BSC_Bundle_filter: BSC_Bundle_filter;
  BSC_Bundle_orderBy: BSC_Bundle_orderBy;
  BSC_Burn: ResolverTypeWrapper<BSC_Burn>;
  BSC_Burn_filter: BSC_Burn_filter;
  BSC_Burn_orderBy: BSC_Burn_orderBy;
  BSC_Bytes: ResolverTypeWrapper<Scalars['BSC_Bytes']>;
  BSC_DayData: ResolverTypeWrapper<BSC_DayData>;
  BSC_DayData_filter: BSC_DayData_filter;
  BSC_DayData_orderBy: BSC_DayData_orderBy;
  BSC_Factory: ResolverTypeWrapper<BSC_Factory>;
  BSC_Factory_filter: BSC_Factory_filter;
  BSC_Factory_orderBy: BSC_Factory_orderBy;
  BSC_HourData: ResolverTypeWrapper<BSC_HourData>;
  BSC_HourData_filter: BSC_HourData_filter;
  BSC_HourData_orderBy: BSC_HourData_orderBy;
  BSC_LiquidityPosition: ResolverTypeWrapper<BSC_LiquidityPosition>;
  BSC_LiquidityPositionSnapshot: ResolverTypeWrapper<BSC_LiquidityPositionSnapshot>;
  BSC_LiquidityPositionSnapshot_filter: BSC_LiquidityPositionSnapshot_filter;
  BSC_LiquidityPositionSnapshot_orderBy: BSC_LiquidityPositionSnapshot_orderBy;
  BSC_LiquidityPosition_filter: BSC_LiquidityPosition_filter;
  BSC_LiquidityPosition_orderBy: BSC_LiquidityPosition_orderBy;
  BSC_Mint: ResolverTypeWrapper<BSC_Mint>;
  BSC_Mint_filter: BSC_Mint_filter;
  BSC_Mint_orderBy: BSC_Mint_orderBy;
  BSC_OrderDirection: BSC_OrderDirection;
  BSC_Pair: ResolverTypeWrapper<BSC_Pair>;
  BSC_PairDayData: ResolverTypeWrapper<BSC_PairDayData>;
  BSC_PairDayData_filter: BSC_PairDayData_filter;
  BSC_PairDayData_orderBy: BSC_PairDayData_orderBy;
  BSC_PairHourData: ResolverTypeWrapper<BSC_PairHourData>;
  BSC_PairHourData_filter: BSC_PairHourData_filter;
  BSC_PairHourData_orderBy: BSC_PairHourData_orderBy;
  BSC_Pair_filter: BSC_Pair_filter;
  BSC_Pair_orderBy: BSC_Pair_orderBy;
  BSC_Swap: ResolverTypeWrapper<BSC_Swap>;
  BSC_Swap_filter: BSC_Swap_filter;
  BSC_Swap_orderBy: BSC_Swap_orderBy;
  BSC_Token: ResolverTypeWrapper<BSC_Token>;
  BSC_TokenDayData: ResolverTypeWrapper<BSC_TokenDayData>;
  BSC_TokenDayData_filter: BSC_TokenDayData_filter;
  BSC_TokenDayData_orderBy: BSC_TokenDayData_orderBy;
  BSC_TokenHourData: ResolverTypeWrapper<BSC_TokenHourData>;
  BSC_TokenHourData_filter: BSC_TokenHourData_filter;
  BSC_TokenHourData_orderBy: BSC_TokenHourData_orderBy;
  BSC_Token_filter: BSC_Token_filter;
  BSC_Token_orderBy: BSC_Token_orderBy;
  BSC_Transaction: ResolverTypeWrapper<BSC_Transaction>;
  BSC_Transaction_filter: BSC_Transaction_filter;
  BSC_Transaction_orderBy: BSC_Transaction_orderBy;
  BSC_User: ResolverTypeWrapper<BSC_User>;
  BSC_User_filter: BSC_User_filter;
  BSC_User_orderBy: BSC_User_orderBy;
  BSC__Block_: ResolverTypeWrapper<BSC__Block_>;
  BSC__Meta_: ResolverTypeWrapper<BSC__Meta_>;
}>;

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = ResolversObject<{
  Query: {};
  Subscription: {};
  ETHEREUM_BigDecimal: Scalars['ETHEREUM_BigDecimal'];
  BigInt: Scalars['BigInt'];
  ETHEREUM_Block_height: ETHEREUM_Block_height;
  Boolean: Scalars['Boolean'];
  ETHEREUM_Bundle: ETHEREUM_Bundle;
  ETHEREUM_Bundle_filter: ETHEREUM_Bundle_filter;
  ETHEREUM_Burn: ETHEREUM_Burn;
  ETHEREUM_Burn_filter: ETHEREUM_Burn_filter;
  ETHEREUM_Bytes: Scalars['ETHEREUM_Bytes'];
  ETHEREUM_DayData: ETHEREUM_DayData;
  ETHEREUM_DayData_filter: ETHEREUM_DayData_filter;
  ETHEREUM_Factory: ETHEREUM_Factory;
  ETHEREUM_Factory_filter: ETHEREUM_Factory_filter;
  Float: Scalars['Float'];
  ETHEREUM_HourData: ETHEREUM_HourData;
  ETHEREUM_HourData_filter: ETHEREUM_HourData_filter;
  ID: Scalars['ID'];
  Int: Scalars['Int'];
  ETHEREUM_LiquidityPosition: ETHEREUM_LiquidityPosition;
  ETHEREUM_LiquidityPositionSnapshot: ETHEREUM_LiquidityPositionSnapshot;
  ETHEREUM_LiquidityPositionSnapshot_filter: ETHEREUM_LiquidityPositionSnapshot_filter;
  ETHEREUM_LiquidityPosition_filter: ETHEREUM_LiquidityPosition_filter;
  ETHEREUM_Mint: ETHEREUM_Mint;
  ETHEREUM_Mint_filter: ETHEREUM_Mint_filter;
  ETHEREUM_Pair: ETHEREUM_Pair;
  ETHEREUM_PairDayData: ETHEREUM_PairDayData;
  ETHEREUM_PairDayData_filter: ETHEREUM_PairDayData_filter;
  ETHEREUM_PairHourData: ETHEREUM_PairHourData;
  ETHEREUM_PairHourData_filter: ETHEREUM_PairHourData_filter;
  ETHEREUM_Pair_filter: ETHEREUM_Pair_filter;
  String: Scalars['String'];
  ETHEREUM_Swap: ETHEREUM_Swap;
  ETHEREUM_Swap_filter: ETHEREUM_Swap_filter;
  ETHEREUM_Token: ETHEREUM_Token;
  ETHEREUM_TokenDayData: ETHEREUM_TokenDayData;
  ETHEREUM_TokenDayData_filter: ETHEREUM_TokenDayData_filter;
  ETHEREUM_TokenHourData: ETHEREUM_TokenHourData;
  ETHEREUM_TokenHourData_filter: ETHEREUM_TokenHourData_filter;
  ETHEREUM_Token_filter: ETHEREUM_Token_filter;
  ETHEREUM_Transaction: ETHEREUM_Transaction;
  ETHEREUM_Transaction_filter: ETHEREUM_Transaction_filter;
  ETHEREUM_User: ETHEREUM_User;
  ETHEREUM_User_filter: ETHEREUM_User_filter;
  ETHEREUM__Block_: ETHEREUM__Block_;
  ETHEREUM__Meta_: ETHEREUM__Meta_;
  MOONRIVER_BigDecimal: Scalars['MOONRIVER_BigDecimal'];
  MOONRIVER_Block_height: MOONRIVER_Block_height;
  MOONRIVER_Bundle: MOONRIVER_Bundle;
  MOONRIVER_Bundle_filter: MOONRIVER_Bundle_filter;
  MOONRIVER_Burn: MOONRIVER_Burn;
  MOONRIVER_Burn_filter: MOONRIVER_Burn_filter;
  MOONRIVER_Bytes: Scalars['MOONRIVER_Bytes'];
  MOONRIVER_DayData: MOONRIVER_DayData;
  MOONRIVER_DayData_filter: MOONRIVER_DayData_filter;
  MOONRIVER_Factory: MOONRIVER_Factory;
  MOONRIVER_Factory_filter: MOONRIVER_Factory_filter;
  MOONRIVER_HourData: MOONRIVER_HourData;
  MOONRIVER_HourData_filter: MOONRIVER_HourData_filter;
  MOONRIVER_LiquidityPosition: MOONRIVER_LiquidityPosition;
  MOONRIVER_LiquidityPositionSnapshot: MOONRIVER_LiquidityPositionSnapshot;
  MOONRIVER_LiquidityPositionSnapshot_filter: MOONRIVER_LiquidityPositionSnapshot_filter;
  MOONRIVER_LiquidityPosition_filter: MOONRIVER_LiquidityPosition_filter;
  MOONRIVER_Mint: MOONRIVER_Mint;
  MOONRIVER_Mint_filter: MOONRIVER_Mint_filter;
  MOONRIVER_Pair: MOONRIVER_Pair;
  MOONRIVER_PairDayData: MOONRIVER_PairDayData;
  MOONRIVER_PairDayData_filter: MOONRIVER_PairDayData_filter;
  MOONRIVER_PairHourData: MOONRIVER_PairHourData;
  MOONRIVER_PairHourData_filter: MOONRIVER_PairHourData_filter;
  MOONRIVER_Pair_filter: MOONRIVER_Pair_filter;
  MOONRIVER_Swap: MOONRIVER_Swap;
  MOONRIVER_Swap_filter: MOONRIVER_Swap_filter;
  MOONRIVER_Token: MOONRIVER_Token;
  MOONRIVER_TokenDayData: MOONRIVER_TokenDayData;
  MOONRIVER_TokenDayData_filter: MOONRIVER_TokenDayData_filter;
  MOONRIVER_TokenHourData: MOONRIVER_TokenHourData;
  MOONRIVER_TokenHourData_filter: MOONRIVER_TokenHourData_filter;
  MOONRIVER_Token_filter: MOONRIVER_Token_filter;
  MOONRIVER_Transaction: MOONRIVER_Transaction;
  MOONRIVER_Transaction_filter: MOONRIVER_Transaction_filter;
  MOONRIVER_User: MOONRIVER_User;
  MOONRIVER_User_filter: MOONRIVER_User_filter;
  MOONRIVER__Block_: MOONRIVER__Block_;
  MOONRIVER__Meta_: MOONRIVER__Meta_;
  ARBITRUM_BigDecimal: Scalars['ARBITRUM_BigDecimal'];
  ARBITRUM_Block_height: ARBITRUM_Block_height;
  ARBITRUM_Bundle: ARBITRUM_Bundle;
  ARBITRUM_Bundle_filter: ARBITRUM_Bundle_filter;
  ARBITRUM_Burn: ARBITRUM_Burn;
  ARBITRUM_Burn_filter: ARBITRUM_Burn_filter;
  ARBITRUM_Bytes: Scalars['ARBITRUM_Bytes'];
  ARBITRUM_DayData: ARBITRUM_DayData;
  ARBITRUM_DayData_filter: ARBITRUM_DayData_filter;
  ARBITRUM_Factory: ARBITRUM_Factory;
  ARBITRUM_Factory_filter: ARBITRUM_Factory_filter;
  ARBITRUM_HourData: ARBITRUM_HourData;
  ARBITRUM_HourData_filter: ARBITRUM_HourData_filter;
  ARBITRUM_LiquidityPosition: ARBITRUM_LiquidityPosition;
  ARBITRUM_LiquidityPositionSnapshot: ARBITRUM_LiquidityPositionSnapshot;
  ARBITRUM_LiquidityPositionSnapshot_filter: ARBITRUM_LiquidityPositionSnapshot_filter;
  ARBITRUM_LiquidityPosition_filter: ARBITRUM_LiquidityPosition_filter;
  ARBITRUM_Mint: ARBITRUM_Mint;
  ARBITRUM_Mint_filter: ARBITRUM_Mint_filter;
  ARBITRUM_Pair: ARBITRUM_Pair;
  ARBITRUM_PairDayData: ARBITRUM_PairDayData;
  ARBITRUM_PairDayData_filter: ARBITRUM_PairDayData_filter;
  ARBITRUM_PairHourData: ARBITRUM_PairHourData;
  ARBITRUM_PairHourData_filter: ARBITRUM_PairHourData_filter;
  ARBITRUM_Pair_filter: ARBITRUM_Pair_filter;
  ARBITRUM_Swap: ARBITRUM_Swap;
  ARBITRUM_Swap_filter: ARBITRUM_Swap_filter;
  ARBITRUM_Token: ARBITRUM_Token;
  ARBITRUM_TokenDayData: ARBITRUM_TokenDayData;
  ARBITRUM_TokenDayData_filter: ARBITRUM_TokenDayData_filter;
  ARBITRUM_TokenHourData: ARBITRUM_TokenHourData;
  ARBITRUM_TokenHourData_filter: ARBITRUM_TokenHourData_filter;
  ARBITRUM_Token_filter: ARBITRUM_Token_filter;
  ARBITRUM_Transaction: ARBITRUM_Transaction;
  ARBITRUM_Transaction_filter: ARBITRUM_Transaction_filter;
  ARBITRUM_User: ARBITRUM_User;
  ARBITRUM_User_filter: ARBITRUM_User_filter;
  ARBITRUM__Block_: ARBITRUM__Block_;
  ARBITRUM__Meta_: ARBITRUM__Meta_;
  FANTOM_BigDecimal: Scalars['FANTOM_BigDecimal'];
  FANTOM_Block_height: FANTOM_Block_height;
  FANTOM_Bundle: FANTOM_Bundle;
  FANTOM_Bundle_filter: FANTOM_Bundle_filter;
  FANTOM_Burn: FANTOM_Burn;
  FANTOM_Burn_filter: FANTOM_Burn_filter;
  FANTOM_Bytes: Scalars['FANTOM_Bytes'];
  FANTOM_DayData: FANTOM_DayData;
  FANTOM_DayData_filter: FANTOM_DayData_filter;
  FANTOM_Factory: FANTOM_Factory;
  FANTOM_Factory_filter: FANTOM_Factory_filter;
  FANTOM_HourData: FANTOM_HourData;
  FANTOM_HourData_filter: FANTOM_HourData_filter;
  FANTOM_LiquidityPosition: FANTOM_LiquidityPosition;
  FANTOM_LiquidityPositionSnapshot: FANTOM_LiquidityPositionSnapshot;
  FANTOM_LiquidityPositionSnapshot_filter: FANTOM_LiquidityPositionSnapshot_filter;
  FANTOM_LiquidityPosition_filter: FANTOM_LiquidityPosition_filter;
  FANTOM_Mint: FANTOM_Mint;
  FANTOM_Mint_filter: FANTOM_Mint_filter;
  FANTOM_Pair: FANTOM_Pair;
  FANTOM_PairDayData: FANTOM_PairDayData;
  FANTOM_PairDayData_filter: FANTOM_PairDayData_filter;
  FANTOM_PairHourData: FANTOM_PairHourData;
  FANTOM_PairHourData_filter: FANTOM_PairHourData_filter;
  FANTOM_Pair_filter: FANTOM_Pair_filter;
  FANTOM_Swap: FANTOM_Swap;
  FANTOM_Swap_filter: FANTOM_Swap_filter;
  FANTOM_Token: FANTOM_Token;
  FANTOM_TokenDayData: FANTOM_TokenDayData;
  FANTOM_TokenDayData_filter: FANTOM_TokenDayData_filter;
  FANTOM_TokenHourData: FANTOM_TokenHourData;
  FANTOM_TokenHourData_filter: FANTOM_TokenHourData_filter;
  FANTOM_Token_filter: FANTOM_Token_filter;
  FANTOM_Transaction: FANTOM_Transaction;
  FANTOM_Transaction_filter: FANTOM_Transaction_filter;
  FANTOM_User: FANTOM_User;
  FANTOM_User_filter: FANTOM_User_filter;
  FANTOM__Block_: FANTOM__Block_;
  FANTOM__Meta_: FANTOM__Meta_;
  XDAI_BigDecimal: Scalars['XDAI_BigDecimal'];
  XDAI_Block_height: XDAI_Block_height;
  XDAI_Bundle: XDAI_Bundle;
  XDAI_Bundle_filter: XDAI_Bundle_filter;
  XDAI_Burn: XDAI_Burn;
  XDAI_Burn_filter: XDAI_Burn_filter;
  XDAI_Bytes: Scalars['XDAI_Bytes'];
  XDAI_DayData: XDAI_DayData;
  XDAI_DayData_filter: XDAI_DayData_filter;
  XDAI_Factory: XDAI_Factory;
  XDAI_Factory_filter: XDAI_Factory_filter;
  XDAI_HourData: XDAI_HourData;
  XDAI_HourData_filter: XDAI_HourData_filter;
  XDAI_LiquidityPosition: XDAI_LiquidityPosition;
  XDAI_LiquidityPositionSnapshot: XDAI_LiquidityPositionSnapshot;
  XDAI_LiquidityPositionSnapshot_filter: XDAI_LiquidityPositionSnapshot_filter;
  XDAI_LiquidityPosition_filter: XDAI_LiquidityPosition_filter;
  XDAI_Mint: XDAI_Mint;
  XDAI_Mint_filter: XDAI_Mint_filter;
  XDAI_Pair: XDAI_Pair;
  XDAI_PairDayData: XDAI_PairDayData;
  XDAI_PairDayData_filter: XDAI_PairDayData_filter;
  XDAI_PairHourData: XDAI_PairHourData;
  XDAI_PairHourData_filter: XDAI_PairHourData_filter;
  XDAI_Pair_filter: XDAI_Pair_filter;
  XDAI_Swap: XDAI_Swap;
  XDAI_Swap_filter: XDAI_Swap_filter;
  XDAI_Token: XDAI_Token;
  XDAI_TokenDayData: XDAI_TokenDayData;
  XDAI_TokenDayData_filter: XDAI_TokenDayData_filter;
  XDAI_TokenHourData: XDAI_TokenHourData;
  XDAI_TokenHourData_filter: XDAI_TokenHourData_filter;
  XDAI_Token_filter: XDAI_Token_filter;
  XDAI_Transaction: XDAI_Transaction;
  XDAI_Transaction_filter: XDAI_Transaction_filter;
  XDAI_User: XDAI_User;
  XDAI_User_filter: XDAI_User_filter;
  XDAI__Block_: XDAI__Block_;
  XDAI__Meta_: XDAI__Meta_;
  AVALANCHE_BigDecimal: Scalars['AVALANCHE_BigDecimal'];
  AVALANCHE_Block_height: AVALANCHE_Block_height;
  AVALANCHE_Bundle: AVALANCHE_Bundle;
  AVALANCHE_Bundle_filter: AVALANCHE_Bundle_filter;
  AVALANCHE_Burn: AVALANCHE_Burn;
  AVALANCHE_Burn_filter: AVALANCHE_Burn_filter;
  AVALANCHE_Bytes: Scalars['AVALANCHE_Bytes'];
  AVALANCHE_DayData: AVALANCHE_DayData;
  AVALANCHE_DayData_filter: AVALANCHE_DayData_filter;
  AVALANCHE_Factory: AVALANCHE_Factory;
  AVALANCHE_Factory_filter: AVALANCHE_Factory_filter;
  AVALANCHE_HourData: AVALANCHE_HourData;
  AVALANCHE_HourData_filter: AVALANCHE_HourData_filter;
  AVALANCHE_LiquidityPosition: AVALANCHE_LiquidityPosition;
  AVALANCHE_LiquidityPositionSnapshot: AVALANCHE_LiquidityPositionSnapshot;
  AVALANCHE_LiquidityPositionSnapshot_filter: AVALANCHE_LiquidityPositionSnapshot_filter;
  AVALANCHE_LiquidityPosition_filter: AVALANCHE_LiquidityPosition_filter;
  AVALANCHE_Mint: AVALANCHE_Mint;
  AVALANCHE_Mint_filter: AVALANCHE_Mint_filter;
  AVALANCHE_Pair: AVALANCHE_Pair;
  AVALANCHE_PairDayData: AVALANCHE_PairDayData;
  AVALANCHE_PairDayData_filter: AVALANCHE_PairDayData_filter;
  AVALANCHE_PairHourData: AVALANCHE_PairHourData;
  AVALANCHE_PairHourData_filter: AVALANCHE_PairHourData_filter;
  AVALANCHE_Pair_filter: AVALANCHE_Pair_filter;
  AVALANCHE_Swap: AVALANCHE_Swap;
  AVALANCHE_Swap_filter: AVALANCHE_Swap_filter;
  AVALANCHE_Token: AVALANCHE_Token;
  AVALANCHE_TokenDayData: AVALANCHE_TokenDayData;
  AVALANCHE_TokenDayData_filter: AVALANCHE_TokenDayData_filter;
  AVALANCHE_TokenHourData: AVALANCHE_TokenHourData;
  AVALANCHE_TokenHourData_filter: AVALANCHE_TokenHourData_filter;
  AVALANCHE_Token_filter: AVALANCHE_Token_filter;
  AVALANCHE_Transaction: AVALANCHE_Transaction;
  AVALANCHE_Transaction_filter: AVALANCHE_Transaction_filter;
  AVALANCHE_User: AVALANCHE_User;
  AVALANCHE_User_filter: AVALANCHE_User_filter;
  AVALANCHE__Block_: AVALANCHE__Block_;
  AVALANCHE__Meta_: AVALANCHE__Meta_;
  MATIC_BigDecimal: Scalars['MATIC_BigDecimal'];
  MATIC_Block_height: MATIC_Block_height;
  MATIC_Bundle: MATIC_Bundle;
  MATIC_Bundle_filter: MATIC_Bundle_filter;
  MATIC_Burn: MATIC_Burn;
  MATIC_Burn_filter: MATIC_Burn_filter;
  MATIC_Bytes: Scalars['MATIC_Bytes'];
  MATIC_DayData: MATIC_DayData;
  MATIC_DayData_filter: MATIC_DayData_filter;
  MATIC_Factory: MATIC_Factory;
  MATIC_Factory_filter: MATIC_Factory_filter;
  MATIC_HourData: MATIC_HourData;
  MATIC_HourData_filter: MATIC_HourData_filter;
  MATIC_LiquidityPosition: MATIC_LiquidityPosition;
  MATIC_LiquidityPositionSnapshot: MATIC_LiquidityPositionSnapshot;
  MATIC_LiquidityPositionSnapshot_filter: MATIC_LiquidityPositionSnapshot_filter;
  MATIC_LiquidityPosition_filter: MATIC_LiquidityPosition_filter;
  MATIC_Mint: MATIC_Mint;
  MATIC_Mint_filter: MATIC_Mint_filter;
  MATIC_Pair: MATIC_Pair;
  MATIC_PairDayData: MATIC_PairDayData;
  MATIC_PairDayData_filter: MATIC_PairDayData_filter;
  MATIC_PairHourData: MATIC_PairHourData;
  MATIC_PairHourData_filter: MATIC_PairHourData_filter;
  MATIC_Pair_filter: MATIC_Pair_filter;
  MATIC_Swap: MATIC_Swap;
  MATIC_Swap_filter: MATIC_Swap_filter;
  MATIC_Token: MATIC_Token;
  MATIC_TokenDayData: MATIC_TokenDayData;
  MATIC_TokenDayData_filter: MATIC_TokenDayData_filter;
  MATIC_TokenHourData: MATIC_TokenHourData;
  MATIC_TokenHourData_filter: MATIC_TokenHourData_filter;
  MATIC_Token_filter: MATIC_Token_filter;
  MATIC_Transaction: MATIC_Transaction;
  MATIC_Transaction_filter: MATIC_Transaction_filter;
  MATIC_User: MATIC_User;
  MATIC_User_filter: MATIC_User_filter;
  MATIC__Block_: MATIC__Block_;
  MATIC__Meta_: MATIC__Meta_;
  BSC_BigDecimal: Scalars['BSC_BigDecimal'];
  BSC_Block_height: BSC_Block_height;
  BSC_Bundle: BSC_Bundle;
  BSC_Bundle_filter: BSC_Bundle_filter;
  BSC_Burn: BSC_Burn;
  BSC_Burn_filter: BSC_Burn_filter;
  BSC_Bytes: Scalars['BSC_Bytes'];
  BSC_DayData: BSC_DayData;
  BSC_DayData_filter: BSC_DayData_filter;
  BSC_Factory: BSC_Factory;
  BSC_Factory_filter: BSC_Factory_filter;
  BSC_HourData: BSC_HourData;
  BSC_HourData_filter: BSC_HourData_filter;
  BSC_LiquidityPosition: BSC_LiquidityPosition;
  BSC_LiquidityPositionSnapshot: BSC_LiquidityPositionSnapshot;
  BSC_LiquidityPositionSnapshot_filter: BSC_LiquidityPositionSnapshot_filter;
  BSC_LiquidityPosition_filter: BSC_LiquidityPosition_filter;
  BSC_Mint: BSC_Mint;
  BSC_Mint_filter: BSC_Mint_filter;
  BSC_Pair: BSC_Pair;
  BSC_PairDayData: BSC_PairDayData;
  BSC_PairDayData_filter: BSC_PairDayData_filter;
  BSC_PairHourData: BSC_PairHourData;
  BSC_PairHourData_filter: BSC_PairHourData_filter;
  BSC_Pair_filter: BSC_Pair_filter;
  BSC_Swap: BSC_Swap;
  BSC_Swap_filter: BSC_Swap_filter;
  BSC_Token: BSC_Token;
  BSC_TokenDayData: BSC_TokenDayData;
  BSC_TokenDayData_filter: BSC_TokenDayData_filter;
  BSC_TokenHourData: BSC_TokenHourData;
  BSC_TokenHourData_filter: BSC_TokenHourData_filter;
  BSC_Token_filter: BSC_Token_filter;
  BSC_Transaction: BSC_Transaction;
  BSC_Transaction_filter: BSC_Transaction_filter;
  BSC_User: BSC_User;
  BSC_User_filter: BSC_User_filter;
  BSC__Block_: BSC__Block_;
  BSC__Meta_: BSC__Meta_;
}>;

export type QueryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{
  ETHEREUM_user?: Resolver<Maybe<ResolversTypes['ETHEREUM_User']>, ParentType, ContextType, RequireFields<QueryETHEREUM_userArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_users?: Resolver<Array<ResolversTypes['ETHEREUM_User']>, ParentType, ContextType, RequireFields<QueryETHEREUM_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_bundle?: Resolver<Maybe<ResolversTypes['ETHEREUM_Bundle']>, ParentType, ContextType, RequireFields<QueryETHEREUM_bundleArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_bundles?: Resolver<Array<ResolversTypes['ETHEREUM_Bundle']>, ParentType, ContextType, RequireFields<QueryETHEREUM_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_factory?: Resolver<Maybe<ResolversTypes['ETHEREUM_Factory']>, ParentType, ContextType, RequireFields<QueryETHEREUM_factoryArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_factories?: Resolver<Array<ResolversTypes['ETHEREUM_Factory']>, ParentType, ContextType, RequireFields<QueryETHEREUM_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_hourData?: Resolver<Maybe<ResolversTypes['ETHEREUM_HourData']>, ParentType, ContextType, RequireFields<QueryETHEREUM_hourDataArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_hourDatas?: Resolver<Array<ResolversTypes['ETHEREUM_HourData']>, ParentType, ContextType, RequireFields<QueryETHEREUM_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_dayData?: Resolver<Maybe<ResolversTypes['ETHEREUM_DayData']>, ParentType, ContextType, RequireFields<QueryETHEREUM_dayDataArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_dayDatas?: Resolver<Array<ResolversTypes['ETHEREUM_DayData']>, ParentType, ContextType, RequireFields<QueryETHEREUM_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_token?: Resolver<Maybe<ResolversTypes['ETHEREUM_Token']>, ParentType, ContextType, RequireFields<QueryETHEREUM_tokenArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_tokens?: Resolver<Array<ResolversTypes['ETHEREUM_Token']>, ParentType, ContextType, RequireFields<QueryETHEREUM_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_tokenHourData?: Resolver<Maybe<ResolversTypes['ETHEREUM_TokenHourData']>, ParentType, ContextType, RequireFields<QueryETHEREUM_tokenHourDataArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_tokenHourDatas?: Resolver<Array<ResolversTypes['ETHEREUM_TokenHourData']>, ParentType, ContextType, RequireFields<QueryETHEREUM_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_tokenDayData?: Resolver<Maybe<ResolversTypes['ETHEREUM_TokenDayData']>, ParentType, ContextType, RequireFields<QueryETHEREUM_tokenDayDataArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_tokenDayDatas?: Resolver<Array<ResolversTypes['ETHEREUM_TokenDayData']>, ParentType, ContextType, RequireFields<QueryETHEREUM_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_pair?: Resolver<Maybe<ResolversTypes['ETHEREUM_Pair']>, ParentType, ContextType, RequireFields<QueryETHEREUM_pairArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_pairs?: Resolver<Array<ResolversTypes['ETHEREUM_Pair']>, ParentType, ContextType, RequireFields<QueryETHEREUM_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_pairHourData?: Resolver<Maybe<ResolversTypes['ETHEREUM_PairHourData']>, ParentType, ContextType, RequireFields<QueryETHEREUM_pairHourDataArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_pairHourDatas?: Resolver<Array<ResolversTypes['ETHEREUM_PairHourData']>, ParentType, ContextType, RequireFields<QueryETHEREUM_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_pairDayData?: Resolver<Maybe<ResolversTypes['ETHEREUM_PairDayData']>, ParentType, ContextType, RequireFields<QueryETHEREUM_pairDayDataArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_pairDayDatas?: Resolver<Array<ResolversTypes['ETHEREUM_PairDayData']>, ParentType, ContextType, RequireFields<QueryETHEREUM_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_liquidityPosition?: Resolver<Maybe<ResolversTypes['ETHEREUM_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryETHEREUM_liquidityPositionArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_liquidityPositions?: Resolver<Array<ResolversTypes['ETHEREUM_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryETHEREUM_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_liquidityPositionSnapshot?: Resolver<Maybe<ResolversTypes['ETHEREUM_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryETHEREUM_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['ETHEREUM_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryETHEREUM_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_transaction?: Resolver<Maybe<ResolversTypes['ETHEREUM_Transaction']>, ParentType, ContextType, RequireFields<QueryETHEREUM_transactionArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_transactions?: Resolver<Array<ResolversTypes['ETHEREUM_Transaction']>, ParentType, ContextType, RequireFields<QueryETHEREUM_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_mint?: Resolver<Maybe<ResolversTypes['ETHEREUM_Mint']>, ParentType, ContextType, RequireFields<QueryETHEREUM_mintArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_mints?: Resolver<Array<ResolversTypes['ETHEREUM_Mint']>, ParentType, ContextType, RequireFields<QueryETHEREUM_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_burn?: Resolver<Maybe<ResolversTypes['ETHEREUM_Burn']>, ParentType, ContextType, RequireFields<QueryETHEREUM_burnArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_burns?: Resolver<Array<ResolversTypes['ETHEREUM_Burn']>, ParentType, ContextType, RequireFields<QueryETHEREUM_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_swap?: Resolver<Maybe<ResolversTypes['ETHEREUM_Swap']>, ParentType, ContextType, RequireFields<QueryETHEREUM_swapArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_swaps?: Resolver<Array<ResolversTypes['ETHEREUM_Swap']>, ParentType, ContextType, RequireFields<QueryETHEREUM_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_tokenSearch?: Resolver<Array<ResolversTypes['ETHEREUM_Token']>, ParentType, ContextType, RequireFields<QueryETHEREUM_tokenSearchArgs, 'text' | 'first' | 'skip' | 'subgraphError'>>;
  ETHEREUM_pairSearch?: Resolver<Array<ResolversTypes['ETHEREUM_Pair']>, ParentType, ContextType, RequireFields<QueryETHEREUM_pairSearchArgs, 'text' | 'first' | 'skip' | 'subgraphError'>>;
  ETHEREUM_userSearch?: Resolver<Array<ResolversTypes['ETHEREUM_User']>, ParentType, ContextType, RequireFields<QueryETHEREUM_userSearchArgs, 'text' | 'first' | 'skip' | 'subgraphError'>>;
  ETHEREUM__meta?: Resolver<Maybe<ResolversTypes['ETHEREUM__Meta_']>, ParentType, ContextType, Partial<QueryETHEREUM__metaArgs>>;
  MOONRIVER_user?: Resolver<Maybe<ResolversTypes['MOONRIVER_User']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_userArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_users?: Resolver<Array<ResolversTypes['MOONRIVER_User']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_bundle?: Resolver<Maybe<ResolversTypes['MOONRIVER_Bundle']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_bundleArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_bundles?: Resolver<Array<ResolversTypes['MOONRIVER_Bundle']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_factory?: Resolver<Maybe<ResolversTypes['MOONRIVER_Factory']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_factoryArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_factories?: Resolver<Array<ResolversTypes['MOONRIVER_Factory']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_hourData?: Resolver<Maybe<ResolversTypes['MOONRIVER_HourData']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_hourDataArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_hourDatas?: Resolver<Array<ResolversTypes['MOONRIVER_HourData']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_dayData?: Resolver<Maybe<ResolversTypes['MOONRIVER_DayData']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_dayDataArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_dayDatas?: Resolver<Array<ResolversTypes['MOONRIVER_DayData']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_token?: Resolver<Maybe<ResolversTypes['MOONRIVER_Token']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_tokenArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_tokens?: Resolver<Array<ResolversTypes['MOONRIVER_Token']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_tokenHourData?: Resolver<Maybe<ResolversTypes['MOONRIVER_TokenHourData']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_tokenHourDataArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_tokenHourDatas?: Resolver<Array<ResolversTypes['MOONRIVER_TokenHourData']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_tokenDayData?: Resolver<Maybe<ResolversTypes['MOONRIVER_TokenDayData']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_tokenDayDataArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_tokenDayDatas?: Resolver<Array<ResolversTypes['MOONRIVER_TokenDayData']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_pair?: Resolver<Maybe<ResolversTypes['MOONRIVER_Pair']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_pairArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_pairs?: Resolver<Array<ResolversTypes['MOONRIVER_Pair']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_pairHourData?: Resolver<Maybe<ResolversTypes['MOONRIVER_PairHourData']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_pairHourDataArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_pairHourDatas?: Resolver<Array<ResolversTypes['MOONRIVER_PairHourData']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_pairDayData?: Resolver<Maybe<ResolversTypes['MOONRIVER_PairDayData']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_pairDayDataArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_pairDayDatas?: Resolver<Array<ResolversTypes['MOONRIVER_PairDayData']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_liquidityPosition?: Resolver<Maybe<ResolversTypes['MOONRIVER_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_liquidityPositionArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_liquidityPositions?: Resolver<Array<ResolversTypes['MOONRIVER_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_liquidityPositionSnapshot?: Resolver<Maybe<ResolversTypes['MOONRIVER_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['MOONRIVER_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_transaction?: Resolver<Maybe<ResolversTypes['MOONRIVER_Transaction']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_transactionArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_transactions?: Resolver<Array<ResolversTypes['MOONRIVER_Transaction']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_mint?: Resolver<Maybe<ResolversTypes['MOONRIVER_Mint']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_mintArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_mints?: Resolver<Array<ResolversTypes['MOONRIVER_Mint']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_burn?: Resolver<Maybe<ResolversTypes['MOONRIVER_Burn']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_burnArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_burns?: Resolver<Array<ResolversTypes['MOONRIVER_Burn']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_swap?: Resolver<Maybe<ResolversTypes['MOONRIVER_Swap']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_swapArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_swaps?: Resolver<Array<ResolversTypes['MOONRIVER_Swap']>, ParentType, ContextType, RequireFields<QueryMOONRIVER_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER__meta?: Resolver<Maybe<ResolversTypes['MOONRIVER__Meta_']>, ParentType, ContextType, Partial<QueryMOONRIVER__metaArgs>>;
  ARBITRUM_user?: Resolver<Maybe<ResolversTypes['ARBITRUM_User']>, ParentType, ContextType, RequireFields<QueryARBITRUM_userArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_users?: Resolver<Array<ResolversTypes['ARBITRUM_User']>, ParentType, ContextType, RequireFields<QueryARBITRUM_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_bundle?: Resolver<Maybe<ResolversTypes['ARBITRUM_Bundle']>, ParentType, ContextType, RequireFields<QueryARBITRUM_bundleArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_bundles?: Resolver<Array<ResolversTypes['ARBITRUM_Bundle']>, ParentType, ContextType, RequireFields<QueryARBITRUM_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_factory?: Resolver<Maybe<ResolversTypes['ARBITRUM_Factory']>, ParentType, ContextType, RequireFields<QueryARBITRUM_factoryArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_factories?: Resolver<Array<ResolversTypes['ARBITRUM_Factory']>, ParentType, ContextType, RequireFields<QueryARBITRUM_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_hourData?: Resolver<Maybe<ResolversTypes['ARBITRUM_HourData']>, ParentType, ContextType, RequireFields<QueryARBITRUM_hourDataArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_hourDatas?: Resolver<Array<ResolversTypes['ARBITRUM_HourData']>, ParentType, ContextType, RequireFields<QueryARBITRUM_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_dayData?: Resolver<Maybe<ResolversTypes['ARBITRUM_DayData']>, ParentType, ContextType, RequireFields<QueryARBITRUM_dayDataArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_dayDatas?: Resolver<Array<ResolversTypes['ARBITRUM_DayData']>, ParentType, ContextType, RequireFields<QueryARBITRUM_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_token?: Resolver<Maybe<ResolversTypes['ARBITRUM_Token']>, ParentType, ContextType, RequireFields<QueryARBITRUM_tokenArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_tokens?: Resolver<Array<ResolversTypes['ARBITRUM_Token']>, ParentType, ContextType, RequireFields<QueryARBITRUM_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_tokenHourData?: Resolver<Maybe<ResolversTypes['ARBITRUM_TokenHourData']>, ParentType, ContextType, RequireFields<QueryARBITRUM_tokenHourDataArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_tokenHourDatas?: Resolver<Array<ResolversTypes['ARBITRUM_TokenHourData']>, ParentType, ContextType, RequireFields<QueryARBITRUM_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_tokenDayData?: Resolver<Maybe<ResolversTypes['ARBITRUM_TokenDayData']>, ParentType, ContextType, RequireFields<QueryARBITRUM_tokenDayDataArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_tokenDayDatas?: Resolver<Array<ResolversTypes['ARBITRUM_TokenDayData']>, ParentType, ContextType, RequireFields<QueryARBITRUM_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_pair?: Resolver<Maybe<ResolversTypes['ARBITRUM_Pair']>, ParentType, ContextType, RequireFields<QueryARBITRUM_pairArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_pairs?: Resolver<Array<ResolversTypes['ARBITRUM_Pair']>, ParentType, ContextType, RequireFields<QueryARBITRUM_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_pairHourData?: Resolver<Maybe<ResolversTypes['ARBITRUM_PairHourData']>, ParentType, ContextType, RequireFields<QueryARBITRUM_pairHourDataArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_pairHourDatas?: Resolver<Array<ResolversTypes['ARBITRUM_PairHourData']>, ParentType, ContextType, RequireFields<QueryARBITRUM_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_pairDayData?: Resolver<Maybe<ResolversTypes['ARBITRUM_PairDayData']>, ParentType, ContextType, RequireFields<QueryARBITRUM_pairDayDataArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_pairDayDatas?: Resolver<Array<ResolversTypes['ARBITRUM_PairDayData']>, ParentType, ContextType, RequireFields<QueryARBITRUM_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_liquidityPosition?: Resolver<Maybe<ResolversTypes['ARBITRUM_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryARBITRUM_liquidityPositionArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_liquidityPositions?: Resolver<Array<ResolversTypes['ARBITRUM_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryARBITRUM_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_liquidityPositionSnapshot?: Resolver<Maybe<ResolversTypes['ARBITRUM_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryARBITRUM_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['ARBITRUM_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryARBITRUM_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_transaction?: Resolver<Maybe<ResolversTypes['ARBITRUM_Transaction']>, ParentType, ContextType, RequireFields<QueryARBITRUM_transactionArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_transactions?: Resolver<Array<ResolversTypes['ARBITRUM_Transaction']>, ParentType, ContextType, RequireFields<QueryARBITRUM_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_mint?: Resolver<Maybe<ResolversTypes['ARBITRUM_Mint']>, ParentType, ContextType, RequireFields<QueryARBITRUM_mintArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_mints?: Resolver<Array<ResolversTypes['ARBITRUM_Mint']>, ParentType, ContextType, RequireFields<QueryARBITRUM_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_burn?: Resolver<Maybe<ResolversTypes['ARBITRUM_Burn']>, ParentType, ContextType, RequireFields<QueryARBITRUM_burnArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_burns?: Resolver<Array<ResolversTypes['ARBITRUM_Burn']>, ParentType, ContextType, RequireFields<QueryARBITRUM_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_swap?: Resolver<Maybe<ResolversTypes['ARBITRUM_Swap']>, ParentType, ContextType, RequireFields<QueryARBITRUM_swapArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_swaps?: Resolver<Array<ResolversTypes['ARBITRUM_Swap']>, ParentType, ContextType, RequireFields<QueryARBITRUM_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM__meta?: Resolver<Maybe<ResolversTypes['ARBITRUM__Meta_']>, ParentType, ContextType, Partial<QueryARBITRUM__metaArgs>>;
  FANTOM_user?: Resolver<Maybe<ResolversTypes['FANTOM_User']>, ParentType, ContextType, RequireFields<QueryFANTOM_userArgs, 'id' | 'subgraphError'>>;
  FANTOM_users?: Resolver<Array<ResolversTypes['FANTOM_User']>, ParentType, ContextType, RequireFields<QueryFANTOM_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_bundle?: Resolver<Maybe<ResolversTypes['FANTOM_Bundle']>, ParentType, ContextType, RequireFields<QueryFANTOM_bundleArgs, 'id' | 'subgraphError'>>;
  FANTOM_bundles?: Resolver<Array<ResolversTypes['FANTOM_Bundle']>, ParentType, ContextType, RequireFields<QueryFANTOM_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_factory?: Resolver<Maybe<ResolversTypes['FANTOM_Factory']>, ParentType, ContextType, RequireFields<QueryFANTOM_factoryArgs, 'id' | 'subgraphError'>>;
  FANTOM_factories?: Resolver<Array<ResolversTypes['FANTOM_Factory']>, ParentType, ContextType, RequireFields<QueryFANTOM_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_hourData?: Resolver<Maybe<ResolversTypes['FANTOM_HourData']>, ParentType, ContextType, RequireFields<QueryFANTOM_hourDataArgs, 'id' | 'subgraphError'>>;
  FANTOM_hourDatas?: Resolver<Array<ResolversTypes['FANTOM_HourData']>, ParentType, ContextType, RequireFields<QueryFANTOM_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_dayData?: Resolver<Maybe<ResolversTypes['FANTOM_DayData']>, ParentType, ContextType, RequireFields<QueryFANTOM_dayDataArgs, 'id' | 'subgraphError'>>;
  FANTOM_dayDatas?: Resolver<Array<ResolversTypes['FANTOM_DayData']>, ParentType, ContextType, RequireFields<QueryFANTOM_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_token?: Resolver<Maybe<ResolversTypes['FANTOM_Token']>, ParentType, ContextType, RequireFields<QueryFANTOM_tokenArgs, 'id' | 'subgraphError'>>;
  FANTOM_tokens?: Resolver<Array<ResolversTypes['FANTOM_Token']>, ParentType, ContextType, RequireFields<QueryFANTOM_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_tokenHourData?: Resolver<Maybe<ResolversTypes['FANTOM_TokenHourData']>, ParentType, ContextType, RequireFields<QueryFANTOM_tokenHourDataArgs, 'id' | 'subgraphError'>>;
  FANTOM_tokenHourDatas?: Resolver<Array<ResolversTypes['FANTOM_TokenHourData']>, ParentType, ContextType, RequireFields<QueryFANTOM_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_tokenDayData?: Resolver<Maybe<ResolversTypes['FANTOM_TokenDayData']>, ParentType, ContextType, RequireFields<QueryFANTOM_tokenDayDataArgs, 'id' | 'subgraphError'>>;
  FANTOM_tokenDayDatas?: Resolver<Array<ResolversTypes['FANTOM_TokenDayData']>, ParentType, ContextType, RequireFields<QueryFANTOM_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_pair?: Resolver<Maybe<ResolversTypes['FANTOM_Pair']>, ParentType, ContextType, RequireFields<QueryFANTOM_pairArgs, 'id' | 'subgraphError'>>;
  FANTOM_pairs?: Resolver<Array<ResolversTypes['FANTOM_Pair']>, ParentType, ContextType, RequireFields<QueryFANTOM_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_pairHourData?: Resolver<Maybe<ResolversTypes['FANTOM_PairHourData']>, ParentType, ContextType, RequireFields<QueryFANTOM_pairHourDataArgs, 'id' | 'subgraphError'>>;
  FANTOM_pairHourDatas?: Resolver<Array<ResolversTypes['FANTOM_PairHourData']>, ParentType, ContextType, RequireFields<QueryFANTOM_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_pairDayData?: Resolver<Maybe<ResolversTypes['FANTOM_PairDayData']>, ParentType, ContextType, RequireFields<QueryFANTOM_pairDayDataArgs, 'id' | 'subgraphError'>>;
  FANTOM_pairDayDatas?: Resolver<Array<ResolversTypes['FANTOM_PairDayData']>, ParentType, ContextType, RequireFields<QueryFANTOM_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_liquidityPosition?: Resolver<Maybe<ResolversTypes['FANTOM_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryFANTOM_liquidityPositionArgs, 'id' | 'subgraphError'>>;
  FANTOM_liquidityPositions?: Resolver<Array<ResolversTypes['FANTOM_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryFANTOM_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_liquidityPositionSnapshot?: Resolver<Maybe<ResolversTypes['FANTOM_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryFANTOM_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
  FANTOM_liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['FANTOM_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryFANTOM_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_transaction?: Resolver<Maybe<ResolversTypes['FANTOM_Transaction']>, ParentType, ContextType, RequireFields<QueryFANTOM_transactionArgs, 'id' | 'subgraphError'>>;
  FANTOM_transactions?: Resolver<Array<ResolversTypes['FANTOM_Transaction']>, ParentType, ContextType, RequireFields<QueryFANTOM_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_mint?: Resolver<Maybe<ResolversTypes['FANTOM_Mint']>, ParentType, ContextType, RequireFields<QueryFANTOM_mintArgs, 'id' | 'subgraphError'>>;
  FANTOM_mints?: Resolver<Array<ResolversTypes['FANTOM_Mint']>, ParentType, ContextType, RequireFields<QueryFANTOM_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_burn?: Resolver<Maybe<ResolversTypes['FANTOM_Burn']>, ParentType, ContextType, RequireFields<QueryFANTOM_burnArgs, 'id' | 'subgraphError'>>;
  FANTOM_burns?: Resolver<Array<ResolversTypes['FANTOM_Burn']>, ParentType, ContextType, RequireFields<QueryFANTOM_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_swap?: Resolver<Maybe<ResolversTypes['FANTOM_Swap']>, ParentType, ContextType, RequireFields<QueryFANTOM_swapArgs, 'id' | 'subgraphError'>>;
  FANTOM_swaps?: Resolver<Array<ResolversTypes['FANTOM_Swap']>, ParentType, ContextType, RequireFields<QueryFANTOM_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM__meta?: Resolver<Maybe<ResolversTypes['FANTOM__Meta_']>, ParentType, ContextType, Partial<QueryFANTOM__metaArgs>>;
  XDAI_user?: Resolver<Maybe<ResolversTypes['XDAI_User']>, ParentType, ContextType, RequireFields<QueryXDAI_userArgs, 'id' | 'subgraphError'>>;
  XDAI_users?: Resolver<Array<ResolversTypes['XDAI_User']>, ParentType, ContextType, RequireFields<QueryXDAI_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_bundle?: Resolver<Maybe<ResolversTypes['XDAI_Bundle']>, ParentType, ContextType, RequireFields<QueryXDAI_bundleArgs, 'id' | 'subgraphError'>>;
  XDAI_bundles?: Resolver<Array<ResolversTypes['XDAI_Bundle']>, ParentType, ContextType, RequireFields<QueryXDAI_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_factory?: Resolver<Maybe<ResolversTypes['XDAI_Factory']>, ParentType, ContextType, RequireFields<QueryXDAI_factoryArgs, 'id' | 'subgraphError'>>;
  XDAI_factories?: Resolver<Array<ResolversTypes['XDAI_Factory']>, ParentType, ContextType, RequireFields<QueryXDAI_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_hourData?: Resolver<Maybe<ResolversTypes['XDAI_HourData']>, ParentType, ContextType, RequireFields<QueryXDAI_hourDataArgs, 'id' | 'subgraphError'>>;
  XDAI_hourDatas?: Resolver<Array<ResolversTypes['XDAI_HourData']>, ParentType, ContextType, RequireFields<QueryXDAI_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_dayData?: Resolver<Maybe<ResolversTypes['XDAI_DayData']>, ParentType, ContextType, RequireFields<QueryXDAI_dayDataArgs, 'id' | 'subgraphError'>>;
  XDAI_dayDatas?: Resolver<Array<ResolversTypes['XDAI_DayData']>, ParentType, ContextType, RequireFields<QueryXDAI_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_token?: Resolver<Maybe<ResolversTypes['XDAI_Token']>, ParentType, ContextType, RequireFields<QueryXDAI_tokenArgs, 'id' | 'subgraphError'>>;
  XDAI_tokens?: Resolver<Array<ResolversTypes['XDAI_Token']>, ParentType, ContextType, RequireFields<QueryXDAI_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_tokenHourData?: Resolver<Maybe<ResolversTypes['XDAI_TokenHourData']>, ParentType, ContextType, RequireFields<QueryXDAI_tokenHourDataArgs, 'id' | 'subgraphError'>>;
  XDAI_tokenHourDatas?: Resolver<Array<ResolversTypes['XDAI_TokenHourData']>, ParentType, ContextType, RequireFields<QueryXDAI_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_tokenDayData?: Resolver<Maybe<ResolversTypes['XDAI_TokenDayData']>, ParentType, ContextType, RequireFields<QueryXDAI_tokenDayDataArgs, 'id' | 'subgraphError'>>;
  XDAI_tokenDayDatas?: Resolver<Array<ResolversTypes['XDAI_TokenDayData']>, ParentType, ContextType, RequireFields<QueryXDAI_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_pair?: Resolver<Maybe<ResolversTypes['XDAI_Pair']>, ParentType, ContextType, RequireFields<QueryXDAI_pairArgs, 'id' | 'subgraphError'>>;
  XDAI_pairs?: Resolver<Array<ResolversTypes['XDAI_Pair']>, ParentType, ContextType, RequireFields<QueryXDAI_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_pairHourData?: Resolver<Maybe<ResolversTypes['XDAI_PairHourData']>, ParentType, ContextType, RequireFields<QueryXDAI_pairHourDataArgs, 'id' | 'subgraphError'>>;
  XDAI_pairHourDatas?: Resolver<Array<ResolversTypes['XDAI_PairHourData']>, ParentType, ContextType, RequireFields<QueryXDAI_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_pairDayData?: Resolver<Maybe<ResolversTypes['XDAI_PairDayData']>, ParentType, ContextType, RequireFields<QueryXDAI_pairDayDataArgs, 'id' | 'subgraphError'>>;
  XDAI_pairDayDatas?: Resolver<Array<ResolversTypes['XDAI_PairDayData']>, ParentType, ContextType, RequireFields<QueryXDAI_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_liquidityPosition?: Resolver<Maybe<ResolversTypes['XDAI_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryXDAI_liquidityPositionArgs, 'id' | 'subgraphError'>>;
  XDAI_liquidityPositions?: Resolver<Array<ResolversTypes['XDAI_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryXDAI_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_liquidityPositionSnapshot?: Resolver<Maybe<ResolversTypes['XDAI_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryXDAI_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
  XDAI_liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['XDAI_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryXDAI_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_transaction?: Resolver<Maybe<ResolversTypes['XDAI_Transaction']>, ParentType, ContextType, RequireFields<QueryXDAI_transactionArgs, 'id' | 'subgraphError'>>;
  XDAI_transactions?: Resolver<Array<ResolversTypes['XDAI_Transaction']>, ParentType, ContextType, RequireFields<QueryXDAI_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_mint?: Resolver<Maybe<ResolversTypes['XDAI_Mint']>, ParentType, ContextType, RequireFields<QueryXDAI_mintArgs, 'id' | 'subgraphError'>>;
  XDAI_mints?: Resolver<Array<ResolversTypes['XDAI_Mint']>, ParentType, ContextType, RequireFields<QueryXDAI_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_burn?: Resolver<Maybe<ResolversTypes['XDAI_Burn']>, ParentType, ContextType, RequireFields<QueryXDAI_burnArgs, 'id' | 'subgraphError'>>;
  XDAI_burns?: Resolver<Array<ResolversTypes['XDAI_Burn']>, ParentType, ContextType, RequireFields<QueryXDAI_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_swap?: Resolver<Maybe<ResolversTypes['XDAI_Swap']>, ParentType, ContextType, RequireFields<QueryXDAI_swapArgs, 'id' | 'subgraphError'>>;
  XDAI_swaps?: Resolver<Array<ResolversTypes['XDAI_Swap']>, ParentType, ContextType, RequireFields<QueryXDAI_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI__meta?: Resolver<Maybe<ResolversTypes['XDAI__Meta_']>, ParentType, ContextType, Partial<QueryXDAI__metaArgs>>;
  AVALANCHE_user?: Resolver<Maybe<ResolversTypes['AVALANCHE_User']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_userArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_users?: Resolver<Array<ResolversTypes['AVALANCHE_User']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_bundle?: Resolver<Maybe<ResolversTypes['AVALANCHE_Bundle']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_bundleArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_bundles?: Resolver<Array<ResolversTypes['AVALANCHE_Bundle']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_factory?: Resolver<Maybe<ResolversTypes['AVALANCHE_Factory']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_factoryArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_factories?: Resolver<Array<ResolversTypes['AVALANCHE_Factory']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_hourData?: Resolver<Maybe<ResolversTypes['AVALANCHE_HourData']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_hourDataArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_hourDatas?: Resolver<Array<ResolversTypes['AVALANCHE_HourData']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_dayData?: Resolver<Maybe<ResolversTypes['AVALANCHE_DayData']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_dayDataArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_dayDatas?: Resolver<Array<ResolversTypes['AVALANCHE_DayData']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_token?: Resolver<Maybe<ResolversTypes['AVALANCHE_Token']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_tokenArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_tokens?: Resolver<Array<ResolversTypes['AVALANCHE_Token']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_tokenHourData?: Resolver<Maybe<ResolversTypes['AVALANCHE_TokenHourData']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_tokenHourDataArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_tokenHourDatas?: Resolver<Array<ResolversTypes['AVALANCHE_TokenHourData']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_tokenDayData?: Resolver<Maybe<ResolversTypes['AVALANCHE_TokenDayData']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_tokenDayDataArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_tokenDayDatas?: Resolver<Array<ResolversTypes['AVALANCHE_TokenDayData']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_pair?: Resolver<Maybe<ResolversTypes['AVALANCHE_Pair']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_pairArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_pairs?: Resolver<Array<ResolversTypes['AVALANCHE_Pair']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_pairHourData?: Resolver<Maybe<ResolversTypes['AVALANCHE_PairHourData']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_pairHourDataArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_pairHourDatas?: Resolver<Array<ResolversTypes['AVALANCHE_PairHourData']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_pairDayData?: Resolver<Maybe<ResolversTypes['AVALANCHE_PairDayData']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_pairDayDataArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_pairDayDatas?: Resolver<Array<ResolversTypes['AVALANCHE_PairDayData']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_liquidityPosition?: Resolver<Maybe<ResolversTypes['AVALANCHE_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_liquidityPositionArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_liquidityPositions?: Resolver<Array<ResolversTypes['AVALANCHE_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_liquidityPositionSnapshot?: Resolver<Maybe<ResolversTypes['AVALANCHE_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['AVALANCHE_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_transaction?: Resolver<Maybe<ResolversTypes['AVALANCHE_Transaction']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_transactionArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_transactions?: Resolver<Array<ResolversTypes['AVALANCHE_Transaction']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_mint?: Resolver<Maybe<ResolversTypes['AVALANCHE_Mint']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_mintArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_mints?: Resolver<Array<ResolversTypes['AVALANCHE_Mint']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_burn?: Resolver<Maybe<ResolversTypes['AVALANCHE_Burn']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_burnArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_burns?: Resolver<Array<ResolversTypes['AVALANCHE_Burn']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_swap?: Resolver<Maybe<ResolversTypes['AVALANCHE_Swap']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_swapArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_swaps?: Resolver<Array<ResolversTypes['AVALANCHE_Swap']>, ParentType, ContextType, RequireFields<QueryAVALANCHE_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE__meta?: Resolver<Maybe<ResolversTypes['AVALANCHE__Meta_']>, ParentType, ContextType, Partial<QueryAVALANCHE__metaArgs>>;
  MATIC_user?: Resolver<Maybe<ResolversTypes['MATIC_User']>, ParentType, ContextType, RequireFields<QueryMATIC_userArgs, 'id' | 'subgraphError'>>;
  MATIC_users?: Resolver<Array<ResolversTypes['MATIC_User']>, ParentType, ContextType, RequireFields<QueryMATIC_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_bundle?: Resolver<Maybe<ResolversTypes['MATIC_Bundle']>, ParentType, ContextType, RequireFields<QueryMATIC_bundleArgs, 'id' | 'subgraphError'>>;
  MATIC_bundles?: Resolver<Array<ResolversTypes['MATIC_Bundle']>, ParentType, ContextType, RequireFields<QueryMATIC_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_factory?: Resolver<Maybe<ResolversTypes['MATIC_Factory']>, ParentType, ContextType, RequireFields<QueryMATIC_factoryArgs, 'id' | 'subgraphError'>>;
  MATIC_factories?: Resolver<Array<ResolversTypes['MATIC_Factory']>, ParentType, ContextType, RequireFields<QueryMATIC_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_hourData?: Resolver<Maybe<ResolversTypes['MATIC_HourData']>, ParentType, ContextType, RequireFields<QueryMATIC_hourDataArgs, 'id' | 'subgraphError'>>;
  MATIC_hourDatas?: Resolver<Array<ResolversTypes['MATIC_HourData']>, ParentType, ContextType, RequireFields<QueryMATIC_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_dayData?: Resolver<Maybe<ResolversTypes['MATIC_DayData']>, ParentType, ContextType, RequireFields<QueryMATIC_dayDataArgs, 'id' | 'subgraphError'>>;
  MATIC_dayDatas?: Resolver<Array<ResolversTypes['MATIC_DayData']>, ParentType, ContextType, RequireFields<QueryMATIC_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_token?: Resolver<Maybe<ResolversTypes['MATIC_Token']>, ParentType, ContextType, RequireFields<QueryMATIC_tokenArgs, 'id' | 'subgraphError'>>;
  MATIC_tokens?: Resolver<Array<ResolversTypes['MATIC_Token']>, ParentType, ContextType, RequireFields<QueryMATIC_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_tokenHourData?: Resolver<Maybe<ResolversTypes['MATIC_TokenHourData']>, ParentType, ContextType, RequireFields<QueryMATIC_tokenHourDataArgs, 'id' | 'subgraphError'>>;
  MATIC_tokenHourDatas?: Resolver<Array<ResolversTypes['MATIC_TokenHourData']>, ParentType, ContextType, RequireFields<QueryMATIC_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_tokenDayData?: Resolver<Maybe<ResolversTypes['MATIC_TokenDayData']>, ParentType, ContextType, RequireFields<QueryMATIC_tokenDayDataArgs, 'id' | 'subgraphError'>>;
  MATIC_tokenDayDatas?: Resolver<Array<ResolversTypes['MATIC_TokenDayData']>, ParentType, ContextType, RequireFields<QueryMATIC_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_pair?: Resolver<Maybe<ResolversTypes['MATIC_Pair']>, ParentType, ContextType, RequireFields<QueryMATIC_pairArgs, 'id' | 'subgraphError'>>;
  MATIC_pairs?: Resolver<Array<ResolversTypes['MATIC_Pair']>, ParentType, ContextType, RequireFields<QueryMATIC_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_pairHourData?: Resolver<Maybe<ResolversTypes['MATIC_PairHourData']>, ParentType, ContextType, RequireFields<QueryMATIC_pairHourDataArgs, 'id' | 'subgraphError'>>;
  MATIC_pairHourDatas?: Resolver<Array<ResolversTypes['MATIC_PairHourData']>, ParentType, ContextType, RequireFields<QueryMATIC_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_pairDayData?: Resolver<Maybe<ResolversTypes['MATIC_PairDayData']>, ParentType, ContextType, RequireFields<QueryMATIC_pairDayDataArgs, 'id' | 'subgraphError'>>;
  MATIC_pairDayDatas?: Resolver<Array<ResolversTypes['MATIC_PairDayData']>, ParentType, ContextType, RequireFields<QueryMATIC_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_liquidityPosition?: Resolver<Maybe<ResolversTypes['MATIC_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryMATIC_liquidityPositionArgs, 'id' | 'subgraphError'>>;
  MATIC_liquidityPositions?: Resolver<Array<ResolversTypes['MATIC_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryMATIC_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_liquidityPositionSnapshot?: Resolver<Maybe<ResolversTypes['MATIC_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryMATIC_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
  MATIC_liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['MATIC_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryMATIC_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_transaction?: Resolver<Maybe<ResolversTypes['MATIC_Transaction']>, ParentType, ContextType, RequireFields<QueryMATIC_transactionArgs, 'id' | 'subgraphError'>>;
  MATIC_transactions?: Resolver<Array<ResolversTypes['MATIC_Transaction']>, ParentType, ContextType, RequireFields<QueryMATIC_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_mint?: Resolver<Maybe<ResolversTypes['MATIC_Mint']>, ParentType, ContextType, RequireFields<QueryMATIC_mintArgs, 'id' | 'subgraphError'>>;
  MATIC_mints?: Resolver<Array<ResolversTypes['MATIC_Mint']>, ParentType, ContextType, RequireFields<QueryMATIC_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_burn?: Resolver<Maybe<ResolversTypes['MATIC_Burn']>, ParentType, ContextType, RequireFields<QueryMATIC_burnArgs, 'id' | 'subgraphError'>>;
  MATIC_burns?: Resolver<Array<ResolversTypes['MATIC_Burn']>, ParentType, ContextType, RequireFields<QueryMATIC_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_swap?: Resolver<Maybe<ResolversTypes['MATIC_Swap']>, ParentType, ContextType, RequireFields<QueryMATIC_swapArgs, 'id' | 'subgraphError'>>;
  MATIC_swaps?: Resolver<Array<ResolversTypes['MATIC_Swap']>, ParentType, ContextType, RequireFields<QueryMATIC_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC__meta?: Resolver<Maybe<ResolversTypes['MATIC__Meta_']>, ParentType, ContextType, Partial<QueryMATIC__metaArgs>>;
  BSC_user?: Resolver<Maybe<ResolversTypes['BSC_User']>, ParentType, ContextType, RequireFields<QueryBSC_userArgs, 'id' | 'subgraphError'>>;
  BSC_users?: Resolver<Array<ResolversTypes['BSC_User']>, ParentType, ContextType, RequireFields<QueryBSC_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_bundle?: Resolver<Maybe<ResolversTypes['BSC_Bundle']>, ParentType, ContextType, RequireFields<QueryBSC_bundleArgs, 'id' | 'subgraphError'>>;
  BSC_bundles?: Resolver<Array<ResolversTypes['BSC_Bundle']>, ParentType, ContextType, RequireFields<QueryBSC_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_factory?: Resolver<Maybe<ResolversTypes['BSC_Factory']>, ParentType, ContextType, RequireFields<QueryBSC_factoryArgs, 'id' | 'subgraphError'>>;
  BSC_factories?: Resolver<Array<ResolversTypes['BSC_Factory']>, ParentType, ContextType, RequireFields<QueryBSC_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_hourData?: Resolver<Maybe<ResolversTypes['BSC_HourData']>, ParentType, ContextType, RequireFields<QueryBSC_hourDataArgs, 'id' | 'subgraphError'>>;
  BSC_hourDatas?: Resolver<Array<ResolversTypes['BSC_HourData']>, ParentType, ContextType, RequireFields<QueryBSC_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_dayData?: Resolver<Maybe<ResolversTypes['BSC_DayData']>, ParentType, ContextType, RequireFields<QueryBSC_dayDataArgs, 'id' | 'subgraphError'>>;
  BSC_dayDatas?: Resolver<Array<ResolversTypes['BSC_DayData']>, ParentType, ContextType, RequireFields<QueryBSC_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_token?: Resolver<Maybe<ResolversTypes['BSC_Token']>, ParentType, ContextType, RequireFields<QueryBSC_tokenArgs, 'id' | 'subgraphError'>>;
  BSC_tokens?: Resolver<Array<ResolversTypes['BSC_Token']>, ParentType, ContextType, RequireFields<QueryBSC_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_tokenHourData?: Resolver<Maybe<ResolversTypes['BSC_TokenHourData']>, ParentType, ContextType, RequireFields<QueryBSC_tokenHourDataArgs, 'id' | 'subgraphError'>>;
  BSC_tokenHourDatas?: Resolver<Array<ResolversTypes['BSC_TokenHourData']>, ParentType, ContextType, RequireFields<QueryBSC_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_tokenDayData?: Resolver<Maybe<ResolversTypes['BSC_TokenDayData']>, ParentType, ContextType, RequireFields<QueryBSC_tokenDayDataArgs, 'id' | 'subgraphError'>>;
  BSC_tokenDayDatas?: Resolver<Array<ResolversTypes['BSC_TokenDayData']>, ParentType, ContextType, RequireFields<QueryBSC_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_pair?: Resolver<Maybe<ResolversTypes['BSC_Pair']>, ParentType, ContextType, RequireFields<QueryBSC_pairArgs, 'id' | 'subgraphError'>>;
  BSC_pairs?: Resolver<Array<ResolversTypes['BSC_Pair']>, ParentType, ContextType, RequireFields<QueryBSC_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_pairHourData?: Resolver<Maybe<ResolversTypes['BSC_PairHourData']>, ParentType, ContextType, RequireFields<QueryBSC_pairHourDataArgs, 'id' | 'subgraphError'>>;
  BSC_pairHourDatas?: Resolver<Array<ResolversTypes['BSC_PairHourData']>, ParentType, ContextType, RequireFields<QueryBSC_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_pairDayData?: Resolver<Maybe<ResolversTypes['BSC_PairDayData']>, ParentType, ContextType, RequireFields<QueryBSC_pairDayDataArgs, 'id' | 'subgraphError'>>;
  BSC_pairDayDatas?: Resolver<Array<ResolversTypes['BSC_PairDayData']>, ParentType, ContextType, RequireFields<QueryBSC_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_liquidityPosition?: Resolver<Maybe<ResolversTypes['BSC_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryBSC_liquidityPositionArgs, 'id' | 'subgraphError'>>;
  BSC_liquidityPositions?: Resolver<Array<ResolversTypes['BSC_LiquidityPosition']>, ParentType, ContextType, RequireFields<QueryBSC_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_liquidityPositionSnapshot?: Resolver<Maybe<ResolversTypes['BSC_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryBSC_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
  BSC_liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['BSC_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryBSC_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_transaction?: Resolver<Maybe<ResolversTypes['BSC_Transaction']>, ParentType, ContextType, RequireFields<QueryBSC_transactionArgs, 'id' | 'subgraphError'>>;
  BSC_transactions?: Resolver<Array<ResolversTypes['BSC_Transaction']>, ParentType, ContextType, RequireFields<QueryBSC_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_mint?: Resolver<Maybe<ResolversTypes['BSC_Mint']>, ParentType, ContextType, RequireFields<QueryBSC_mintArgs, 'id' | 'subgraphError'>>;
  BSC_mints?: Resolver<Array<ResolversTypes['BSC_Mint']>, ParentType, ContextType, RequireFields<QueryBSC_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_burn?: Resolver<Maybe<ResolversTypes['BSC_Burn']>, ParentType, ContextType, RequireFields<QueryBSC_burnArgs, 'id' | 'subgraphError'>>;
  BSC_burns?: Resolver<Array<ResolversTypes['BSC_Burn']>, ParentType, ContextType, RequireFields<QueryBSC_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_swap?: Resolver<Maybe<ResolversTypes['BSC_Swap']>, ParentType, ContextType, RequireFields<QueryBSC_swapArgs, 'id' | 'subgraphError'>>;
  BSC_swaps?: Resolver<Array<ResolversTypes['BSC_Swap']>, ParentType, ContextType, RequireFields<QueryBSC_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC__meta?: Resolver<Maybe<ResolversTypes['BSC__Meta_']>, ParentType, ContextType, Partial<QueryBSC__metaArgs>>;
}>;

export type SubscriptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Subscription'] = ResolversParentTypes['Subscription']> = ResolversObject<{
  ETHEREUM_user?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_User']>, "ETHEREUM_user", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_userArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_users?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_User']>, "ETHEREUM_users", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_bundle?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_Bundle']>, "ETHEREUM_bundle", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_bundleArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_bundles?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_Bundle']>, "ETHEREUM_bundles", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_factory?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_Factory']>, "ETHEREUM_factory", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_factoryArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_factories?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_Factory']>, "ETHEREUM_factories", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_hourData?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_HourData']>, "ETHEREUM_hourData", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_hourDataArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_hourDatas?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_HourData']>, "ETHEREUM_hourDatas", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_dayData?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_DayData']>, "ETHEREUM_dayData", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_dayDataArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_dayDatas?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_DayData']>, "ETHEREUM_dayDatas", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_token?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_Token']>, "ETHEREUM_token", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_tokenArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_tokens?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_Token']>, "ETHEREUM_tokens", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_tokenHourData?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_TokenHourData']>, "ETHEREUM_tokenHourData", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_tokenHourDataArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_tokenHourDatas?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_TokenHourData']>, "ETHEREUM_tokenHourDatas", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_tokenDayData?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_TokenDayData']>, "ETHEREUM_tokenDayData", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_tokenDayDataArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_tokenDayDatas?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_TokenDayData']>, "ETHEREUM_tokenDayDatas", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_pair?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_Pair']>, "ETHEREUM_pair", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_pairArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_pairs?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_Pair']>, "ETHEREUM_pairs", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_pairHourData?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_PairHourData']>, "ETHEREUM_pairHourData", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_pairHourDataArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_pairHourDatas?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_PairHourData']>, "ETHEREUM_pairHourDatas", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_pairDayData?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_PairDayData']>, "ETHEREUM_pairDayData", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_pairDayDataArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_pairDayDatas?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_PairDayData']>, "ETHEREUM_pairDayDatas", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_liquidityPosition?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_LiquidityPosition']>, "ETHEREUM_liquidityPosition", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_liquidityPositionArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_liquidityPositions?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_LiquidityPosition']>, "ETHEREUM_liquidityPositions", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_liquidityPositionSnapshot?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_LiquidityPositionSnapshot']>, "ETHEREUM_liquidityPositionSnapshot", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_liquidityPositionSnapshots?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_LiquidityPositionSnapshot']>, "ETHEREUM_liquidityPositionSnapshots", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_transaction?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_Transaction']>, "ETHEREUM_transaction", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_transactionArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_transactions?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_Transaction']>, "ETHEREUM_transactions", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_mint?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_Mint']>, "ETHEREUM_mint", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_mintArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_mints?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_Mint']>, "ETHEREUM_mints", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_burn?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_Burn']>, "ETHEREUM_burn", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_burnArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_burns?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_Burn']>, "ETHEREUM_burns", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM_swap?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM_Swap']>, "ETHEREUM_swap", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_swapArgs, 'id' | 'subgraphError'>>;
  ETHEREUM_swaps?: SubscriptionResolver<Array<ResolversTypes['ETHEREUM_Swap']>, "ETHEREUM_swaps", ParentType, ContextType, RequireFields<SubscriptionETHEREUM_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ETHEREUM__meta?: SubscriptionResolver<Maybe<ResolversTypes['ETHEREUM__Meta_']>, "ETHEREUM__meta", ParentType, ContextType, Partial<SubscriptionETHEREUM__metaArgs>>;
  MOONRIVER_user?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_User']>, "MOONRIVER_user", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_userArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_users?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_User']>, "MOONRIVER_users", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_bundle?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_Bundle']>, "MOONRIVER_bundle", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_bundleArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_bundles?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_Bundle']>, "MOONRIVER_bundles", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_factory?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_Factory']>, "MOONRIVER_factory", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_factoryArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_factories?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_Factory']>, "MOONRIVER_factories", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_hourData?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_HourData']>, "MOONRIVER_hourData", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_hourDataArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_hourDatas?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_HourData']>, "MOONRIVER_hourDatas", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_dayData?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_DayData']>, "MOONRIVER_dayData", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_dayDataArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_dayDatas?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_DayData']>, "MOONRIVER_dayDatas", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_token?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_Token']>, "MOONRIVER_token", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_tokenArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_tokens?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_Token']>, "MOONRIVER_tokens", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_tokenHourData?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_TokenHourData']>, "MOONRIVER_tokenHourData", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_tokenHourDataArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_tokenHourDatas?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_TokenHourData']>, "MOONRIVER_tokenHourDatas", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_tokenDayData?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_TokenDayData']>, "MOONRIVER_tokenDayData", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_tokenDayDataArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_tokenDayDatas?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_TokenDayData']>, "MOONRIVER_tokenDayDatas", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_pair?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_Pair']>, "MOONRIVER_pair", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_pairArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_pairs?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_Pair']>, "MOONRIVER_pairs", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_pairHourData?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_PairHourData']>, "MOONRIVER_pairHourData", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_pairHourDataArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_pairHourDatas?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_PairHourData']>, "MOONRIVER_pairHourDatas", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_pairDayData?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_PairDayData']>, "MOONRIVER_pairDayData", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_pairDayDataArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_pairDayDatas?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_PairDayData']>, "MOONRIVER_pairDayDatas", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_liquidityPosition?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_LiquidityPosition']>, "MOONRIVER_liquidityPosition", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_liquidityPositionArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_liquidityPositions?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_LiquidityPosition']>, "MOONRIVER_liquidityPositions", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_liquidityPositionSnapshot?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_LiquidityPositionSnapshot']>, "MOONRIVER_liquidityPositionSnapshot", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_liquidityPositionSnapshots?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_LiquidityPositionSnapshot']>, "MOONRIVER_liquidityPositionSnapshots", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_transaction?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_Transaction']>, "MOONRIVER_transaction", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_transactionArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_transactions?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_Transaction']>, "MOONRIVER_transactions", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_mint?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_Mint']>, "MOONRIVER_mint", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_mintArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_mints?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_Mint']>, "MOONRIVER_mints", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_burn?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_Burn']>, "MOONRIVER_burn", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_burnArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_burns?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_Burn']>, "MOONRIVER_burns", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER_swap?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER_Swap']>, "MOONRIVER_swap", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_swapArgs, 'id' | 'subgraphError'>>;
  MOONRIVER_swaps?: SubscriptionResolver<Array<ResolversTypes['MOONRIVER_Swap']>, "MOONRIVER_swaps", ParentType, ContextType, RequireFields<SubscriptionMOONRIVER_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MOONRIVER__meta?: SubscriptionResolver<Maybe<ResolversTypes['MOONRIVER__Meta_']>, "MOONRIVER__meta", ParentType, ContextType, Partial<SubscriptionMOONRIVER__metaArgs>>;
  ARBITRUM_user?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_User']>, "ARBITRUM_user", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_userArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_users?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_User']>, "ARBITRUM_users", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_bundle?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_Bundle']>, "ARBITRUM_bundle", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_bundleArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_bundles?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_Bundle']>, "ARBITRUM_bundles", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_factory?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_Factory']>, "ARBITRUM_factory", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_factoryArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_factories?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_Factory']>, "ARBITRUM_factories", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_hourData?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_HourData']>, "ARBITRUM_hourData", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_hourDataArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_hourDatas?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_HourData']>, "ARBITRUM_hourDatas", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_dayData?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_DayData']>, "ARBITRUM_dayData", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_dayDataArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_dayDatas?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_DayData']>, "ARBITRUM_dayDatas", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_token?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_Token']>, "ARBITRUM_token", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_tokenArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_tokens?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_Token']>, "ARBITRUM_tokens", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_tokenHourData?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_TokenHourData']>, "ARBITRUM_tokenHourData", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_tokenHourDataArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_tokenHourDatas?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_TokenHourData']>, "ARBITRUM_tokenHourDatas", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_tokenDayData?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_TokenDayData']>, "ARBITRUM_tokenDayData", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_tokenDayDataArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_tokenDayDatas?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_TokenDayData']>, "ARBITRUM_tokenDayDatas", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_pair?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_Pair']>, "ARBITRUM_pair", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_pairArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_pairs?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_Pair']>, "ARBITRUM_pairs", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_pairHourData?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_PairHourData']>, "ARBITRUM_pairHourData", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_pairHourDataArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_pairHourDatas?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_PairHourData']>, "ARBITRUM_pairHourDatas", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_pairDayData?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_PairDayData']>, "ARBITRUM_pairDayData", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_pairDayDataArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_pairDayDatas?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_PairDayData']>, "ARBITRUM_pairDayDatas", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_liquidityPosition?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_LiquidityPosition']>, "ARBITRUM_liquidityPosition", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_liquidityPositionArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_liquidityPositions?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_LiquidityPosition']>, "ARBITRUM_liquidityPositions", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_liquidityPositionSnapshot?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_LiquidityPositionSnapshot']>, "ARBITRUM_liquidityPositionSnapshot", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_liquidityPositionSnapshots?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_LiquidityPositionSnapshot']>, "ARBITRUM_liquidityPositionSnapshots", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_transaction?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_Transaction']>, "ARBITRUM_transaction", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_transactionArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_transactions?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_Transaction']>, "ARBITRUM_transactions", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_mint?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_Mint']>, "ARBITRUM_mint", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_mintArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_mints?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_Mint']>, "ARBITRUM_mints", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_burn?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_Burn']>, "ARBITRUM_burn", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_burnArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_burns?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_Burn']>, "ARBITRUM_burns", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM_swap?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM_Swap']>, "ARBITRUM_swap", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_swapArgs, 'id' | 'subgraphError'>>;
  ARBITRUM_swaps?: SubscriptionResolver<Array<ResolversTypes['ARBITRUM_Swap']>, "ARBITRUM_swaps", ParentType, ContextType, RequireFields<SubscriptionARBITRUM_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  ARBITRUM__meta?: SubscriptionResolver<Maybe<ResolversTypes['ARBITRUM__Meta_']>, "ARBITRUM__meta", ParentType, ContextType, Partial<SubscriptionARBITRUM__metaArgs>>;
  FANTOM_user?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_User']>, "FANTOM_user", ParentType, ContextType, RequireFields<SubscriptionFANTOM_userArgs, 'id' | 'subgraphError'>>;
  FANTOM_users?: SubscriptionResolver<Array<ResolversTypes['FANTOM_User']>, "FANTOM_users", ParentType, ContextType, RequireFields<SubscriptionFANTOM_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_bundle?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_Bundle']>, "FANTOM_bundle", ParentType, ContextType, RequireFields<SubscriptionFANTOM_bundleArgs, 'id' | 'subgraphError'>>;
  FANTOM_bundles?: SubscriptionResolver<Array<ResolversTypes['FANTOM_Bundle']>, "FANTOM_bundles", ParentType, ContextType, RequireFields<SubscriptionFANTOM_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_factory?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_Factory']>, "FANTOM_factory", ParentType, ContextType, RequireFields<SubscriptionFANTOM_factoryArgs, 'id' | 'subgraphError'>>;
  FANTOM_factories?: SubscriptionResolver<Array<ResolversTypes['FANTOM_Factory']>, "FANTOM_factories", ParentType, ContextType, RequireFields<SubscriptionFANTOM_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_hourData?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_HourData']>, "FANTOM_hourData", ParentType, ContextType, RequireFields<SubscriptionFANTOM_hourDataArgs, 'id' | 'subgraphError'>>;
  FANTOM_hourDatas?: SubscriptionResolver<Array<ResolversTypes['FANTOM_HourData']>, "FANTOM_hourDatas", ParentType, ContextType, RequireFields<SubscriptionFANTOM_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_dayData?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_DayData']>, "FANTOM_dayData", ParentType, ContextType, RequireFields<SubscriptionFANTOM_dayDataArgs, 'id' | 'subgraphError'>>;
  FANTOM_dayDatas?: SubscriptionResolver<Array<ResolversTypes['FANTOM_DayData']>, "FANTOM_dayDatas", ParentType, ContextType, RequireFields<SubscriptionFANTOM_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_token?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_Token']>, "FANTOM_token", ParentType, ContextType, RequireFields<SubscriptionFANTOM_tokenArgs, 'id' | 'subgraphError'>>;
  FANTOM_tokens?: SubscriptionResolver<Array<ResolversTypes['FANTOM_Token']>, "FANTOM_tokens", ParentType, ContextType, RequireFields<SubscriptionFANTOM_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_tokenHourData?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_TokenHourData']>, "FANTOM_tokenHourData", ParentType, ContextType, RequireFields<SubscriptionFANTOM_tokenHourDataArgs, 'id' | 'subgraphError'>>;
  FANTOM_tokenHourDatas?: SubscriptionResolver<Array<ResolversTypes['FANTOM_TokenHourData']>, "FANTOM_tokenHourDatas", ParentType, ContextType, RequireFields<SubscriptionFANTOM_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_tokenDayData?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_TokenDayData']>, "FANTOM_tokenDayData", ParentType, ContextType, RequireFields<SubscriptionFANTOM_tokenDayDataArgs, 'id' | 'subgraphError'>>;
  FANTOM_tokenDayDatas?: SubscriptionResolver<Array<ResolversTypes['FANTOM_TokenDayData']>, "FANTOM_tokenDayDatas", ParentType, ContextType, RequireFields<SubscriptionFANTOM_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_pair?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_Pair']>, "FANTOM_pair", ParentType, ContextType, RequireFields<SubscriptionFANTOM_pairArgs, 'id' | 'subgraphError'>>;
  FANTOM_pairs?: SubscriptionResolver<Array<ResolversTypes['FANTOM_Pair']>, "FANTOM_pairs", ParentType, ContextType, RequireFields<SubscriptionFANTOM_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_pairHourData?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_PairHourData']>, "FANTOM_pairHourData", ParentType, ContextType, RequireFields<SubscriptionFANTOM_pairHourDataArgs, 'id' | 'subgraphError'>>;
  FANTOM_pairHourDatas?: SubscriptionResolver<Array<ResolversTypes['FANTOM_PairHourData']>, "FANTOM_pairHourDatas", ParentType, ContextType, RequireFields<SubscriptionFANTOM_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_pairDayData?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_PairDayData']>, "FANTOM_pairDayData", ParentType, ContextType, RequireFields<SubscriptionFANTOM_pairDayDataArgs, 'id' | 'subgraphError'>>;
  FANTOM_pairDayDatas?: SubscriptionResolver<Array<ResolversTypes['FANTOM_PairDayData']>, "FANTOM_pairDayDatas", ParentType, ContextType, RequireFields<SubscriptionFANTOM_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_liquidityPosition?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_LiquidityPosition']>, "FANTOM_liquidityPosition", ParentType, ContextType, RequireFields<SubscriptionFANTOM_liquidityPositionArgs, 'id' | 'subgraphError'>>;
  FANTOM_liquidityPositions?: SubscriptionResolver<Array<ResolversTypes['FANTOM_LiquidityPosition']>, "FANTOM_liquidityPositions", ParentType, ContextType, RequireFields<SubscriptionFANTOM_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_liquidityPositionSnapshot?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_LiquidityPositionSnapshot']>, "FANTOM_liquidityPositionSnapshot", ParentType, ContextType, RequireFields<SubscriptionFANTOM_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
  FANTOM_liquidityPositionSnapshots?: SubscriptionResolver<Array<ResolversTypes['FANTOM_LiquidityPositionSnapshot']>, "FANTOM_liquidityPositionSnapshots", ParentType, ContextType, RequireFields<SubscriptionFANTOM_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_transaction?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_Transaction']>, "FANTOM_transaction", ParentType, ContextType, RequireFields<SubscriptionFANTOM_transactionArgs, 'id' | 'subgraphError'>>;
  FANTOM_transactions?: SubscriptionResolver<Array<ResolversTypes['FANTOM_Transaction']>, "FANTOM_transactions", ParentType, ContextType, RequireFields<SubscriptionFANTOM_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_mint?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_Mint']>, "FANTOM_mint", ParentType, ContextType, RequireFields<SubscriptionFANTOM_mintArgs, 'id' | 'subgraphError'>>;
  FANTOM_mints?: SubscriptionResolver<Array<ResolversTypes['FANTOM_Mint']>, "FANTOM_mints", ParentType, ContextType, RequireFields<SubscriptionFANTOM_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_burn?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_Burn']>, "FANTOM_burn", ParentType, ContextType, RequireFields<SubscriptionFANTOM_burnArgs, 'id' | 'subgraphError'>>;
  FANTOM_burns?: SubscriptionResolver<Array<ResolversTypes['FANTOM_Burn']>, "FANTOM_burns", ParentType, ContextType, RequireFields<SubscriptionFANTOM_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM_swap?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM_Swap']>, "FANTOM_swap", ParentType, ContextType, RequireFields<SubscriptionFANTOM_swapArgs, 'id' | 'subgraphError'>>;
  FANTOM_swaps?: SubscriptionResolver<Array<ResolversTypes['FANTOM_Swap']>, "FANTOM_swaps", ParentType, ContextType, RequireFields<SubscriptionFANTOM_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  FANTOM__meta?: SubscriptionResolver<Maybe<ResolversTypes['FANTOM__Meta_']>, "FANTOM__meta", ParentType, ContextType, Partial<SubscriptionFANTOM__metaArgs>>;
  XDAI_user?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_User']>, "XDAI_user", ParentType, ContextType, RequireFields<SubscriptionXDAI_userArgs, 'id' | 'subgraphError'>>;
  XDAI_users?: SubscriptionResolver<Array<ResolversTypes['XDAI_User']>, "XDAI_users", ParentType, ContextType, RequireFields<SubscriptionXDAI_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_bundle?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_Bundle']>, "XDAI_bundle", ParentType, ContextType, RequireFields<SubscriptionXDAI_bundleArgs, 'id' | 'subgraphError'>>;
  XDAI_bundles?: SubscriptionResolver<Array<ResolversTypes['XDAI_Bundle']>, "XDAI_bundles", ParentType, ContextType, RequireFields<SubscriptionXDAI_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_factory?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_Factory']>, "XDAI_factory", ParentType, ContextType, RequireFields<SubscriptionXDAI_factoryArgs, 'id' | 'subgraphError'>>;
  XDAI_factories?: SubscriptionResolver<Array<ResolversTypes['XDAI_Factory']>, "XDAI_factories", ParentType, ContextType, RequireFields<SubscriptionXDAI_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_hourData?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_HourData']>, "XDAI_hourData", ParentType, ContextType, RequireFields<SubscriptionXDAI_hourDataArgs, 'id' | 'subgraphError'>>;
  XDAI_hourDatas?: SubscriptionResolver<Array<ResolversTypes['XDAI_HourData']>, "XDAI_hourDatas", ParentType, ContextType, RequireFields<SubscriptionXDAI_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_dayData?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_DayData']>, "XDAI_dayData", ParentType, ContextType, RequireFields<SubscriptionXDAI_dayDataArgs, 'id' | 'subgraphError'>>;
  XDAI_dayDatas?: SubscriptionResolver<Array<ResolversTypes['XDAI_DayData']>, "XDAI_dayDatas", ParentType, ContextType, RequireFields<SubscriptionXDAI_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_token?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_Token']>, "XDAI_token", ParentType, ContextType, RequireFields<SubscriptionXDAI_tokenArgs, 'id' | 'subgraphError'>>;
  XDAI_tokens?: SubscriptionResolver<Array<ResolversTypes['XDAI_Token']>, "XDAI_tokens", ParentType, ContextType, RequireFields<SubscriptionXDAI_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_tokenHourData?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_TokenHourData']>, "XDAI_tokenHourData", ParentType, ContextType, RequireFields<SubscriptionXDAI_tokenHourDataArgs, 'id' | 'subgraphError'>>;
  XDAI_tokenHourDatas?: SubscriptionResolver<Array<ResolversTypes['XDAI_TokenHourData']>, "XDAI_tokenHourDatas", ParentType, ContextType, RequireFields<SubscriptionXDAI_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_tokenDayData?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_TokenDayData']>, "XDAI_tokenDayData", ParentType, ContextType, RequireFields<SubscriptionXDAI_tokenDayDataArgs, 'id' | 'subgraphError'>>;
  XDAI_tokenDayDatas?: SubscriptionResolver<Array<ResolversTypes['XDAI_TokenDayData']>, "XDAI_tokenDayDatas", ParentType, ContextType, RequireFields<SubscriptionXDAI_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_pair?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_Pair']>, "XDAI_pair", ParentType, ContextType, RequireFields<SubscriptionXDAI_pairArgs, 'id' | 'subgraphError'>>;
  XDAI_pairs?: SubscriptionResolver<Array<ResolversTypes['XDAI_Pair']>, "XDAI_pairs", ParentType, ContextType, RequireFields<SubscriptionXDAI_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_pairHourData?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_PairHourData']>, "XDAI_pairHourData", ParentType, ContextType, RequireFields<SubscriptionXDAI_pairHourDataArgs, 'id' | 'subgraphError'>>;
  XDAI_pairHourDatas?: SubscriptionResolver<Array<ResolversTypes['XDAI_PairHourData']>, "XDAI_pairHourDatas", ParentType, ContextType, RequireFields<SubscriptionXDAI_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_pairDayData?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_PairDayData']>, "XDAI_pairDayData", ParentType, ContextType, RequireFields<SubscriptionXDAI_pairDayDataArgs, 'id' | 'subgraphError'>>;
  XDAI_pairDayDatas?: SubscriptionResolver<Array<ResolversTypes['XDAI_PairDayData']>, "XDAI_pairDayDatas", ParentType, ContextType, RequireFields<SubscriptionXDAI_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_liquidityPosition?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_LiquidityPosition']>, "XDAI_liquidityPosition", ParentType, ContextType, RequireFields<SubscriptionXDAI_liquidityPositionArgs, 'id' | 'subgraphError'>>;
  XDAI_liquidityPositions?: SubscriptionResolver<Array<ResolversTypes['XDAI_LiquidityPosition']>, "XDAI_liquidityPositions", ParentType, ContextType, RequireFields<SubscriptionXDAI_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_liquidityPositionSnapshot?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_LiquidityPositionSnapshot']>, "XDAI_liquidityPositionSnapshot", ParentType, ContextType, RequireFields<SubscriptionXDAI_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
  XDAI_liquidityPositionSnapshots?: SubscriptionResolver<Array<ResolversTypes['XDAI_LiquidityPositionSnapshot']>, "XDAI_liquidityPositionSnapshots", ParentType, ContextType, RequireFields<SubscriptionXDAI_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_transaction?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_Transaction']>, "XDAI_transaction", ParentType, ContextType, RequireFields<SubscriptionXDAI_transactionArgs, 'id' | 'subgraphError'>>;
  XDAI_transactions?: SubscriptionResolver<Array<ResolversTypes['XDAI_Transaction']>, "XDAI_transactions", ParentType, ContextType, RequireFields<SubscriptionXDAI_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_mint?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_Mint']>, "XDAI_mint", ParentType, ContextType, RequireFields<SubscriptionXDAI_mintArgs, 'id' | 'subgraphError'>>;
  XDAI_mints?: SubscriptionResolver<Array<ResolversTypes['XDAI_Mint']>, "XDAI_mints", ParentType, ContextType, RequireFields<SubscriptionXDAI_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_burn?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_Burn']>, "XDAI_burn", ParentType, ContextType, RequireFields<SubscriptionXDAI_burnArgs, 'id' | 'subgraphError'>>;
  XDAI_burns?: SubscriptionResolver<Array<ResolversTypes['XDAI_Burn']>, "XDAI_burns", ParentType, ContextType, RequireFields<SubscriptionXDAI_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI_swap?: SubscriptionResolver<Maybe<ResolversTypes['XDAI_Swap']>, "XDAI_swap", ParentType, ContextType, RequireFields<SubscriptionXDAI_swapArgs, 'id' | 'subgraphError'>>;
  XDAI_swaps?: SubscriptionResolver<Array<ResolversTypes['XDAI_Swap']>, "XDAI_swaps", ParentType, ContextType, RequireFields<SubscriptionXDAI_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  XDAI__meta?: SubscriptionResolver<Maybe<ResolversTypes['XDAI__Meta_']>, "XDAI__meta", ParentType, ContextType, Partial<SubscriptionXDAI__metaArgs>>;
  AVALANCHE_user?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_User']>, "AVALANCHE_user", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_userArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_users?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_User']>, "AVALANCHE_users", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_bundle?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_Bundle']>, "AVALANCHE_bundle", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_bundleArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_bundles?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_Bundle']>, "AVALANCHE_bundles", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_factory?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_Factory']>, "AVALANCHE_factory", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_factoryArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_factories?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_Factory']>, "AVALANCHE_factories", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_hourData?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_HourData']>, "AVALANCHE_hourData", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_hourDataArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_hourDatas?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_HourData']>, "AVALANCHE_hourDatas", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_dayData?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_DayData']>, "AVALANCHE_dayData", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_dayDataArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_dayDatas?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_DayData']>, "AVALANCHE_dayDatas", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_token?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_Token']>, "AVALANCHE_token", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_tokenArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_tokens?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_Token']>, "AVALANCHE_tokens", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_tokenHourData?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_TokenHourData']>, "AVALANCHE_tokenHourData", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_tokenHourDataArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_tokenHourDatas?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_TokenHourData']>, "AVALANCHE_tokenHourDatas", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_tokenDayData?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_TokenDayData']>, "AVALANCHE_tokenDayData", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_tokenDayDataArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_tokenDayDatas?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_TokenDayData']>, "AVALANCHE_tokenDayDatas", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_pair?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_Pair']>, "AVALANCHE_pair", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_pairArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_pairs?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_Pair']>, "AVALANCHE_pairs", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_pairHourData?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_PairHourData']>, "AVALANCHE_pairHourData", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_pairHourDataArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_pairHourDatas?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_PairHourData']>, "AVALANCHE_pairHourDatas", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_pairDayData?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_PairDayData']>, "AVALANCHE_pairDayData", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_pairDayDataArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_pairDayDatas?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_PairDayData']>, "AVALANCHE_pairDayDatas", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_liquidityPosition?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_LiquidityPosition']>, "AVALANCHE_liquidityPosition", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_liquidityPositionArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_liquidityPositions?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_LiquidityPosition']>, "AVALANCHE_liquidityPositions", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_liquidityPositionSnapshot?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_LiquidityPositionSnapshot']>, "AVALANCHE_liquidityPositionSnapshot", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_liquidityPositionSnapshots?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_LiquidityPositionSnapshot']>, "AVALANCHE_liquidityPositionSnapshots", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_transaction?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_Transaction']>, "AVALANCHE_transaction", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_transactionArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_transactions?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_Transaction']>, "AVALANCHE_transactions", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_mint?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_Mint']>, "AVALANCHE_mint", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_mintArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_mints?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_Mint']>, "AVALANCHE_mints", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_burn?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_Burn']>, "AVALANCHE_burn", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_burnArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_burns?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_Burn']>, "AVALANCHE_burns", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE_swap?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE_Swap']>, "AVALANCHE_swap", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_swapArgs, 'id' | 'subgraphError'>>;
  AVALANCHE_swaps?: SubscriptionResolver<Array<ResolversTypes['AVALANCHE_Swap']>, "AVALANCHE_swaps", ParentType, ContextType, RequireFields<SubscriptionAVALANCHE_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  AVALANCHE__meta?: SubscriptionResolver<Maybe<ResolversTypes['AVALANCHE__Meta_']>, "AVALANCHE__meta", ParentType, ContextType, Partial<SubscriptionAVALANCHE__metaArgs>>;
  MATIC_user?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_User']>, "MATIC_user", ParentType, ContextType, RequireFields<SubscriptionMATIC_userArgs, 'id' | 'subgraphError'>>;
  MATIC_users?: SubscriptionResolver<Array<ResolversTypes['MATIC_User']>, "MATIC_users", ParentType, ContextType, RequireFields<SubscriptionMATIC_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_bundle?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_Bundle']>, "MATIC_bundle", ParentType, ContextType, RequireFields<SubscriptionMATIC_bundleArgs, 'id' | 'subgraphError'>>;
  MATIC_bundles?: SubscriptionResolver<Array<ResolversTypes['MATIC_Bundle']>, "MATIC_bundles", ParentType, ContextType, RequireFields<SubscriptionMATIC_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_factory?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_Factory']>, "MATIC_factory", ParentType, ContextType, RequireFields<SubscriptionMATIC_factoryArgs, 'id' | 'subgraphError'>>;
  MATIC_factories?: SubscriptionResolver<Array<ResolversTypes['MATIC_Factory']>, "MATIC_factories", ParentType, ContextType, RequireFields<SubscriptionMATIC_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_hourData?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_HourData']>, "MATIC_hourData", ParentType, ContextType, RequireFields<SubscriptionMATIC_hourDataArgs, 'id' | 'subgraphError'>>;
  MATIC_hourDatas?: SubscriptionResolver<Array<ResolversTypes['MATIC_HourData']>, "MATIC_hourDatas", ParentType, ContextType, RequireFields<SubscriptionMATIC_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_dayData?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_DayData']>, "MATIC_dayData", ParentType, ContextType, RequireFields<SubscriptionMATIC_dayDataArgs, 'id' | 'subgraphError'>>;
  MATIC_dayDatas?: SubscriptionResolver<Array<ResolversTypes['MATIC_DayData']>, "MATIC_dayDatas", ParentType, ContextType, RequireFields<SubscriptionMATIC_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_token?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_Token']>, "MATIC_token", ParentType, ContextType, RequireFields<SubscriptionMATIC_tokenArgs, 'id' | 'subgraphError'>>;
  MATIC_tokens?: SubscriptionResolver<Array<ResolversTypes['MATIC_Token']>, "MATIC_tokens", ParentType, ContextType, RequireFields<SubscriptionMATIC_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_tokenHourData?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_TokenHourData']>, "MATIC_tokenHourData", ParentType, ContextType, RequireFields<SubscriptionMATIC_tokenHourDataArgs, 'id' | 'subgraphError'>>;
  MATIC_tokenHourDatas?: SubscriptionResolver<Array<ResolversTypes['MATIC_TokenHourData']>, "MATIC_tokenHourDatas", ParentType, ContextType, RequireFields<SubscriptionMATIC_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_tokenDayData?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_TokenDayData']>, "MATIC_tokenDayData", ParentType, ContextType, RequireFields<SubscriptionMATIC_tokenDayDataArgs, 'id' | 'subgraphError'>>;
  MATIC_tokenDayDatas?: SubscriptionResolver<Array<ResolversTypes['MATIC_TokenDayData']>, "MATIC_tokenDayDatas", ParentType, ContextType, RequireFields<SubscriptionMATIC_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_pair?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_Pair']>, "MATIC_pair", ParentType, ContextType, RequireFields<SubscriptionMATIC_pairArgs, 'id' | 'subgraphError'>>;
  MATIC_pairs?: SubscriptionResolver<Array<ResolversTypes['MATIC_Pair']>, "MATIC_pairs", ParentType, ContextType, RequireFields<SubscriptionMATIC_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_pairHourData?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_PairHourData']>, "MATIC_pairHourData", ParentType, ContextType, RequireFields<SubscriptionMATIC_pairHourDataArgs, 'id' | 'subgraphError'>>;
  MATIC_pairHourDatas?: SubscriptionResolver<Array<ResolversTypes['MATIC_PairHourData']>, "MATIC_pairHourDatas", ParentType, ContextType, RequireFields<SubscriptionMATIC_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_pairDayData?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_PairDayData']>, "MATIC_pairDayData", ParentType, ContextType, RequireFields<SubscriptionMATIC_pairDayDataArgs, 'id' | 'subgraphError'>>;
  MATIC_pairDayDatas?: SubscriptionResolver<Array<ResolversTypes['MATIC_PairDayData']>, "MATIC_pairDayDatas", ParentType, ContextType, RequireFields<SubscriptionMATIC_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_liquidityPosition?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_LiquidityPosition']>, "MATIC_liquidityPosition", ParentType, ContextType, RequireFields<SubscriptionMATIC_liquidityPositionArgs, 'id' | 'subgraphError'>>;
  MATIC_liquidityPositions?: SubscriptionResolver<Array<ResolversTypes['MATIC_LiquidityPosition']>, "MATIC_liquidityPositions", ParentType, ContextType, RequireFields<SubscriptionMATIC_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_liquidityPositionSnapshot?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_LiquidityPositionSnapshot']>, "MATIC_liquidityPositionSnapshot", ParentType, ContextType, RequireFields<SubscriptionMATIC_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
  MATIC_liquidityPositionSnapshots?: SubscriptionResolver<Array<ResolversTypes['MATIC_LiquidityPositionSnapshot']>, "MATIC_liquidityPositionSnapshots", ParentType, ContextType, RequireFields<SubscriptionMATIC_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_transaction?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_Transaction']>, "MATIC_transaction", ParentType, ContextType, RequireFields<SubscriptionMATIC_transactionArgs, 'id' | 'subgraphError'>>;
  MATIC_transactions?: SubscriptionResolver<Array<ResolversTypes['MATIC_Transaction']>, "MATIC_transactions", ParentType, ContextType, RequireFields<SubscriptionMATIC_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_mint?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_Mint']>, "MATIC_mint", ParentType, ContextType, RequireFields<SubscriptionMATIC_mintArgs, 'id' | 'subgraphError'>>;
  MATIC_mints?: SubscriptionResolver<Array<ResolversTypes['MATIC_Mint']>, "MATIC_mints", ParentType, ContextType, RequireFields<SubscriptionMATIC_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_burn?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_Burn']>, "MATIC_burn", ParentType, ContextType, RequireFields<SubscriptionMATIC_burnArgs, 'id' | 'subgraphError'>>;
  MATIC_burns?: SubscriptionResolver<Array<ResolversTypes['MATIC_Burn']>, "MATIC_burns", ParentType, ContextType, RequireFields<SubscriptionMATIC_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC_swap?: SubscriptionResolver<Maybe<ResolversTypes['MATIC_Swap']>, "MATIC_swap", ParentType, ContextType, RequireFields<SubscriptionMATIC_swapArgs, 'id' | 'subgraphError'>>;
  MATIC_swaps?: SubscriptionResolver<Array<ResolversTypes['MATIC_Swap']>, "MATIC_swaps", ParentType, ContextType, RequireFields<SubscriptionMATIC_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  MATIC__meta?: SubscriptionResolver<Maybe<ResolversTypes['MATIC__Meta_']>, "MATIC__meta", ParentType, ContextType, Partial<SubscriptionMATIC__metaArgs>>;
  BSC_user?: SubscriptionResolver<Maybe<ResolversTypes['BSC_User']>, "BSC_user", ParentType, ContextType, RequireFields<SubscriptionBSC_userArgs, 'id' | 'subgraphError'>>;
  BSC_users?: SubscriptionResolver<Array<ResolversTypes['BSC_User']>, "BSC_users", ParentType, ContextType, RequireFields<SubscriptionBSC_usersArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_bundle?: SubscriptionResolver<Maybe<ResolversTypes['BSC_Bundle']>, "BSC_bundle", ParentType, ContextType, RequireFields<SubscriptionBSC_bundleArgs, 'id' | 'subgraphError'>>;
  BSC_bundles?: SubscriptionResolver<Array<ResolversTypes['BSC_Bundle']>, "BSC_bundles", ParentType, ContextType, RequireFields<SubscriptionBSC_bundlesArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_factory?: SubscriptionResolver<Maybe<ResolversTypes['BSC_Factory']>, "BSC_factory", ParentType, ContextType, RequireFields<SubscriptionBSC_factoryArgs, 'id' | 'subgraphError'>>;
  BSC_factories?: SubscriptionResolver<Array<ResolversTypes['BSC_Factory']>, "BSC_factories", ParentType, ContextType, RequireFields<SubscriptionBSC_factoriesArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_hourData?: SubscriptionResolver<Maybe<ResolversTypes['BSC_HourData']>, "BSC_hourData", ParentType, ContextType, RequireFields<SubscriptionBSC_hourDataArgs, 'id' | 'subgraphError'>>;
  BSC_hourDatas?: SubscriptionResolver<Array<ResolversTypes['BSC_HourData']>, "BSC_hourDatas", ParentType, ContextType, RequireFields<SubscriptionBSC_hourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_dayData?: SubscriptionResolver<Maybe<ResolversTypes['BSC_DayData']>, "BSC_dayData", ParentType, ContextType, RequireFields<SubscriptionBSC_dayDataArgs, 'id' | 'subgraphError'>>;
  BSC_dayDatas?: SubscriptionResolver<Array<ResolversTypes['BSC_DayData']>, "BSC_dayDatas", ParentType, ContextType, RequireFields<SubscriptionBSC_dayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_token?: SubscriptionResolver<Maybe<ResolversTypes['BSC_Token']>, "BSC_token", ParentType, ContextType, RequireFields<SubscriptionBSC_tokenArgs, 'id' | 'subgraphError'>>;
  BSC_tokens?: SubscriptionResolver<Array<ResolversTypes['BSC_Token']>, "BSC_tokens", ParentType, ContextType, RequireFields<SubscriptionBSC_tokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_tokenHourData?: SubscriptionResolver<Maybe<ResolversTypes['BSC_TokenHourData']>, "BSC_tokenHourData", ParentType, ContextType, RequireFields<SubscriptionBSC_tokenHourDataArgs, 'id' | 'subgraphError'>>;
  BSC_tokenHourDatas?: SubscriptionResolver<Array<ResolversTypes['BSC_TokenHourData']>, "BSC_tokenHourDatas", ParentType, ContextType, RequireFields<SubscriptionBSC_tokenHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_tokenDayData?: SubscriptionResolver<Maybe<ResolversTypes['BSC_TokenDayData']>, "BSC_tokenDayData", ParentType, ContextType, RequireFields<SubscriptionBSC_tokenDayDataArgs, 'id' | 'subgraphError'>>;
  BSC_tokenDayDatas?: SubscriptionResolver<Array<ResolversTypes['BSC_TokenDayData']>, "BSC_tokenDayDatas", ParentType, ContextType, RequireFields<SubscriptionBSC_tokenDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_pair?: SubscriptionResolver<Maybe<ResolversTypes['BSC_Pair']>, "BSC_pair", ParentType, ContextType, RequireFields<SubscriptionBSC_pairArgs, 'id' | 'subgraphError'>>;
  BSC_pairs?: SubscriptionResolver<Array<ResolversTypes['BSC_Pair']>, "BSC_pairs", ParentType, ContextType, RequireFields<SubscriptionBSC_pairsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_pairHourData?: SubscriptionResolver<Maybe<ResolversTypes['BSC_PairHourData']>, "BSC_pairHourData", ParentType, ContextType, RequireFields<SubscriptionBSC_pairHourDataArgs, 'id' | 'subgraphError'>>;
  BSC_pairHourDatas?: SubscriptionResolver<Array<ResolversTypes['BSC_PairHourData']>, "BSC_pairHourDatas", ParentType, ContextType, RequireFields<SubscriptionBSC_pairHourDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_pairDayData?: SubscriptionResolver<Maybe<ResolversTypes['BSC_PairDayData']>, "BSC_pairDayData", ParentType, ContextType, RequireFields<SubscriptionBSC_pairDayDataArgs, 'id' | 'subgraphError'>>;
  BSC_pairDayDatas?: SubscriptionResolver<Array<ResolversTypes['BSC_PairDayData']>, "BSC_pairDayDatas", ParentType, ContextType, RequireFields<SubscriptionBSC_pairDayDatasArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_liquidityPosition?: SubscriptionResolver<Maybe<ResolversTypes['BSC_LiquidityPosition']>, "BSC_liquidityPosition", ParentType, ContextType, RequireFields<SubscriptionBSC_liquidityPositionArgs, 'id' | 'subgraphError'>>;
  BSC_liquidityPositions?: SubscriptionResolver<Array<ResolversTypes['BSC_LiquidityPosition']>, "BSC_liquidityPositions", ParentType, ContextType, RequireFields<SubscriptionBSC_liquidityPositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_liquidityPositionSnapshot?: SubscriptionResolver<Maybe<ResolversTypes['BSC_LiquidityPositionSnapshot']>, "BSC_liquidityPositionSnapshot", ParentType, ContextType, RequireFields<SubscriptionBSC_liquidityPositionSnapshotArgs, 'id' | 'subgraphError'>>;
  BSC_liquidityPositionSnapshots?: SubscriptionResolver<Array<ResolversTypes['BSC_LiquidityPositionSnapshot']>, "BSC_liquidityPositionSnapshots", ParentType, ContextType, RequireFields<SubscriptionBSC_liquidityPositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_transaction?: SubscriptionResolver<Maybe<ResolversTypes['BSC_Transaction']>, "BSC_transaction", ParentType, ContextType, RequireFields<SubscriptionBSC_transactionArgs, 'id' | 'subgraphError'>>;
  BSC_transactions?: SubscriptionResolver<Array<ResolversTypes['BSC_Transaction']>, "BSC_transactions", ParentType, ContextType, RequireFields<SubscriptionBSC_transactionsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_mint?: SubscriptionResolver<Maybe<ResolversTypes['BSC_Mint']>, "BSC_mint", ParentType, ContextType, RequireFields<SubscriptionBSC_mintArgs, 'id' | 'subgraphError'>>;
  BSC_mints?: SubscriptionResolver<Array<ResolversTypes['BSC_Mint']>, "BSC_mints", ParentType, ContextType, RequireFields<SubscriptionBSC_mintsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_burn?: SubscriptionResolver<Maybe<ResolversTypes['BSC_Burn']>, "BSC_burn", ParentType, ContextType, RequireFields<SubscriptionBSC_burnArgs, 'id' | 'subgraphError'>>;
  BSC_burns?: SubscriptionResolver<Array<ResolversTypes['BSC_Burn']>, "BSC_burns", ParentType, ContextType, RequireFields<SubscriptionBSC_burnsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC_swap?: SubscriptionResolver<Maybe<ResolversTypes['BSC_Swap']>, "BSC_swap", ParentType, ContextType, RequireFields<SubscriptionBSC_swapArgs, 'id' | 'subgraphError'>>;
  BSC_swaps?: SubscriptionResolver<Array<ResolversTypes['BSC_Swap']>, "BSC_swaps", ParentType, ContextType, RequireFields<SubscriptionBSC_swapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  BSC__meta?: SubscriptionResolver<Maybe<ResolversTypes['BSC__Meta_']>, "BSC__meta", ParentType, ContextType, Partial<SubscriptionBSC__metaArgs>>;
}>;

export interface ETHEREUM_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ETHEREUM_BigDecimal'], any> {
  name: 'ETHEREUM_BigDecimal';
}

export interface BigIntScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BigInt'], any> {
  name: 'BigInt';
}

export type ETHEREUM_BundleResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_Bundle'] = ResolversParentTypes['ETHEREUM_Bundle']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  ethPrice?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM_BurnResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_Burn'] = ResolversParentTypes['ETHEREUM_Burn']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['ETHEREUM_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['ETHEREUM_Pair'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['ETHEREUM_Bytes']>, ParentType, ContextType>;
  amount0?: Resolver<Maybe<ResolversTypes['ETHEREUM_BigDecimal']>, ParentType, ContextType>;
  amount1?: Resolver<Maybe<ResolversTypes['ETHEREUM_BigDecimal']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['ETHEREUM_Bytes']>, ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<Maybe<ResolversTypes['ETHEREUM_BigDecimal']>, ParentType, ContextType>;
  complete?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  feeTo?: Resolver<Maybe<ResolversTypes['ETHEREUM_Bytes']>, ParentType, ContextType>;
  feeLiquidity?: Resolver<Maybe<ResolversTypes['ETHEREUM_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface ETHEREUM_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ETHEREUM_Bytes'], any> {
  name: 'ETHEREUM_Bytes';
}

export type ETHEREUM_DayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_DayData'] = ResolversParentTypes['ETHEREUM_DayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['ETHEREUM_Factory'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  untrackedVolume?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM_FactoryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_Factory'] = ResolversParentTypes['ETHEREUM_Factory']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  pairCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokenCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  userCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pairs?: Resolver<Array<ResolversTypes['ETHEREUM_Pair']>, ParentType, ContextType, RequireFields<ETHEREUM_FactorypairsArgs, 'skip' | 'first'>>;
  tokens?: Resolver<Array<ResolversTypes['ETHEREUM_Token']>, ParentType, ContextType, RequireFields<ETHEREUM_FactorytokensArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['ETHEREUM_HourData']>, ParentType, ContextType, RequireFields<ETHEREUM_FactoryhourDataArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['ETHEREUM_DayData']>, ParentType, ContextType, RequireFields<ETHEREUM_FactorydayDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM_HourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_HourData'] = ResolversParentTypes['ETHEREUM_HourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['ETHEREUM_Factory'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  untrackedVolume?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM_LiquidityPositionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_LiquidityPosition'] = ResolversParentTypes['ETHEREUM_LiquidityPosition']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['ETHEREUM_User'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['ETHEREUM_Pair'], ParentType, ContextType>;
  liquidityTokenBalance?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  snapshots?: Resolver<Array<Maybe<ResolversTypes['ETHEREUM_LiquidityPositionSnapshot']>>, ParentType, ContextType, RequireFields<ETHEREUM_LiquidityPositionsnapshotsArgs, 'skip' | 'first'>>;
  block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM_LiquidityPositionSnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_LiquidityPositionSnapshot'] = ResolversParentTypes['ETHEREUM_LiquidityPositionSnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  liquidityPosition?: Resolver<ResolversTypes['ETHEREUM_LiquidityPosition'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['ETHEREUM_User'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['ETHEREUM_Pair'], ParentType, ContextType>;
  token0PriceUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  token1PriceUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  liquidityTokenTotalSupply?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  liquidityTokenBalance?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM_MintResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_Mint'] = ResolversParentTypes['ETHEREUM_Mint']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['ETHEREUM_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['ETHEREUM_Pair'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['ETHEREUM_Bytes'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['ETHEREUM_Bytes']>, ParentType, ContextType>;
  amount0?: Resolver<Maybe<ResolversTypes['ETHEREUM_BigDecimal']>, ParentType, ContextType>;
  amount1?: Resolver<Maybe<ResolversTypes['ETHEREUM_BigDecimal']>, ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<Maybe<ResolversTypes['ETHEREUM_BigDecimal']>, ParentType, ContextType>;
  feeTo?: Resolver<Maybe<ResolversTypes['ETHEREUM_Bytes']>, ParentType, ContextType>;
  feeLiquidity?: Resolver<Maybe<ResolversTypes['ETHEREUM_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM_PairResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_Pair'] = ResolversParentTypes['ETHEREUM_Pair']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['ETHEREUM_Factory'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  token0?: Resolver<ResolversTypes['ETHEREUM_Token'], ParentType, ContextType>;
  token1?: Resolver<ResolversTypes['ETHEREUM_Token'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  reserveETH?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  trackedReserveETH?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  token0Price?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  token1Price?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityProviderCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityPositions?: Resolver<Array<ResolversTypes['ETHEREUM_LiquidityPosition']>, ParentType, ContextType, RequireFields<ETHEREUM_PairliquidityPositionsArgs, 'skip' | 'first'>>;
  liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['ETHEREUM_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<ETHEREUM_PairliquidityPositionSnapshotsArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['ETHEREUM_PairDayData']>, ParentType, ContextType, RequireFields<ETHEREUM_PairdayDataArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['ETHEREUM_PairHourData']>, ParentType, ContextType, RequireFields<ETHEREUM_PairhourDataArgs, 'skip' | 'first'>>;
  mints?: Resolver<Array<ResolversTypes['ETHEREUM_Mint']>, ParentType, ContextType, RequireFields<ETHEREUM_PairmintsArgs, 'skip' | 'first'>>;
  burns?: Resolver<Array<ResolversTypes['ETHEREUM_Burn']>, ParentType, ContextType, RequireFields<ETHEREUM_PairburnsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<ResolversTypes['ETHEREUM_Swap']>, ParentType, ContextType, RequireFields<ETHEREUM_PairswapsArgs, 'skip' | 'first'>>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM_PairDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_PairDayData'] = ResolversParentTypes['ETHEREUM_PairDayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['ETHEREUM_Pair'], ParentType, ContextType>;
  token0?: Resolver<ResolversTypes['ETHEREUM_Token'], ParentType, ContextType>;
  token1?: Resolver<ResolversTypes['ETHEREUM_Token'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM_PairHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_PairHourData'] = ResolversParentTypes['ETHEREUM_PairHourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['ETHEREUM_Pair'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM_SwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_Swap'] = ResolversParentTypes['ETHEREUM_Swap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['ETHEREUM_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['ETHEREUM_Pair'], ParentType, ContextType>;
  sender?: Resolver<ResolversTypes['ETHEREUM_Bytes'], ParentType, ContextType>;
  amount0In?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  amount1In?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  amount0Out?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  amount1Out?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['ETHEREUM_Bytes'], ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM_TokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_Token'] = ResolversParentTypes['ETHEREUM_Token']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['ETHEREUM_Factory'], ParentType, ContextType>;
  symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  decimals?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  derivedETH?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  hourData?: Resolver<Array<ResolversTypes['ETHEREUM_TokenHourData']>, ParentType, ContextType, RequireFields<ETHEREUM_TokenhourDataArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['ETHEREUM_TokenDayData']>, ParentType, ContextType, RequireFields<ETHEREUM_TokendayDataArgs, 'skip' | 'first'>>;
  basePairs?: Resolver<Array<ResolversTypes['ETHEREUM_Pair']>, ParentType, ContextType, RequireFields<ETHEREUM_TokenbasePairsArgs, 'skip' | 'first'>>;
  quotePairs?: Resolver<Array<ResolversTypes['ETHEREUM_Pair']>, ParentType, ContextType, RequireFields<ETHEREUM_TokenquotePairsArgs, 'skip' | 'first'>>;
  basePairsDayData?: Resolver<Array<ResolversTypes['ETHEREUM_PairDayData']>, ParentType, ContextType, RequireFields<ETHEREUM_TokenbasePairsDayDataArgs, 'skip' | 'first'>>;
  quotePairsDayData?: Resolver<Array<ResolversTypes['ETHEREUM_PairDayData']>, ParentType, ContextType, RequireFields<ETHEREUM_TokenquotePairsDayDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM_TokenDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_TokenDayData'] = ResolversParentTypes['ETHEREUM_TokenDayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['ETHEREUM_Token'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  priceUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM_TokenHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_TokenHourData'] = ResolversParentTypes['ETHEREUM_TokenHourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['ETHEREUM_Token'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  priceUSD?: Resolver<ResolversTypes['ETHEREUM_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM_TransactionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_Transaction'] = ResolversParentTypes['ETHEREUM_Transaction']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  mints?: Resolver<Array<Maybe<ResolversTypes['ETHEREUM_Mint']>>, ParentType, ContextType, RequireFields<ETHEREUM_TransactionmintsArgs, 'skip' | 'first'>>;
  burns?: Resolver<Array<Maybe<ResolversTypes['ETHEREUM_Burn']>>, ParentType, ContextType, RequireFields<ETHEREUM_TransactionburnsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<Maybe<ResolversTypes['ETHEREUM_Swap']>>, ParentType, ContextType, RequireFields<ETHEREUM_TransactionswapsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM_UserResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM_User'] = ResolversParentTypes['ETHEREUM_User']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  liquidityPositions?: Resolver<Array<ResolversTypes['ETHEREUM_LiquidityPosition']>, ParentType, ContextType, RequireFields<ETHEREUM_UserliquidityPositionsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM__Block_'] = ResolversParentTypes['ETHEREUM__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['ETHEREUM_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ETHEREUM__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ETHEREUM__Meta_'] = ResolversParentTypes['ETHEREUM__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['ETHEREUM__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface MOONRIVER_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['MOONRIVER_BigDecimal'], any> {
  name: 'MOONRIVER_BigDecimal';
}

export type MOONRIVER_BundleResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_Bundle'] = ResolversParentTypes['MOONRIVER_Bundle']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  ethPrice?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER_BurnResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_Burn'] = ResolversParentTypes['MOONRIVER_Burn']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['MOONRIVER_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['MOONRIVER_Pair'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['MOONRIVER_Bytes']>, ParentType, ContextType>;
  amount0?: Resolver<Maybe<ResolversTypes['MOONRIVER_BigDecimal']>, ParentType, ContextType>;
  amount1?: Resolver<Maybe<ResolversTypes['MOONRIVER_BigDecimal']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['MOONRIVER_Bytes']>, ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<Maybe<ResolversTypes['MOONRIVER_BigDecimal']>, ParentType, ContextType>;
  complete?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  feeTo?: Resolver<Maybe<ResolversTypes['MOONRIVER_Bytes']>, ParentType, ContextType>;
  feeLiquidity?: Resolver<Maybe<ResolversTypes['MOONRIVER_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface MOONRIVER_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['MOONRIVER_Bytes'], any> {
  name: 'MOONRIVER_Bytes';
}

export type MOONRIVER_DayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_DayData'] = ResolversParentTypes['MOONRIVER_DayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['MOONRIVER_Factory'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  untrackedVolume?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER_FactoryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_Factory'] = ResolversParentTypes['MOONRIVER_Factory']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  pairCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokenCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  userCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pairs?: Resolver<Array<ResolversTypes['MOONRIVER_Pair']>, ParentType, ContextType, RequireFields<MOONRIVER_FactorypairsArgs, 'skip' | 'first'>>;
  tokens?: Resolver<Array<ResolversTypes['MOONRIVER_Token']>, ParentType, ContextType, RequireFields<MOONRIVER_FactorytokensArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['MOONRIVER_HourData']>, ParentType, ContextType, RequireFields<MOONRIVER_FactoryhourDataArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['MOONRIVER_DayData']>, ParentType, ContextType, RequireFields<MOONRIVER_FactorydayDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER_HourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_HourData'] = ResolversParentTypes['MOONRIVER_HourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['MOONRIVER_Factory'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  untrackedVolume?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER_LiquidityPositionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_LiquidityPosition'] = ResolversParentTypes['MOONRIVER_LiquidityPosition']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['MOONRIVER_User'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['MOONRIVER_Pair'], ParentType, ContextType>;
  liquidityTokenBalance?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  snapshots?: Resolver<Array<Maybe<ResolversTypes['MOONRIVER_LiquidityPositionSnapshot']>>, ParentType, ContextType, RequireFields<MOONRIVER_LiquidityPositionsnapshotsArgs, 'skip' | 'first'>>;
  block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER_LiquidityPositionSnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_LiquidityPositionSnapshot'] = ResolversParentTypes['MOONRIVER_LiquidityPositionSnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  liquidityPosition?: Resolver<ResolversTypes['MOONRIVER_LiquidityPosition'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['MOONRIVER_User'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['MOONRIVER_Pair'], ParentType, ContextType>;
  token0PriceUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  token1PriceUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  liquidityTokenTotalSupply?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  liquidityTokenBalance?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER_MintResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_Mint'] = ResolversParentTypes['MOONRIVER_Mint']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['MOONRIVER_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['MOONRIVER_Pair'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['MOONRIVER_Bytes'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['MOONRIVER_Bytes']>, ParentType, ContextType>;
  amount0?: Resolver<Maybe<ResolversTypes['MOONRIVER_BigDecimal']>, ParentType, ContextType>;
  amount1?: Resolver<Maybe<ResolversTypes['MOONRIVER_BigDecimal']>, ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<Maybe<ResolversTypes['MOONRIVER_BigDecimal']>, ParentType, ContextType>;
  feeTo?: Resolver<Maybe<ResolversTypes['MOONRIVER_Bytes']>, ParentType, ContextType>;
  feeLiquidity?: Resolver<Maybe<ResolversTypes['MOONRIVER_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER_PairResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_Pair'] = ResolversParentTypes['MOONRIVER_Pair']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['MOONRIVER_Factory'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  token0?: Resolver<ResolversTypes['MOONRIVER_Token'], ParentType, ContextType>;
  token1?: Resolver<ResolversTypes['MOONRIVER_Token'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  reserveETH?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  trackedReserveETH?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  token0Price?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  token1Price?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityProviderCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityPositions?: Resolver<Array<ResolversTypes['MOONRIVER_LiquidityPosition']>, ParentType, ContextType, RequireFields<MOONRIVER_PairliquidityPositionsArgs, 'skip' | 'first'>>;
  liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['MOONRIVER_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<MOONRIVER_PairliquidityPositionSnapshotsArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['MOONRIVER_PairDayData']>, ParentType, ContextType, RequireFields<MOONRIVER_PairdayDataArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['MOONRIVER_PairHourData']>, ParentType, ContextType, RequireFields<MOONRIVER_PairhourDataArgs, 'skip' | 'first'>>;
  mints?: Resolver<Array<ResolversTypes['MOONRIVER_Mint']>, ParentType, ContextType, RequireFields<MOONRIVER_PairmintsArgs, 'skip' | 'first'>>;
  burns?: Resolver<Array<ResolversTypes['MOONRIVER_Burn']>, ParentType, ContextType, RequireFields<MOONRIVER_PairburnsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<ResolversTypes['MOONRIVER_Swap']>, ParentType, ContextType, RequireFields<MOONRIVER_PairswapsArgs, 'skip' | 'first'>>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER_PairDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_PairDayData'] = ResolversParentTypes['MOONRIVER_PairDayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['MOONRIVER_Pair'], ParentType, ContextType>;
  token0?: Resolver<ResolversTypes['MOONRIVER_Token'], ParentType, ContextType>;
  token1?: Resolver<ResolversTypes['MOONRIVER_Token'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER_PairHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_PairHourData'] = ResolversParentTypes['MOONRIVER_PairHourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['MOONRIVER_Pair'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER_SwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_Swap'] = ResolversParentTypes['MOONRIVER_Swap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['MOONRIVER_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['MOONRIVER_Pair'], ParentType, ContextType>;
  sender?: Resolver<ResolversTypes['MOONRIVER_Bytes'], ParentType, ContextType>;
  amount0In?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  amount1In?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  amount0Out?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  amount1Out?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['MOONRIVER_Bytes'], ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER_TokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_Token'] = ResolversParentTypes['MOONRIVER_Token']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['MOONRIVER_Factory'], ParentType, ContextType>;
  symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  decimals?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  derivedETH?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  whitelistPairs?: Resolver<Array<ResolversTypes['MOONRIVER_Pair']>, ParentType, ContextType, RequireFields<MOONRIVER_TokenwhitelistPairsArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['MOONRIVER_TokenHourData']>, ParentType, ContextType, RequireFields<MOONRIVER_TokenhourDataArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['MOONRIVER_TokenDayData']>, ParentType, ContextType, RequireFields<MOONRIVER_TokendayDataArgs, 'skip' | 'first'>>;
  basePairs?: Resolver<Array<ResolversTypes['MOONRIVER_Pair']>, ParentType, ContextType, RequireFields<MOONRIVER_TokenbasePairsArgs, 'skip' | 'first'>>;
  quotePairs?: Resolver<Array<ResolversTypes['MOONRIVER_Pair']>, ParentType, ContextType, RequireFields<MOONRIVER_TokenquotePairsArgs, 'skip' | 'first'>>;
  basePairsDayData?: Resolver<Array<ResolversTypes['MOONRIVER_PairDayData']>, ParentType, ContextType, RequireFields<MOONRIVER_TokenbasePairsDayDataArgs, 'skip' | 'first'>>;
  quotePairsDayData?: Resolver<Array<ResolversTypes['MOONRIVER_PairDayData']>, ParentType, ContextType, RequireFields<MOONRIVER_TokenquotePairsDayDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER_TokenDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_TokenDayData'] = ResolversParentTypes['MOONRIVER_TokenDayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['MOONRIVER_Token'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  priceUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER_TokenHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_TokenHourData'] = ResolversParentTypes['MOONRIVER_TokenHourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['MOONRIVER_Token'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  priceUSD?: Resolver<ResolversTypes['MOONRIVER_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER_TransactionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_Transaction'] = ResolversParentTypes['MOONRIVER_Transaction']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  mints?: Resolver<Array<Maybe<ResolversTypes['MOONRIVER_Mint']>>, ParentType, ContextType, RequireFields<MOONRIVER_TransactionmintsArgs, 'skip' | 'first'>>;
  burns?: Resolver<Array<Maybe<ResolversTypes['MOONRIVER_Burn']>>, ParentType, ContextType, RequireFields<MOONRIVER_TransactionburnsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<Maybe<ResolversTypes['MOONRIVER_Swap']>>, ParentType, ContextType, RequireFields<MOONRIVER_TransactionswapsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER_UserResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER_User'] = ResolversParentTypes['MOONRIVER_User']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  liquidityPositions?: Resolver<Array<ResolversTypes['MOONRIVER_LiquidityPosition']>, ParentType, ContextType, RequireFields<MOONRIVER_UserliquidityPositionsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER__Block_'] = ResolversParentTypes['MOONRIVER__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['MOONRIVER_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MOONRIVER__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MOONRIVER__Meta_'] = ResolversParentTypes['MOONRIVER__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['MOONRIVER__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface ARBITRUM_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ARBITRUM_BigDecimal'], any> {
  name: 'ARBITRUM_BigDecimal';
}

export type ARBITRUM_BundleResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_Bundle'] = ResolversParentTypes['ARBITRUM_Bundle']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  ethPrice?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM_BurnResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_Burn'] = ResolversParentTypes['ARBITRUM_Burn']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['ARBITRUM_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['ARBITRUM_Pair'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['ARBITRUM_Bytes']>, ParentType, ContextType>;
  amount0?: Resolver<Maybe<ResolversTypes['ARBITRUM_BigDecimal']>, ParentType, ContextType>;
  amount1?: Resolver<Maybe<ResolversTypes['ARBITRUM_BigDecimal']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['ARBITRUM_Bytes']>, ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<Maybe<ResolversTypes['ARBITRUM_BigDecimal']>, ParentType, ContextType>;
  complete?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  feeTo?: Resolver<Maybe<ResolversTypes['ARBITRUM_Bytes']>, ParentType, ContextType>;
  feeLiquidity?: Resolver<Maybe<ResolversTypes['ARBITRUM_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface ARBITRUM_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ARBITRUM_Bytes'], any> {
  name: 'ARBITRUM_Bytes';
}

export type ARBITRUM_DayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_DayData'] = ResolversParentTypes['ARBITRUM_DayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['ARBITRUM_Factory'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  untrackedVolume?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM_FactoryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_Factory'] = ResolversParentTypes['ARBITRUM_Factory']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  pairCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokenCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  userCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pairs?: Resolver<Array<ResolversTypes['ARBITRUM_Pair']>, ParentType, ContextType, RequireFields<ARBITRUM_FactorypairsArgs, 'skip' | 'first'>>;
  tokens?: Resolver<Array<ResolversTypes['ARBITRUM_Token']>, ParentType, ContextType, RequireFields<ARBITRUM_FactorytokensArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['ARBITRUM_HourData']>, ParentType, ContextType, RequireFields<ARBITRUM_FactoryhourDataArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['ARBITRUM_DayData']>, ParentType, ContextType, RequireFields<ARBITRUM_FactorydayDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM_HourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_HourData'] = ResolversParentTypes['ARBITRUM_HourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['ARBITRUM_Factory'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  untrackedVolume?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM_LiquidityPositionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_LiquidityPosition'] = ResolversParentTypes['ARBITRUM_LiquidityPosition']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['ARBITRUM_User'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['ARBITRUM_Pair'], ParentType, ContextType>;
  liquidityTokenBalance?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  snapshots?: Resolver<Array<Maybe<ResolversTypes['ARBITRUM_LiquidityPositionSnapshot']>>, ParentType, ContextType, RequireFields<ARBITRUM_LiquidityPositionsnapshotsArgs, 'skip' | 'first'>>;
  block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM_LiquidityPositionSnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_LiquidityPositionSnapshot'] = ResolversParentTypes['ARBITRUM_LiquidityPositionSnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  liquidityPosition?: Resolver<ResolversTypes['ARBITRUM_LiquidityPosition'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['ARBITRUM_User'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['ARBITRUM_Pair'], ParentType, ContextType>;
  token0PriceUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  token1PriceUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  liquidityTokenTotalSupply?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  liquidityTokenBalance?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM_MintResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_Mint'] = ResolversParentTypes['ARBITRUM_Mint']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['ARBITRUM_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['ARBITRUM_Pair'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['ARBITRUM_Bytes'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['ARBITRUM_Bytes']>, ParentType, ContextType>;
  amount0?: Resolver<Maybe<ResolversTypes['ARBITRUM_BigDecimal']>, ParentType, ContextType>;
  amount1?: Resolver<Maybe<ResolversTypes['ARBITRUM_BigDecimal']>, ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<Maybe<ResolversTypes['ARBITRUM_BigDecimal']>, ParentType, ContextType>;
  feeTo?: Resolver<Maybe<ResolversTypes['ARBITRUM_Bytes']>, ParentType, ContextType>;
  feeLiquidity?: Resolver<Maybe<ResolversTypes['ARBITRUM_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM_PairResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_Pair'] = ResolversParentTypes['ARBITRUM_Pair']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['ARBITRUM_Factory'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  token0?: Resolver<ResolversTypes['ARBITRUM_Token'], ParentType, ContextType>;
  token1?: Resolver<ResolversTypes['ARBITRUM_Token'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  reserveETH?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  trackedReserveETH?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  token0Price?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  token1Price?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityProviderCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityPositions?: Resolver<Array<ResolversTypes['ARBITRUM_LiquidityPosition']>, ParentType, ContextType, RequireFields<ARBITRUM_PairliquidityPositionsArgs, 'skip' | 'first'>>;
  liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['ARBITRUM_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<ARBITRUM_PairliquidityPositionSnapshotsArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['ARBITRUM_PairDayData']>, ParentType, ContextType, RequireFields<ARBITRUM_PairdayDataArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['ARBITRUM_PairHourData']>, ParentType, ContextType, RequireFields<ARBITRUM_PairhourDataArgs, 'skip' | 'first'>>;
  mints?: Resolver<Array<ResolversTypes['ARBITRUM_Mint']>, ParentType, ContextType, RequireFields<ARBITRUM_PairmintsArgs, 'skip' | 'first'>>;
  burns?: Resolver<Array<ResolversTypes['ARBITRUM_Burn']>, ParentType, ContextType, RequireFields<ARBITRUM_PairburnsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<ResolversTypes['ARBITRUM_Swap']>, ParentType, ContextType, RequireFields<ARBITRUM_PairswapsArgs, 'skip' | 'first'>>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM_PairDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_PairDayData'] = ResolversParentTypes['ARBITRUM_PairDayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['ARBITRUM_Pair'], ParentType, ContextType>;
  token0?: Resolver<ResolversTypes['ARBITRUM_Token'], ParentType, ContextType>;
  token1?: Resolver<ResolversTypes['ARBITRUM_Token'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM_PairHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_PairHourData'] = ResolversParentTypes['ARBITRUM_PairHourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['ARBITRUM_Pair'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM_SwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_Swap'] = ResolversParentTypes['ARBITRUM_Swap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['ARBITRUM_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['ARBITRUM_Pair'], ParentType, ContextType>;
  sender?: Resolver<ResolversTypes['ARBITRUM_Bytes'], ParentType, ContextType>;
  amount0In?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  amount1In?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  amount0Out?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  amount1Out?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['ARBITRUM_Bytes'], ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM_TokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_Token'] = ResolversParentTypes['ARBITRUM_Token']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['ARBITRUM_Factory'], ParentType, ContextType>;
  symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  decimals?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  derivedETH?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  whitelistPairs?: Resolver<Array<ResolversTypes['ARBITRUM_Pair']>, ParentType, ContextType, RequireFields<ARBITRUM_TokenwhitelistPairsArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['ARBITRUM_TokenHourData']>, ParentType, ContextType, RequireFields<ARBITRUM_TokenhourDataArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['ARBITRUM_TokenDayData']>, ParentType, ContextType, RequireFields<ARBITRUM_TokendayDataArgs, 'skip' | 'first'>>;
  basePairs?: Resolver<Array<ResolversTypes['ARBITRUM_Pair']>, ParentType, ContextType, RequireFields<ARBITRUM_TokenbasePairsArgs, 'skip' | 'first'>>;
  quotePairs?: Resolver<Array<ResolversTypes['ARBITRUM_Pair']>, ParentType, ContextType, RequireFields<ARBITRUM_TokenquotePairsArgs, 'skip' | 'first'>>;
  basePairsDayData?: Resolver<Array<ResolversTypes['ARBITRUM_PairDayData']>, ParentType, ContextType, RequireFields<ARBITRUM_TokenbasePairsDayDataArgs, 'skip' | 'first'>>;
  quotePairsDayData?: Resolver<Array<ResolversTypes['ARBITRUM_PairDayData']>, ParentType, ContextType, RequireFields<ARBITRUM_TokenquotePairsDayDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM_TokenDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_TokenDayData'] = ResolversParentTypes['ARBITRUM_TokenDayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['ARBITRUM_Token'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  priceUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM_TokenHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_TokenHourData'] = ResolversParentTypes['ARBITRUM_TokenHourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['ARBITRUM_Token'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  priceUSD?: Resolver<ResolversTypes['ARBITRUM_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM_TransactionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_Transaction'] = ResolversParentTypes['ARBITRUM_Transaction']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  mints?: Resolver<Array<Maybe<ResolversTypes['ARBITRUM_Mint']>>, ParentType, ContextType, RequireFields<ARBITRUM_TransactionmintsArgs, 'skip' | 'first'>>;
  burns?: Resolver<Array<Maybe<ResolversTypes['ARBITRUM_Burn']>>, ParentType, ContextType, RequireFields<ARBITRUM_TransactionburnsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<Maybe<ResolversTypes['ARBITRUM_Swap']>>, ParentType, ContextType, RequireFields<ARBITRUM_TransactionswapsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM_UserResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM_User'] = ResolversParentTypes['ARBITRUM_User']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  liquidityPositions?: Resolver<Array<ResolversTypes['ARBITRUM_LiquidityPosition']>, ParentType, ContextType, RequireFields<ARBITRUM_UserliquidityPositionsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM__Block_'] = ResolversParentTypes['ARBITRUM__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['ARBITRUM_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ARBITRUM__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ARBITRUM__Meta_'] = ResolversParentTypes['ARBITRUM__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['ARBITRUM__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface FANTOM_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['FANTOM_BigDecimal'], any> {
  name: 'FANTOM_BigDecimal';
}

export type FANTOM_BundleResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_Bundle'] = ResolversParentTypes['FANTOM_Bundle']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  ethPrice?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM_BurnResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_Burn'] = ResolversParentTypes['FANTOM_Burn']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['FANTOM_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['FANTOM_Pair'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['FANTOM_Bytes']>, ParentType, ContextType>;
  amount0?: Resolver<Maybe<ResolversTypes['FANTOM_BigDecimal']>, ParentType, ContextType>;
  amount1?: Resolver<Maybe<ResolversTypes['FANTOM_BigDecimal']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['FANTOM_Bytes']>, ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<Maybe<ResolversTypes['FANTOM_BigDecimal']>, ParentType, ContextType>;
  complete?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  feeTo?: Resolver<Maybe<ResolversTypes['FANTOM_Bytes']>, ParentType, ContextType>;
  feeLiquidity?: Resolver<Maybe<ResolversTypes['FANTOM_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface FANTOM_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['FANTOM_Bytes'], any> {
  name: 'FANTOM_Bytes';
}

export type FANTOM_DayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_DayData'] = ResolversParentTypes['FANTOM_DayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['FANTOM_Factory'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  untrackedVolume?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM_FactoryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_Factory'] = ResolversParentTypes['FANTOM_Factory']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  pairCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokenCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  userCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pairs?: Resolver<Array<ResolversTypes['FANTOM_Pair']>, ParentType, ContextType, RequireFields<FANTOM_FactorypairsArgs, 'skip' | 'first'>>;
  tokens?: Resolver<Array<ResolversTypes['FANTOM_Token']>, ParentType, ContextType, RequireFields<FANTOM_FactorytokensArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['FANTOM_HourData']>, ParentType, ContextType, RequireFields<FANTOM_FactoryhourDataArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['FANTOM_DayData']>, ParentType, ContextType, RequireFields<FANTOM_FactorydayDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM_HourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_HourData'] = ResolversParentTypes['FANTOM_HourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['FANTOM_Factory'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  untrackedVolume?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM_LiquidityPositionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_LiquidityPosition'] = ResolversParentTypes['FANTOM_LiquidityPosition']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['FANTOM_User'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['FANTOM_Pair'], ParentType, ContextType>;
  liquidityTokenBalance?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  snapshots?: Resolver<Array<Maybe<ResolversTypes['FANTOM_LiquidityPositionSnapshot']>>, ParentType, ContextType, RequireFields<FANTOM_LiquidityPositionsnapshotsArgs, 'skip' | 'first'>>;
  block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM_LiquidityPositionSnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_LiquidityPositionSnapshot'] = ResolversParentTypes['FANTOM_LiquidityPositionSnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  liquidityPosition?: Resolver<ResolversTypes['FANTOM_LiquidityPosition'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['FANTOM_User'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['FANTOM_Pair'], ParentType, ContextType>;
  token0PriceUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  token1PriceUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  liquidityTokenTotalSupply?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  liquidityTokenBalance?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM_MintResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_Mint'] = ResolversParentTypes['FANTOM_Mint']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['FANTOM_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['FANTOM_Pair'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['FANTOM_Bytes'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['FANTOM_Bytes']>, ParentType, ContextType>;
  amount0?: Resolver<Maybe<ResolversTypes['FANTOM_BigDecimal']>, ParentType, ContextType>;
  amount1?: Resolver<Maybe<ResolversTypes['FANTOM_BigDecimal']>, ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<Maybe<ResolversTypes['FANTOM_BigDecimal']>, ParentType, ContextType>;
  feeTo?: Resolver<Maybe<ResolversTypes['FANTOM_Bytes']>, ParentType, ContextType>;
  feeLiquidity?: Resolver<Maybe<ResolversTypes['FANTOM_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM_PairResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_Pair'] = ResolversParentTypes['FANTOM_Pair']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['FANTOM_Factory'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  token0?: Resolver<ResolversTypes['FANTOM_Token'], ParentType, ContextType>;
  token1?: Resolver<ResolversTypes['FANTOM_Token'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  reserveETH?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  trackedReserveETH?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  token0Price?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  token1Price?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityProviderCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityPositions?: Resolver<Array<ResolversTypes['FANTOM_LiquidityPosition']>, ParentType, ContextType, RequireFields<FANTOM_PairliquidityPositionsArgs, 'skip' | 'first'>>;
  liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['FANTOM_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<FANTOM_PairliquidityPositionSnapshotsArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['FANTOM_PairDayData']>, ParentType, ContextType, RequireFields<FANTOM_PairdayDataArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['FANTOM_PairHourData']>, ParentType, ContextType, RequireFields<FANTOM_PairhourDataArgs, 'skip' | 'first'>>;
  mints?: Resolver<Array<ResolversTypes['FANTOM_Mint']>, ParentType, ContextType, RequireFields<FANTOM_PairmintsArgs, 'skip' | 'first'>>;
  burns?: Resolver<Array<ResolversTypes['FANTOM_Burn']>, ParentType, ContextType, RequireFields<FANTOM_PairburnsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<ResolversTypes['FANTOM_Swap']>, ParentType, ContextType, RequireFields<FANTOM_PairswapsArgs, 'skip' | 'first'>>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM_PairDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_PairDayData'] = ResolversParentTypes['FANTOM_PairDayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['FANTOM_Pair'], ParentType, ContextType>;
  token0?: Resolver<ResolversTypes['FANTOM_Token'], ParentType, ContextType>;
  token1?: Resolver<ResolversTypes['FANTOM_Token'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM_PairHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_PairHourData'] = ResolversParentTypes['FANTOM_PairHourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['FANTOM_Pair'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM_SwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_Swap'] = ResolversParentTypes['FANTOM_Swap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['FANTOM_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['FANTOM_Pair'], ParentType, ContextType>;
  sender?: Resolver<ResolversTypes['FANTOM_Bytes'], ParentType, ContextType>;
  amount0In?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  amount1In?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  amount0Out?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  amount1Out?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['FANTOM_Bytes'], ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM_TokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_Token'] = ResolversParentTypes['FANTOM_Token']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['FANTOM_Factory'], ParentType, ContextType>;
  symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  decimals?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  derivedETH?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  hourData?: Resolver<Array<ResolversTypes['FANTOM_TokenHourData']>, ParentType, ContextType, RequireFields<FANTOM_TokenhourDataArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['FANTOM_TokenDayData']>, ParentType, ContextType, RequireFields<FANTOM_TokendayDataArgs, 'skip' | 'first'>>;
  basePairs?: Resolver<Array<ResolversTypes['FANTOM_Pair']>, ParentType, ContextType, RequireFields<FANTOM_TokenbasePairsArgs, 'skip' | 'first'>>;
  quotePairs?: Resolver<Array<ResolversTypes['FANTOM_Pair']>, ParentType, ContextType, RequireFields<FANTOM_TokenquotePairsArgs, 'skip' | 'first'>>;
  basePairsDayData?: Resolver<Array<ResolversTypes['FANTOM_PairDayData']>, ParentType, ContextType, RequireFields<FANTOM_TokenbasePairsDayDataArgs, 'skip' | 'first'>>;
  quotePairsDayData?: Resolver<Array<ResolversTypes['FANTOM_PairDayData']>, ParentType, ContextType, RequireFields<FANTOM_TokenquotePairsDayDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM_TokenDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_TokenDayData'] = ResolversParentTypes['FANTOM_TokenDayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['FANTOM_Token'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  priceUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM_TokenHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_TokenHourData'] = ResolversParentTypes['FANTOM_TokenHourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['FANTOM_Token'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  priceUSD?: Resolver<ResolversTypes['FANTOM_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM_TransactionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_Transaction'] = ResolversParentTypes['FANTOM_Transaction']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  mints?: Resolver<Array<Maybe<ResolversTypes['FANTOM_Mint']>>, ParentType, ContextType, RequireFields<FANTOM_TransactionmintsArgs, 'skip' | 'first'>>;
  burns?: Resolver<Array<Maybe<ResolversTypes['FANTOM_Burn']>>, ParentType, ContextType, RequireFields<FANTOM_TransactionburnsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<Maybe<ResolversTypes['FANTOM_Swap']>>, ParentType, ContextType, RequireFields<FANTOM_TransactionswapsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM_UserResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM_User'] = ResolversParentTypes['FANTOM_User']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  liquidityPositions?: Resolver<Array<ResolversTypes['FANTOM_LiquidityPosition']>, ParentType, ContextType, RequireFields<FANTOM_UserliquidityPositionsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM__Block_'] = ResolversParentTypes['FANTOM__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['FANTOM_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FANTOM__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FANTOM__Meta_'] = ResolversParentTypes['FANTOM__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['FANTOM__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface XDAI_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['XDAI_BigDecimal'], any> {
  name: 'XDAI_BigDecimal';
}

export type XDAI_BundleResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_Bundle'] = ResolversParentTypes['XDAI_Bundle']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  ethPrice?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI_BurnResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_Burn'] = ResolversParentTypes['XDAI_Burn']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['XDAI_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['XDAI_Pair'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['XDAI_Bytes']>, ParentType, ContextType>;
  amount0?: Resolver<Maybe<ResolversTypes['XDAI_BigDecimal']>, ParentType, ContextType>;
  amount1?: Resolver<Maybe<ResolversTypes['XDAI_BigDecimal']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['XDAI_Bytes']>, ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<Maybe<ResolversTypes['XDAI_BigDecimal']>, ParentType, ContextType>;
  complete?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  feeTo?: Resolver<Maybe<ResolversTypes['XDAI_Bytes']>, ParentType, ContextType>;
  feeLiquidity?: Resolver<Maybe<ResolversTypes['XDAI_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface XDAI_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['XDAI_Bytes'], any> {
  name: 'XDAI_Bytes';
}

export type XDAI_DayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_DayData'] = ResolversParentTypes['XDAI_DayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['XDAI_Factory'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  untrackedVolume?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI_FactoryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_Factory'] = ResolversParentTypes['XDAI_Factory']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  pairCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokenCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  userCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pairs?: Resolver<Array<ResolversTypes['XDAI_Pair']>, ParentType, ContextType, RequireFields<XDAI_FactorypairsArgs, 'skip' | 'first'>>;
  tokens?: Resolver<Array<ResolversTypes['XDAI_Token']>, ParentType, ContextType, RequireFields<XDAI_FactorytokensArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['XDAI_HourData']>, ParentType, ContextType, RequireFields<XDAI_FactoryhourDataArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['XDAI_DayData']>, ParentType, ContextType, RequireFields<XDAI_FactorydayDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI_HourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_HourData'] = ResolversParentTypes['XDAI_HourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['XDAI_Factory'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  untrackedVolume?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI_LiquidityPositionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_LiquidityPosition'] = ResolversParentTypes['XDAI_LiquidityPosition']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['XDAI_User'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['XDAI_Pair'], ParentType, ContextType>;
  liquidityTokenBalance?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  snapshots?: Resolver<Array<Maybe<ResolversTypes['XDAI_LiquidityPositionSnapshot']>>, ParentType, ContextType, RequireFields<XDAI_LiquidityPositionsnapshotsArgs, 'skip' | 'first'>>;
  block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI_LiquidityPositionSnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_LiquidityPositionSnapshot'] = ResolversParentTypes['XDAI_LiquidityPositionSnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  liquidityPosition?: Resolver<ResolversTypes['XDAI_LiquidityPosition'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['XDAI_User'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['XDAI_Pair'], ParentType, ContextType>;
  token0PriceUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  token1PriceUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  liquidityTokenTotalSupply?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  liquidityTokenBalance?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI_MintResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_Mint'] = ResolversParentTypes['XDAI_Mint']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['XDAI_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['XDAI_Pair'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['XDAI_Bytes'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['XDAI_Bytes']>, ParentType, ContextType>;
  amount0?: Resolver<Maybe<ResolversTypes['XDAI_BigDecimal']>, ParentType, ContextType>;
  amount1?: Resolver<Maybe<ResolversTypes['XDAI_BigDecimal']>, ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<Maybe<ResolversTypes['XDAI_BigDecimal']>, ParentType, ContextType>;
  feeTo?: Resolver<Maybe<ResolversTypes['XDAI_Bytes']>, ParentType, ContextType>;
  feeLiquidity?: Resolver<Maybe<ResolversTypes['XDAI_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI_PairResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_Pair'] = ResolversParentTypes['XDAI_Pair']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['XDAI_Factory'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  token0?: Resolver<ResolversTypes['XDAI_Token'], ParentType, ContextType>;
  token1?: Resolver<ResolversTypes['XDAI_Token'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  reserveETH?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  trackedReserveETH?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  token0Price?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  token1Price?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityProviderCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityPositions?: Resolver<Array<ResolversTypes['XDAI_LiquidityPosition']>, ParentType, ContextType, RequireFields<XDAI_PairliquidityPositionsArgs, 'skip' | 'first'>>;
  liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['XDAI_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<XDAI_PairliquidityPositionSnapshotsArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['XDAI_PairDayData']>, ParentType, ContextType, RequireFields<XDAI_PairdayDataArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['XDAI_PairHourData']>, ParentType, ContextType, RequireFields<XDAI_PairhourDataArgs, 'skip' | 'first'>>;
  mints?: Resolver<Array<ResolversTypes['XDAI_Mint']>, ParentType, ContextType, RequireFields<XDAI_PairmintsArgs, 'skip' | 'first'>>;
  burns?: Resolver<Array<ResolversTypes['XDAI_Burn']>, ParentType, ContextType, RequireFields<XDAI_PairburnsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<ResolversTypes['XDAI_Swap']>, ParentType, ContextType, RequireFields<XDAI_PairswapsArgs, 'skip' | 'first'>>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI_PairDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_PairDayData'] = ResolversParentTypes['XDAI_PairDayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['XDAI_Pair'], ParentType, ContextType>;
  token0?: Resolver<ResolversTypes['XDAI_Token'], ParentType, ContextType>;
  token1?: Resolver<ResolversTypes['XDAI_Token'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI_PairHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_PairHourData'] = ResolversParentTypes['XDAI_PairHourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['XDAI_Pair'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI_SwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_Swap'] = ResolversParentTypes['XDAI_Swap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['XDAI_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['XDAI_Pair'], ParentType, ContextType>;
  sender?: Resolver<ResolversTypes['XDAI_Bytes'], ParentType, ContextType>;
  amount0In?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  amount1In?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  amount0Out?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  amount1Out?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['XDAI_Bytes'], ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI_TokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_Token'] = ResolversParentTypes['XDAI_Token']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['XDAI_Factory'], ParentType, ContextType>;
  symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  decimals?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  derivedETH?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  whitelistPairs?: Resolver<Array<ResolversTypes['XDAI_Pair']>, ParentType, ContextType, RequireFields<XDAI_TokenwhitelistPairsArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['XDAI_TokenHourData']>, ParentType, ContextType, RequireFields<XDAI_TokenhourDataArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['XDAI_TokenDayData']>, ParentType, ContextType, RequireFields<XDAI_TokendayDataArgs, 'skip' | 'first'>>;
  basePairs?: Resolver<Array<ResolversTypes['XDAI_Pair']>, ParentType, ContextType, RequireFields<XDAI_TokenbasePairsArgs, 'skip' | 'first'>>;
  quotePairs?: Resolver<Array<ResolversTypes['XDAI_Pair']>, ParentType, ContextType, RequireFields<XDAI_TokenquotePairsArgs, 'skip' | 'first'>>;
  basePairsDayData?: Resolver<Array<ResolversTypes['XDAI_PairDayData']>, ParentType, ContextType, RequireFields<XDAI_TokenbasePairsDayDataArgs, 'skip' | 'first'>>;
  quotePairsDayData?: Resolver<Array<ResolversTypes['XDAI_PairDayData']>, ParentType, ContextType, RequireFields<XDAI_TokenquotePairsDayDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI_TokenDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_TokenDayData'] = ResolversParentTypes['XDAI_TokenDayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['XDAI_Token'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  priceUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI_TokenHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_TokenHourData'] = ResolversParentTypes['XDAI_TokenHourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['XDAI_Token'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  priceUSD?: Resolver<ResolversTypes['XDAI_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI_TransactionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_Transaction'] = ResolversParentTypes['XDAI_Transaction']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  mints?: Resolver<Array<Maybe<ResolversTypes['XDAI_Mint']>>, ParentType, ContextType, RequireFields<XDAI_TransactionmintsArgs, 'skip' | 'first'>>;
  burns?: Resolver<Array<Maybe<ResolversTypes['XDAI_Burn']>>, ParentType, ContextType, RequireFields<XDAI_TransactionburnsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<Maybe<ResolversTypes['XDAI_Swap']>>, ParentType, ContextType, RequireFields<XDAI_TransactionswapsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI_UserResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI_User'] = ResolversParentTypes['XDAI_User']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  liquidityPositions?: Resolver<Array<ResolversTypes['XDAI_LiquidityPosition']>, ParentType, ContextType, RequireFields<XDAI_UserliquidityPositionsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI__Block_'] = ResolversParentTypes['XDAI__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['XDAI_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type XDAI__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['XDAI__Meta_'] = ResolversParentTypes['XDAI__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['XDAI__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface AVALANCHE_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['AVALANCHE_BigDecimal'], any> {
  name: 'AVALANCHE_BigDecimal';
}

export type AVALANCHE_BundleResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_Bundle'] = ResolversParentTypes['AVALANCHE_Bundle']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  ethPrice?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE_BurnResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_Burn'] = ResolversParentTypes['AVALANCHE_Burn']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['AVALANCHE_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['AVALANCHE_Pair'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['AVALANCHE_Bytes']>, ParentType, ContextType>;
  amount0?: Resolver<Maybe<ResolversTypes['AVALANCHE_BigDecimal']>, ParentType, ContextType>;
  amount1?: Resolver<Maybe<ResolversTypes['AVALANCHE_BigDecimal']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['AVALANCHE_Bytes']>, ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<Maybe<ResolversTypes['AVALANCHE_BigDecimal']>, ParentType, ContextType>;
  complete?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  feeTo?: Resolver<Maybe<ResolversTypes['AVALANCHE_Bytes']>, ParentType, ContextType>;
  feeLiquidity?: Resolver<Maybe<ResolversTypes['AVALANCHE_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface AVALANCHE_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['AVALANCHE_Bytes'], any> {
  name: 'AVALANCHE_Bytes';
}

export type AVALANCHE_DayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_DayData'] = ResolversParentTypes['AVALANCHE_DayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['AVALANCHE_Factory'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  untrackedVolume?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE_FactoryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_Factory'] = ResolversParentTypes['AVALANCHE_Factory']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  pairCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokenCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  userCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pairs?: Resolver<Array<ResolversTypes['AVALANCHE_Pair']>, ParentType, ContextType, RequireFields<AVALANCHE_FactorypairsArgs, 'skip' | 'first'>>;
  tokens?: Resolver<Array<ResolversTypes['AVALANCHE_Token']>, ParentType, ContextType, RequireFields<AVALANCHE_FactorytokensArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['AVALANCHE_HourData']>, ParentType, ContextType, RequireFields<AVALANCHE_FactoryhourDataArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['AVALANCHE_DayData']>, ParentType, ContextType, RequireFields<AVALANCHE_FactorydayDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE_HourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_HourData'] = ResolversParentTypes['AVALANCHE_HourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['AVALANCHE_Factory'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  untrackedVolume?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE_LiquidityPositionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_LiquidityPosition'] = ResolversParentTypes['AVALANCHE_LiquidityPosition']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['AVALANCHE_User'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['AVALANCHE_Pair'], ParentType, ContextType>;
  liquidityTokenBalance?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  snapshots?: Resolver<Array<Maybe<ResolversTypes['AVALANCHE_LiquidityPositionSnapshot']>>, ParentType, ContextType, RequireFields<AVALANCHE_LiquidityPositionsnapshotsArgs, 'skip' | 'first'>>;
  block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE_LiquidityPositionSnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_LiquidityPositionSnapshot'] = ResolversParentTypes['AVALANCHE_LiquidityPositionSnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  liquidityPosition?: Resolver<ResolversTypes['AVALANCHE_LiquidityPosition'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['AVALANCHE_User'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['AVALANCHE_Pair'], ParentType, ContextType>;
  token0PriceUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  token1PriceUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  liquidityTokenTotalSupply?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  liquidityTokenBalance?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE_MintResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_Mint'] = ResolversParentTypes['AVALANCHE_Mint']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['AVALANCHE_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['AVALANCHE_Pair'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['AVALANCHE_Bytes'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['AVALANCHE_Bytes']>, ParentType, ContextType>;
  amount0?: Resolver<Maybe<ResolversTypes['AVALANCHE_BigDecimal']>, ParentType, ContextType>;
  amount1?: Resolver<Maybe<ResolversTypes['AVALANCHE_BigDecimal']>, ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<Maybe<ResolversTypes['AVALANCHE_BigDecimal']>, ParentType, ContextType>;
  feeTo?: Resolver<Maybe<ResolversTypes['AVALANCHE_Bytes']>, ParentType, ContextType>;
  feeLiquidity?: Resolver<Maybe<ResolversTypes['AVALANCHE_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE_PairResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_Pair'] = ResolversParentTypes['AVALANCHE_Pair']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['AVALANCHE_Factory'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  token0?: Resolver<ResolversTypes['AVALANCHE_Token'], ParentType, ContextType>;
  token1?: Resolver<ResolversTypes['AVALANCHE_Token'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  reserveETH?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  trackedReserveETH?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  token0Price?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  token1Price?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityProviderCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityPositions?: Resolver<Array<ResolversTypes['AVALANCHE_LiquidityPosition']>, ParentType, ContextType, RequireFields<AVALANCHE_PairliquidityPositionsArgs, 'skip' | 'first'>>;
  liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['AVALANCHE_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<AVALANCHE_PairliquidityPositionSnapshotsArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['AVALANCHE_PairDayData']>, ParentType, ContextType, RequireFields<AVALANCHE_PairdayDataArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['AVALANCHE_PairHourData']>, ParentType, ContextType, RequireFields<AVALANCHE_PairhourDataArgs, 'skip' | 'first'>>;
  mints?: Resolver<Array<ResolversTypes['AVALANCHE_Mint']>, ParentType, ContextType, RequireFields<AVALANCHE_PairmintsArgs, 'skip' | 'first'>>;
  burns?: Resolver<Array<ResolversTypes['AVALANCHE_Burn']>, ParentType, ContextType, RequireFields<AVALANCHE_PairburnsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<ResolversTypes['AVALANCHE_Swap']>, ParentType, ContextType, RequireFields<AVALANCHE_PairswapsArgs, 'skip' | 'first'>>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE_PairDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_PairDayData'] = ResolversParentTypes['AVALANCHE_PairDayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['AVALANCHE_Pair'], ParentType, ContextType>;
  token0?: Resolver<ResolversTypes['AVALANCHE_Token'], ParentType, ContextType>;
  token1?: Resolver<ResolversTypes['AVALANCHE_Token'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE_PairHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_PairHourData'] = ResolversParentTypes['AVALANCHE_PairHourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['AVALANCHE_Pair'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE_SwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_Swap'] = ResolversParentTypes['AVALANCHE_Swap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['AVALANCHE_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['AVALANCHE_Pair'], ParentType, ContextType>;
  sender?: Resolver<ResolversTypes['AVALANCHE_Bytes'], ParentType, ContextType>;
  amount0In?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  amount1In?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  amount0Out?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  amount1Out?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['AVALANCHE_Bytes'], ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE_TokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_Token'] = ResolversParentTypes['AVALANCHE_Token']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['AVALANCHE_Factory'], ParentType, ContextType>;
  symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  decimals?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  derivedETH?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  whitelistPairs?: Resolver<Array<ResolversTypes['AVALANCHE_Pair']>, ParentType, ContextType, RequireFields<AVALANCHE_TokenwhitelistPairsArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['AVALANCHE_TokenHourData']>, ParentType, ContextType, RequireFields<AVALANCHE_TokenhourDataArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['AVALANCHE_TokenDayData']>, ParentType, ContextType, RequireFields<AVALANCHE_TokendayDataArgs, 'skip' | 'first'>>;
  basePairs?: Resolver<Array<ResolversTypes['AVALANCHE_Pair']>, ParentType, ContextType, RequireFields<AVALANCHE_TokenbasePairsArgs, 'skip' | 'first'>>;
  quotePairs?: Resolver<Array<ResolversTypes['AVALANCHE_Pair']>, ParentType, ContextType, RequireFields<AVALANCHE_TokenquotePairsArgs, 'skip' | 'first'>>;
  basePairsDayData?: Resolver<Array<ResolversTypes['AVALANCHE_PairDayData']>, ParentType, ContextType, RequireFields<AVALANCHE_TokenbasePairsDayDataArgs, 'skip' | 'first'>>;
  quotePairsDayData?: Resolver<Array<ResolversTypes['AVALANCHE_PairDayData']>, ParentType, ContextType, RequireFields<AVALANCHE_TokenquotePairsDayDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE_TokenDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_TokenDayData'] = ResolversParentTypes['AVALANCHE_TokenDayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['AVALANCHE_Token'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  priceUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE_TokenHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_TokenHourData'] = ResolversParentTypes['AVALANCHE_TokenHourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['AVALANCHE_Token'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  priceUSD?: Resolver<ResolversTypes['AVALANCHE_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE_TransactionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_Transaction'] = ResolversParentTypes['AVALANCHE_Transaction']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  mints?: Resolver<Array<Maybe<ResolversTypes['AVALANCHE_Mint']>>, ParentType, ContextType, RequireFields<AVALANCHE_TransactionmintsArgs, 'skip' | 'first'>>;
  burns?: Resolver<Array<Maybe<ResolversTypes['AVALANCHE_Burn']>>, ParentType, ContextType, RequireFields<AVALANCHE_TransactionburnsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<Maybe<ResolversTypes['AVALANCHE_Swap']>>, ParentType, ContextType, RequireFields<AVALANCHE_TransactionswapsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE_UserResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE_User'] = ResolversParentTypes['AVALANCHE_User']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  liquidityPositions?: Resolver<Array<ResolversTypes['AVALANCHE_LiquidityPosition']>, ParentType, ContextType, RequireFields<AVALANCHE_UserliquidityPositionsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE__Block_'] = ResolversParentTypes['AVALANCHE__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['AVALANCHE_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AVALANCHE__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AVALANCHE__Meta_'] = ResolversParentTypes['AVALANCHE__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['AVALANCHE__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface MATIC_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['MATIC_BigDecimal'], any> {
  name: 'MATIC_BigDecimal';
}

export type MATIC_BundleResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_Bundle'] = ResolversParentTypes['MATIC_Bundle']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  ethPrice?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC_BurnResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_Burn'] = ResolversParentTypes['MATIC_Burn']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['MATIC_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['MATIC_Pair'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['MATIC_Bytes']>, ParentType, ContextType>;
  amount0?: Resolver<Maybe<ResolversTypes['MATIC_BigDecimal']>, ParentType, ContextType>;
  amount1?: Resolver<Maybe<ResolversTypes['MATIC_BigDecimal']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['MATIC_Bytes']>, ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<Maybe<ResolversTypes['MATIC_BigDecimal']>, ParentType, ContextType>;
  complete?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  feeTo?: Resolver<Maybe<ResolversTypes['MATIC_Bytes']>, ParentType, ContextType>;
  feeLiquidity?: Resolver<Maybe<ResolversTypes['MATIC_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface MATIC_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['MATIC_Bytes'], any> {
  name: 'MATIC_Bytes';
}

export type MATIC_DayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_DayData'] = ResolversParentTypes['MATIC_DayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['MATIC_Factory'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  untrackedVolume?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC_FactoryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_Factory'] = ResolversParentTypes['MATIC_Factory']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  pairCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokenCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  userCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pairs?: Resolver<Array<ResolversTypes['MATIC_Pair']>, ParentType, ContextType, RequireFields<MATIC_FactorypairsArgs, 'skip' | 'first'>>;
  tokens?: Resolver<Array<ResolversTypes['MATIC_Token']>, ParentType, ContextType, RequireFields<MATIC_FactorytokensArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['MATIC_HourData']>, ParentType, ContextType, RequireFields<MATIC_FactoryhourDataArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['MATIC_DayData']>, ParentType, ContextType, RequireFields<MATIC_FactorydayDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC_HourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_HourData'] = ResolversParentTypes['MATIC_HourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['MATIC_Factory'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  untrackedVolume?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC_LiquidityPositionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_LiquidityPosition'] = ResolversParentTypes['MATIC_LiquidityPosition']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['MATIC_User'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['MATIC_Pair'], ParentType, ContextType>;
  liquidityTokenBalance?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  snapshots?: Resolver<Array<Maybe<ResolversTypes['MATIC_LiquidityPositionSnapshot']>>, ParentType, ContextType, RequireFields<MATIC_LiquidityPositionsnapshotsArgs, 'skip' | 'first'>>;
  block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC_LiquidityPositionSnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_LiquidityPositionSnapshot'] = ResolversParentTypes['MATIC_LiquidityPositionSnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  liquidityPosition?: Resolver<ResolversTypes['MATIC_LiquidityPosition'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['MATIC_User'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['MATIC_Pair'], ParentType, ContextType>;
  token0PriceUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  token1PriceUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  liquidityTokenTotalSupply?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  liquidityTokenBalance?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC_MintResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_Mint'] = ResolversParentTypes['MATIC_Mint']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['MATIC_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['MATIC_Pair'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['MATIC_Bytes'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['MATIC_Bytes']>, ParentType, ContextType>;
  amount0?: Resolver<Maybe<ResolversTypes['MATIC_BigDecimal']>, ParentType, ContextType>;
  amount1?: Resolver<Maybe<ResolversTypes['MATIC_BigDecimal']>, ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<Maybe<ResolversTypes['MATIC_BigDecimal']>, ParentType, ContextType>;
  feeTo?: Resolver<Maybe<ResolversTypes['MATIC_Bytes']>, ParentType, ContextType>;
  feeLiquidity?: Resolver<Maybe<ResolversTypes['MATIC_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC_PairResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_Pair'] = ResolversParentTypes['MATIC_Pair']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['MATIC_Factory'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  token0?: Resolver<ResolversTypes['MATIC_Token'], ParentType, ContextType>;
  token1?: Resolver<ResolversTypes['MATIC_Token'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  reserveETH?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  trackedReserveETH?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  token0Price?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  token1Price?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityProviderCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityPositions?: Resolver<Array<ResolversTypes['MATIC_LiquidityPosition']>, ParentType, ContextType, RequireFields<MATIC_PairliquidityPositionsArgs, 'skip' | 'first'>>;
  liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['MATIC_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<MATIC_PairliquidityPositionSnapshotsArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['MATIC_PairDayData']>, ParentType, ContextType, RequireFields<MATIC_PairdayDataArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['MATIC_PairHourData']>, ParentType, ContextType, RequireFields<MATIC_PairhourDataArgs, 'skip' | 'first'>>;
  mints?: Resolver<Array<ResolversTypes['MATIC_Mint']>, ParentType, ContextType, RequireFields<MATIC_PairmintsArgs, 'skip' | 'first'>>;
  burns?: Resolver<Array<ResolversTypes['MATIC_Burn']>, ParentType, ContextType, RequireFields<MATIC_PairburnsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<ResolversTypes['MATIC_Swap']>, ParentType, ContextType, RequireFields<MATIC_PairswapsArgs, 'skip' | 'first'>>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC_PairDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_PairDayData'] = ResolversParentTypes['MATIC_PairDayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['MATIC_Pair'], ParentType, ContextType>;
  token0?: Resolver<ResolversTypes['MATIC_Token'], ParentType, ContextType>;
  token1?: Resolver<ResolversTypes['MATIC_Token'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC_PairHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_PairHourData'] = ResolversParentTypes['MATIC_PairHourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['MATIC_Pair'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC_SwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_Swap'] = ResolversParentTypes['MATIC_Swap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['MATIC_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['MATIC_Pair'], ParentType, ContextType>;
  sender?: Resolver<ResolversTypes['MATIC_Bytes'], ParentType, ContextType>;
  amount0In?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  amount1In?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  amount0Out?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  amount1Out?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['MATIC_Bytes'], ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC_TokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_Token'] = ResolversParentTypes['MATIC_Token']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['MATIC_Factory'], ParentType, ContextType>;
  symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  decimals?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  derivedETH?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  whitelistPairs?: Resolver<Array<ResolversTypes['MATIC_Pair']>, ParentType, ContextType, RequireFields<MATIC_TokenwhitelistPairsArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['MATIC_TokenHourData']>, ParentType, ContextType, RequireFields<MATIC_TokenhourDataArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['MATIC_TokenDayData']>, ParentType, ContextType, RequireFields<MATIC_TokendayDataArgs, 'skip' | 'first'>>;
  basePairs?: Resolver<Array<ResolversTypes['MATIC_Pair']>, ParentType, ContextType, RequireFields<MATIC_TokenbasePairsArgs, 'skip' | 'first'>>;
  quotePairs?: Resolver<Array<ResolversTypes['MATIC_Pair']>, ParentType, ContextType, RequireFields<MATIC_TokenquotePairsArgs, 'skip' | 'first'>>;
  basePairsDayData?: Resolver<Array<ResolversTypes['MATIC_PairDayData']>, ParentType, ContextType, RequireFields<MATIC_TokenbasePairsDayDataArgs, 'skip' | 'first'>>;
  quotePairsDayData?: Resolver<Array<ResolversTypes['MATIC_PairDayData']>, ParentType, ContextType, RequireFields<MATIC_TokenquotePairsDayDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC_TokenDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_TokenDayData'] = ResolversParentTypes['MATIC_TokenDayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['MATIC_Token'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  priceUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC_TokenHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_TokenHourData'] = ResolversParentTypes['MATIC_TokenHourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['MATIC_Token'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  priceUSD?: Resolver<ResolversTypes['MATIC_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC_TransactionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_Transaction'] = ResolversParentTypes['MATIC_Transaction']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  mints?: Resolver<Array<Maybe<ResolversTypes['MATIC_Mint']>>, ParentType, ContextType, RequireFields<MATIC_TransactionmintsArgs, 'skip' | 'first'>>;
  burns?: Resolver<Array<Maybe<ResolversTypes['MATIC_Burn']>>, ParentType, ContextType, RequireFields<MATIC_TransactionburnsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<Maybe<ResolversTypes['MATIC_Swap']>>, ParentType, ContextType, RequireFields<MATIC_TransactionswapsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC_UserResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC_User'] = ResolversParentTypes['MATIC_User']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  liquidityPositions?: Resolver<Array<ResolversTypes['MATIC_LiquidityPosition']>, ParentType, ContextType, RequireFields<MATIC_UserliquidityPositionsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC__Block_'] = ResolversParentTypes['MATIC__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['MATIC_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MATIC__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MATIC__Meta_'] = ResolversParentTypes['MATIC__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['MATIC__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface BSC_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BSC_BigDecimal'], any> {
  name: 'BSC_BigDecimal';
}

export type BSC_BundleResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_Bundle'] = ResolversParentTypes['BSC_Bundle']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  ethPrice?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC_BurnResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_Burn'] = ResolversParentTypes['BSC_Burn']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['BSC_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['BSC_Pair'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['BSC_Bytes']>, ParentType, ContextType>;
  amount0?: Resolver<Maybe<ResolversTypes['BSC_BigDecimal']>, ParentType, ContextType>;
  amount1?: Resolver<Maybe<ResolversTypes['BSC_BigDecimal']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['BSC_Bytes']>, ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<Maybe<ResolversTypes['BSC_BigDecimal']>, ParentType, ContextType>;
  complete?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  feeTo?: Resolver<Maybe<ResolversTypes['BSC_Bytes']>, ParentType, ContextType>;
  feeLiquidity?: Resolver<Maybe<ResolversTypes['BSC_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface BSC_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BSC_Bytes'], any> {
  name: 'BSC_Bytes';
}

export type BSC_DayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_DayData'] = ResolversParentTypes['BSC_DayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['BSC_Factory'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  untrackedVolume?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC_FactoryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_Factory'] = ResolversParentTypes['BSC_Factory']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  pairCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokenCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  userCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pairs?: Resolver<Array<ResolversTypes['BSC_Pair']>, ParentType, ContextType, RequireFields<BSC_FactorypairsArgs, 'skip' | 'first'>>;
  tokens?: Resolver<Array<ResolversTypes['BSC_Token']>, ParentType, ContextType, RequireFields<BSC_FactorytokensArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['BSC_HourData']>, ParentType, ContextType, RequireFields<BSC_FactoryhourDataArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['BSC_DayData']>, ParentType, ContextType, RequireFields<BSC_FactorydayDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC_HourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_HourData'] = ResolversParentTypes['BSC_HourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['BSC_Factory'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  untrackedVolume?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC_LiquidityPositionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_LiquidityPosition'] = ResolversParentTypes['BSC_LiquidityPosition']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['BSC_User'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['BSC_Pair'], ParentType, ContextType>;
  liquidityTokenBalance?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  snapshots?: Resolver<Array<Maybe<ResolversTypes['BSC_LiquidityPositionSnapshot']>>, ParentType, ContextType, RequireFields<BSC_LiquidityPositionsnapshotsArgs, 'skip' | 'first'>>;
  block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC_LiquidityPositionSnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_LiquidityPositionSnapshot'] = ResolversParentTypes['BSC_LiquidityPositionSnapshot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  liquidityPosition?: Resolver<ResolversTypes['BSC_LiquidityPosition'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['BSC_User'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['BSC_Pair'], ParentType, ContextType>;
  token0PriceUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  token1PriceUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  liquidityTokenTotalSupply?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  liquidityTokenBalance?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC_MintResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_Mint'] = ResolversParentTypes['BSC_Mint']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['BSC_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['BSC_Pair'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['BSC_Bytes'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['BSC_Bytes']>, ParentType, ContextType>;
  amount0?: Resolver<Maybe<ResolversTypes['BSC_BigDecimal']>, ParentType, ContextType>;
  amount1?: Resolver<Maybe<ResolversTypes['BSC_BigDecimal']>, ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<Maybe<ResolversTypes['BSC_BigDecimal']>, ParentType, ContextType>;
  feeTo?: Resolver<Maybe<ResolversTypes['BSC_Bytes']>, ParentType, ContextType>;
  feeLiquidity?: Resolver<Maybe<ResolversTypes['BSC_BigDecimal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC_PairResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_Pair'] = ResolversParentTypes['BSC_Pair']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['BSC_Factory'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  token0?: Resolver<ResolversTypes['BSC_Token'], ParentType, ContextType>;
  token1?: Resolver<ResolversTypes['BSC_Token'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  reserveETH?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  trackedReserveETH?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  token0Price?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  token1Price?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityProviderCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidityPositions?: Resolver<Array<ResolversTypes['BSC_LiquidityPosition']>, ParentType, ContextType, RequireFields<BSC_PairliquidityPositionsArgs, 'skip' | 'first'>>;
  liquidityPositionSnapshots?: Resolver<Array<ResolversTypes['BSC_LiquidityPositionSnapshot']>, ParentType, ContextType, RequireFields<BSC_PairliquidityPositionSnapshotsArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['BSC_PairDayData']>, ParentType, ContextType, RequireFields<BSC_PairdayDataArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['BSC_PairHourData']>, ParentType, ContextType, RequireFields<BSC_PairhourDataArgs, 'skip' | 'first'>>;
  mints?: Resolver<Array<ResolversTypes['BSC_Mint']>, ParentType, ContextType, RequireFields<BSC_PairmintsArgs, 'skip' | 'first'>>;
  burns?: Resolver<Array<ResolversTypes['BSC_Burn']>, ParentType, ContextType, RequireFields<BSC_PairburnsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<ResolversTypes['BSC_Swap']>, ParentType, ContextType, RequireFields<BSC_PairswapsArgs, 'skip' | 'first'>>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC_PairDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_PairDayData'] = ResolversParentTypes['BSC_PairDayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['BSC_Pair'], ParentType, ContextType>;
  token0?: Resolver<ResolversTypes['BSC_Token'], ParentType, ContextType>;
  token1?: Resolver<ResolversTypes['BSC_Token'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC_PairHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_PairHourData'] = ResolversParentTypes['BSC_PairHourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['BSC_Pair'], ParentType, ContextType>;
  reserve0?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  reserve1?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  reserveUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeToken0?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeToken1?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC_SwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_Swap'] = ResolversParentTypes['BSC_Swap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['BSC_Transaction'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  pair?: Resolver<ResolversTypes['BSC_Pair'], ParentType, ContextType>;
  sender?: Resolver<ResolversTypes['BSC_Bytes'], ParentType, ContextType>;
  amount0In?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  amount1In?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  amount0Out?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  amount1Out?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['BSC_Bytes'], ParentType, ContextType>;
  logIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amountUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC_TokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_Token'] = ResolversParentTypes['BSC_Token']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  factory?: Resolver<ResolversTypes['BSC_Factory'], ParentType, ContextType>;
  symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  decimals?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  totalSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  untrackedVolumeUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  derivedETH?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  whitelistPairs?: Resolver<Array<ResolversTypes['BSC_Pair']>, ParentType, ContextType, RequireFields<BSC_TokenwhitelistPairsArgs, 'skip' | 'first'>>;
  hourData?: Resolver<Array<ResolversTypes['BSC_TokenHourData']>, ParentType, ContextType, RequireFields<BSC_TokenhourDataArgs, 'skip' | 'first'>>;
  dayData?: Resolver<Array<ResolversTypes['BSC_TokenDayData']>, ParentType, ContextType, RequireFields<BSC_TokendayDataArgs, 'skip' | 'first'>>;
  basePairs?: Resolver<Array<ResolversTypes['BSC_Pair']>, ParentType, ContextType, RequireFields<BSC_TokenbasePairsArgs, 'skip' | 'first'>>;
  quotePairs?: Resolver<Array<ResolversTypes['BSC_Pair']>, ParentType, ContextType, RequireFields<BSC_TokenquotePairsArgs, 'skip' | 'first'>>;
  basePairsDayData?: Resolver<Array<ResolversTypes['BSC_PairDayData']>, ParentType, ContextType, RequireFields<BSC_TokenbasePairsDayDataArgs, 'skip' | 'first'>>;
  quotePairsDayData?: Resolver<Array<ResolversTypes['BSC_PairDayData']>, ParentType, ContextType, RequireFields<BSC_TokenquotePairsDayDataArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC_TokenDayDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_TokenDayData'] = ResolversParentTypes['BSC_TokenDayData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['BSC_Token'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  priceUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC_TokenHourDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_TokenHourData'] = ResolversParentTypes['BSC_TokenHourData']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  token?: Resolver<ResolversTypes['BSC_Token'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeETH?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  volumeUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  txCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  liquidity?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  liquidityETH?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  liquidityUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  priceUSD?: Resolver<ResolversTypes['BSC_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC_TransactionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_Transaction'] = ResolversParentTypes['BSC_Transaction']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  mints?: Resolver<Array<Maybe<ResolversTypes['BSC_Mint']>>, ParentType, ContextType, RequireFields<BSC_TransactionmintsArgs, 'skip' | 'first'>>;
  burns?: Resolver<Array<Maybe<ResolversTypes['BSC_Burn']>>, ParentType, ContextType, RequireFields<BSC_TransactionburnsArgs, 'skip' | 'first'>>;
  swaps?: Resolver<Array<Maybe<ResolversTypes['BSC_Swap']>>, ParentType, ContextType, RequireFields<BSC_TransactionswapsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC_UserResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC_User'] = ResolversParentTypes['BSC_User']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  liquidityPositions?: Resolver<Array<ResolversTypes['BSC_LiquidityPosition']>, ParentType, ContextType, RequireFields<BSC_UserliquidityPositionsArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC__Block_'] = ResolversParentTypes['BSC__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['BSC_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BSC__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BSC__Meta_'] = ResolversParentTypes['BSC__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['BSC__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Resolvers<ContextType = MeshContext> = ResolversObject<{
  Query?: QueryResolvers<ContextType>;
  Subscription?: SubscriptionResolvers<ContextType>;
  ETHEREUM_BigDecimal?: GraphQLScalarType;
  BigInt?: GraphQLScalarType;
  ETHEREUM_Bundle?: ETHEREUM_BundleResolvers<ContextType>;
  ETHEREUM_Burn?: ETHEREUM_BurnResolvers<ContextType>;
  ETHEREUM_Bytes?: GraphQLScalarType;
  ETHEREUM_DayData?: ETHEREUM_DayDataResolvers<ContextType>;
  ETHEREUM_Factory?: ETHEREUM_FactoryResolvers<ContextType>;
  ETHEREUM_HourData?: ETHEREUM_HourDataResolvers<ContextType>;
  ETHEREUM_LiquidityPosition?: ETHEREUM_LiquidityPositionResolvers<ContextType>;
  ETHEREUM_LiquidityPositionSnapshot?: ETHEREUM_LiquidityPositionSnapshotResolvers<ContextType>;
  ETHEREUM_Mint?: ETHEREUM_MintResolvers<ContextType>;
  ETHEREUM_Pair?: ETHEREUM_PairResolvers<ContextType>;
  ETHEREUM_PairDayData?: ETHEREUM_PairDayDataResolvers<ContextType>;
  ETHEREUM_PairHourData?: ETHEREUM_PairHourDataResolvers<ContextType>;
  ETHEREUM_Swap?: ETHEREUM_SwapResolvers<ContextType>;
  ETHEREUM_Token?: ETHEREUM_TokenResolvers<ContextType>;
  ETHEREUM_TokenDayData?: ETHEREUM_TokenDayDataResolvers<ContextType>;
  ETHEREUM_TokenHourData?: ETHEREUM_TokenHourDataResolvers<ContextType>;
  ETHEREUM_Transaction?: ETHEREUM_TransactionResolvers<ContextType>;
  ETHEREUM_User?: ETHEREUM_UserResolvers<ContextType>;
  ETHEREUM__Block_?: ETHEREUM__Block_Resolvers<ContextType>;
  ETHEREUM__Meta_?: ETHEREUM__Meta_Resolvers<ContextType>;
  MOONRIVER_BigDecimal?: GraphQLScalarType;
  MOONRIVER_Bundle?: MOONRIVER_BundleResolvers<ContextType>;
  MOONRIVER_Burn?: MOONRIVER_BurnResolvers<ContextType>;
  MOONRIVER_Bytes?: GraphQLScalarType;
  MOONRIVER_DayData?: MOONRIVER_DayDataResolvers<ContextType>;
  MOONRIVER_Factory?: MOONRIVER_FactoryResolvers<ContextType>;
  MOONRIVER_HourData?: MOONRIVER_HourDataResolvers<ContextType>;
  MOONRIVER_LiquidityPosition?: MOONRIVER_LiquidityPositionResolvers<ContextType>;
  MOONRIVER_LiquidityPositionSnapshot?: MOONRIVER_LiquidityPositionSnapshotResolvers<ContextType>;
  MOONRIVER_Mint?: MOONRIVER_MintResolvers<ContextType>;
  MOONRIVER_Pair?: MOONRIVER_PairResolvers<ContextType>;
  MOONRIVER_PairDayData?: MOONRIVER_PairDayDataResolvers<ContextType>;
  MOONRIVER_PairHourData?: MOONRIVER_PairHourDataResolvers<ContextType>;
  MOONRIVER_Swap?: MOONRIVER_SwapResolvers<ContextType>;
  MOONRIVER_Token?: MOONRIVER_TokenResolvers<ContextType>;
  MOONRIVER_TokenDayData?: MOONRIVER_TokenDayDataResolvers<ContextType>;
  MOONRIVER_TokenHourData?: MOONRIVER_TokenHourDataResolvers<ContextType>;
  MOONRIVER_Transaction?: MOONRIVER_TransactionResolvers<ContextType>;
  MOONRIVER_User?: MOONRIVER_UserResolvers<ContextType>;
  MOONRIVER__Block_?: MOONRIVER__Block_Resolvers<ContextType>;
  MOONRIVER__Meta_?: MOONRIVER__Meta_Resolvers<ContextType>;
  ARBITRUM_BigDecimal?: GraphQLScalarType;
  ARBITRUM_Bundle?: ARBITRUM_BundleResolvers<ContextType>;
  ARBITRUM_Burn?: ARBITRUM_BurnResolvers<ContextType>;
  ARBITRUM_Bytes?: GraphQLScalarType;
  ARBITRUM_DayData?: ARBITRUM_DayDataResolvers<ContextType>;
  ARBITRUM_Factory?: ARBITRUM_FactoryResolvers<ContextType>;
  ARBITRUM_HourData?: ARBITRUM_HourDataResolvers<ContextType>;
  ARBITRUM_LiquidityPosition?: ARBITRUM_LiquidityPositionResolvers<ContextType>;
  ARBITRUM_LiquidityPositionSnapshot?: ARBITRUM_LiquidityPositionSnapshotResolvers<ContextType>;
  ARBITRUM_Mint?: ARBITRUM_MintResolvers<ContextType>;
  ARBITRUM_Pair?: ARBITRUM_PairResolvers<ContextType>;
  ARBITRUM_PairDayData?: ARBITRUM_PairDayDataResolvers<ContextType>;
  ARBITRUM_PairHourData?: ARBITRUM_PairHourDataResolvers<ContextType>;
  ARBITRUM_Swap?: ARBITRUM_SwapResolvers<ContextType>;
  ARBITRUM_Token?: ARBITRUM_TokenResolvers<ContextType>;
  ARBITRUM_TokenDayData?: ARBITRUM_TokenDayDataResolvers<ContextType>;
  ARBITRUM_TokenHourData?: ARBITRUM_TokenHourDataResolvers<ContextType>;
  ARBITRUM_Transaction?: ARBITRUM_TransactionResolvers<ContextType>;
  ARBITRUM_User?: ARBITRUM_UserResolvers<ContextType>;
  ARBITRUM__Block_?: ARBITRUM__Block_Resolvers<ContextType>;
  ARBITRUM__Meta_?: ARBITRUM__Meta_Resolvers<ContextType>;
  FANTOM_BigDecimal?: GraphQLScalarType;
  FANTOM_Bundle?: FANTOM_BundleResolvers<ContextType>;
  FANTOM_Burn?: FANTOM_BurnResolvers<ContextType>;
  FANTOM_Bytes?: GraphQLScalarType;
  FANTOM_DayData?: FANTOM_DayDataResolvers<ContextType>;
  FANTOM_Factory?: FANTOM_FactoryResolvers<ContextType>;
  FANTOM_HourData?: FANTOM_HourDataResolvers<ContextType>;
  FANTOM_LiquidityPosition?: FANTOM_LiquidityPositionResolvers<ContextType>;
  FANTOM_LiquidityPositionSnapshot?: FANTOM_LiquidityPositionSnapshotResolvers<ContextType>;
  FANTOM_Mint?: FANTOM_MintResolvers<ContextType>;
  FANTOM_Pair?: FANTOM_PairResolvers<ContextType>;
  FANTOM_PairDayData?: FANTOM_PairDayDataResolvers<ContextType>;
  FANTOM_PairHourData?: FANTOM_PairHourDataResolvers<ContextType>;
  FANTOM_Swap?: FANTOM_SwapResolvers<ContextType>;
  FANTOM_Token?: FANTOM_TokenResolvers<ContextType>;
  FANTOM_TokenDayData?: FANTOM_TokenDayDataResolvers<ContextType>;
  FANTOM_TokenHourData?: FANTOM_TokenHourDataResolvers<ContextType>;
  FANTOM_Transaction?: FANTOM_TransactionResolvers<ContextType>;
  FANTOM_User?: FANTOM_UserResolvers<ContextType>;
  FANTOM__Block_?: FANTOM__Block_Resolvers<ContextType>;
  FANTOM__Meta_?: FANTOM__Meta_Resolvers<ContextType>;
  XDAI_BigDecimal?: GraphQLScalarType;
  XDAI_Bundle?: XDAI_BundleResolvers<ContextType>;
  XDAI_Burn?: XDAI_BurnResolvers<ContextType>;
  XDAI_Bytes?: GraphQLScalarType;
  XDAI_DayData?: XDAI_DayDataResolvers<ContextType>;
  XDAI_Factory?: XDAI_FactoryResolvers<ContextType>;
  XDAI_HourData?: XDAI_HourDataResolvers<ContextType>;
  XDAI_LiquidityPosition?: XDAI_LiquidityPositionResolvers<ContextType>;
  XDAI_LiquidityPositionSnapshot?: XDAI_LiquidityPositionSnapshotResolvers<ContextType>;
  XDAI_Mint?: XDAI_MintResolvers<ContextType>;
  XDAI_Pair?: XDAI_PairResolvers<ContextType>;
  XDAI_PairDayData?: XDAI_PairDayDataResolvers<ContextType>;
  XDAI_PairHourData?: XDAI_PairHourDataResolvers<ContextType>;
  XDAI_Swap?: XDAI_SwapResolvers<ContextType>;
  XDAI_Token?: XDAI_TokenResolvers<ContextType>;
  XDAI_TokenDayData?: XDAI_TokenDayDataResolvers<ContextType>;
  XDAI_TokenHourData?: XDAI_TokenHourDataResolvers<ContextType>;
  XDAI_Transaction?: XDAI_TransactionResolvers<ContextType>;
  XDAI_User?: XDAI_UserResolvers<ContextType>;
  XDAI__Block_?: XDAI__Block_Resolvers<ContextType>;
  XDAI__Meta_?: XDAI__Meta_Resolvers<ContextType>;
  AVALANCHE_BigDecimal?: GraphQLScalarType;
  AVALANCHE_Bundle?: AVALANCHE_BundleResolvers<ContextType>;
  AVALANCHE_Burn?: AVALANCHE_BurnResolvers<ContextType>;
  AVALANCHE_Bytes?: GraphQLScalarType;
  AVALANCHE_DayData?: AVALANCHE_DayDataResolvers<ContextType>;
  AVALANCHE_Factory?: AVALANCHE_FactoryResolvers<ContextType>;
  AVALANCHE_HourData?: AVALANCHE_HourDataResolvers<ContextType>;
  AVALANCHE_LiquidityPosition?: AVALANCHE_LiquidityPositionResolvers<ContextType>;
  AVALANCHE_LiquidityPositionSnapshot?: AVALANCHE_LiquidityPositionSnapshotResolvers<ContextType>;
  AVALANCHE_Mint?: AVALANCHE_MintResolvers<ContextType>;
  AVALANCHE_Pair?: AVALANCHE_PairResolvers<ContextType>;
  AVALANCHE_PairDayData?: AVALANCHE_PairDayDataResolvers<ContextType>;
  AVALANCHE_PairHourData?: AVALANCHE_PairHourDataResolvers<ContextType>;
  AVALANCHE_Swap?: AVALANCHE_SwapResolvers<ContextType>;
  AVALANCHE_Token?: AVALANCHE_TokenResolvers<ContextType>;
  AVALANCHE_TokenDayData?: AVALANCHE_TokenDayDataResolvers<ContextType>;
  AVALANCHE_TokenHourData?: AVALANCHE_TokenHourDataResolvers<ContextType>;
  AVALANCHE_Transaction?: AVALANCHE_TransactionResolvers<ContextType>;
  AVALANCHE_User?: AVALANCHE_UserResolvers<ContextType>;
  AVALANCHE__Block_?: AVALANCHE__Block_Resolvers<ContextType>;
  AVALANCHE__Meta_?: AVALANCHE__Meta_Resolvers<ContextType>;
  MATIC_BigDecimal?: GraphQLScalarType;
  MATIC_Bundle?: MATIC_BundleResolvers<ContextType>;
  MATIC_Burn?: MATIC_BurnResolvers<ContextType>;
  MATIC_Bytes?: GraphQLScalarType;
  MATIC_DayData?: MATIC_DayDataResolvers<ContextType>;
  MATIC_Factory?: MATIC_FactoryResolvers<ContextType>;
  MATIC_HourData?: MATIC_HourDataResolvers<ContextType>;
  MATIC_LiquidityPosition?: MATIC_LiquidityPositionResolvers<ContextType>;
  MATIC_LiquidityPositionSnapshot?: MATIC_LiquidityPositionSnapshotResolvers<ContextType>;
  MATIC_Mint?: MATIC_MintResolvers<ContextType>;
  MATIC_Pair?: MATIC_PairResolvers<ContextType>;
  MATIC_PairDayData?: MATIC_PairDayDataResolvers<ContextType>;
  MATIC_PairHourData?: MATIC_PairHourDataResolvers<ContextType>;
  MATIC_Swap?: MATIC_SwapResolvers<ContextType>;
  MATIC_Token?: MATIC_TokenResolvers<ContextType>;
  MATIC_TokenDayData?: MATIC_TokenDayDataResolvers<ContextType>;
  MATIC_TokenHourData?: MATIC_TokenHourDataResolvers<ContextType>;
  MATIC_Transaction?: MATIC_TransactionResolvers<ContextType>;
  MATIC_User?: MATIC_UserResolvers<ContextType>;
  MATIC__Block_?: MATIC__Block_Resolvers<ContextType>;
  MATIC__Meta_?: MATIC__Meta_Resolvers<ContextType>;
  BSC_BigDecimal?: GraphQLScalarType;
  BSC_Bundle?: BSC_BundleResolvers<ContextType>;
  BSC_Burn?: BSC_BurnResolvers<ContextType>;
  BSC_Bytes?: GraphQLScalarType;
  BSC_DayData?: BSC_DayDataResolvers<ContextType>;
  BSC_Factory?: BSC_FactoryResolvers<ContextType>;
  BSC_HourData?: BSC_HourDataResolvers<ContextType>;
  BSC_LiquidityPosition?: BSC_LiquidityPositionResolvers<ContextType>;
  BSC_LiquidityPositionSnapshot?: BSC_LiquidityPositionSnapshotResolvers<ContextType>;
  BSC_Mint?: BSC_MintResolvers<ContextType>;
  BSC_Pair?: BSC_PairResolvers<ContextType>;
  BSC_PairDayData?: BSC_PairDayDataResolvers<ContextType>;
  BSC_PairHourData?: BSC_PairHourDataResolvers<ContextType>;
  BSC_Swap?: BSC_SwapResolvers<ContextType>;
  BSC_Token?: BSC_TokenResolvers<ContextType>;
  BSC_TokenDayData?: BSC_TokenDayDataResolvers<ContextType>;
  BSC_TokenHourData?: BSC_TokenHourDataResolvers<ContextType>;
  BSC_Transaction?: BSC_TransactionResolvers<ContextType>;
  BSC_User?: BSC_UserResolvers<ContextType>;
  BSC__Block_?: BSC__Block_Resolvers<ContextType>;
  BSC__Meta_?: BSC__Meta_Resolvers<ContextType>;
}>;


import { MeshContext as BaseMeshContext, MeshInstance } from '@graphql-mesh/runtime';

import { InContextSdkMethod } from '@graphql-mesh/types';


    export namespace EthereumExchangeTypes {
      export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  ETHEREUM_BigDecimal: any;
  BigInt: any;
  ETHEREUM_Bytes: any;
};

/** The block at which the query should be executed. */
export type ETHEREUM_Block_height = {
  /** Value containing a block hash */
  hash?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  /** Value containing a block number */
  number?: InputMaybe<Scalars['Int']>;
  /**
   * Value containing the minimum block number.
   * In the case of `number_gte`, the query will be executed on the latest block only if
   * the subgraph has progressed to or past the minimum block number.
   * Defaults to the latest block when omitted.
   *
   */
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type ETHEREUM_Bundle = {
  id: Scalars['ID'];
  ethPrice: Scalars['ETHEREUM_BigDecimal'];
};

export type ETHEREUM_Bundle_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ethPrice?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  ethPrice_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  ethPrice_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  ethPrice_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  ethPrice_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  ethPrice_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  ethPrice_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  ethPrice_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
};

export type ETHEREUM_Bundle_orderBy =
  | 'id'
  | 'ethPrice';

export type ETHEREUM_Burn = {
  id: Scalars['ID'];
  transaction: ETHEREUM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: ETHEREUM_Pair;
  liquidity: Scalars['ETHEREUM_BigDecimal'];
  sender?: Maybe<Scalars['ETHEREUM_Bytes']>;
  amount0?: Maybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1?: Maybe<Scalars['ETHEREUM_BigDecimal']>;
  to?: Maybe<Scalars['ETHEREUM_Bytes']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['ETHEREUM_BigDecimal']>;
  complete: Scalars['Boolean'];
  feeTo?: Maybe<Scalars['ETHEREUM_Bytes']>;
  feeLiquidity?: Maybe<Scalars['ETHEREUM_BigDecimal']>;
};

export type ETHEREUM_Burn_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidity?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  sender?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_not?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  amount0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  to?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_not?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  complete?: InputMaybe<Scalars['Boolean']>;
  complete_not?: InputMaybe<Scalars['Boolean']>;
  complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
  complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  feeTo?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
};

export type ETHEREUM_Burn_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'to'
  | 'logIndex'
  | 'amountUSD'
  | 'complete'
  | 'feeTo'
  | 'feeLiquidity';

export type ETHEREUM_DayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: ETHEREUM_Factory;
  volumeETH: Scalars['ETHEREUM_BigDecimal'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  untrackedVolume: Scalars['ETHEREUM_BigDecimal'];
  liquidityETH: Scalars['ETHEREUM_BigDecimal'];
  liquidityUSD: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type ETHEREUM_DayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ETHEREUM_DayData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type ETHEREUM_Factory = {
  id: Scalars['ID'];
  pairCount: Scalars['BigInt'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  volumeETH: Scalars['ETHEREUM_BigDecimal'];
  untrackedVolumeUSD: Scalars['ETHEREUM_BigDecimal'];
  liquidityUSD: Scalars['ETHEREUM_BigDecimal'];
  liquidityETH: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  tokenCount: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  pairs: Array<ETHEREUM_Pair>;
  tokens: Array<ETHEREUM_Token>;
  hourData: Array<ETHEREUM_HourData>;
  dayData: Array<ETHEREUM_DayData>;
};


export type ETHEREUM_FactorypairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Pair_filter>;
};


export type ETHEREUM_FactorytokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Token_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Token_filter>;
};


export type ETHEREUM_FactoryhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_HourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_HourData_filter>;
};


export type ETHEREUM_FactorydayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_DayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_DayData_filter>;
};

export type ETHEREUM_Factory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  pairCount?: InputMaybe<Scalars['BigInt']>;
  pairCount_not?: InputMaybe<Scalars['BigInt']>;
  pairCount_gt?: InputMaybe<Scalars['BigInt']>;
  pairCount_lt?: InputMaybe<Scalars['BigInt']>;
  pairCount_gte?: InputMaybe<Scalars['BigInt']>;
  pairCount_lte?: InputMaybe<Scalars['BigInt']>;
  pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount?: InputMaybe<Scalars['BigInt']>;
  tokenCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount?: InputMaybe<Scalars['BigInt']>;
  userCount_not?: InputMaybe<Scalars['BigInt']>;
  userCount_gt?: InputMaybe<Scalars['BigInt']>;
  userCount_lt?: InputMaybe<Scalars['BigInt']>;
  userCount_gte?: InputMaybe<Scalars['BigInt']>;
  userCount_lte?: InputMaybe<Scalars['BigInt']>;
  userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ETHEREUM_Factory_orderBy =
  | 'id'
  | 'pairCount'
  | 'volumeUSD'
  | 'volumeETH'
  | 'untrackedVolumeUSD'
  | 'liquidityUSD'
  | 'liquidityETH'
  | 'txCount'
  | 'tokenCount'
  | 'userCount'
  | 'pairs'
  | 'tokens'
  | 'hourData'
  | 'dayData';

export type ETHEREUM_HourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: ETHEREUM_Factory;
  volumeETH: Scalars['ETHEREUM_BigDecimal'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  untrackedVolume: Scalars['ETHEREUM_BigDecimal'];
  liquidityETH: Scalars['ETHEREUM_BigDecimal'];
  liquidityUSD: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type ETHEREUM_HourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ETHEREUM_HourData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type ETHEREUM_LiquidityPosition = {
  id: Scalars['ID'];
  user: ETHEREUM_User;
  pair: ETHEREUM_Pair;
  liquidityTokenBalance: Scalars['ETHEREUM_BigDecimal'];
  snapshots: Array<Maybe<ETHEREUM_LiquidityPositionSnapshot>>;
  block: Scalars['Int'];
  timestamp: Scalars['Int'];
};


export type ETHEREUM_LiquidityPositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_LiquidityPositionSnapshot_filter>;
};

export type ETHEREUM_LiquidityPositionSnapshot = {
  id: Scalars['ID'];
  liquidityPosition: ETHEREUM_LiquidityPosition;
  timestamp: Scalars['Int'];
  block: Scalars['Int'];
  user: ETHEREUM_User;
  pair: ETHEREUM_Pair;
  token0PriceUSD: Scalars['ETHEREUM_BigDecimal'];
  token1PriceUSD: Scalars['ETHEREUM_BigDecimal'];
  reserve0: Scalars['ETHEREUM_BigDecimal'];
  reserve1: Scalars['ETHEREUM_BigDecimal'];
  reserveUSD: Scalars['ETHEREUM_BigDecimal'];
  liquidityTokenTotalSupply: Scalars['ETHEREUM_BigDecimal'];
  liquidityTokenBalance: Scalars['ETHEREUM_BigDecimal'];
};

export type ETHEREUM_LiquidityPositionSnapshot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityPosition?: InputMaybe<Scalars['String']>;
  liquidityPosition_not?: InputMaybe<Scalars['String']>;
  liquidityPosition_gt?: InputMaybe<Scalars['String']>;
  liquidityPosition_lt?: InputMaybe<Scalars['String']>;
  liquidityPosition_gte?: InputMaybe<Scalars['String']>;
  liquidityPosition_lte?: InputMaybe<Scalars['String']>;
  liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0PriceUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0PriceUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0PriceUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0PriceUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0PriceUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0PriceUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0PriceUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  token0PriceUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  token1PriceUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1PriceUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1PriceUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1PriceUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1PriceUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1PriceUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1PriceUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  token1PriceUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityTokenTotalSupply?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenTotalSupply_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityTokenBalance?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
};

export type ETHEREUM_LiquidityPositionSnapshot_orderBy =
  | 'id'
  | 'liquidityPosition'
  | 'timestamp'
  | 'block'
  | 'user'
  | 'pair'
  | 'token0PriceUSD'
  | 'token1PriceUSD'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'liquidityTokenTotalSupply'
  | 'liquidityTokenBalance';

export type ETHEREUM_LiquidityPosition_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityTokenBalance?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type ETHEREUM_LiquidityPosition_orderBy =
  | 'id'
  | 'user'
  | 'pair'
  | 'liquidityTokenBalance'
  | 'snapshots'
  | 'block'
  | 'timestamp';

export type ETHEREUM_Mint = {
  id: Scalars['ID'];
  transaction: ETHEREUM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: ETHEREUM_Pair;
  to: Scalars['ETHEREUM_Bytes'];
  liquidity: Scalars['ETHEREUM_BigDecimal'];
  sender?: Maybe<Scalars['ETHEREUM_Bytes']>;
  amount0?: Maybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1?: Maybe<Scalars['ETHEREUM_BigDecimal']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['ETHEREUM_BigDecimal']>;
  feeTo?: Maybe<Scalars['ETHEREUM_Bytes']>;
  feeLiquidity?: Maybe<Scalars['ETHEREUM_BigDecimal']>;
};

export type ETHEREUM_Mint_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_not?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  liquidity?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  sender?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_not?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  amount0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  feeTo?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
};

export type ETHEREUM_Mint_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'to'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'logIndex'
  | 'amountUSD'
  | 'feeTo'
  | 'feeLiquidity';

/** Defines the order direction, either ascending or descending */
export type ETHEREUM_OrderDirection =
  | 'asc'
  | 'desc';

export type ETHEREUM_Pair = {
  id: Scalars['ID'];
  factory: ETHEREUM_Factory;
  name: Scalars['String'];
  token0: ETHEREUM_Token;
  token1: ETHEREUM_Token;
  reserve0: Scalars['ETHEREUM_BigDecimal'];
  reserve1: Scalars['ETHEREUM_BigDecimal'];
  totalSupply: Scalars['ETHEREUM_BigDecimal'];
  reserveETH: Scalars['ETHEREUM_BigDecimal'];
  reserveUSD: Scalars['ETHEREUM_BigDecimal'];
  trackedReserveETH: Scalars['ETHEREUM_BigDecimal'];
  token0Price: Scalars['ETHEREUM_BigDecimal'];
  token1Price: Scalars['ETHEREUM_BigDecimal'];
  volumeToken0: Scalars['ETHEREUM_BigDecimal'];
  volumeToken1: Scalars['ETHEREUM_BigDecimal'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  untrackedVolumeUSD: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidityProviderCount: Scalars['BigInt'];
  liquidityPositions: Array<ETHEREUM_LiquidityPosition>;
  liquidityPositionSnapshots: Array<ETHEREUM_LiquidityPositionSnapshot>;
  dayData: Array<ETHEREUM_PairDayData>;
  hourData: Array<ETHEREUM_PairHourData>;
  mints: Array<ETHEREUM_Mint>;
  burns: Array<ETHEREUM_Burn>;
  swaps: Array<ETHEREUM_Swap>;
  timestamp: Scalars['BigInt'];
  block: Scalars['BigInt'];
};


export type ETHEREUM_PairliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_LiquidityPosition_filter>;
};


export type ETHEREUM_PairliquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_LiquidityPositionSnapshot_filter>;
};


export type ETHEREUM_PairdayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_PairDayData_filter>;
};


export type ETHEREUM_PairhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_PairHourData_filter>;
};


export type ETHEREUM_PairmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Mint_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Mint_filter>;
};


export type ETHEREUM_PairburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Burn_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Burn_filter>;
};


export type ETHEREUM_PairswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Swap_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Swap_filter>;
};

export type ETHEREUM_PairDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: ETHEREUM_Pair;
  token0: ETHEREUM_Token;
  token1: ETHEREUM_Token;
  reserve0: Scalars['ETHEREUM_BigDecimal'];
  reserve1: Scalars['ETHEREUM_BigDecimal'];
  totalSupply: Scalars['ETHEREUM_BigDecimal'];
  reserveUSD: Scalars['ETHEREUM_BigDecimal'];
  volumeToken0: Scalars['ETHEREUM_BigDecimal'];
  volumeToken1: Scalars['ETHEREUM_BigDecimal'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type ETHEREUM_PairDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ETHEREUM_PairDayData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type ETHEREUM_PairHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: ETHEREUM_Pair;
  reserve0: Scalars['ETHEREUM_BigDecimal'];
  reserve1: Scalars['ETHEREUM_BigDecimal'];
  reserveUSD: Scalars['ETHEREUM_BigDecimal'];
  volumeToken0: Scalars['ETHEREUM_BigDecimal'];
  volumeToken1: Scalars['ETHEREUM_BigDecimal'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type ETHEREUM_PairHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ETHEREUM_PairHourData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type ETHEREUM_Pair_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  trackedReserveETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  trackedReserveETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  trackedReserveETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  trackedReserveETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  trackedReserveETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  trackedReserveETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  trackedReserveETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  trackedReserveETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  token0Price?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0Price_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0Price_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0Price_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0Price_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0Price_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token0Price_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  token0Price_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  token1Price?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1Price_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1Price_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1Price_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1Price_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1Price_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  token1Price_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  token1Price_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ETHEREUM_Pair_orderBy =
  | 'id'
  | 'factory'
  | 'name'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveETH'
  | 'reserveUSD'
  | 'trackedReserveETH'
  | 'token0Price'
  | 'token1Price'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidityProviderCount'
  | 'liquidityPositions'
  | 'liquidityPositionSnapshots'
  | 'dayData'
  | 'hourData'
  | 'mints'
  | 'burns'
  | 'swaps'
  | 'timestamp'
  | 'block';

export type Query = {
  ETHEREUM_user?: Maybe<ETHEREUM_User>;
  ETHEREUM_users: Array<ETHEREUM_User>;
  ETHEREUM_bundle?: Maybe<ETHEREUM_Bundle>;
  ETHEREUM_bundles: Array<ETHEREUM_Bundle>;
  ETHEREUM_factory?: Maybe<ETHEREUM_Factory>;
  ETHEREUM_factories: Array<ETHEREUM_Factory>;
  ETHEREUM_hourData?: Maybe<ETHEREUM_HourData>;
  ETHEREUM_hourDatas: Array<ETHEREUM_HourData>;
  ETHEREUM_dayData?: Maybe<ETHEREUM_DayData>;
  ETHEREUM_dayDatas: Array<ETHEREUM_DayData>;
  ETHEREUM_token?: Maybe<ETHEREUM_Token>;
  ETHEREUM_tokens: Array<ETHEREUM_Token>;
  ETHEREUM_tokenHourData?: Maybe<ETHEREUM_TokenHourData>;
  ETHEREUM_tokenHourDatas: Array<ETHEREUM_TokenHourData>;
  ETHEREUM_tokenDayData?: Maybe<ETHEREUM_TokenDayData>;
  ETHEREUM_tokenDayDatas: Array<ETHEREUM_TokenDayData>;
  ETHEREUM_pair?: Maybe<ETHEREUM_Pair>;
  ETHEREUM_pairs: Array<ETHEREUM_Pair>;
  ETHEREUM_pairHourData?: Maybe<ETHEREUM_PairHourData>;
  ETHEREUM_pairHourDatas: Array<ETHEREUM_PairHourData>;
  ETHEREUM_pairDayData?: Maybe<ETHEREUM_PairDayData>;
  ETHEREUM_pairDayDatas: Array<ETHEREUM_PairDayData>;
  ETHEREUM_liquidityPosition?: Maybe<ETHEREUM_LiquidityPosition>;
  ETHEREUM_liquidityPositions: Array<ETHEREUM_LiquidityPosition>;
  ETHEREUM_liquidityPositionSnapshot?: Maybe<ETHEREUM_LiquidityPositionSnapshot>;
  ETHEREUM_liquidityPositionSnapshots: Array<ETHEREUM_LiquidityPositionSnapshot>;
  ETHEREUM_transaction?: Maybe<ETHEREUM_Transaction>;
  ETHEREUM_transactions: Array<ETHEREUM_Transaction>;
  ETHEREUM_mint?: Maybe<ETHEREUM_Mint>;
  ETHEREUM_mints: Array<ETHEREUM_Mint>;
  ETHEREUM_burn?: Maybe<ETHEREUM_Burn>;
  ETHEREUM_burns: Array<ETHEREUM_Burn>;
  ETHEREUM_swap?: Maybe<ETHEREUM_Swap>;
  ETHEREUM_swaps: Array<ETHEREUM_Swap>;
  ETHEREUM_tokenSearch: Array<ETHEREUM_Token>;
  ETHEREUM_pairSearch: Array<ETHEREUM_Pair>;
  ETHEREUM_userSearch: Array<ETHEREUM_User>;
  /** Access to subgraph metadata */
  ETHEREUM__meta?: Maybe<ETHEREUM__Meta_>;
};


export type QueryETHEREUM_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_User_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_User_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Bundle_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Bundle_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Factory_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Factory_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_HourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_HourData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_DayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_DayData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Token_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Token_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_TokenHourData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_TokenDayData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Pair_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_PairHourData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_PairDayData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_LiquidityPosition_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Transaction_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Transaction_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Mint_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Mint_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Burn_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Burn_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Swap_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Swap_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_tokenSearchArgs = {
  text: Scalars['String'];
  first?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_pairSearchArgs = {
  text: Scalars['String'];
  first?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM_userSearchArgs = {
  text: Scalars['String'];
  first?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryETHEREUM__metaArgs = {
  block?: InputMaybe<ETHEREUM_Block_height>;
};

export type Subscription = {
  ETHEREUM_user?: Maybe<ETHEREUM_User>;
  ETHEREUM_users: Array<ETHEREUM_User>;
  ETHEREUM_bundle?: Maybe<ETHEREUM_Bundle>;
  ETHEREUM_bundles: Array<ETHEREUM_Bundle>;
  ETHEREUM_factory?: Maybe<ETHEREUM_Factory>;
  ETHEREUM_factories: Array<ETHEREUM_Factory>;
  ETHEREUM_hourData?: Maybe<ETHEREUM_HourData>;
  ETHEREUM_hourDatas: Array<ETHEREUM_HourData>;
  ETHEREUM_dayData?: Maybe<ETHEREUM_DayData>;
  ETHEREUM_dayDatas: Array<ETHEREUM_DayData>;
  ETHEREUM_token?: Maybe<ETHEREUM_Token>;
  ETHEREUM_tokens: Array<ETHEREUM_Token>;
  ETHEREUM_tokenHourData?: Maybe<ETHEREUM_TokenHourData>;
  ETHEREUM_tokenHourDatas: Array<ETHEREUM_TokenHourData>;
  ETHEREUM_tokenDayData?: Maybe<ETHEREUM_TokenDayData>;
  ETHEREUM_tokenDayDatas: Array<ETHEREUM_TokenDayData>;
  ETHEREUM_pair?: Maybe<ETHEREUM_Pair>;
  ETHEREUM_pairs: Array<ETHEREUM_Pair>;
  ETHEREUM_pairHourData?: Maybe<ETHEREUM_PairHourData>;
  ETHEREUM_pairHourDatas: Array<ETHEREUM_PairHourData>;
  ETHEREUM_pairDayData?: Maybe<ETHEREUM_PairDayData>;
  ETHEREUM_pairDayDatas: Array<ETHEREUM_PairDayData>;
  ETHEREUM_liquidityPosition?: Maybe<ETHEREUM_LiquidityPosition>;
  ETHEREUM_liquidityPositions: Array<ETHEREUM_LiquidityPosition>;
  ETHEREUM_liquidityPositionSnapshot?: Maybe<ETHEREUM_LiquidityPositionSnapshot>;
  ETHEREUM_liquidityPositionSnapshots: Array<ETHEREUM_LiquidityPositionSnapshot>;
  ETHEREUM_transaction?: Maybe<ETHEREUM_Transaction>;
  ETHEREUM_transactions: Array<ETHEREUM_Transaction>;
  ETHEREUM_mint?: Maybe<ETHEREUM_Mint>;
  ETHEREUM_mints: Array<ETHEREUM_Mint>;
  ETHEREUM_burn?: Maybe<ETHEREUM_Burn>;
  ETHEREUM_burns: Array<ETHEREUM_Burn>;
  ETHEREUM_swap?: Maybe<ETHEREUM_Swap>;
  ETHEREUM_swaps: Array<ETHEREUM_Swap>;
  /** Access to subgraph metadata */
  ETHEREUM__meta?: Maybe<ETHEREUM__Meta_>;
};


export type SubscriptionETHEREUM_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_User_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_User_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Bundle_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Bundle_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Factory_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Factory_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_HourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_HourData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_DayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_DayData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Token_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Token_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_TokenHourData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_TokenDayData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Pair_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_PairHourData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_PairDayData_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_LiquidityPosition_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Transaction_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Transaction_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Mint_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Mint_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Burn_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Burn_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Swap_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Swap_filter>;
  block?: InputMaybe<ETHEREUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionETHEREUM__metaArgs = {
  block?: InputMaybe<ETHEREUM_Block_height>;
};

export type ETHEREUM_Swap = {
  id: Scalars['ID'];
  transaction: ETHEREUM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: ETHEREUM_Pair;
  sender: Scalars['ETHEREUM_Bytes'];
  amount0In: Scalars['ETHEREUM_BigDecimal'];
  amount1In: Scalars['ETHEREUM_BigDecimal'];
  amount0Out: Scalars['ETHEREUM_BigDecimal'];
  amount1Out: Scalars['ETHEREUM_BigDecimal'];
  to: Scalars['ETHEREUM_Bytes'];
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD: Scalars['ETHEREUM_BigDecimal'];
};

export type ETHEREUM_Swap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_not?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  amount0In?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0In_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0In_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0In_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0In_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0In_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0In_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount0In_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount1In?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1In_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1In_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1In_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1In_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1In_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1In_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount1In_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount0Out?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0Out_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0Out_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0Out_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0Out_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0Out_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount0Out_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount0Out_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount1Out?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1Out_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1Out_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1Out_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1Out_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1Out_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amount1Out_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amount1Out_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  to?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_not?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['ETHEREUM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['ETHEREUM_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
};

export type ETHEREUM_Swap_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'sender'
  | 'amount0In'
  | 'amount1In'
  | 'amount0Out'
  | 'amount1Out'
  | 'to'
  | 'logIndex'
  | 'amountUSD';

export type ETHEREUM_Token = {
  id: Scalars['ID'];
  factory: ETHEREUM_Factory;
  symbol: Scalars['String'];
  name: Scalars['String'];
  decimals: Scalars['BigInt'];
  totalSupply: Scalars['BigInt'];
  volume: Scalars['ETHEREUM_BigDecimal'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  untrackedVolumeUSD: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['ETHEREUM_BigDecimal'];
  derivedETH: Scalars['ETHEREUM_BigDecimal'];
  hourData: Array<ETHEREUM_TokenHourData>;
  dayData: Array<ETHEREUM_TokenDayData>;
  basePairs: Array<ETHEREUM_Pair>;
  quotePairs: Array<ETHEREUM_Pair>;
  basePairsDayData: Array<ETHEREUM_PairDayData>;
  quotePairsDayData: Array<ETHEREUM_PairDayData>;
};


export type ETHEREUM_TokenhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_TokenHourData_filter>;
};


export type ETHEREUM_TokendayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_TokenDayData_filter>;
};


export type ETHEREUM_TokenbasePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Pair_filter>;
};


export type ETHEREUM_TokenquotePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Pair_filter>;
};


export type ETHEREUM_TokenbasePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_PairDayData_filter>;
};


export type ETHEREUM_TokenquotePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_PairDayData_filter>;
};

export type ETHEREUM_TokenDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: ETHEREUM_Token;
  volume: Scalars['ETHEREUM_BigDecimal'];
  volumeETH: Scalars['ETHEREUM_BigDecimal'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['ETHEREUM_BigDecimal'];
  liquidityETH: Scalars['ETHEREUM_BigDecimal'];
  liquidityUSD: Scalars['ETHEREUM_BigDecimal'];
  priceUSD: Scalars['ETHEREUM_BigDecimal'];
};

export type ETHEREUM_TokenDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
};

export type ETHEREUM_TokenDayData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type ETHEREUM_TokenHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: ETHEREUM_Token;
  volume: Scalars['ETHEREUM_BigDecimal'];
  volumeETH: Scalars['ETHEREUM_BigDecimal'];
  volumeUSD: Scalars['ETHEREUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['ETHEREUM_BigDecimal'];
  liquidityETH: Scalars['ETHEREUM_BigDecimal'];
  liquidityUSD: Scalars['ETHEREUM_BigDecimal'];
  priceUSD: Scalars['ETHEREUM_BigDecimal'];
};

export type ETHEREUM_TokenHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
};

export type ETHEREUM_TokenHourData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type ETHEREUM_Token_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  decimals?: InputMaybe<Scalars['BigInt']>;
  decimals_not?: InputMaybe<Scalars['BigInt']>;
  decimals_gt?: InputMaybe<Scalars['BigInt']>;
  decimals_lt?: InputMaybe<Scalars['BigInt']>;
  decimals_gte?: InputMaybe<Scalars['BigInt']>;
  decimals_lte?: InputMaybe<Scalars['BigInt']>;
  decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  derivedETH?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  derivedETH_not?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  derivedETH_gt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  derivedETH_lt?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  derivedETH_gte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  derivedETH_lte?: InputMaybe<Scalars['ETHEREUM_BigDecimal']>;
  derivedETH_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
  derivedETH_not_in?: InputMaybe<Array<Scalars['ETHEREUM_BigDecimal']>>;
};

export type ETHEREUM_Token_orderBy =
  | 'id'
  | 'factory'
  | 'symbol'
  | 'name'
  | 'decimals'
  | 'totalSupply'
  | 'volume'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'derivedETH'
  | 'hourData'
  | 'dayData'
  | 'basePairs'
  | 'quotePairs'
  | 'basePairsDayData'
  | 'quotePairsDayData';

export type ETHEREUM_Transaction = {
  id: Scalars['ID'];
  blockNumber: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  mints: Array<Maybe<ETHEREUM_Mint>>;
  burns: Array<Maybe<ETHEREUM_Burn>>;
  swaps: Array<Maybe<ETHEREUM_Swap>>;
};


export type ETHEREUM_TransactionmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Mint_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Mint_filter>;
};


export type ETHEREUM_TransactionburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Burn_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Burn_filter>;
};


export type ETHEREUM_TransactionswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_Swap_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_Swap_filter>;
};

export type ETHEREUM_Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  mints?: InputMaybe<Array<Scalars['String']>>;
  mints_not?: InputMaybe<Array<Scalars['String']>>;
  mints_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns?: InputMaybe<Array<Scalars['String']>>;
  burns_not?: InputMaybe<Array<Scalars['String']>>;
  burns_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps?: InputMaybe<Array<Scalars['String']>>;
  swaps_not?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type ETHEREUM_Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'mints'
  | 'burns'
  | 'swaps';

export type ETHEREUM_User = {
  id: Scalars['ID'];
  liquidityPositions: Array<ETHEREUM_LiquidityPosition>;
};


export type ETHEREUM_UserliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ETHEREUM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<ETHEREUM_OrderDirection>;
  where?: InputMaybe<ETHEREUM_LiquidityPosition_filter>;
};

export type ETHEREUM_User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
};

export type ETHEREUM_User_orderBy =
  | 'id'
  | 'liquidityPositions';

export type ETHEREUM__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['ETHEREUM_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
};

/** The type for the top-level _meta field */
export type ETHEREUM__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: ETHEREUM__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type _SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

    }
    export type QueryEthereumExchangeSdk = {
  /** null **/
  ETHEREUM_user: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_user'], EthereumExchangeTypes.QueryETHEREUM_userArgs, MeshContext>,
  /** null **/
  ETHEREUM_users: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_users'], EthereumExchangeTypes.QueryETHEREUM_usersArgs, MeshContext>,
  /** null **/
  ETHEREUM_bundle: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_bundle'], EthereumExchangeTypes.QueryETHEREUM_bundleArgs, MeshContext>,
  /** null **/
  ETHEREUM_bundles: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_bundles'], EthereumExchangeTypes.QueryETHEREUM_bundlesArgs, MeshContext>,
  /** null **/
  ETHEREUM_factory: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_factory'], EthereumExchangeTypes.QueryETHEREUM_factoryArgs, MeshContext>,
  /** null **/
  ETHEREUM_factories: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_factories'], EthereumExchangeTypes.QueryETHEREUM_factoriesArgs, MeshContext>,
  /** null **/
  ETHEREUM_hourData: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_hourData'], EthereumExchangeTypes.QueryETHEREUM_hourDataArgs, MeshContext>,
  /** null **/
  ETHEREUM_hourDatas: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_hourDatas'], EthereumExchangeTypes.QueryETHEREUM_hourDatasArgs, MeshContext>,
  /** null **/
  ETHEREUM_dayData: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_dayData'], EthereumExchangeTypes.QueryETHEREUM_dayDataArgs, MeshContext>,
  /** null **/
  ETHEREUM_dayDatas: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_dayDatas'], EthereumExchangeTypes.QueryETHEREUM_dayDatasArgs, MeshContext>,
  /** null **/
  ETHEREUM_token: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_token'], EthereumExchangeTypes.QueryETHEREUM_tokenArgs, MeshContext>,
  /** null **/
  ETHEREUM_tokens: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_tokens'], EthereumExchangeTypes.QueryETHEREUM_tokensArgs, MeshContext>,
  /** null **/
  ETHEREUM_tokenHourData: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_tokenHourData'], EthereumExchangeTypes.QueryETHEREUM_tokenHourDataArgs, MeshContext>,
  /** null **/
  ETHEREUM_tokenHourDatas: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_tokenHourDatas'], EthereumExchangeTypes.QueryETHEREUM_tokenHourDatasArgs, MeshContext>,
  /** null **/
  ETHEREUM_tokenDayData: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_tokenDayData'], EthereumExchangeTypes.QueryETHEREUM_tokenDayDataArgs, MeshContext>,
  /** null **/
  ETHEREUM_tokenDayDatas: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_tokenDayDatas'], EthereumExchangeTypes.QueryETHEREUM_tokenDayDatasArgs, MeshContext>,
  /** null **/
  ETHEREUM_pair: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_pair'], EthereumExchangeTypes.QueryETHEREUM_pairArgs, MeshContext>,
  /** null **/
  ETHEREUM_pairs: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_pairs'], EthereumExchangeTypes.QueryETHEREUM_pairsArgs, MeshContext>,
  /** null **/
  ETHEREUM_pairHourData: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_pairHourData'], EthereumExchangeTypes.QueryETHEREUM_pairHourDataArgs, MeshContext>,
  /** null **/
  ETHEREUM_pairHourDatas: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_pairHourDatas'], EthereumExchangeTypes.QueryETHEREUM_pairHourDatasArgs, MeshContext>,
  /** null **/
  ETHEREUM_pairDayData: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_pairDayData'], EthereumExchangeTypes.QueryETHEREUM_pairDayDataArgs, MeshContext>,
  /** null **/
  ETHEREUM_pairDayDatas: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_pairDayDatas'], EthereumExchangeTypes.QueryETHEREUM_pairDayDatasArgs, MeshContext>,
  /** null **/
  ETHEREUM_liquidityPosition: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_liquidityPosition'], EthereumExchangeTypes.QueryETHEREUM_liquidityPositionArgs, MeshContext>,
  /** null **/
  ETHEREUM_liquidityPositions: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_liquidityPositions'], EthereumExchangeTypes.QueryETHEREUM_liquidityPositionsArgs, MeshContext>,
  /** null **/
  ETHEREUM_liquidityPositionSnapshot: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_liquidityPositionSnapshot'], EthereumExchangeTypes.QueryETHEREUM_liquidityPositionSnapshotArgs, MeshContext>,
  /** null **/
  ETHEREUM_liquidityPositionSnapshots: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_liquidityPositionSnapshots'], EthereumExchangeTypes.QueryETHEREUM_liquidityPositionSnapshotsArgs, MeshContext>,
  /** null **/
  ETHEREUM_transaction: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_transaction'], EthereumExchangeTypes.QueryETHEREUM_transactionArgs, MeshContext>,
  /** null **/
  ETHEREUM_transactions: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_transactions'], EthereumExchangeTypes.QueryETHEREUM_transactionsArgs, MeshContext>,
  /** null **/
  ETHEREUM_mint: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_mint'], EthereumExchangeTypes.QueryETHEREUM_mintArgs, MeshContext>,
  /** null **/
  ETHEREUM_mints: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_mints'], EthereumExchangeTypes.QueryETHEREUM_mintsArgs, MeshContext>,
  /** null **/
  ETHEREUM_burn: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_burn'], EthereumExchangeTypes.QueryETHEREUM_burnArgs, MeshContext>,
  /** null **/
  ETHEREUM_burns: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_burns'], EthereumExchangeTypes.QueryETHEREUM_burnsArgs, MeshContext>,
  /** null **/
  ETHEREUM_swap: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_swap'], EthereumExchangeTypes.QueryETHEREUM_swapArgs, MeshContext>,
  /** null **/
  ETHEREUM_swaps: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_swaps'], EthereumExchangeTypes.QueryETHEREUM_swapsArgs, MeshContext>,
  /** null **/
  ETHEREUM_tokenSearch: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_tokenSearch'], EthereumExchangeTypes.QueryETHEREUM_tokenSearchArgs, MeshContext>,
  /** null **/
  ETHEREUM_pairSearch: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_pairSearch'], EthereumExchangeTypes.QueryETHEREUM_pairSearchArgs, MeshContext>,
  /** null **/
  ETHEREUM_userSearch: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM_userSearch'], EthereumExchangeTypes.QueryETHEREUM_userSearchArgs, MeshContext>,
  /** Access to subgraph metadata **/
  ETHEREUM__meta: InContextSdkMethod<EthereumExchangeTypes.Query['ETHEREUM__meta'], EthereumExchangeTypes.QueryETHEREUM__metaArgs, MeshContext>
};

export type MutationEthereumExchangeSdk = {

};

export type SubscriptionEthereumExchangeSdk = {
  /** null **/
  ETHEREUM_user: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_user'], EthereumExchangeTypes.SubscriptionETHEREUM_userArgs, MeshContext>,
  /** null **/
  ETHEREUM_users: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_users'], EthereumExchangeTypes.SubscriptionETHEREUM_usersArgs, MeshContext>,
  /** null **/
  ETHEREUM_bundle: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_bundle'], EthereumExchangeTypes.SubscriptionETHEREUM_bundleArgs, MeshContext>,
  /** null **/
  ETHEREUM_bundles: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_bundles'], EthereumExchangeTypes.SubscriptionETHEREUM_bundlesArgs, MeshContext>,
  /** null **/
  ETHEREUM_factory: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_factory'], EthereumExchangeTypes.SubscriptionETHEREUM_factoryArgs, MeshContext>,
  /** null **/
  ETHEREUM_factories: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_factories'], EthereumExchangeTypes.SubscriptionETHEREUM_factoriesArgs, MeshContext>,
  /** null **/
  ETHEREUM_hourData: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_hourData'], EthereumExchangeTypes.SubscriptionETHEREUM_hourDataArgs, MeshContext>,
  /** null **/
  ETHEREUM_hourDatas: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_hourDatas'], EthereumExchangeTypes.SubscriptionETHEREUM_hourDatasArgs, MeshContext>,
  /** null **/
  ETHEREUM_dayData: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_dayData'], EthereumExchangeTypes.SubscriptionETHEREUM_dayDataArgs, MeshContext>,
  /** null **/
  ETHEREUM_dayDatas: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_dayDatas'], EthereumExchangeTypes.SubscriptionETHEREUM_dayDatasArgs, MeshContext>,
  /** null **/
  ETHEREUM_token: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_token'], EthereumExchangeTypes.SubscriptionETHEREUM_tokenArgs, MeshContext>,
  /** null **/
  ETHEREUM_tokens: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_tokens'], EthereumExchangeTypes.SubscriptionETHEREUM_tokensArgs, MeshContext>,
  /** null **/
  ETHEREUM_tokenHourData: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_tokenHourData'], EthereumExchangeTypes.SubscriptionETHEREUM_tokenHourDataArgs, MeshContext>,
  /** null **/
  ETHEREUM_tokenHourDatas: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_tokenHourDatas'], EthereumExchangeTypes.SubscriptionETHEREUM_tokenHourDatasArgs, MeshContext>,
  /** null **/
  ETHEREUM_tokenDayData: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_tokenDayData'], EthereumExchangeTypes.SubscriptionETHEREUM_tokenDayDataArgs, MeshContext>,
  /** null **/
  ETHEREUM_tokenDayDatas: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_tokenDayDatas'], EthereumExchangeTypes.SubscriptionETHEREUM_tokenDayDatasArgs, MeshContext>,
  /** null **/
  ETHEREUM_pair: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_pair'], EthereumExchangeTypes.SubscriptionETHEREUM_pairArgs, MeshContext>,
  /** null **/
  ETHEREUM_pairs: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_pairs'], EthereumExchangeTypes.SubscriptionETHEREUM_pairsArgs, MeshContext>,
  /** null **/
  ETHEREUM_pairHourData: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_pairHourData'], EthereumExchangeTypes.SubscriptionETHEREUM_pairHourDataArgs, MeshContext>,
  /** null **/
  ETHEREUM_pairHourDatas: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_pairHourDatas'], EthereumExchangeTypes.SubscriptionETHEREUM_pairHourDatasArgs, MeshContext>,
  /** null **/
  ETHEREUM_pairDayData: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_pairDayData'], EthereumExchangeTypes.SubscriptionETHEREUM_pairDayDataArgs, MeshContext>,
  /** null **/
  ETHEREUM_pairDayDatas: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_pairDayDatas'], EthereumExchangeTypes.SubscriptionETHEREUM_pairDayDatasArgs, MeshContext>,
  /** null **/
  ETHEREUM_liquidityPosition: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_liquidityPosition'], EthereumExchangeTypes.SubscriptionETHEREUM_liquidityPositionArgs, MeshContext>,
  /** null **/
  ETHEREUM_liquidityPositions: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_liquidityPositions'], EthereumExchangeTypes.SubscriptionETHEREUM_liquidityPositionsArgs, MeshContext>,
  /** null **/
  ETHEREUM_liquidityPositionSnapshot: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_liquidityPositionSnapshot'], EthereumExchangeTypes.SubscriptionETHEREUM_liquidityPositionSnapshotArgs, MeshContext>,
  /** null **/
  ETHEREUM_liquidityPositionSnapshots: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_liquidityPositionSnapshots'], EthereumExchangeTypes.SubscriptionETHEREUM_liquidityPositionSnapshotsArgs, MeshContext>,
  /** null **/
  ETHEREUM_transaction: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_transaction'], EthereumExchangeTypes.SubscriptionETHEREUM_transactionArgs, MeshContext>,
  /** null **/
  ETHEREUM_transactions: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_transactions'], EthereumExchangeTypes.SubscriptionETHEREUM_transactionsArgs, MeshContext>,
  /** null **/
  ETHEREUM_mint: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_mint'], EthereumExchangeTypes.SubscriptionETHEREUM_mintArgs, MeshContext>,
  /** null **/
  ETHEREUM_mints: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_mints'], EthereumExchangeTypes.SubscriptionETHEREUM_mintsArgs, MeshContext>,
  /** null **/
  ETHEREUM_burn: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_burn'], EthereumExchangeTypes.SubscriptionETHEREUM_burnArgs, MeshContext>,
  /** null **/
  ETHEREUM_burns: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_burns'], EthereumExchangeTypes.SubscriptionETHEREUM_burnsArgs, MeshContext>,
  /** null **/
  ETHEREUM_swap: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_swap'], EthereumExchangeTypes.SubscriptionETHEREUM_swapArgs, MeshContext>,
  /** null **/
  ETHEREUM_swaps: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM_swaps'], EthereumExchangeTypes.SubscriptionETHEREUM_swapsArgs, MeshContext>,
  /** Access to subgraph metadata **/
  ETHEREUM__meta: InContextSdkMethod<EthereumExchangeTypes.Subscription['ETHEREUM__meta'], EthereumExchangeTypes.SubscriptionETHEREUM__metaArgs, MeshContext>
};


    export namespace MoonriverExchangeTypes {
      export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  MOONRIVER_BigDecimal: any;
  BigInt: any;
  MOONRIVER_Bytes: any;
};

/** The block at which the query should be executed. */
export type MOONRIVER_Block_height = {
  /** Value containing a block hash */
  hash?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  /** Value containing a block number */
  number?: InputMaybe<Scalars['Int']>;
  /**
   * Value containing the minimum block number.
   * In the case of `number_gte`, the query will be executed on the latest block only if
   * the subgraph has progressed to or past the minimum block number.
   * Defaults to the latest block when omitted.
   *
   */
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type MOONRIVER_Bundle = {
  id: Scalars['ID'];
  ethPrice: Scalars['MOONRIVER_BigDecimal'];
};

export type MOONRIVER_Bundle_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ethPrice?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  ethPrice_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  ethPrice_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  ethPrice_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  ethPrice_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  ethPrice_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  ethPrice_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  ethPrice_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
};

export type MOONRIVER_Bundle_orderBy =
  | 'id'
  | 'ethPrice';

export type MOONRIVER_Burn = {
  id: Scalars['ID'];
  transaction: MOONRIVER_Transaction;
  timestamp: Scalars['BigInt'];
  pair: MOONRIVER_Pair;
  liquidity: Scalars['MOONRIVER_BigDecimal'];
  sender?: Maybe<Scalars['MOONRIVER_Bytes']>;
  amount0?: Maybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1?: Maybe<Scalars['MOONRIVER_BigDecimal']>;
  to?: Maybe<Scalars['MOONRIVER_Bytes']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['MOONRIVER_BigDecimal']>;
  complete: Scalars['Boolean'];
  feeTo?: Maybe<Scalars['MOONRIVER_Bytes']>;
  feeLiquidity?: Maybe<Scalars['MOONRIVER_BigDecimal']>;
};

export type MOONRIVER_Burn_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidity?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  sender?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_not?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  amount0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  to?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_not?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  to_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  complete?: InputMaybe<Scalars['Boolean']>;
  complete_not?: InputMaybe<Scalars['Boolean']>;
  complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
  complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  feeTo?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
};

export type MOONRIVER_Burn_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'to'
  | 'logIndex'
  | 'amountUSD'
  | 'complete'
  | 'feeTo'
  | 'feeLiquidity';

export type MOONRIVER_DayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: MOONRIVER_Factory;
  volumeETH: Scalars['MOONRIVER_BigDecimal'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  untrackedVolume: Scalars['MOONRIVER_BigDecimal'];
  liquidityETH: Scalars['MOONRIVER_BigDecimal'];
  liquidityUSD: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type MOONRIVER_DayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MOONRIVER_DayData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type MOONRIVER_Factory = {
  id: Scalars['ID'];
  pairCount: Scalars['BigInt'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  volumeETH: Scalars['MOONRIVER_BigDecimal'];
  untrackedVolumeUSD: Scalars['MOONRIVER_BigDecimal'];
  liquidityUSD: Scalars['MOONRIVER_BigDecimal'];
  liquidityETH: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
  tokenCount: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  pairs: Array<MOONRIVER_Pair>;
  tokens: Array<MOONRIVER_Token>;
  hourData: Array<MOONRIVER_HourData>;
  dayData: Array<MOONRIVER_DayData>;
};


export type MOONRIVER_FactorypairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Pair_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Pair_filter>;
};


export type MOONRIVER_FactorytokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Token_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Token_filter>;
};


export type MOONRIVER_FactoryhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_HourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_HourData_filter>;
};


export type MOONRIVER_FactorydayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_DayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_DayData_filter>;
};

export type MOONRIVER_Factory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  pairCount?: InputMaybe<Scalars['BigInt']>;
  pairCount_not?: InputMaybe<Scalars['BigInt']>;
  pairCount_gt?: InputMaybe<Scalars['BigInt']>;
  pairCount_lt?: InputMaybe<Scalars['BigInt']>;
  pairCount_gte?: InputMaybe<Scalars['BigInt']>;
  pairCount_lte?: InputMaybe<Scalars['BigInt']>;
  pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount?: InputMaybe<Scalars['BigInt']>;
  tokenCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount?: InputMaybe<Scalars['BigInt']>;
  userCount_not?: InputMaybe<Scalars['BigInt']>;
  userCount_gt?: InputMaybe<Scalars['BigInt']>;
  userCount_lt?: InputMaybe<Scalars['BigInt']>;
  userCount_gte?: InputMaybe<Scalars['BigInt']>;
  userCount_lte?: InputMaybe<Scalars['BigInt']>;
  userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MOONRIVER_Factory_orderBy =
  | 'id'
  | 'pairCount'
  | 'volumeUSD'
  | 'volumeETH'
  | 'untrackedVolumeUSD'
  | 'liquidityUSD'
  | 'liquidityETH'
  | 'txCount'
  | 'tokenCount'
  | 'userCount'
  | 'pairs'
  | 'tokens'
  | 'hourData'
  | 'dayData';

export type MOONRIVER_HourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: MOONRIVER_Factory;
  volumeETH: Scalars['MOONRIVER_BigDecimal'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  untrackedVolume: Scalars['MOONRIVER_BigDecimal'];
  liquidityETH: Scalars['MOONRIVER_BigDecimal'];
  liquidityUSD: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type MOONRIVER_HourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MOONRIVER_HourData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type MOONRIVER_LiquidityPosition = {
  id: Scalars['ID'];
  user: MOONRIVER_User;
  pair: MOONRIVER_Pair;
  liquidityTokenBalance: Scalars['MOONRIVER_BigDecimal'];
  snapshots: Array<Maybe<MOONRIVER_LiquidityPositionSnapshot>>;
  block: Scalars['Int'];
  timestamp: Scalars['Int'];
};


export type MOONRIVER_LiquidityPositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_LiquidityPositionSnapshot_filter>;
};

export type MOONRIVER_LiquidityPositionSnapshot = {
  id: Scalars['ID'];
  liquidityPosition: MOONRIVER_LiquidityPosition;
  timestamp: Scalars['Int'];
  block: Scalars['Int'];
  user: MOONRIVER_User;
  pair: MOONRIVER_Pair;
  token0PriceUSD: Scalars['MOONRIVER_BigDecimal'];
  token1PriceUSD: Scalars['MOONRIVER_BigDecimal'];
  reserve0: Scalars['MOONRIVER_BigDecimal'];
  reserve1: Scalars['MOONRIVER_BigDecimal'];
  reserveUSD: Scalars['MOONRIVER_BigDecimal'];
  liquidityTokenTotalSupply: Scalars['MOONRIVER_BigDecimal'];
  liquidityTokenBalance: Scalars['MOONRIVER_BigDecimal'];
};

export type MOONRIVER_LiquidityPositionSnapshot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityPosition?: InputMaybe<Scalars['String']>;
  liquidityPosition_not?: InputMaybe<Scalars['String']>;
  liquidityPosition_gt?: InputMaybe<Scalars['String']>;
  liquidityPosition_lt?: InputMaybe<Scalars['String']>;
  liquidityPosition_gte?: InputMaybe<Scalars['String']>;
  liquidityPosition_lte?: InputMaybe<Scalars['String']>;
  liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0PriceUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0PriceUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0PriceUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0PriceUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0PriceUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0PriceUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0PriceUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  token0PriceUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  token1PriceUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1PriceUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1PriceUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1PriceUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1PriceUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1PriceUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1PriceUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  token1PriceUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityTokenTotalSupply?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenTotalSupply_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityTokenBalance?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
};

export type MOONRIVER_LiquidityPositionSnapshot_orderBy =
  | 'id'
  | 'liquidityPosition'
  | 'timestamp'
  | 'block'
  | 'user'
  | 'pair'
  | 'token0PriceUSD'
  | 'token1PriceUSD'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'liquidityTokenTotalSupply'
  | 'liquidityTokenBalance';

export type MOONRIVER_LiquidityPosition_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityTokenBalance?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type MOONRIVER_LiquidityPosition_orderBy =
  | 'id'
  | 'user'
  | 'pair'
  | 'liquidityTokenBalance'
  | 'snapshots'
  | 'block'
  | 'timestamp';

export type MOONRIVER_Mint = {
  id: Scalars['ID'];
  transaction: MOONRIVER_Transaction;
  timestamp: Scalars['BigInt'];
  pair: MOONRIVER_Pair;
  to: Scalars['MOONRIVER_Bytes'];
  liquidity: Scalars['MOONRIVER_BigDecimal'];
  sender?: Maybe<Scalars['MOONRIVER_Bytes']>;
  amount0?: Maybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1?: Maybe<Scalars['MOONRIVER_BigDecimal']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['MOONRIVER_BigDecimal']>;
  feeTo?: Maybe<Scalars['MOONRIVER_Bytes']>;
  feeLiquidity?: Maybe<Scalars['MOONRIVER_BigDecimal']>;
};

export type MOONRIVER_Mint_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_not?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  to_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  liquidity?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  sender?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_not?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  amount0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  feeTo?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
};

export type MOONRIVER_Mint_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'to'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'logIndex'
  | 'amountUSD'
  | 'feeTo'
  | 'feeLiquidity';

/** Defines the order direction, either ascending or descending */
export type MOONRIVER_OrderDirection =
  | 'asc'
  | 'desc';

export type MOONRIVER_Pair = {
  id: Scalars['ID'];
  factory: MOONRIVER_Factory;
  name: Scalars['String'];
  token0: MOONRIVER_Token;
  token1: MOONRIVER_Token;
  reserve0: Scalars['MOONRIVER_BigDecimal'];
  reserve1: Scalars['MOONRIVER_BigDecimal'];
  totalSupply: Scalars['MOONRIVER_BigDecimal'];
  reserveETH: Scalars['MOONRIVER_BigDecimal'];
  reserveUSD: Scalars['MOONRIVER_BigDecimal'];
  trackedReserveETH: Scalars['MOONRIVER_BigDecimal'];
  token0Price: Scalars['MOONRIVER_BigDecimal'];
  token1Price: Scalars['MOONRIVER_BigDecimal'];
  volumeToken0: Scalars['MOONRIVER_BigDecimal'];
  volumeToken1: Scalars['MOONRIVER_BigDecimal'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  untrackedVolumeUSD: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidityProviderCount: Scalars['BigInt'];
  liquidityPositions: Array<MOONRIVER_LiquidityPosition>;
  liquidityPositionSnapshots: Array<MOONRIVER_LiquidityPositionSnapshot>;
  dayData: Array<MOONRIVER_PairDayData>;
  hourData: Array<MOONRIVER_PairHourData>;
  mints: Array<MOONRIVER_Mint>;
  burns: Array<MOONRIVER_Burn>;
  swaps: Array<MOONRIVER_Swap>;
  timestamp: Scalars['BigInt'];
  block: Scalars['BigInt'];
};


export type MOONRIVER_PairliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_LiquidityPosition_filter>;
};


export type MOONRIVER_PairliquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_LiquidityPositionSnapshot_filter>;
};


export type MOONRIVER_PairdayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_PairDayData_filter>;
};


export type MOONRIVER_PairhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_PairHourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_PairHourData_filter>;
};


export type MOONRIVER_PairmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Mint_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Mint_filter>;
};


export type MOONRIVER_PairburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Burn_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Burn_filter>;
};


export type MOONRIVER_PairswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Swap_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Swap_filter>;
};

export type MOONRIVER_PairDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: MOONRIVER_Pair;
  token0: MOONRIVER_Token;
  token1: MOONRIVER_Token;
  reserve0: Scalars['MOONRIVER_BigDecimal'];
  reserve1: Scalars['MOONRIVER_BigDecimal'];
  totalSupply: Scalars['MOONRIVER_BigDecimal'];
  reserveUSD: Scalars['MOONRIVER_BigDecimal'];
  volumeToken0: Scalars['MOONRIVER_BigDecimal'];
  volumeToken1: Scalars['MOONRIVER_BigDecimal'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type MOONRIVER_PairDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MOONRIVER_PairDayData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type MOONRIVER_PairHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: MOONRIVER_Pair;
  reserve0: Scalars['MOONRIVER_BigDecimal'];
  reserve1: Scalars['MOONRIVER_BigDecimal'];
  reserveUSD: Scalars['MOONRIVER_BigDecimal'];
  volumeToken0: Scalars['MOONRIVER_BigDecimal'];
  volumeToken1: Scalars['MOONRIVER_BigDecimal'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type MOONRIVER_PairHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MOONRIVER_PairHourData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type MOONRIVER_Pair_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  trackedReserveETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  trackedReserveETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  trackedReserveETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  trackedReserveETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  trackedReserveETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  trackedReserveETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  trackedReserveETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  trackedReserveETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  token0Price?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0Price_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0Price_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0Price_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0Price_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0Price_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token0Price_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  token0Price_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  token1Price?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1Price_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1Price_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1Price_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1Price_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1Price_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  token1Price_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  token1Price_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MOONRIVER_Pair_orderBy =
  | 'id'
  | 'factory'
  | 'name'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveETH'
  | 'reserveUSD'
  | 'trackedReserveETH'
  | 'token0Price'
  | 'token1Price'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidityProviderCount'
  | 'liquidityPositions'
  | 'liquidityPositionSnapshots'
  | 'dayData'
  | 'hourData'
  | 'mints'
  | 'burns'
  | 'swaps'
  | 'timestamp'
  | 'block';

export type Query = {
  MOONRIVER_user?: Maybe<MOONRIVER_User>;
  MOONRIVER_users: Array<MOONRIVER_User>;
  MOONRIVER_bundle?: Maybe<MOONRIVER_Bundle>;
  MOONRIVER_bundles: Array<MOONRIVER_Bundle>;
  MOONRIVER_factory?: Maybe<MOONRIVER_Factory>;
  MOONRIVER_factories: Array<MOONRIVER_Factory>;
  MOONRIVER_hourData?: Maybe<MOONRIVER_HourData>;
  MOONRIVER_hourDatas: Array<MOONRIVER_HourData>;
  MOONRIVER_dayData?: Maybe<MOONRIVER_DayData>;
  MOONRIVER_dayDatas: Array<MOONRIVER_DayData>;
  MOONRIVER_token?: Maybe<MOONRIVER_Token>;
  MOONRIVER_tokens: Array<MOONRIVER_Token>;
  MOONRIVER_tokenHourData?: Maybe<MOONRIVER_TokenHourData>;
  MOONRIVER_tokenHourDatas: Array<MOONRIVER_TokenHourData>;
  MOONRIVER_tokenDayData?: Maybe<MOONRIVER_TokenDayData>;
  MOONRIVER_tokenDayDatas: Array<MOONRIVER_TokenDayData>;
  MOONRIVER_pair?: Maybe<MOONRIVER_Pair>;
  MOONRIVER_pairs: Array<MOONRIVER_Pair>;
  MOONRIVER_pairHourData?: Maybe<MOONRIVER_PairHourData>;
  MOONRIVER_pairHourDatas: Array<MOONRIVER_PairHourData>;
  MOONRIVER_pairDayData?: Maybe<MOONRIVER_PairDayData>;
  MOONRIVER_pairDayDatas: Array<MOONRIVER_PairDayData>;
  MOONRIVER_liquidityPosition?: Maybe<MOONRIVER_LiquidityPosition>;
  MOONRIVER_liquidityPositions: Array<MOONRIVER_LiquidityPosition>;
  MOONRIVER_liquidityPositionSnapshot?: Maybe<MOONRIVER_LiquidityPositionSnapshot>;
  MOONRIVER_liquidityPositionSnapshots: Array<MOONRIVER_LiquidityPositionSnapshot>;
  MOONRIVER_transaction?: Maybe<MOONRIVER_Transaction>;
  MOONRIVER_transactions: Array<MOONRIVER_Transaction>;
  MOONRIVER_mint?: Maybe<MOONRIVER_Mint>;
  MOONRIVER_mints: Array<MOONRIVER_Mint>;
  MOONRIVER_burn?: Maybe<MOONRIVER_Burn>;
  MOONRIVER_burns: Array<MOONRIVER_Burn>;
  MOONRIVER_swap?: Maybe<MOONRIVER_Swap>;
  MOONRIVER_swaps: Array<MOONRIVER_Swap>;
  /** Access to subgraph metadata */
  MOONRIVER__meta?: Maybe<MOONRIVER__Meta_>;
};


export type QueryMOONRIVER_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_User_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_User_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Bundle_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Bundle_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Factory_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Factory_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_HourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_HourData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_DayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_DayData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Token_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Token_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_TokenHourData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_TokenDayData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Pair_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Pair_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_PairHourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_PairHourData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_PairDayData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_LiquidityPosition_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Transaction_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Transaction_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Mint_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Mint_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Burn_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Burn_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Swap_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Swap_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMOONRIVER__metaArgs = {
  block?: InputMaybe<MOONRIVER_Block_height>;
};

export type Subscription = {
  MOONRIVER_user?: Maybe<MOONRIVER_User>;
  MOONRIVER_users: Array<MOONRIVER_User>;
  MOONRIVER_bundle?: Maybe<MOONRIVER_Bundle>;
  MOONRIVER_bundles: Array<MOONRIVER_Bundle>;
  MOONRIVER_factory?: Maybe<MOONRIVER_Factory>;
  MOONRIVER_factories: Array<MOONRIVER_Factory>;
  MOONRIVER_hourData?: Maybe<MOONRIVER_HourData>;
  MOONRIVER_hourDatas: Array<MOONRIVER_HourData>;
  MOONRIVER_dayData?: Maybe<MOONRIVER_DayData>;
  MOONRIVER_dayDatas: Array<MOONRIVER_DayData>;
  MOONRIVER_token?: Maybe<MOONRIVER_Token>;
  MOONRIVER_tokens: Array<MOONRIVER_Token>;
  MOONRIVER_tokenHourData?: Maybe<MOONRIVER_TokenHourData>;
  MOONRIVER_tokenHourDatas: Array<MOONRIVER_TokenHourData>;
  MOONRIVER_tokenDayData?: Maybe<MOONRIVER_TokenDayData>;
  MOONRIVER_tokenDayDatas: Array<MOONRIVER_TokenDayData>;
  MOONRIVER_pair?: Maybe<MOONRIVER_Pair>;
  MOONRIVER_pairs: Array<MOONRIVER_Pair>;
  MOONRIVER_pairHourData?: Maybe<MOONRIVER_PairHourData>;
  MOONRIVER_pairHourDatas: Array<MOONRIVER_PairHourData>;
  MOONRIVER_pairDayData?: Maybe<MOONRIVER_PairDayData>;
  MOONRIVER_pairDayDatas: Array<MOONRIVER_PairDayData>;
  MOONRIVER_liquidityPosition?: Maybe<MOONRIVER_LiquidityPosition>;
  MOONRIVER_liquidityPositions: Array<MOONRIVER_LiquidityPosition>;
  MOONRIVER_liquidityPositionSnapshot?: Maybe<MOONRIVER_LiquidityPositionSnapshot>;
  MOONRIVER_liquidityPositionSnapshots: Array<MOONRIVER_LiquidityPositionSnapshot>;
  MOONRIVER_transaction?: Maybe<MOONRIVER_Transaction>;
  MOONRIVER_transactions: Array<MOONRIVER_Transaction>;
  MOONRIVER_mint?: Maybe<MOONRIVER_Mint>;
  MOONRIVER_mints: Array<MOONRIVER_Mint>;
  MOONRIVER_burn?: Maybe<MOONRIVER_Burn>;
  MOONRIVER_burns: Array<MOONRIVER_Burn>;
  MOONRIVER_swap?: Maybe<MOONRIVER_Swap>;
  MOONRIVER_swaps: Array<MOONRIVER_Swap>;
  /** Access to subgraph metadata */
  MOONRIVER__meta?: Maybe<MOONRIVER__Meta_>;
};


export type SubscriptionMOONRIVER_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_User_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_User_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Bundle_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Bundle_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Factory_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Factory_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_HourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_HourData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_DayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_DayData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Token_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Token_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_TokenHourData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_TokenDayData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Pair_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Pair_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_PairHourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_PairHourData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_PairDayData_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_LiquidityPosition_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Transaction_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Transaction_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Mint_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Mint_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Burn_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Burn_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Swap_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Swap_filter>;
  block?: InputMaybe<MOONRIVER_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMOONRIVER__metaArgs = {
  block?: InputMaybe<MOONRIVER_Block_height>;
};

export type MOONRIVER_Swap = {
  id: Scalars['ID'];
  transaction: MOONRIVER_Transaction;
  timestamp: Scalars['BigInt'];
  pair: MOONRIVER_Pair;
  sender: Scalars['MOONRIVER_Bytes'];
  amount0In: Scalars['MOONRIVER_BigDecimal'];
  amount1In: Scalars['MOONRIVER_BigDecimal'];
  amount0Out: Scalars['MOONRIVER_BigDecimal'];
  amount1Out: Scalars['MOONRIVER_BigDecimal'];
  to: Scalars['MOONRIVER_Bytes'];
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD: Scalars['MOONRIVER_BigDecimal'];
};

export type MOONRIVER_Swap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_not?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  amount0In?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0In_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0In_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0In_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0In_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0In_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0In_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount0In_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount1In?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1In_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1In_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1In_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1In_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1In_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1In_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount1In_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount0Out?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0Out_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0Out_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0Out_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0Out_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0Out_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount0Out_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount0Out_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount1Out?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1Out_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1Out_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1Out_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1Out_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1Out_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amount1Out_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amount1Out_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  to?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_not?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['MOONRIVER_Bytes']>>;
  to_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['MOONRIVER_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
};

export type MOONRIVER_Swap_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'sender'
  | 'amount0In'
  | 'amount1In'
  | 'amount0Out'
  | 'amount1Out'
  | 'to'
  | 'logIndex'
  | 'amountUSD';

export type MOONRIVER_Token = {
  id: Scalars['ID'];
  factory: MOONRIVER_Factory;
  symbol: Scalars['String'];
  name: Scalars['String'];
  decimals: Scalars['BigInt'];
  totalSupply: Scalars['BigInt'];
  volume: Scalars['MOONRIVER_BigDecimal'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  untrackedVolumeUSD: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['MOONRIVER_BigDecimal'];
  derivedETH: Scalars['MOONRIVER_BigDecimal'];
  whitelistPairs: Array<MOONRIVER_Pair>;
  hourData: Array<MOONRIVER_TokenHourData>;
  dayData: Array<MOONRIVER_TokenDayData>;
  basePairs: Array<MOONRIVER_Pair>;
  quotePairs: Array<MOONRIVER_Pair>;
  basePairsDayData: Array<MOONRIVER_PairDayData>;
  quotePairsDayData: Array<MOONRIVER_PairDayData>;
};


export type MOONRIVER_TokenwhitelistPairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Pair_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Pair_filter>;
};


export type MOONRIVER_TokenhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_TokenHourData_filter>;
};


export type MOONRIVER_TokendayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_TokenDayData_filter>;
};


export type MOONRIVER_TokenbasePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Pair_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Pair_filter>;
};


export type MOONRIVER_TokenquotePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Pair_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Pair_filter>;
};


export type MOONRIVER_TokenbasePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_PairDayData_filter>;
};


export type MOONRIVER_TokenquotePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_PairDayData_filter>;
};

export type MOONRIVER_TokenDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: MOONRIVER_Token;
  volume: Scalars['MOONRIVER_BigDecimal'];
  volumeETH: Scalars['MOONRIVER_BigDecimal'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['MOONRIVER_BigDecimal'];
  liquidityETH: Scalars['MOONRIVER_BigDecimal'];
  liquidityUSD: Scalars['MOONRIVER_BigDecimal'];
  priceUSD: Scalars['MOONRIVER_BigDecimal'];
};

export type MOONRIVER_TokenDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
};

export type MOONRIVER_TokenDayData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type MOONRIVER_TokenHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: MOONRIVER_Token;
  volume: Scalars['MOONRIVER_BigDecimal'];
  volumeETH: Scalars['MOONRIVER_BigDecimal'];
  volumeUSD: Scalars['MOONRIVER_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['MOONRIVER_BigDecimal'];
  liquidityETH: Scalars['MOONRIVER_BigDecimal'];
  liquidityUSD: Scalars['MOONRIVER_BigDecimal'];
  priceUSD: Scalars['MOONRIVER_BigDecimal'];
};

export type MOONRIVER_TokenHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
};

export type MOONRIVER_TokenHourData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type MOONRIVER_Token_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  decimals?: InputMaybe<Scalars['BigInt']>;
  decimals_not?: InputMaybe<Scalars['BigInt']>;
  decimals_gt?: InputMaybe<Scalars['BigInt']>;
  decimals_lt?: InputMaybe<Scalars['BigInt']>;
  decimals_gte?: InputMaybe<Scalars['BigInt']>;
  decimals_lte?: InputMaybe<Scalars['BigInt']>;
  decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  derivedETH?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  derivedETH_not?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  derivedETH_gt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  derivedETH_lt?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  derivedETH_gte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  derivedETH_lte?: InputMaybe<Scalars['MOONRIVER_BigDecimal']>;
  derivedETH_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  derivedETH_not_in?: InputMaybe<Array<Scalars['MOONRIVER_BigDecimal']>>;
  whitelistPairs?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type MOONRIVER_Token_orderBy =
  | 'id'
  | 'factory'
  | 'symbol'
  | 'name'
  | 'decimals'
  | 'totalSupply'
  | 'volume'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'derivedETH'
  | 'whitelistPairs'
  | 'hourData'
  | 'dayData'
  | 'basePairs'
  | 'quotePairs'
  | 'basePairsDayData'
  | 'quotePairsDayData';

export type MOONRIVER_Transaction = {
  id: Scalars['ID'];
  blockNumber: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  mints: Array<Maybe<MOONRIVER_Mint>>;
  burns: Array<Maybe<MOONRIVER_Burn>>;
  swaps: Array<Maybe<MOONRIVER_Swap>>;
};


export type MOONRIVER_TransactionmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Mint_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Mint_filter>;
};


export type MOONRIVER_TransactionburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Burn_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Burn_filter>;
};


export type MOONRIVER_TransactionswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_Swap_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_Swap_filter>;
};

export type MOONRIVER_Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  mints?: InputMaybe<Array<Scalars['String']>>;
  mints_not?: InputMaybe<Array<Scalars['String']>>;
  mints_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns?: InputMaybe<Array<Scalars['String']>>;
  burns_not?: InputMaybe<Array<Scalars['String']>>;
  burns_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps?: InputMaybe<Array<Scalars['String']>>;
  swaps_not?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type MOONRIVER_Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'mints'
  | 'burns'
  | 'swaps';

export type MOONRIVER_User = {
  id: Scalars['ID'];
  liquidityPositions: Array<MOONRIVER_LiquidityPosition>;
};


export type MOONRIVER_UserliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MOONRIVER_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<MOONRIVER_OrderDirection>;
  where?: InputMaybe<MOONRIVER_LiquidityPosition_filter>;
};

export type MOONRIVER_User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
};

export type MOONRIVER_User_orderBy =
  | 'id'
  | 'liquidityPositions';

export type MOONRIVER__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['MOONRIVER_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
};

/** The type for the top-level _meta field */
export type MOONRIVER__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: MOONRIVER__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type _SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

    }
    export type QueryMoonriverExchangeSdk = {
  /** null **/
  MOONRIVER_user: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_user'], MoonriverExchangeTypes.QueryMOONRIVER_userArgs, MeshContext>,
  /** null **/
  MOONRIVER_users: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_users'], MoonriverExchangeTypes.QueryMOONRIVER_usersArgs, MeshContext>,
  /** null **/
  MOONRIVER_bundle: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_bundle'], MoonriverExchangeTypes.QueryMOONRIVER_bundleArgs, MeshContext>,
  /** null **/
  MOONRIVER_bundles: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_bundles'], MoonriverExchangeTypes.QueryMOONRIVER_bundlesArgs, MeshContext>,
  /** null **/
  MOONRIVER_factory: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_factory'], MoonriverExchangeTypes.QueryMOONRIVER_factoryArgs, MeshContext>,
  /** null **/
  MOONRIVER_factories: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_factories'], MoonriverExchangeTypes.QueryMOONRIVER_factoriesArgs, MeshContext>,
  /** null **/
  MOONRIVER_hourData: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_hourData'], MoonriverExchangeTypes.QueryMOONRIVER_hourDataArgs, MeshContext>,
  /** null **/
  MOONRIVER_hourDatas: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_hourDatas'], MoonriverExchangeTypes.QueryMOONRIVER_hourDatasArgs, MeshContext>,
  /** null **/
  MOONRIVER_dayData: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_dayData'], MoonriverExchangeTypes.QueryMOONRIVER_dayDataArgs, MeshContext>,
  /** null **/
  MOONRIVER_dayDatas: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_dayDatas'], MoonriverExchangeTypes.QueryMOONRIVER_dayDatasArgs, MeshContext>,
  /** null **/
  MOONRIVER_token: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_token'], MoonriverExchangeTypes.QueryMOONRIVER_tokenArgs, MeshContext>,
  /** null **/
  MOONRIVER_tokens: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_tokens'], MoonriverExchangeTypes.QueryMOONRIVER_tokensArgs, MeshContext>,
  /** null **/
  MOONRIVER_tokenHourData: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_tokenHourData'], MoonriverExchangeTypes.QueryMOONRIVER_tokenHourDataArgs, MeshContext>,
  /** null **/
  MOONRIVER_tokenHourDatas: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_tokenHourDatas'], MoonriverExchangeTypes.QueryMOONRIVER_tokenHourDatasArgs, MeshContext>,
  /** null **/
  MOONRIVER_tokenDayData: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_tokenDayData'], MoonriverExchangeTypes.QueryMOONRIVER_tokenDayDataArgs, MeshContext>,
  /** null **/
  MOONRIVER_tokenDayDatas: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_tokenDayDatas'], MoonriverExchangeTypes.QueryMOONRIVER_tokenDayDatasArgs, MeshContext>,
  /** null **/
  MOONRIVER_pair: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_pair'], MoonriverExchangeTypes.QueryMOONRIVER_pairArgs, MeshContext>,
  /** null **/
  MOONRIVER_pairs: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_pairs'], MoonriverExchangeTypes.QueryMOONRIVER_pairsArgs, MeshContext>,
  /** null **/
  MOONRIVER_pairHourData: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_pairHourData'], MoonriverExchangeTypes.QueryMOONRIVER_pairHourDataArgs, MeshContext>,
  /** null **/
  MOONRIVER_pairHourDatas: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_pairHourDatas'], MoonriverExchangeTypes.QueryMOONRIVER_pairHourDatasArgs, MeshContext>,
  /** null **/
  MOONRIVER_pairDayData: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_pairDayData'], MoonriverExchangeTypes.QueryMOONRIVER_pairDayDataArgs, MeshContext>,
  /** null **/
  MOONRIVER_pairDayDatas: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_pairDayDatas'], MoonriverExchangeTypes.QueryMOONRIVER_pairDayDatasArgs, MeshContext>,
  /** null **/
  MOONRIVER_liquidityPosition: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_liquidityPosition'], MoonriverExchangeTypes.QueryMOONRIVER_liquidityPositionArgs, MeshContext>,
  /** null **/
  MOONRIVER_liquidityPositions: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_liquidityPositions'], MoonriverExchangeTypes.QueryMOONRIVER_liquidityPositionsArgs, MeshContext>,
  /** null **/
  MOONRIVER_liquidityPositionSnapshot: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_liquidityPositionSnapshot'], MoonriverExchangeTypes.QueryMOONRIVER_liquidityPositionSnapshotArgs, MeshContext>,
  /** null **/
  MOONRIVER_liquidityPositionSnapshots: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_liquidityPositionSnapshots'], MoonriverExchangeTypes.QueryMOONRIVER_liquidityPositionSnapshotsArgs, MeshContext>,
  /** null **/
  MOONRIVER_transaction: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_transaction'], MoonriverExchangeTypes.QueryMOONRIVER_transactionArgs, MeshContext>,
  /** null **/
  MOONRIVER_transactions: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_transactions'], MoonriverExchangeTypes.QueryMOONRIVER_transactionsArgs, MeshContext>,
  /** null **/
  MOONRIVER_mint: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_mint'], MoonriverExchangeTypes.QueryMOONRIVER_mintArgs, MeshContext>,
  /** null **/
  MOONRIVER_mints: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_mints'], MoonriverExchangeTypes.QueryMOONRIVER_mintsArgs, MeshContext>,
  /** null **/
  MOONRIVER_burn: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_burn'], MoonriverExchangeTypes.QueryMOONRIVER_burnArgs, MeshContext>,
  /** null **/
  MOONRIVER_burns: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_burns'], MoonriverExchangeTypes.QueryMOONRIVER_burnsArgs, MeshContext>,
  /** null **/
  MOONRIVER_swap: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_swap'], MoonriverExchangeTypes.QueryMOONRIVER_swapArgs, MeshContext>,
  /** null **/
  MOONRIVER_swaps: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER_swaps'], MoonriverExchangeTypes.QueryMOONRIVER_swapsArgs, MeshContext>,
  /** Access to subgraph metadata **/
  MOONRIVER__meta: InContextSdkMethod<MoonriverExchangeTypes.Query['MOONRIVER__meta'], MoonriverExchangeTypes.QueryMOONRIVER__metaArgs, MeshContext>
};

export type MutationMoonriverExchangeSdk = {

};

export type SubscriptionMoonriverExchangeSdk = {
  /** null **/
  MOONRIVER_user: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_user'], MoonriverExchangeTypes.SubscriptionMOONRIVER_userArgs, MeshContext>,
  /** null **/
  MOONRIVER_users: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_users'], MoonriverExchangeTypes.SubscriptionMOONRIVER_usersArgs, MeshContext>,
  /** null **/
  MOONRIVER_bundle: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_bundle'], MoonriverExchangeTypes.SubscriptionMOONRIVER_bundleArgs, MeshContext>,
  /** null **/
  MOONRIVER_bundles: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_bundles'], MoonriverExchangeTypes.SubscriptionMOONRIVER_bundlesArgs, MeshContext>,
  /** null **/
  MOONRIVER_factory: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_factory'], MoonriverExchangeTypes.SubscriptionMOONRIVER_factoryArgs, MeshContext>,
  /** null **/
  MOONRIVER_factories: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_factories'], MoonriverExchangeTypes.SubscriptionMOONRIVER_factoriesArgs, MeshContext>,
  /** null **/
  MOONRIVER_hourData: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_hourData'], MoonriverExchangeTypes.SubscriptionMOONRIVER_hourDataArgs, MeshContext>,
  /** null **/
  MOONRIVER_hourDatas: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_hourDatas'], MoonriverExchangeTypes.SubscriptionMOONRIVER_hourDatasArgs, MeshContext>,
  /** null **/
  MOONRIVER_dayData: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_dayData'], MoonriverExchangeTypes.SubscriptionMOONRIVER_dayDataArgs, MeshContext>,
  /** null **/
  MOONRIVER_dayDatas: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_dayDatas'], MoonriverExchangeTypes.SubscriptionMOONRIVER_dayDatasArgs, MeshContext>,
  /** null **/
  MOONRIVER_token: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_token'], MoonriverExchangeTypes.SubscriptionMOONRIVER_tokenArgs, MeshContext>,
  /** null **/
  MOONRIVER_tokens: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_tokens'], MoonriverExchangeTypes.SubscriptionMOONRIVER_tokensArgs, MeshContext>,
  /** null **/
  MOONRIVER_tokenHourData: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_tokenHourData'], MoonriverExchangeTypes.SubscriptionMOONRIVER_tokenHourDataArgs, MeshContext>,
  /** null **/
  MOONRIVER_tokenHourDatas: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_tokenHourDatas'], MoonriverExchangeTypes.SubscriptionMOONRIVER_tokenHourDatasArgs, MeshContext>,
  /** null **/
  MOONRIVER_tokenDayData: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_tokenDayData'], MoonriverExchangeTypes.SubscriptionMOONRIVER_tokenDayDataArgs, MeshContext>,
  /** null **/
  MOONRIVER_tokenDayDatas: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_tokenDayDatas'], MoonriverExchangeTypes.SubscriptionMOONRIVER_tokenDayDatasArgs, MeshContext>,
  /** null **/
  MOONRIVER_pair: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_pair'], MoonriverExchangeTypes.SubscriptionMOONRIVER_pairArgs, MeshContext>,
  /** null **/
  MOONRIVER_pairs: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_pairs'], MoonriverExchangeTypes.SubscriptionMOONRIVER_pairsArgs, MeshContext>,
  /** null **/
  MOONRIVER_pairHourData: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_pairHourData'], MoonriverExchangeTypes.SubscriptionMOONRIVER_pairHourDataArgs, MeshContext>,
  /** null **/
  MOONRIVER_pairHourDatas: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_pairHourDatas'], MoonriverExchangeTypes.SubscriptionMOONRIVER_pairHourDatasArgs, MeshContext>,
  /** null **/
  MOONRIVER_pairDayData: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_pairDayData'], MoonriverExchangeTypes.SubscriptionMOONRIVER_pairDayDataArgs, MeshContext>,
  /** null **/
  MOONRIVER_pairDayDatas: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_pairDayDatas'], MoonriverExchangeTypes.SubscriptionMOONRIVER_pairDayDatasArgs, MeshContext>,
  /** null **/
  MOONRIVER_liquidityPosition: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_liquidityPosition'], MoonriverExchangeTypes.SubscriptionMOONRIVER_liquidityPositionArgs, MeshContext>,
  /** null **/
  MOONRIVER_liquidityPositions: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_liquidityPositions'], MoonriverExchangeTypes.SubscriptionMOONRIVER_liquidityPositionsArgs, MeshContext>,
  /** null **/
  MOONRIVER_liquidityPositionSnapshot: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_liquidityPositionSnapshot'], MoonriverExchangeTypes.SubscriptionMOONRIVER_liquidityPositionSnapshotArgs, MeshContext>,
  /** null **/
  MOONRIVER_liquidityPositionSnapshots: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_liquidityPositionSnapshots'], MoonriverExchangeTypes.SubscriptionMOONRIVER_liquidityPositionSnapshotsArgs, MeshContext>,
  /** null **/
  MOONRIVER_transaction: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_transaction'], MoonriverExchangeTypes.SubscriptionMOONRIVER_transactionArgs, MeshContext>,
  /** null **/
  MOONRIVER_transactions: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_transactions'], MoonriverExchangeTypes.SubscriptionMOONRIVER_transactionsArgs, MeshContext>,
  /** null **/
  MOONRIVER_mint: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_mint'], MoonriverExchangeTypes.SubscriptionMOONRIVER_mintArgs, MeshContext>,
  /** null **/
  MOONRIVER_mints: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_mints'], MoonriverExchangeTypes.SubscriptionMOONRIVER_mintsArgs, MeshContext>,
  /** null **/
  MOONRIVER_burn: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_burn'], MoonriverExchangeTypes.SubscriptionMOONRIVER_burnArgs, MeshContext>,
  /** null **/
  MOONRIVER_burns: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_burns'], MoonriverExchangeTypes.SubscriptionMOONRIVER_burnsArgs, MeshContext>,
  /** null **/
  MOONRIVER_swap: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_swap'], MoonriverExchangeTypes.SubscriptionMOONRIVER_swapArgs, MeshContext>,
  /** null **/
  MOONRIVER_swaps: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER_swaps'], MoonriverExchangeTypes.SubscriptionMOONRIVER_swapsArgs, MeshContext>,
  /** Access to subgraph metadata **/
  MOONRIVER__meta: InContextSdkMethod<MoonriverExchangeTypes.Subscription['MOONRIVER__meta'], MoonriverExchangeTypes.SubscriptionMOONRIVER__metaArgs, MeshContext>
};


    export namespace ArbitrumExchangeTypes {
      export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  ARBITRUM_BigDecimal: any;
  BigInt: any;
  ARBITRUM_Bytes: any;
};

/** The block at which the query should be executed. */
export type ARBITRUM_Block_height = {
  /** Value containing a block hash */
  hash?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  /** Value containing a block number */
  number?: InputMaybe<Scalars['Int']>;
  /**
   * Value containing the minimum block number.
   * In the case of `number_gte`, the query will be executed on the latest block only if
   * the subgraph has progressed to or past the minimum block number.
   * Defaults to the latest block when omitted.
   *
   */
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type ARBITRUM_Bundle = {
  id: Scalars['ID'];
  ethPrice: Scalars['ARBITRUM_BigDecimal'];
};

export type ARBITRUM_Bundle_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ethPrice?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  ethPrice_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  ethPrice_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  ethPrice_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  ethPrice_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  ethPrice_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  ethPrice_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  ethPrice_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
};

export type ARBITRUM_Bundle_orderBy =
  | 'id'
  | 'ethPrice';

export type ARBITRUM_Burn = {
  id: Scalars['ID'];
  transaction: ARBITRUM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: ARBITRUM_Pair;
  liquidity: Scalars['ARBITRUM_BigDecimal'];
  sender?: Maybe<Scalars['ARBITRUM_Bytes']>;
  amount0?: Maybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1?: Maybe<Scalars['ARBITRUM_BigDecimal']>;
  to?: Maybe<Scalars['ARBITRUM_Bytes']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['ARBITRUM_BigDecimal']>;
  complete: Scalars['Boolean'];
  feeTo?: Maybe<Scalars['ARBITRUM_Bytes']>;
  feeLiquidity?: Maybe<Scalars['ARBITRUM_BigDecimal']>;
};

export type ARBITRUM_Burn_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidity?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  sender?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_not?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  amount0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  to?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_not?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  complete?: InputMaybe<Scalars['Boolean']>;
  complete_not?: InputMaybe<Scalars['Boolean']>;
  complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
  complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  feeTo?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
};

export type ARBITRUM_Burn_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'to'
  | 'logIndex'
  | 'amountUSD'
  | 'complete'
  | 'feeTo'
  | 'feeLiquidity';

export type ARBITRUM_DayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: ARBITRUM_Factory;
  volumeETH: Scalars['ARBITRUM_BigDecimal'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  untrackedVolume: Scalars['ARBITRUM_BigDecimal'];
  liquidityETH: Scalars['ARBITRUM_BigDecimal'];
  liquidityUSD: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type ARBITRUM_DayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ARBITRUM_DayData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type ARBITRUM_Factory = {
  id: Scalars['ID'];
  pairCount: Scalars['BigInt'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  volumeETH: Scalars['ARBITRUM_BigDecimal'];
  untrackedVolumeUSD: Scalars['ARBITRUM_BigDecimal'];
  liquidityUSD: Scalars['ARBITRUM_BigDecimal'];
  liquidityETH: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  tokenCount: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  pairs: Array<ARBITRUM_Pair>;
  tokens: Array<ARBITRUM_Token>;
  hourData: Array<ARBITRUM_HourData>;
  dayData: Array<ARBITRUM_DayData>;
};


export type ARBITRUM_FactorypairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Pair_filter>;
};


export type ARBITRUM_FactorytokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Token_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Token_filter>;
};


export type ARBITRUM_FactoryhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_HourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_HourData_filter>;
};


export type ARBITRUM_FactorydayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_DayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_DayData_filter>;
};

export type ARBITRUM_Factory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  pairCount?: InputMaybe<Scalars['BigInt']>;
  pairCount_not?: InputMaybe<Scalars['BigInt']>;
  pairCount_gt?: InputMaybe<Scalars['BigInt']>;
  pairCount_lt?: InputMaybe<Scalars['BigInt']>;
  pairCount_gte?: InputMaybe<Scalars['BigInt']>;
  pairCount_lte?: InputMaybe<Scalars['BigInt']>;
  pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount?: InputMaybe<Scalars['BigInt']>;
  tokenCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount?: InputMaybe<Scalars['BigInt']>;
  userCount_not?: InputMaybe<Scalars['BigInt']>;
  userCount_gt?: InputMaybe<Scalars['BigInt']>;
  userCount_lt?: InputMaybe<Scalars['BigInt']>;
  userCount_gte?: InputMaybe<Scalars['BigInt']>;
  userCount_lte?: InputMaybe<Scalars['BigInt']>;
  userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ARBITRUM_Factory_orderBy =
  | 'id'
  | 'pairCount'
  | 'volumeUSD'
  | 'volumeETH'
  | 'untrackedVolumeUSD'
  | 'liquidityUSD'
  | 'liquidityETH'
  | 'txCount'
  | 'tokenCount'
  | 'userCount'
  | 'pairs'
  | 'tokens'
  | 'hourData'
  | 'dayData';

export type ARBITRUM_HourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: ARBITRUM_Factory;
  volumeETH: Scalars['ARBITRUM_BigDecimal'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  untrackedVolume: Scalars['ARBITRUM_BigDecimal'];
  liquidityETH: Scalars['ARBITRUM_BigDecimal'];
  liquidityUSD: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type ARBITRUM_HourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ARBITRUM_HourData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type ARBITRUM_LiquidityPosition = {
  id: Scalars['ID'];
  user: ARBITRUM_User;
  pair: ARBITRUM_Pair;
  liquidityTokenBalance: Scalars['ARBITRUM_BigDecimal'];
  snapshots: Array<Maybe<ARBITRUM_LiquidityPositionSnapshot>>;
  block: Scalars['Int'];
  timestamp: Scalars['Int'];
};


export type ARBITRUM_LiquidityPositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_LiquidityPositionSnapshot_filter>;
};

export type ARBITRUM_LiquidityPositionSnapshot = {
  id: Scalars['ID'];
  liquidityPosition: ARBITRUM_LiquidityPosition;
  timestamp: Scalars['Int'];
  block: Scalars['Int'];
  user: ARBITRUM_User;
  pair: ARBITRUM_Pair;
  token0PriceUSD: Scalars['ARBITRUM_BigDecimal'];
  token1PriceUSD: Scalars['ARBITRUM_BigDecimal'];
  reserve0: Scalars['ARBITRUM_BigDecimal'];
  reserve1: Scalars['ARBITRUM_BigDecimal'];
  reserveUSD: Scalars['ARBITRUM_BigDecimal'];
  liquidityTokenTotalSupply: Scalars['ARBITRUM_BigDecimal'];
  liquidityTokenBalance: Scalars['ARBITRUM_BigDecimal'];
};

export type ARBITRUM_LiquidityPositionSnapshot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityPosition?: InputMaybe<Scalars['String']>;
  liquidityPosition_not?: InputMaybe<Scalars['String']>;
  liquidityPosition_gt?: InputMaybe<Scalars['String']>;
  liquidityPosition_lt?: InputMaybe<Scalars['String']>;
  liquidityPosition_gte?: InputMaybe<Scalars['String']>;
  liquidityPosition_lte?: InputMaybe<Scalars['String']>;
  liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0PriceUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0PriceUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0PriceUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0PriceUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0PriceUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0PriceUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0PriceUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  token0PriceUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  token1PriceUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1PriceUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1PriceUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1PriceUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1PriceUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1PriceUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1PriceUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  token1PriceUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityTokenTotalSupply?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenTotalSupply_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityTokenBalance?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
};

export type ARBITRUM_LiquidityPositionSnapshot_orderBy =
  | 'id'
  | 'liquidityPosition'
  | 'timestamp'
  | 'block'
  | 'user'
  | 'pair'
  | 'token0PriceUSD'
  | 'token1PriceUSD'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'liquidityTokenTotalSupply'
  | 'liquidityTokenBalance';

export type ARBITRUM_LiquidityPosition_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityTokenBalance?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type ARBITRUM_LiquidityPosition_orderBy =
  | 'id'
  | 'user'
  | 'pair'
  | 'liquidityTokenBalance'
  | 'snapshots'
  | 'block'
  | 'timestamp';

export type ARBITRUM_Mint = {
  id: Scalars['ID'];
  transaction: ARBITRUM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: ARBITRUM_Pair;
  to: Scalars['ARBITRUM_Bytes'];
  liquidity: Scalars['ARBITRUM_BigDecimal'];
  sender?: Maybe<Scalars['ARBITRUM_Bytes']>;
  amount0?: Maybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1?: Maybe<Scalars['ARBITRUM_BigDecimal']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['ARBITRUM_BigDecimal']>;
  feeTo?: Maybe<Scalars['ARBITRUM_Bytes']>;
  feeLiquidity?: Maybe<Scalars['ARBITRUM_BigDecimal']>;
};

export type ARBITRUM_Mint_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_not?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  liquidity?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  sender?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_not?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  amount0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  feeTo?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
};

export type ARBITRUM_Mint_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'to'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'logIndex'
  | 'amountUSD'
  | 'feeTo'
  | 'feeLiquidity';

/** Defines the order direction, either ascending or descending */
export type ARBITRUM_OrderDirection =
  | 'asc'
  | 'desc';

export type ARBITRUM_Pair = {
  id: Scalars['ID'];
  factory: ARBITRUM_Factory;
  name: Scalars['String'];
  token0: ARBITRUM_Token;
  token1: ARBITRUM_Token;
  reserve0: Scalars['ARBITRUM_BigDecimal'];
  reserve1: Scalars['ARBITRUM_BigDecimal'];
  totalSupply: Scalars['ARBITRUM_BigDecimal'];
  reserveETH: Scalars['ARBITRUM_BigDecimal'];
  reserveUSD: Scalars['ARBITRUM_BigDecimal'];
  trackedReserveETH: Scalars['ARBITRUM_BigDecimal'];
  token0Price: Scalars['ARBITRUM_BigDecimal'];
  token1Price: Scalars['ARBITRUM_BigDecimal'];
  volumeToken0: Scalars['ARBITRUM_BigDecimal'];
  volumeToken1: Scalars['ARBITRUM_BigDecimal'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  untrackedVolumeUSD: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidityProviderCount: Scalars['BigInt'];
  liquidityPositions: Array<ARBITRUM_LiquidityPosition>;
  liquidityPositionSnapshots: Array<ARBITRUM_LiquidityPositionSnapshot>;
  dayData: Array<ARBITRUM_PairDayData>;
  hourData: Array<ARBITRUM_PairHourData>;
  mints: Array<ARBITRUM_Mint>;
  burns: Array<ARBITRUM_Burn>;
  swaps: Array<ARBITRUM_Swap>;
  timestamp: Scalars['BigInt'];
  block: Scalars['BigInt'];
};


export type ARBITRUM_PairliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_LiquidityPosition_filter>;
};


export type ARBITRUM_PairliquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_LiquidityPositionSnapshot_filter>;
};


export type ARBITRUM_PairdayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_PairDayData_filter>;
};


export type ARBITRUM_PairhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_PairHourData_filter>;
};


export type ARBITRUM_PairmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Mint_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Mint_filter>;
};


export type ARBITRUM_PairburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Burn_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Burn_filter>;
};


export type ARBITRUM_PairswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Swap_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Swap_filter>;
};

export type ARBITRUM_PairDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: ARBITRUM_Pair;
  token0: ARBITRUM_Token;
  token1: ARBITRUM_Token;
  reserve0: Scalars['ARBITRUM_BigDecimal'];
  reserve1: Scalars['ARBITRUM_BigDecimal'];
  totalSupply: Scalars['ARBITRUM_BigDecimal'];
  reserveUSD: Scalars['ARBITRUM_BigDecimal'];
  volumeToken0: Scalars['ARBITRUM_BigDecimal'];
  volumeToken1: Scalars['ARBITRUM_BigDecimal'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type ARBITRUM_PairDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ARBITRUM_PairDayData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type ARBITRUM_PairHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: ARBITRUM_Pair;
  reserve0: Scalars['ARBITRUM_BigDecimal'];
  reserve1: Scalars['ARBITRUM_BigDecimal'];
  reserveUSD: Scalars['ARBITRUM_BigDecimal'];
  volumeToken0: Scalars['ARBITRUM_BigDecimal'];
  volumeToken1: Scalars['ARBITRUM_BigDecimal'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type ARBITRUM_PairHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ARBITRUM_PairHourData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type ARBITRUM_Pair_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  trackedReserveETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  trackedReserveETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  trackedReserveETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  trackedReserveETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  trackedReserveETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  trackedReserveETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  trackedReserveETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  trackedReserveETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  token0Price?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0Price_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0Price_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0Price_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0Price_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0Price_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token0Price_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  token0Price_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  token1Price?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1Price_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1Price_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1Price_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1Price_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1Price_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  token1Price_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  token1Price_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type ARBITRUM_Pair_orderBy =
  | 'id'
  | 'factory'
  | 'name'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveETH'
  | 'reserveUSD'
  | 'trackedReserveETH'
  | 'token0Price'
  | 'token1Price'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidityProviderCount'
  | 'liquidityPositions'
  | 'liquidityPositionSnapshots'
  | 'dayData'
  | 'hourData'
  | 'mints'
  | 'burns'
  | 'swaps'
  | 'timestamp'
  | 'block';

export type Query = {
  ARBITRUM_user?: Maybe<ARBITRUM_User>;
  ARBITRUM_users: Array<ARBITRUM_User>;
  ARBITRUM_bundle?: Maybe<ARBITRUM_Bundle>;
  ARBITRUM_bundles: Array<ARBITRUM_Bundle>;
  ARBITRUM_factory?: Maybe<ARBITRUM_Factory>;
  ARBITRUM_factories: Array<ARBITRUM_Factory>;
  ARBITRUM_hourData?: Maybe<ARBITRUM_HourData>;
  ARBITRUM_hourDatas: Array<ARBITRUM_HourData>;
  ARBITRUM_dayData?: Maybe<ARBITRUM_DayData>;
  ARBITRUM_dayDatas: Array<ARBITRUM_DayData>;
  ARBITRUM_token?: Maybe<ARBITRUM_Token>;
  ARBITRUM_tokens: Array<ARBITRUM_Token>;
  ARBITRUM_tokenHourData?: Maybe<ARBITRUM_TokenHourData>;
  ARBITRUM_tokenHourDatas: Array<ARBITRUM_TokenHourData>;
  ARBITRUM_tokenDayData?: Maybe<ARBITRUM_TokenDayData>;
  ARBITRUM_tokenDayDatas: Array<ARBITRUM_TokenDayData>;
  ARBITRUM_pair?: Maybe<ARBITRUM_Pair>;
  ARBITRUM_pairs: Array<ARBITRUM_Pair>;
  ARBITRUM_pairHourData?: Maybe<ARBITRUM_PairHourData>;
  ARBITRUM_pairHourDatas: Array<ARBITRUM_PairHourData>;
  ARBITRUM_pairDayData?: Maybe<ARBITRUM_PairDayData>;
  ARBITRUM_pairDayDatas: Array<ARBITRUM_PairDayData>;
  ARBITRUM_liquidityPosition?: Maybe<ARBITRUM_LiquidityPosition>;
  ARBITRUM_liquidityPositions: Array<ARBITRUM_LiquidityPosition>;
  ARBITRUM_liquidityPositionSnapshot?: Maybe<ARBITRUM_LiquidityPositionSnapshot>;
  ARBITRUM_liquidityPositionSnapshots: Array<ARBITRUM_LiquidityPositionSnapshot>;
  ARBITRUM_transaction?: Maybe<ARBITRUM_Transaction>;
  ARBITRUM_transactions: Array<ARBITRUM_Transaction>;
  ARBITRUM_mint?: Maybe<ARBITRUM_Mint>;
  ARBITRUM_mints: Array<ARBITRUM_Mint>;
  ARBITRUM_burn?: Maybe<ARBITRUM_Burn>;
  ARBITRUM_burns: Array<ARBITRUM_Burn>;
  ARBITRUM_swap?: Maybe<ARBITRUM_Swap>;
  ARBITRUM_swaps: Array<ARBITRUM_Swap>;
  /** Access to subgraph metadata */
  ARBITRUM__meta?: Maybe<ARBITRUM__Meta_>;
};


export type QueryARBITRUM_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_User_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_User_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Bundle_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Bundle_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Factory_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Factory_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_HourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_HourData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_DayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_DayData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Token_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Token_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_TokenHourData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_TokenDayData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Pair_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_PairHourData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_PairDayData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_LiquidityPosition_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Transaction_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Transaction_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Mint_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Mint_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Burn_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Burn_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Swap_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Swap_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryARBITRUM__metaArgs = {
  block?: InputMaybe<ARBITRUM_Block_height>;
};

export type Subscription = {
  ARBITRUM_user?: Maybe<ARBITRUM_User>;
  ARBITRUM_users: Array<ARBITRUM_User>;
  ARBITRUM_bundle?: Maybe<ARBITRUM_Bundle>;
  ARBITRUM_bundles: Array<ARBITRUM_Bundle>;
  ARBITRUM_factory?: Maybe<ARBITRUM_Factory>;
  ARBITRUM_factories: Array<ARBITRUM_Factory>;
  ARBITRUM_hourData?: Maybe<ARBITRUM_HourData>;
  ARBITRUM_hourDatas: Array<ARBITRUM_HourData>;
  ARBITRUM_dayData?: Maybe<ARBITRUM_DayData>;
  ARBITRUM_dayDatas: Array<ARBITRUM_DayData>;
  ARBITRUM_token?: Maybe<ARBITRUM_Token>;
  ARBITRUM_tokens: Array<ARBITRUM_Token>;
  ARBITRUM_tokenHourData?: Maybe<ARBITRUM_TokenHourData>;
  ARBITRUM_tokenHourDatas: Array<ARBITRUM_TokenHourData>;
  ARBITRUM_tokenDayData?: Maybe<ARBITRUM_TokenDayData>;
  ARBITRUM_tokenDayDatas: Array<ARBITRUM_TokenDayData>;
  ARBITRUM_pair?: Maybe<ARBITRUM_Pair>;
  ARBITRUM_pairs: Array<ARBITRUM_Pair>;
  ARBITRUM_pairHourData?: Maybe<ARBITRUM_PairHourData>;
  ARBITRUM_pairHourDatas: Array<ARBITRUM_PairHourData>;
  ARBITRUM_pairDayData?: Maybe<ARBITRUM_PairDayData>;
  ARBITRUM_pairDayDatas: Array<ARBITRUM_PairDayData>;
  ARBITRUM_liquidityPosition?: Maybe<ARBITRUM_LiquidityPosition>;
  ARBITRUM_liquidityPositions: Array<ARBITRUM_LiquidityPosition>;
  ARBITRUM_liquidityPositionSnapshot?: Maybe<ARBITRUM_LiquidityPositionSnapshot>;
  ARBITRUM_liquidityPositionSnapshots: Array<ARBITRUM_LiquidityPositionSnapshot>;
  ARBITRUM_transaction?: Maybe<ARBITRUM_Transaction>;
  ARBITRUM_transactions: Array<ARBITRUM_Transaction>;
  ARBITRUM_mint?: Maybe<ARBITRUM_Mint>;
  ARBITRUM_mints: Array<ARBITRUM_Mint>;
  ARBITRUM_burn?: Maybe<ARBITRUM_Burn>;
  ARBITRUM_burns: Array<ARBITRUM_Burn>;
  ARBITRUM_swap?: Maybe<ARBITRUM_Swap>;
  ARBITRUM_swaps: Array<ARBITRUM_Swap>;
  /** Access to subgraph metadata */
  ARBITRUM__meta?: Maybe<ARBITRUM__Meta_>;
};


export type SubscriptionARBITRUM_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_User_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_User_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Bundle_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Bundle_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Factory_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Factory_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_HourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_HourData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_DayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_DayData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Token_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Token_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_TokenHourData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_TokenDayData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Pair_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_PairHourData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_PairDayData_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_LiquidityPosition_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Transaction_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Transaction_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Mint_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Mint_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Burn_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Burn_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Swap_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Swap_filter>;
  block?: InputMaybe<ARBITRUM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionARBITRUM__metaArgs = {
  block?: InputMaybe<ARBITRUM_Block_height>;
};

export type ARBITRUM_Swap = {
  id: Scalars['ID'];
  transaction: ARBITRUM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: ARBITRUM_Pair;
  sender: Scalars['ARBITRUM_Bytes'];
  amount0In: Scalars['ARBITRUM_BigDecimal'];
  amount1In: Scalars['ARBITRUM_BigDecimal'];
  amount0Out: Scalars['ARBITRUM_BigDecimal'];
  amount1Out: Scalars['ARBITRUM_BigDecimal'];
  to: Scalars['ARBITRUM_Bytes'];
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD: Scalars['ARBITRUM_BigDecimal'];
};

export type ARBITRUM_Swap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_not?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  amount0In?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0In_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0In_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0In_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0In_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0In_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0In_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount0In_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount1In?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1In_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1In_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1In_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1In_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1In_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1In_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount1In_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount0Out?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0Out_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0Out_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0Out_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0Out_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0Out_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount0Out_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount0Out_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount1Out?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1Out_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1Out_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1Out_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1Out_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1Out_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amount1Out_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amount1Out_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  to?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_not?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['ARBITRUM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['ARBITRUM_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
};

export type ARBITRUM_Swap_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'sender'
  | 'amount0In'
  | 'amount1In'
  | 'amount0Out'
  | 'amount1Out'
  | 'to'
  | 'logIndex'
  | 'amountUSD';

export type ARBITRUM_Token = {
  id: Scalars['ID'];
  factory: ARBITRUM_Factory;
  symbol: Scalars['String'];
  name: Scalars['String'];
  decimals: Scalars['BigInt'];
  totalSupply: Scalars['BigInt'];
  volume: Scalars['ARBITRUM_BigDecimal'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  untrackedVolumeUSD: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['ARBITRUM_BigDecimal'];
  derivedETH: Scalars['ARBITRUM_BigDecimal'];
  whitelistPairs: Array<ARBITRUM_Pair>;
  hourData: Array<ARBITRUM_TokenHourData>;
  dayData: Array<ARBITRUM_TokenDayData>;
  basePairs: Array<ARBITRUM_Pair>;
  quotePairs: Array<ARBITRUM_Pair>;
  basePairsDayData: Array<ARBITRUM_PairDayData>;
  quotePairsDayData: Array<ARBITRUM_PairDayData>;
};


export type ARBITRUM_TokenwhitelistPairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Pair_filter>;
};


export type ARBITRUM_TokenhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_TokenHourData_filter>;
};


export type ARBITRUM_TokendayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_TokenDayData_filter>;
};


export type ARBITRUM_TokenbasePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Pair_filter>;
};


export type ARBITRUM_TokenquotePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Pair_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Pair_filter>;
};


export type ARBITRUM_TokenbasePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_PairDayData_filter>;
};


export type ARBITRUM_TokenquotePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_PairDayData_filter>;
};

export type ARBITRUM_TokenDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: ARBITRUM_Token;
  volume: Scalars['ARBITRUM_BigDecimal'];
  volumeETH: Scalars['ARBITRUM_BigDecimal'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['ARBITRUM_BigDecimal'];
  liquidityETH: Scalars['ARBITRUM_BigDecimal'];
  liquidityUSD: Scalars['ARBITRUM_BigDecimal'];
  priceUSD: Scalars['ARBITRUM_BigDecimal'];
};

export type ARBITRUM_TokenDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
};

export type ARBITRUM_TokenDayData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type ARBITRUM_TokenHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: ARBITRUM_Token;
  volume: Scalars['ARBITRUM_BigDecimal'];
  volumeETH: Scalars['ARBITRUM_BigDecimal'];
  volumeUSD: Scalars['ARBITRUM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['ARBITRUM_BigDecimal'];
  liquidityETH: Scalars['ARBITRUM_BigDecimal'];
  liquidityUSD: Scalars['ARBITRUM_BigDecimal'];
  priceUSD: Scalars['ARBITRUM_BigDecimal'];
};

export type ARBITRUM_TokenHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
};

export type ARBITRUM_TokenHourData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type ARBITRUM_Token_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  decimals?: InputMaybe<Scalars['BigInt']>;
  decimals_not?: InputMaybe<Scalars['BigInt']>;
  decimals_gt?: InputMaybe<Scalars['BigInt']>;
  decimals_lt?: InputMaybe<Scalars['BigInt']>;
  decimals_gte?: InputMaybe<Scalars['BigInt']>;
  decimals_lte?: InputMaybe<Scalars['BigInt']>;
  decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  derivedETH?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  derivedETH_not?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  derivedETH_gt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  derivedETH_lt?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  derivedETH_gte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  derivedETH_lte?: InputMaybe<Scalars['ARBITRUM_BigDecimal']>;
  derivedETH_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  derivedETH_not_in?: InputMaybe<Array<Scalars['ARBITRUM_BigDecimal']>>;
  whitelistPairs?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type ARBITRUM_Token_orderBy =
  | 'id'
  | 'factory'
  | 'symbol'
  | 'name'
  | 'decimals'
  | 'totalSupply'
  | 'volume'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'derivedETH'
  | 'whitelistPairs'
  | 'hourData'
  | 'dayData'
  | 'basePairs'
  | 'quotePairs'
  | 'basePairsDayData'
  | 'quotePairsDayData';

export type ARBITRUM_Transaction = {
  id: Scalars['ID'];
  blockNumber: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  mints: Array<Maybe<ARBITRUM_Mint>>;
  burns: Array<Maybe<ARBITRUM_Burn>>;
  swaps: Array<Maybe<ARBITRUM_Swap>>;
};


export type ARBITRUM_TransactionmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Mint_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Mint_filter>;
};


export type ARBITRUM_TransactionburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Burn_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Burn_filter>;
};


export type ARBITRUM_TransactionswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_Swap_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_Swap_filter>;
};

export type ARBITRUM_Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  mints?: InputMaybe<Array<Scalars['String']>>;
  mints_not?: InputMaybe<Array<Scalars['String']>>;
  mints_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns?: InputMaybe<Array<Scalars['String']>>;
  burns_not?: InputMaybe<Array<Scalars['String']>>;
  burns_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps?: InputMaybe<Array<Scalars['String']>>;
  swaps_not?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type ARBITRUM_Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'mints'
  | 'burns'
  | 'swaps';

export type ARBITRUM_User = {
  id: Scalars['ID'];
  liquidityPositions: Array<ARBITRUM_LiquidityPosition>;
};


export type ARBITRUM_UserliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ARBITRUM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<ARBITRUM_OrderDirection>;
  where?: InputMaybe<ARBITRUM_LiquidityPosition_filter>;
};

export type ARBITRUM_User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
};

export type ARBITRUM_User_orderBy =
  | 'id'
  | 'liquidityPositions';

export type ARBITRUM__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['ARBITRUM_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
};

/** The type for the top-level _meta field */
export type ARBITRUM__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: ARBITRUM__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type _SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

    }
    export type QueryArbitrumExchangeSdk = {
  /** null **/
  ARBITRUM_user: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_user'], ArbitrumExchangeTypes.QueryARBITRUM_userArgs, MeshContext>,
  /** null **/
  ARBITRUM_users: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_users'], ArbitrumExchangeTypes.QueryARBITRUM_usersArgs, MeshContext>,
  /** null **/
  ARBITRUM_bundle: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_bundle'], ArbitrumExchangeTypes.QueryARBITRUM_bundleArgs, MeshContext>,
  /** null **/
  ARBITRUM_bundles: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_bundles'], ArbitrumExchangeTypes.QueryARBITRUM_bundlesArgs, MeshContext>,
  /** null **/
  ARBITRUM_factory: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_factory'], ArbitrumExchangeTypes.QueryARBITRUM_factoryArgs, MeshContext>,
  /** null **/
  ARBITRUM_factories: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_factories'], ArbitrumExchangeTypes.QueryARBITRUM_factoriesArgs, MeshContext>,
  /** null **/
  ARBITRUM_hourData: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_hourData'], ArbitrumExchangeTypes.QueryARBITRUM_hourDataArgs, MeshContext>,
  /** null **/
  ARBITRUM_hourDatas: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_hourDatas'], ArbitrumExchangeTypes.QueryARBITRUM_hourDatasArgs, MeshContext>,
  /** null **/
  ARBITRUM_dayData: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_dayData'], ArbitrumExchangeTypes.QueryARBITRUM_dayDataArgs, MeshContext>,
  /** null **/
  ARBITRUM_dayDatas: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_dayDatas'], ArbitrumExchangeTypes.QueryARBITRUM_dayDatasArgs, MeshContext>,
  /** null **/
  ARBITRUM_token: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_token'], ArbitrumExchangeTypes.QueryARBITRUM_tokenArgs, MeshContext>,
  /** null **/
  ARBITRUM_tokens: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_tokens'], ArbitrumExchangeTypes.QueryARBITRUM_tokensArgs, MeshContext>,
  /** null **/
  ARBITRUM_tokenHourData: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_tokenHourData'], ArbitrumExchangeTypes.QueryARBITRUM_tokenHourDataArgs, MeshContext>,
  /** null **/
  ARBITRUM_tokenHourDatas: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_tokenHourDatas'], ArbitrumExchangeTypes.QueryARBITRUM_tokenHourDatasArgs, MeshContext>,
  /** null **/
  ARBITRUM_tokenDayData: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_tokenDayData'], ArbitrumExchangeTypes.QueryARBITRUM_tokenDayDataArgs, MeshContext>,
  /** null **/
  ARBITRUM_tokenDayDatas: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_tokenDayDatas'], ArbitrumExchangeTypes.QueryARBITRUM_tokenDayDatasArgs, MeshContext>,
  /** null **/
  ARBITRUM_pair: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_pair'], ArbitrumExchangeTypes.QueryARBITRUM_pairArgs, MeshContext>,
  /** null **/
  ARBITRUM_pairs: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_pairs'], ArbitrumExchangeTypes.QueryARBITRUM_pairsArgs, MeshContext>,
  /** null **/
  ARBITRUM_pairHourData: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_pairHourData'], ArbitrumExchangeTypes.QueryARBITRUM_pairHourDataArgs, MeshContext>,
  /** null **/
  ARBITRUM_pairHourDatas: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_pairHourDatas'], ArbitrumExchangeTypes.QueryARBITRUM_pairHourDatasArgs, MeshContext>,
  /** null **/
  ARBITRUM_pairDayData: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_pairDayData'], ArbitrumExchangeTypes.QueryARBITRUM_pairDayDataArgs, MeshContext>,
  /** null **/
  ARBITRUM_pairDayDatas: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_pairDayDatas'], ArbitrumExchangeTypes.QueryARBITRUM_pairDayDatasArgs, MeshContext>,
  /** null **/
  ARBITRUM_liquidityPosition: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_liquidityPosition'], ArbitrumExchangeTypes.QueryARBITRUM_liquidityPositionArgs, MeshContext>,
  /** null **/
  ARBITRUM_liquidityPositions: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_liquidityPositions'], ArbitrumExchangeTypes.QueryARBITRUM_liquidityPositionsArgs, MeshContext>,
  /** null **/
  ARBITRUM_liquidityPositionSnapshot: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_liquidityPositionSnapshot'], ArbitrumExchangeTypes.QueryARBITRUM_liquidityPositionSnapshotArgs, MeshContext>,
  /** null **/
  ARBITRUM_liquidityPositionSnapshots: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_liquidityPositionSnapshots'], ArbitrumExchangeTypes.QueryARBITRUM_liquidityPositionSnapshotsArgs, MeshContext>,
  /** null **/
  ARBITRUM_transaction: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_transaction'], ArbitrumExchangeTypes.QueryARBITRUM_transactionArgs, MeshContext>,
  /** null **/
  ARBITRUM_transactions: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_transactions'], ArbitrumExchangeTypes.QueryARBITRUM_transactionsArgs, MeshContext>,
  /** null **/
  ARBITRUM_mint: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_mint'], ArbitrumExchangeTypes.QueryARBITRUM_mintArgs, MeshContext>,
  /** null **/
  ARBITRUM_mints: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_mints'], ArbitrumExchangeTypes.QueryARBITRUM_mintsArgs, MeshContext>,
  /** null **/
  ARBITRUM_burn: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_burn'], ArbitrumExchangeTypes.QueryARBITRUM_burnArgs, MeshContext>,
  /** null **/
  ARBITRUM_burns: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_burns'], ArbitrumExchangeTypes.QueryARBITRUM_burnsArgs, MeshContext>,
  /** null **/
  ARBITRUM_swap: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_swap'], ArbitrumExchangeTypes.QueryARBITRUM_swapArgs, MeshContext>,
  /** null **/
  ARBITRUM_swaps: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM_swaps'], ArbitrumExchangeTypes.QueryARBITRUM_swapsArgs, MeshContext>,
  /** Access to subgraph metadata **/
  ARBITRUM__meta: InContextSdkMethod<ArbitrumExchangeTypes.Query['ARBITRUM__meta'], ArbitrumExchangeTypes.QueryARBITRUM__metaArgs, MeshContext>
};

export type MutationArbitrumExchangeSdk = {

};

export type SubscriptionArbitrumExchangeSdk = {
  /** null **/
  ARBITRUM_user: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_user'], ArbitrumExchangeTypes.SubscriptionARBITRUM_userArgs, MeshContext>,
  /** null **/
  ARBITRUM_users: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_users'], ArbitrumExchangeTypes.SubscriptionARBITRUM_usersArgs, MeshContext>,
  /** null **/
  ARBITRUM_bundle: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_bundle'], ArbitrumExchangeTypes.SubscriptionARBITRUM_bundleArgs, MeshContext>,
  /** null **/
  ARBITRUM_bundles: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_bundles'], ArbitrumExchangeTypes.SubscriptionARBITRUM_bundlesArgs, MeshContext>,
  /** null **/
  ARBITRUM_factory: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_factory'], ArbitrumExchangeTypes.SubscriptionARBITRUM_factoryArgs, MeshContext>,
  /** null **/
  ARBITRUM_factories: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_factories'], ArbitrumExchangeTypes.SubscriptionARBITRUM_factoriesArgs, MeshContext>,
  /** null **/
  ARBITRUM_hourData: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_hourData'], ArbitrumExchangeTypes.SubscriptionARBITRUM_hourDataArgs, MeshContext>,
  /** null **/
  ARBITRUM_hourDatas: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_hourDatas'], ArbitrumExchangeTypes.SubscriptionARBITRUM_hourDatasArgs, MeshContext>,
  /** null **/
  ARBITRUM_dayData: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_dayData'], ArbitrumExchangeTypes.SubscriptionARBITRUM_dayDataArgs, MeshContext>,
  /** null **/
  ARBITRUM_dayDatas: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_dayDatas'], ArbitrumExchangeTypes.SubscriptionARBITRUM_dayDatasArgs, MeshContext>,
  /** null **/
  ARBITRUM_token: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_token'], ArbitrumExchangeTypes.SubscriptionARBITRUM_tokenArgs, MeshContext>,
  /** null **/
  ARBITRUM_tokens: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_tokens'], ArbitrumExchangeTypes.SubscriptionARBITRUM_tokensArgs, MeshContext>,
  /** null **/
  ARBITRUM_tokenHourData: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_tokenHourData'], ArbitrumExchangeTypes.SubscriptionARBITRUM_tokenHourDataArgs, MeshContext>,
  /** null **/
  ARBITRUM_tokenHourDatas: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_tokenHourDatas'], ArbitrumExchangeTypes.SubscriptionARBITRUM_tokenHourDatasArgs, MeshContext>,
  /** null **/
  ARBITRUM_tokenDayData: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_tokenDayData'], ArbitrumExchangeTypes.SubscriptionARBITRUM_tokenDayDataArgs, MeshContext>,
  /** null **/
  ARBITRUM_tokenDayDatas: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_tokenDayDatas'], ArbitrumExchangeTypes.SubscriptionARBITRUM_tokenDayDatasArgs, MeshContext>,
  /** null **/
  ARBITRUM_pair: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_pair'], ArbitrumExchangeTypes.SubscriptionARBITRUM_pairArgs, MeshContext>,
  /** null **/
  ARBITRUM_pairs: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_pairs'], ArbitrumExchangeTypes.SubscriptionARBITRUM_pairsArgs, MeshContext>,
  /** null **/
  ARBITRUM_pairHourData: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_pairHourData'], ArbitrumExchangeTypes.SubscriptionARBITRUM_pairHourDataArgs, MeshContext>,
  /** null **/
  ARBITRUM_pairHourDatas: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_pairHourDatas'], ArbitrumExchangeTypes.SubscriptionARBITRUM_pairHourDatasArgs, MeshContext>,
  /** null **/
  ARBITRUM_pairDayData: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_pairDayData'], ArbitrumExchangeTypes.SubscriptionARBITRUM_pairDayDataArgs, MeshContext>,
  /** null **/
  ARBITRUM_pairDayDatas: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_pairDayDatas'], ArbitrumExchangeTypes.SubscriptionARBITRUM_pairDayDatasArgs, MeshContext>,
  /** null **/
  ARBITRUM_liquidityPosition: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_liquidityPosition'], ArbitrumExchangeTypes.SubscriptionARBITRUM_liquidityPositionArgs, MeshContext>,
  /** null **/
  ARBITRUM_liquidityPositions: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_liquidityPositions'], ArbitrumExchangeTypes.SubscriptionARBITRUM_liquidityPositionsArgs, MeshContext>,
  /** null **/
  ARBITRUM_liquidityPositionSnapshot: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_liquidityPositionSnapshot'], ArbitrumExchangeTypes.SubscriptionARBITRUM_liquidityPositionSnapshotArgs, MeshContext>,
  /** null **/
  ARBITRUM_liquidityPositionSnapshots: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_liquidityPositionSnapshots'], ArbitrumExchangeTypes.SubscriptionARBITRUM_liquidityPositionSnapshotsArgs, MeshContext>,
  /** null **/
  ARBITRUM_transaction: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_transaction'], ArbitrumExchangeTypes.SubscriptionARBITRUM_transactionArgs, MeshContext>,
  /** null **/
  ARBITRUM_transactions: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_transactions'], ArbitrumExchangeTypes.SubscriptionARBITRUM_transactionsArgs, MeshContext>,
  /** null **/
  ARBITRUM_mint: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_mint'], ArbitrumExchangeTypes.SubscriptionARBITRUM_mintArgs, MeshContext>,
  /** null **/
  ARBITRUM_mints: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_mints'], ArbitrumExchangeTypes.SubscriptionARBITRUM_mintsArgs, MeshContext>,
  /** null **/
  ARBITRUM_burn: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_burn'], ArbitrumExchangeTypes.SubscriptionARBITRUM_burnArgs, MeshContext>,
  /** null **/
  ARBITRUM_burns: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_burns'], ArbitrumExchangeTypes.SubscriptionARBITRUM_burnsArgs, MeshContext>,
  /** null **/
  ARBITRUM_swap: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_swap'], ArbitrumExchangeTypes.SubscriptionARBITRUM_swapArgs, MeshContext>,
  /** null **/
  ARBITRUM_swaps: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM_swaps'], ArbitrumExchangeTypes.SubscriptionARBITRUM_swapsArgs, MeshContext>,
  /** Access to subgraph metadata **/
  ARBITRUM__meta: InContextSdkMethod<ArbitrumExchangeTypes.Subscription['ARBITRUM__meta'], ArbitrumExchangeTypes.SubscriptionARBITRUM__metaArgs, MeshContext>
};


    export namespace FantomExchangeTypes {
      export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  FANTOM_BigDecimal: any;
  BigInt: any;
  FANTOM_Bytes: any;
};

/** The block at which the query should be executed. */
export type FANTOM_Block_height = {
  /** Value containing a block hash */
  hash?: InputMaybe<Scalars['FANTOM_Bytes']>;
  /** Value containing a block number */
  number?: InputMaybe<Scalars['Int']>;
  /**
   * Value containing the minimum block number.
   * In the case of `number_gte`, the query will be executed on the latest block only if
   * the subgraph has progressed to or past the minimum block number.
   * Defaults to the latest block when omitted.
   *
   */
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type FANTOM_Bundle = {
  id: Scalars['ID'];
  ethPrice: Scalars['FANTOM_BigDecimal'];
};

export type FANTOM_Bundle_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ethPrice?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  ethPrice_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  ethPrice_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  ethPrice_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  ethPrice_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  ethPrice_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  ethPrice_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  ethPrice_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
};

export type FANTOM_Bundle_orderBy =
  | 'id'
  | 'ethPrice';

export type FANTOM_Burn = {
  id: Scalars['ID'];
  transaction: FANTOM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: FANTOM_Pair;
  liquidity: Scalars['FANTOM_BigDecimal'];
  sender?: Maybe<Scalars['FANTOM_Bytes']>;
  amount0?: Maybe<Scalars['FANTOM_BigDecimal']>;
  amount1?: Maybe<Scalars['FANTOM_BigDecimal']>;
  to?: Maybe<Scalars['FANTOM_Bytes']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['FANTOM_BigDecimal']>;
  complete: Scalars['Boolean'];
  feeTo?: Maybe<Scalars['FANTOM_Bytes']>;
  feeLiquidity?: Maybe<Scalars['FANTOM_BigDecimal']>;
};

export type FANTOM_Burn_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidity?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  sender?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_not?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  amount0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  to?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_not?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  complete?: InputMaybe<Scalars['Boolean']>;
  complete_not?: InputMaybe<Scalars['Boolean']>;
  complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
  complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  feeTo?: InputMaybe<Scalars['FANTOM_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['FANTOM_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
};

export type FANTOM_Burn_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'to'
  | 'logIndex'
  | 'amountUSD'
  | 'complete'
  | 'feeTo'
  | 'feeLiquidity';

export type FANTOM_DayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: FANTOM_Factory;
  volumeETH: Scalars['FANTOM_BigDecimal'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  untrackedVolume: Scalars['FANTOM_BigDecimal'];
  liquidityETH: Scalars['FANTOM_BigDecimal'];
  liquidityUSD: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type FANTOM_DayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type FANTOM_DayData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type FANTOM_Factory = {
  id: Scalars['ID'];
  pairCount: Scalars['BigInt'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  volumeETH: Scalars['FANTOM_BigDecimal'];
  untrackedVolumeUSD: Scalars['FANTOM_BigDecimal'];
  liquidityUSD: Scalars['FANTOM_BigDecimal'];
  liquidityETH: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
  tokenCount: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  pairs: Array<FANTOM_Pair>;
  tokens: Array<FANTOM_Token>;
  hourData: Array<FANTOM_HourData>;
  dayData: Array<FANTOM_DayData>;
};


export type FANTOM_FactorypairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Pair_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Pair_filter>;
};


export type FANTOM_FactorytokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Token_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Token_filter>;
};


export type FANTOM_FactoryhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_HourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_HourData_filter>;
};


export type FANTOM_FactorydayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_DayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_DayData_filter>;
};

export type FANTOM_Factory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  pairCount?: InputMaybe<Scalars['BigInt']>;
  pairCount_not?: InputMaybe<Scalars['BigInt']>;
  pairCount_gt?: InputMaybe<Scalars['BigInt']>;
  pairCount_lt?: InputMaybe<Scalars['BigInt']>;
  pairCount_gte?: InputMaybe<Scalars['BigInt']>;
  pairCount_lte?: InputMaybe<Scalars['BigInt']>;
  pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount?: InputMaybe<Scalars['BigInt']>;
  tokenCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount?: InputMaybe<Scalars['BigInt']>;
  userCount_not?: InputMaybe<Scalars['BigInt']>;
  userCount_gt?: InputMaybe<Scalars['BigInt']>;
  userCount_lt?: InputMaybe<Scalars['BigInt']>;
  userCount_gte?: InputMaybe<Scalars['BigInt']>;
  userCount_lte?: InputMaybe<Scalars['BigInt']>;
  userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type FANTOM_Factory_orderBy =
  | 'id'
  | 'pairCount'
  | 'volumeUSD'
  | 'volumeETH'
  | 'untrackedVolumeUSD'
  | 'liquidityUSD'
  | 'liquidityETH'
  | 'txCount'
  | 'tokenCount'
  | 'userCount'
  | 'pairs'
  | 'tokens'
  | 'hourData'
  | 'dayData';

export type FANTOM_HourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: FANTOM_Factory;
  volumeETH: Scalars['FANTOM_BigDecimal'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  untrackedVolume: Scalars['FANTOM_BigDecimal'];
  liquidityETH: Scalars['FANTOM_BigDecimal'];
  liquidityUSD: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type FANTOM_HourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type FANTOM_HourData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type FANTOM_LiquidityPosition = {
  id: Scalars['ID'];
  user: FANTOM_User;
  pair: FANTOM_Pair;
  liquidityTokenBalance: Scalars['FANTOM_BigDecimal'];
  snapshots: Array<Maybe<FANTOM_LiquidityPositionSnapshot>>;
  block: Scalars['Int'];
  timestamp: Scalars['Int'];
};


export type FANTOM_LiquidityPositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_LiquidityPositionSnapshot_filter>;
};

export type FANTOM_LiquidityPositionSnapshot = {
  id: Scalars['ID'];
  liquidityPosition: FANTOM_LiquidityPosition;
  timestamp: Scalars['Int'];
  block: Scalars['Int'];
  user: FANTOM_User;
  pair: FANTOM_Pair;
  token0PriceUSD: Scalars['FANTOM_BigDecimal'];
  token1PriceUSD: Scalars['FANTOM_BigDecimal'];
  reserve0: Scalars['FANTOM_BigDecimal'];
  reserve1: Scalars['FANTOM_BigDecimal'];
  reserveUSD: Scalars['FANTOM_BigDecimal'];
  liquidityTokenTotalSupply: Scalars['FANTOM_BigDecimal'];
  liquidityTokenBalance: Scalars['FANTOM_BigDecimal'];
};

export type FANTOM_LiquidityPositionSnapshot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityPosition?: InputMaybe<Scalars['String']>;
  liquidityPosition_not?: InputMaybe<Scalars['String']>;
  liquidityPosition_gt?: InputMaybe<Scalars['String']>;
  liquidityPosition_lt?: InputMaybe<Scalars['String']>;
  liquidityPosition_gte?: InputMaybe<Scalars['String']>;
  liquidityPosition_lte?: InputMaybe<Scalars['String']>;
  liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0PriceUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0PriceUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0PriceUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0PriceUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0PriceUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0PriceUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0PriceUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  token0PriceUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  token1PriceUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1PriceUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1PriceUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1PriceUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1PriceUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1PriceUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1PriceUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  token1PriceUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityTokenTotalSupply?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenTotalSupply_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityTokenBalance?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
};

export type FANTOM_LiquidityPositionSnapshot_orderBy =
  | 'id'
  | 'liquidityPosition'
  | 'timestamp'
  | 'block'
  | 'user'
  | 'pair'
  | 'token0PriceUSD'
  | 'token1PriceUSD'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'liquidityTokenTotalSupply'
  | 'liquidityTokenBalance';

export type FANTOM_LiquidityPosition_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityTokenBalance?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type FANTOM_LiquidityPosition_orderBy =
  | 'id'
  | 'user'
  | 'pair'
  | 'liquidityTokenBalance'
  | 'snapshots'
  | 'block'
  | 'timestamp';

export type FANTOM_Mint = {
  id: Scalars['ID'];
  transaction: FANTOM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: FANTOM_Pair;
  to: Scalars['FANTOM_Bytes'];
  liquidity: Scalars['FANTOM_BigDecimal'];
  sender?: Maybe<Scalars['FANTOM_Bytes']>;
  amount0?: Maybe<Scalars['FANTOM_BigDecimal']>;
  amount1?: Maybe<Scalars['FANTOM_BigDecimal']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['FANTOM_BigDecimal']>;
  feeTo?: Maybe<Scalars['FANTOM_Bytes']>;
  feeLiquidity?: Maybe<Scalars['FANTOM_BigDecimal']>;
};

export type FANTOM_Mint_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_not?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  liquidity?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  sender?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_not?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  amount0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  feeTo?: InputMaybe<Scalars['FANTOM_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['FANTOM_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
};

export type FANTOM_Mint_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'to'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'logIndex'
  | 'amountUSD'
  | 'feeTo'
  | 'feeLiquidity';

/** Defines the order direction, either ascending or descending */
export type FANTOM_OrderDirection =
  | 'asc'
  | 'desc';

export type FANTOM_Pair = {
  id: Scalars['ID'];
  factory: FANTOM_Factory;
  name: Scalars['String'];
  token0: FANTOM_Token;
  token1: FANTOM_Token;
  reserve0: Scalars['FANTOM_BigDecimal'];
  reserve1: Scalars['FANTOM_BigDecimal'];
  totalSupply: Scalars['FANTOM_BigDecimal'];
  reserveETH: Scalars['FANTOM_BigDecimal'];
  reserveUSD: Scalars['FANTOM_BigDecimal'];
  trackedReserveETH: Scalars['FANTOM_BigDecimal'];
  token0Price: Scalars['FANTOM_BigDecimal'];
  token1Price: Scalars['FANTOM_BigDecimal'];
  volumeToken0: Scalars['FANTOM_BigDecimal'];
  volumeToken1: Scalars['FANTOM_BigDecimal'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  untrackedVolumeUSD: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidityProviderCount: Scalars['BigInt'];
  liquidityPositions: Array<FANTOM_LiquidityPosition>;
  liquidityPositionSnapshots: Array<FANTOM_LiquidityPositionSnapshot>;
  dayData: Array<FANTOM_PairDayData>;
  hourData: Array<FANTOM_PairHourData>;
  mints: Array<FANTOM_Mint>;
  burns: Array<FANTOM_Burn>;
  swaps: Array<FANTOM_Swap>;
  timestamp: Scalars['BigInt'];
  block: Scalars['BigInt'];
};


export type FANTOM_PairliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_LiquidityPosition_filter>;
};


export type FANTOM_PairliquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_LiquidityPositionSnapshot_filter>;
};


export type FANTOM_PairdayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_PairDayData_filter>;
};


export type FANTOM_PairhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_PairHourData_filter>;
};


export type FANTOM_PairmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Mint_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Mint_filter>;
};


export type FANTOM_PairburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Burn_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Burn_filter>;
};


export type FANTOM_PairswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Swap_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Swap_filter>;
};

export type FANTOM_PairDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: FANTOM_Pair;
  token0: FANTOM_Token;
  token1: FANTOM_Token;
  reserve0: Scalars['FANTOM_BigDecimal'];
  reserve1: Scalars['FANTOM_BigDecimal'];
  totalSupply: Scalars['FANTOM_BigDecimal'];
  reserveUSD: Scalars['FANTOM_BigDecimal'];
  volumeToken0: Scalars['FANTOM_BigDecimal'];
  volumeToken1: Scalars['FANTOM_BigDecimal'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type FANTOM_PairDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type FANTOM_PairDayData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type FANTOM_PairHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: FANTOM_Pair;
  reserve0: Scalars['FANTOM_BigDecimal'];
  reserve1: Scalars['FANTOM_BigDecimal'];
  reserveUSD: Scalars['FANTOM_BigDecimal'];
  volumeToken0: Scalars['FANTOM_BigDecimal'];
  volumeToken1: Scalars['FANTOM_BigDecimal'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type FANTOM_PairHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type FANTOM_PairHourData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type FANTOM_Pair_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  trackedReserveETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  trackedReserveETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  trackedReserveETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  trackedReserveETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  trackedReserveETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  trackedReserveETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  trackedReserveETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  trackedReserveETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  token0Price?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0Price_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0Price_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0Price_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0Price_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0Price_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token0Price_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  token0Price_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  token1Price?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1Price_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1Price_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1Price_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1Price_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1Price_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  token1Price_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  token1Price_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type FANTOM_Pair_orderBy =
  | 'id'
  | 'factory'
  | 'name'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveETH'
  | 'reserveUSD'
  | 'trackedReserveETH'
  | 'token0Price'
  | 'token1Price'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidityProviderCount'
  | 'liquidityPositions'
  | 'liquidityPositionSnapshots'
  | 'dayData'
  | 'hourData'
  | 'mints'
  | 'burns'
  | 'swaps'
  | 'timestamp'
  | 'block';

export type Query = {
  FANTOM_user?: Maybe<FANTOM_User>;
  FANTOM_users: Array<FANTOM_User>;
  FANTOM_bundle?: Maybe<FANTOM_Bundle>;
  FANTOM_bundles: Array<FANTOM_Bundle>;
  FANTOM_factory?: Maybe<FANTOM_Factory>;
  FANTOM_factories: Array<FANTOM_Factory>;
  FANTOM_hourData?: Maybe<FANTOM_HourData>;
  FANTOM_hourDatas: Array<FANTOM_HourData>;
  FANTOM_dayData?: Maybe<FANTOM_DayData>;
  FANTOM_dayDatas: Array<FANTOM_DayData>;
  FANTOM_token?: Maybe<FANTOM_Token>;
  FANTOM_tokens: Array<FANTOM_Token>;
  FANTOM_tokenHourData?: Maybe<FANTOM_TokenHourData>;
  FANTOM_tokenHourDatas: Array<FANTOM_TokenHourData>;
  FANTOM_tokenDayData?: Maybe<FANTOM_TokenDayData>;
  FANTOM_tokenDayDatas: Array<FANTOM_TokenDayData>;
  FANTOM_pair?: Maybe<FANTOM_Pair>;
  FANTOM_pairs: Array<FANTOM_Pair>;
  FANTOM_pairHourData?: Maybe<FANTOM_PairHourData>;
  FANTOM_pairHourDatas: Array<FANTOM_PairHourData>;
  FANTOM_pairDayData?: Maybe<FANTOM_PairDayData>;
  FANTOM_pairDayDatas: Array<FANTOM_PairDayData>;
  FANTOM_liquidityPosition?: Maybe<FANTOM_LiquidityPosition>;
  FANTOM_liquidityPositions: Array<FANTOM_LiquidityPosition>;
  FANTOM_liquidityPositionSnapshot?: Maybe<FANTOM_LiquidityPositionSnapshot>;
  FANTOM_liquidityPositionSnapshots: Array<FANTOM_LiquidityPositionSnapshot>;
  FANTOM_transaction?: Maybe<FANTOM_Transaction>;
  FANTOM_transactions: Array<FANTOM_Transaction>;
  FANTOM_mint?: Maybe<FANTOM_Mint>;
  FANTOM_mints: Array<FANTOM_Mint>;
  FANTOM_burn?: Maybe<FANTOM_Burn>;
  FANTOM_burns: Array<FANTOM_Burn>;
  FANTOM_swap?: Maybe<FANTOM_Swap>;
  FANTOM_swaps: Array<FANTOM_Swap>;
  /** Access to subgraph metadata */
  FANTOM__meta?: Maybe<FANTOM__Meta_>;
};


export type QueryFANTOM_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_User_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_User_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Bundle_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Bundle_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Factory_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Factory_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_HourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_HourData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_DayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_DayData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Token_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Token_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_TokenHourData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_TokenDayData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Pair_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Pair_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_PairHourData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_PairDayData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_LiquidityPosition_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Transaction_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Transaction_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Mint_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Mint_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Burn_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Burn_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Swap_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Swap_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryFANTOM__metaArgs = {
  block?: InputMaybe<FANTOM_Block_height>;
};

export type Subscription = {
  FANTOM_user?: Maybe<FANTOM_User>;
  FANTOM_users: Array<FANTOM_User>;
  FANTOM_bundle?: Maybe<FANTOM_Bundle>;
  FANTOM_bundles: Array<FANTOM_Bundle>;
  FANTOM_factory?: Maybe<FANTOM_Factory>;
  FANTOM_factories: Array<FANTOM_Factory>;
  FANTOM_hourData?: Maybe<FANTOM_HourData>;
  FANTOM_hourDatas: Array<FANTOM_HourData>;
  FANTOM_dayData?: Maybe<FANTOM_DayData>;
  FANTOM_dayDatas: Array<FANTOM_DayData>;
  FANTOM_token?: Maybe<FANTOM_Token>;
  FANTOM_tokens: Array<FANTOM_Token>;
  FANTOM_tokenHourData?: Maybe<FANTOM_TokenHourData>;
  FANTOM_tokenHourDatas: Array<FANTOM_TokenHourData>;
  FANTOM_tokenDayData?: Maybe<FANTOM_TokenDayData>;
  FANTOM_tokenDayDatas: Array<FANTOM_TokenDayData>;
  FANTOM_pair?: Maybe<FANTOM_Pair>;
  FANTOM_pairs: Array<FANTOM_Pair>;
  FANTOM_pairHourData?: Maybe<FANTOM_PairHourData>;
  FANTOM_pairHourDatas: Array<FANTOM_PairHourData>;
  FANTOM_pairDayData?: Maybe<FANTOM_PairDayData>;
  FANTOM_pairDayDatas: Array<FANTOM_PairDayData>;
  FANTOM_liquidityPosition?: Maybe<FANTOM_LiquidityPosition>;
  FANTOM_liquidityPositions: Array<FANTOM_LiquidityPosition>;
  FANTOM_liquidityPositionSnapshot?: Maybe<FANTOM_LiquidityPositionSnapshot>;
  FANTOM_liquidityPositionSnapshots: Array<FANTOM_LiquidityPositionSnapshot>;
  FANTOM_transaction?: Maybe<FANTOM_Transaction>;
  FANTOM_transactions: Array<FANTOM_Transaction>;
  FANTOM_mint?: Maybe<FANTOM_Mint>;
  FANTOM_mints: Array<FANTOM_Mint>;
  FANTOM_burn?: Maybe<FANTOM_Burn>;
  FANTOM_burns: Array<FANTOM_Burn>;
  FANTOM_swap?: Maybe<FANTOM_Swap>;
  FANTOM_swaps: Array<FANTOM_Swap>;
  /** Access to subgraph metadata */
  FANTOM__meta?: Maybe<FANTOM__Meta_>;
};


export type SubscriptionFANTOM_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_User_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_User_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Bundle_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Bundle_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Factory_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Factory_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_HourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_HourData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_DayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_DayData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Token_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Token_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_TokenHourData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_TokenDayData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Pair_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Pair_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_PairHourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_PairHourData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_PairDayData_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_LiquidityPosition_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Transaction_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Transaction_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Mint_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Mint_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Burn_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Burn_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Swap_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Swap_filter>;
  block?: InputMaybe<FANTOM_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionFANTOM__metaArgs = {
  block?: InputMaybe<FANTOM_Block_height>;
};

export type FANTOM_Swap = {
  id: Scalars['ID'];
  transaction: FANTOM_Transaction;
  timestamp: Scalars['BigInt'];
  pair: FANTOM_Pair;
  sender: Scalars['FANTOM_Bytes'];
  amount0In: Scalars['FANTOM_BigDecimal'];
  amount1In: Scalars['FANTOM_BigDecimal'];
  amount0Out: Scalars['FANTOM_BigDecimal'];
  amount1Out: Scalars['FANTOM_BigDecimal'];
  to: Scalars['FANTOM_Bytes'];
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD: Scalars['FANTOM_BigDecimal'];
};

export type FANTOM_Swap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_not?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  amount0In?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0In_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0In_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0In_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0In_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0In_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0In_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount0In_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount1In?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1In_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1In_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1In_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1In_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1In_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1In_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount1In_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount0Out?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0Out_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0Out_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0Out_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0Out_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0Out_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount0Out_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount0Out_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount1Out?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1Out_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1Out_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1Out_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1Out_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1Out_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amount1Out_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amount1Out_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  to?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_not?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['FANTOM_Bytes']>>;
  to_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['FANTOM_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
};

export type FANTOM_Swap_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'sender'
  | 'amount0In'
  | 'amount1In'
  | 'amount0Out'
  | 'amount1Out'
  | 'to'
  | 'logIndex'
  | 'amountUSD';

export type FANTOM_Token = {
  id: Scalars['ID'];
  factory: FANTOM_Factory;
  symbol: Scalars['String'];
  name: Scalars['String'];
  decimals: Scalars['BigInt'];
  totalSupply: Scalars['BigInt'];
  volume: Scalars['FANTOM_BigDecimal'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  untrackedVolumeUSD: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['FANTOM_BigDecimal'];
  derivedETH: Scalars['FANTOM_BigDecimal'];
  hourData: Array<FANTOM_TokenHourData>;
  dayData: Array<FANTOM_TokenDayData>;
  basePairs: Array<FANTOM_Pair>;
  quotePairs: Array<FANTOM_Pair>;
  basePairsDayData: Array<FANTOM_PairDayData>;
  quotePairsDayData: Array<FANTOM_PairDayData>;
};


export type FANTOM_TokenhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_TokenHourData_filter>;
};


export type FANTOM_TokendayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_TokenDayData_filter>;
};


export type FANTOM_TokenbasePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Pair_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Pair_filter>;
};


export type FANTOM_TokenquotePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Pair_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Pair_filter>;
};


export type FANTOM_TokenbasePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_PairDayData_filter>;
};


export type FANTOM_TokenquotePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_PairDayData_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_PairDayData_filter>;
};

export type FANTOM_TokenDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: FANTOM_Token;
  volume: Scalars['FANTOM_BigDecimal'];
  volumeETH: Scalars['FANTOM_BigDecimal'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['FANTOM_BigDecimal'];
  liquidityETH: Scalars['FANTOM_BigDecimal'];
  liquidityUSD: Scalars['FANTOM_BigDecimal'];
  priceUSD: Scalars['FANTOM_BigDecimal'];
};

export type FANTOM_TokenDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
};

export type FANTOM_TokenDayData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type FANTOM_TokenHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: FANTOM_Token;
  volume: Scalars['FANTOM_BigDecimal'];
  volumeETH: Scalars['FANTOM_BigDecimal'];
  volumeUSD: Scalars['FANTOM_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['FANTOM_BigDecimal'];
  liquidityETH: Scalars['FANTOM_BigDecimal'];
  liquidityUSD: Scalars['FANTOM_BigDecimal'];
  priceUSD: Scalars['FANTOM_BigDecimal'];
};

export type FANTOM_TokenHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
};

export type FANTOM_TokenHourData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type FANTOM_Token_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  decimals?: InputMaybe<Scalars['BigInt']>;
  decimals_not?: InputMaybe<Scalars['BigInt']>;
  decimals_gt?: InputMaybe<Scalars['BigInt']>;
  decimals_lt?: InputMaybe<Scalars['BigInt']>;
  decimals_gte?: InputMaybe<Scalars['BigInt']>;
  decimals_lte?: InputMaybe<Scalars['BigInt']>;
  decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  derivedETH?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  derivedETH_not?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  derivedETH_gt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  derivedETH_lt?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  derivedETH_gte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  derivedETH_lte?: InputMaybe<Scalars['FANTOM_BigDecimal']>;
  derivedETH_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
  derivedETH_not_in?: InputMaybe<Array<Scalars['FANTOM_BigDecimal']>>;
};

export type FANTOM_Token_orderBy =
  | 'id'
  | 'factory'
  | 'symbol'
  | 'name'
  | 'decimals'
  | 'totalSupply'
  | 'volume'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'derivedETH'
  | 'hourData'
  | 'dayData'
  | 'basePairs'
  | 'quotePairs'
  | 'basePairsDayData'
  | 'quotePairsDayData';

export type FANTOM_Transaction = {
  id: Scalars['ID'];
  blockNumber: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  mints: Array<Maybe<FANTOM_Mint>>;
  burns: Array<Maybe<FANTOM_Burn>>;
  swaps: Array<Maybe<FANTOM_Swap>>;
};


export type FANTOM_TransactionmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Mint_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Mint_filter>;
};


export type FANTOM_TransactionburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Burn_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Burn_filter>;
};


export type FANTOM_TransactionswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_Swap_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_Swap_filter>;
};

export type FANTOM_Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  mints?: InputMaybe<Array<Scalars['String']>>;
  mints_not?: InputMaybe<Array<Scalars['String']>>;
  mints_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns?: InputMaybe<Array<Scalars['String']>>;
  burns_not?: InputMaybe<Array<Scalars['String']>>;
  burns_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps?: InputMaybe<Array<Scalars['String']>>;
  swaps_not?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type FANTOM_Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'mints'
  | 'burns'
  | 'swaps';

export type FANTOM_User = {
  id: Scalars['ID'];
  liquidityPositions: Array<FANTOM_LiquidityPosition>;
};


export type FANTOM_UserliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FANTOM_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<FANTOM_OrderDirection>;
  where?: InputMaybe<FANTOM_LiquidityPosition_filter>;
};

export type FANTOM_User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
};

export type FANTOM_User_orderBy =
  | 'id'
  | 'liquidityPositions';

export type FANTOM__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['FANTOM_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
};

/** The type for the top-level _meta field */
export type FANTOM__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: FANTOM__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type _SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

    }
    export type QueryFantomExchangeSdk = {
  /** null **/
  FANTOM_user: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_user'], FantomExchangeTypes.QueryFANTOM_userArgs, MeshContext>,
  /** null **/
  FANTOM_users: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_users'], FantomExchangeTypes.QueryFANTOM_usersArgs, MeshContext>,
  /** null **/
  FANTOM_bundle: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_bundle'], FantomExchangeTypes.QueryFANTOM_bundleArgs, MeshContext>,
  /** null **/
  FANTOM_bundles: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_bundles'], FantomExchangeTypes.QueryFANTOM_bundlesArgs, MeshContext>,
  /** null **/
  FANTOM_factory: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_factory'], FantomExchangeTypes.QueryFANTOM_factoryArgs, MeshContext>,
  /** null **/
  FANTOM_factories: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_factories'], FantomExchangeTypes.QueryFANTOM_factoriesArgs, MeshContext>,
  /** null **/
  FANTOM_hourData: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_hourData'], FantomExchangeTypes.QueryFANTOM_hourDataArgs, MeshContext>,
  /** null **/
  FANTOM_hourDatas: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_hourDatas'], FantomExchangeTypes.QueryFANTOM_hourDatasArgs, MeshContext>,
  /** null **/
  FANTOM_dayData: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_dayData'], FantomExchangeTypes.QueryFANTOM_dayDataArgs, MeshContext>,
  /** null **/
  FANTOM_dayDatas: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_dayDatas'], FantomExchangeTypes.QueryFANTOM_dayDatasArgs, MeshContext>,
  /** null **/
  FANTOM_token: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_token'], FantomExchangeTypes.QueryFANTOM_tokenArgs, MeshContext>,
  /** null **/
  FANTOM_tokens: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_tokens'], FantomExchangeTypes.QueryFANTOM_tokensArgs, MeshContext>,
  /** null **/
  FANTOM_tokenHourData: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_tokenHourData'], FantomExchangeTypes.QueryFANTOM_tokenHourDataArgs, MeshContext>,
  /** null **/
  FANTOM_tokenHourDatas: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_tokenHourDatas'], FantomExchangeTypes.QueryFANTOM_tokenHourDatasArgs, MeshContext>,
  /** null **/
  FANTOM_tokenDayData: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_tokenDayData'], FantomExchangeTypes.QueryFANTOM_tokenDayDataArgs, MeshContext>,
  /** null **/
  FANTOM_tokenDayDatas: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_tokenDayDatas'], FantomExchangeTypes.QueryFANTOM_tokenDayDatasArgs, MeshContext>,
  /** null **/
  FANTOM_pair: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_pair'], FantomExchangeTypes.QueryFANTOM_pairArgs, MeshContext>,
  /** null **/
  FANTOM_pairs: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_pairs'], FantomExchangeTypes.QueryFANTOM_pairsArgs, MeshContext>,
  /** null **/
  FANTOM_pairHourData: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_pairHourData'], FantomExchangeTypes.QueryFANTOM_pairHourDataArgs, MeshContext>,
  /** null **/
  FANTOM_pairHourDatas: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_pairHourDatas'], FantomExchangeTypes.QueryFANTOM_pairHourDatasArgs, MeshContext>,
  /** null **/
  FANTOM_pairDayData: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_pairDayData'], FantomExchangeTypes.QueryFANTOM_pairDayDataArgs, MeshContext>,
  /** null **/
  FANTOM_pairDayDatas: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_pairDayDatas'], FantomExchangeTypes.QueryFANTOM_pairDayDatasArgs, MeshContext>,
  /** null **/
  FANTOM_liquidityPosition: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_liquidityPosition'], FantomExchangeTypes.QueryFANTOM_liquidityPositionArgs, MeshContext>,
  /** null **/
  FANTOM_liquidityPositions: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_liquidityPositions'], FantomExchangeTypes.QueryFANTOM_liquidityPositionsArgs, MeshContext>,
  /** null **/
  FANTOM_liquidityPositionSnapshot: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_liquidityPositionSnapshot'], FantomExchangeTypes.QueryFANTOM_liquidityPositionSnapshotArgs, MeshContext>,
  /** null **/
  FANTOM_liquidityPositionSnapshots: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_liquidityPositionSnapshots'], FantomExchangeTypes.QueryFANTOM_liquidityPositionSnapshotsArgs, MeshContext>,
  /** null **/
  FANTOM_transaction: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_transaction'], FantomExchangeTypes.QueryFANTOM_transactionArgs, MeshContext>,
  /** null **/
  FANTOM_transactions: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_transactions'], FantomExchangeTypes.QueryFANTOM_transactionsArgs, MeshContext>,
  /** null **/
  FANTOM_mint: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_mint'], FantomExchangeTypes.QueryFANTOM_mintArgs, MeshContext>,
  /** null **/
  FANTOM_mints: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_mints'], FantomExchangeTypes.QueryFANTOM_mintsArgs, MeshContext>,
  /** null **/
  FANTOM_burn: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_burn'], FantomExchangeTypes.QueryFANTOM_burnArgs, MeshContext>,
  /** null **/
  FANTOM_burns: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_burns'], FantomExchangeTypes.QueryFANTOM_burnsArgs, MeshContext>,
  /** null **/
  FANTOM_swap: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_swap'], FantomExchangeTypes.QueryFANTOM_swapArgs, MeshContext>,
  /** null **/
  FANTOM_swaps: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM_swaps'], FantomExchangeTypes.QueryFANTOM_swapsArgs, MeshContext>,
  /** Access to subgraph metadata **/
  FANTOM__meta: InContextSdkMethod<FantomExchangeTypes.Query['FANTOM__meta'], FantomExchangeTypes.QueryFANTOM__metaArgs, MeshContext>
};

export type MutationFantomExchangeSdk = {

};

export type SubscriptionFantomExchangeSdk = {
  /** null **/
  FANTOM_user: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_user'], FantomExchangeTypes.SubscriptionFANTOM_userArgs, MeshContext>,
  /** null **/
  FANTOM_users: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_users'], FantomExchangeTypes.SubscriptionFANTOM_usersArgs, MeshContext>,
  /** null **/
  FANTOM_bundle: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_bundle'], FantomExchangeTypes.SubscriptionFANTOM_bundleArgs, MeshContext>,
  /** null **/
  FANTOM_bundles: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_bundles'], FantomExchangeTypes.SubscriptionFANTOM_bundlesArgs, MeshContext>,
  /** null **/
  FANTOM_factory: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_factory'], FantomExchangeTypes.SubscriptionFANTOM_factoryArgs, MeshContext>,
  /** null **/
  FANTOM_factories: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_factories'], FantomExchangeTypes.SubscriptionFANTOM_factoriesArgs, MeshContext>,
  /** null **/
  FANTOM_hourData: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_hourData'], FantomExchangeTypes.SubscriptionFANTOM_hourDataArgs, MeshContext>,
  /** null **/
  FANTOM_hourDatas: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_hourDatas'], FantomExchangeTypes.SubscriptionFANTOM_hourDatasArgs, MeshContext>,
  /** null **/
  FANTOM_dayData: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_dayData'], FantomExchangeTypes.SubscriptionFANTOM_dayDataArgs, MeshContext>,
  /** null **/
  FANTOM_dayDatas: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_dayDatas'], FantomExchangeTypes.SubscriptionFANTOM_dayDatasArgs, MeshContext>,
  /** null **/
  FANTOM_token: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_token'], FantomExchangeTypes.SubscriptionFANTOM_tokenArgs, MeshContext>,
  /** null **/
  FANTOM_tokens: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_tokens'], FantomExchangeTypes.SubscriptionFANTOM_tokensArgs, MeshContext>,
  /** null **/
  FANTOM_tokenHourData: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_tokenHourData'], FantomExchangeTypes.SubscriptionFANTOM_tokenHourDataArgs, MeshContext>,
  /** null **/
  FANTOM_tokenHourDatas: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_tokenHourDatas'], FantomExchangeTypes.SubscriptionFANTOM_tokenHourDatasArgs, MeshContext>,
  /** null **/
  FANTOM_tokenDayData: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_tokenDayData'], FantomExchangeTypes.SubscriptionFANTOM_tokenDayDataArgs, MeshContext>,
  /** null **/
  FANTOM_tokenDayDatas: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_tokenDayDatas'], FantomExchangeTypes.SubscriptionFANTOM_tokenDayDatasArgs, MeshContext>,
  /** null **/
  FANTOM_pair: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_pair'], FantomExchangeTypes.SubscriptionFANTOM_pairArgs, MeshContext>,
  /** null **/
  FANTOM_pairs: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_pairs'], FantomExchangeTypes.SubscriptionFANTOM_pairsArgs, MeshContext>,
  /** null **/
  FANTOM_pairHourData: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_pairHourData'], FantomExchangeTypes.SubscriptionFANTOM_pairHourDataArgs, MeshContext>,
  /** null **/
  FANTOM_pairHourDatas: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_pairHourDatas'], FantomExchangeTypes.SubscriptionFANTOM_pairHourDatasArgs, MeshContext>,
  /** null **/
  FANTOM_pairDayData: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_pairDayData'], FantomExchangeTypes.SubscriptionFANTOM_pairDayDataArgs, MeshContext>,
  /** null **/
  FANTOM_pairDayDatas: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_pairDayDatas'], FantomExchangeTypes.SubscriptionFANTOM_pairDayDatasArgs, MeshContext>,
  /** null **/
  FANTOM_liquidityPosition: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_liquidityPosition'], FantomExchangeTypes.SubscriptionFANTOM_liquidityPositionArgs, MeshContext>,
  /** null **/
  FANTOM_liquidityPositions: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_liquidityPositions'], FantomExchangeTypes.SubscriptionFANTOM_liquidityPositionsArgs, MeshContext>,
  /** null **/
  FANTOM_liquidityPositionSnapshot: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_liquidityPositionSnapshot'], FantomExchangeTypes.SubscriptionFANTOM_liquidityPositionSnapshotArgs, MeshContext>,
  /** null **/
  FANTOM_liquidityPositionSnapshots: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_liquidityPositionSnapshots'], FantomExchangeTypes.SubscriptionFANTOM_liquidityPositionSnapshotsArgs, MeshContext>,
  /** null **/
  FANTOM_transaction: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_transaction'], FantomExchangeTypes.SubscriptionFANTOM_transactionArgs, MeshContext>,
  /** null **/
  FANTOM_transactions: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_transactions'], FantomExchangeTypes.SubscriptionFANTOM_transactionsArgs, MeshContext>,
  /** null **/
  FANTOM_mint: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_mint'], FantomExchangeTypes.SubscriptionFANTOM_mintArgs, MeshContext>,
  /** null **/
  FANTOM_mints: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_mints'], FantomExchangeTypes.SubscriptionFANTOM_mintsArgs, MeshContext>,
  /** null **/
  FANTOM_burn: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_burn'], FantomExchangeTypes.SubscriptionFANTOM_burnArgs, MeshContext>,
  /** null **/
  FANTOM_burns: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_burns'], FantomExchangeTypes.SubscriptionFANTOM_burnsArgs, MeshContext>,
  /** null **/
  FANTOM_swap: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_swap'], FantomExchangeTypes.SubscriptionFANTOM_swapArgs, MeshContext>,
  /** null **/
  FANTOM_swaps: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM_swaps'], FantomExchangeTypes.SubscriptionFANTOM_swapsArgs, MeshContext>,
  /** Access to subgraph metadata **/
  FANTOM__meta: InContextSdkMethod<FantomExchangeTypes.Subscription['FANTOM__meta'], FantomExchangeTypes.SubscriptionFANTOM__metaArgs, MeshContext>
};


    export namespace XdaiExchangeTypes {
      export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  XDAI_BigDecimal: any;
  BigInt: any;
  XDAI_Bytes: any;
};

/** The block at which the query should be executed. */
export type XDAI_Block_height = {
  /** Value containing a block hash */
  hash?: InputMaybe<Scalars['XDAI_Bytes']>;
  /** Value containing a block number */
  number?: InputMaybe<Scalars['Int']>;
  /**
   * Value containing the minimum block number.
   * In the case of `number_gte`, the query will be executed on the latest block only if
   * the subgraph has progressed to or past the minimum block number.
   * Defaults to the latest block when omitted.
   *
   */
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type XDAI_Bundle = {
  id: Scalars['ID'];
  ethPrice: Scalars['XDAI_BigDecimal'];
};

export type XDAI_Bundle_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ethPrice?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  ethPrice_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  ethPrice_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  ethPrice_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  ethPrice_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  ethPrice_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  ethPrice_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  ethPrice_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
};

export type XDAI_Bundle_orderBy =
  | 'id'
  | 'ethPrice';

export type XDAI_Burn = {
  id: Scalars['ID'];
  transaction: XDAI_Transaction;
  timestamp: Scalars['BigInt'];
  pair: XDAI_Pair;
  liquidity: Scalars['XDAI_BigDecimal'];
  sender?: Maybe<Scalars['XDAI_Bytes']>;
  amount0?: Maybe<Scalars['XDAI_BigDecimal']>;
  amount1?: Maybe<Scalars['XDAI_BigDecimal']>;
  to?: Maybe<Scalars['XDAI_Bytes']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['XDAI_BigDecimal']>;
  complete: Scalars['Boolean'];
  feeTo?: Maybe<Scalars['XDAI_Bytes']>;
  feeLiquidity?: Maybe<Scalars['XDAI_BigDecimal']>;
};

export type XDAI_Burn_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidity?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  sender?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_not?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  amount0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  to?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_not?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  to_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  complete?: InputMaybe<Scalars['Boolean']>;
  complete_not?: InputMaybe<Scalars['Boolean']>;
  complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
  complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  feeTo?: InputMaybe<Scalars['XDAI_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['XDAI_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
};

export type XDAI_Burn_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'to'
  | 'logIndex'
  | 'amountUSD'
  | 'complete'
  | 'feeTo'
  | 'feeLiquidity';

export type XDAI_DayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: XDAI_Factory;
  volumeETH: Scalars['XDAI_BigDecimal'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  untrackedVolume: Scalars['XDAI_BigDecimal'];
  liquidityETH: Scalars['XDAI_BigDecimal'];
  liquidityUSD: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type XDAI_DayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type XDAI_DayData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type XDAI_Factory = {
  id: Scalars['ID'];
  pairCount: Scalars['BigInt'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  volumeETH: Scalars['XDAI_BigDecimal'];
  untrackedVolumeUSD: Scalars['XDAI_BigDecimal'];
  liquidityUSD: Scalars['XDAI_BigDecimal'];
  liquidityETH: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
  tokenCount: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  pairs: Array<XDAI_Pair>;
  tokens: Array<XDAI_Token>;
  hourData: Array<XDAI_HourData>;
  dayData: Array<XDAI_DayData>;
};


export type XDAI_FactorypairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Pair_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Pair_filter>;
};


export type XDAI_FactorytokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Token_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Token_filter>;
};


export type XDAI_FactoryhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_HourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_HourData_filter>;
};


export type XDAI_FactorydayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_DayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_DayData_filter>;
};

export type XDAI_Factory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  pairCount?: InputMaybe<Scalars['BigInt']>;
  pairCount_not?: InputMaybe<Scalars['BigInt']>;
  pairCount_gt?: InputMaybe<Scalars['BigInt']>;
  pairCount_lt?: InputMaybe<Scalars['BigInt']>;
  pairCount_gte?: InputMaybe<Scalars['BigInt']>;
  pairCount_lte?: InputMaybe<Scalars['BigInt']>;
  pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount?: InputMaybe<Scalars['BigInt']>;
  tokenCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount?: InputMaybe<Scalars['BigInt']>;
  userCount_not?: InputMaybe<Scalars['BigInt']>;
  userCount_gt?: InputMaybe<Scalars['BigInt']>;
  userCount_lt?: InputMaybe<Scalars['BigInt']>;
  userCount_gte?: InputMaybe<Scalars['BigInt']>;
  userCount_lte?: InputMaybe<Scalars['BigInt']>;
  userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type XDAI_Factory_orderBy =
  | 'id'
  | 'pairCount'
  | 'volumeUSD'
  | 'volumeETH'
  | 'untrackedVolumeUSD'
  | 'liquidityUSD'
  | 'liquidityETH'
  | 'txCount'
  | 'tokenCount'
  | 'userCount'
  | 'pairs'
  | 'tokens'
  | 'hourData'
  | 'dayData';

export type XDAI_HourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: XDAI_Factory;
  volumeETH: Scalars['XDAI_BigDecimal'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  untrackedVolume: Scalars['XDAI_BigDecimal'];
  liquidityETH: Scalars['XDAI_BigDecimal'];
  liquidityUSD: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type XDAI_HourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type XDAI_HourData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type XDAI_LiquidityPosition = {
  id: Scalars['ID'];
  user: XDAI_User;
  pair: XDAI_Pair;
  liquidityTokenBalance: Scalars['XDAI_BigDecimal'];
  snapshots: Array<Maybe<XDAI_LiquidityPositionSnapshot>>;
  block: Scalars['Int'];
  timestamp: Scalars['Int'];
};


export type XDAI_LiquidityPositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_LiquidityPositionSnapshot_filter>;
};

export type XDAI_LiquidityPositionSnapshot = {
  id: Scalars['ID'];
  liquidityPosition: XDAI_LiquidityPosition;
  timestamp: Scalars['Int'];
  block: Scalars['Int'];
  user: XDAI_User;
  pair: XDAI_Pair;
  token0PriceUSD: Scalars['XDAI_BigDecimal'];
  token1PriceUSD: Scalars['XDAI_BigDecimal'];
  reserve0: Scalars['XDAI_BigDecimal'];
  reserve1: Scalars['XDAI_BigDecimal'];
  reserveUSD: Scalars['XDAI_BigDecimal'];
  liquidityTokenTotalSupply: Scalars['XDAI_BigDecimal'];
  liquidityTokenBalance: Scalars['XDAI_BigDecimal'];
};

export type XDAI_LiquidityPositionSnapshot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityPosition?: InputMaybe<Scalars['String']>;
  liquidityPosition_not?: InputMaybe<Scalars['String']>;
  liquidityPosition_gt?: InputMaybe<Scalars['String']>;
  liquidityPosition_lt?: InputMaybe<Scalars['String']>;
  liquidityPosition_gte?: InputMaybe<Scalars['String']>;
  liquidityPosition_lte?: InputMaybe<Scalars['String']>;
  liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0PriceUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0PriceUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0PriceUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0PriceUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0PriceUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0PriceUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0PriceUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  token0PriceUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  token1PriceUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1PriceUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1PriceUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1PriceUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1PriceUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1PriceUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1PriceUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  token1PriceUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityTokenTotalSupply?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenTotalSupply_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityTokenBalance?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
};

export type XDAI_LiquidityPositionSnapshot_orderBy =
  | 'id'
  | 'liquidityPosition'
  | 'timestamp'
  | 'block'
  | 'user'
  | 'pair'
  | 'token0PriceUSD'
  | 'token1PriceUSD'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'liquidityTokenTotalSupply'
  | 'liquidityTokenBalance';

export type XDAI_LiquidityPosition_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityTokenBalance?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type XDAI_LiquidityPosition_orderBy =
  | 'id'
  | 'user'
  | 'pair'
  | 'liquidityTokenBalance'
  | 'snapshots'
  | 'block'
  | 'timestamp';

export type XDAI_Mint = {
  id: Scalars['ID'];
  transaction: XDAI_Transaction;
  timestamp: Scalars['BigInt'];
  pair: XDAI_Pair;
  to: Scalars['XDAI_Bytes'];
  liquidity: Scalars['XDAI_BigDecimal'];
  sender?: Maybe<Scalars['XDAI_Bytes']>;
  amount0?: Maybe<Scalars['XDAI_BigDecimal']>;
  amount1?: Maybe<Scalars['XDAI_BigDecimal']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['XDAI_BigDecimal']>;
  feeTo?: Maybe<Scalars['XDAI_Bytes']>;
  feeLiquidity?: Maybe<Scalars['XDAI_BigDecimal']>;
};

export type XDAI_Mint_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_not?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  to_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  liquidity?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  sender?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_not?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  amount0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  feeTo?: InputMaybe<Scalars['XDAI_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['XDAI_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
};

export type XDAI_Mint_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'to'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'logIndex'
  | 'amountUSD'
  | 'feeTo'
  | 'feeLiquidity';

/** Defines the order direction, either ascending or descending */
export type XDAI_OrderDirection =
  | 'asc'
  | 'desc';

export type XDAI_Pair = {
  id: Scalars['ID'];
  factory: XDAI_Factory;
  name: Scalars['String'];
  token0: XDAI_Token;
  token1: XDAI_Token;
  reserve0: Scalars['XDAI_BigDecimal'];
  reserve1: Scalars['XDAI_BigDecimal'];
  totalSupply: Scalars['XDAI_BigDecimal'];
  reserveETH: Scalars['XDAI_BigDecimal'];
  reserveUSD: Scalars['XDAI_BigDecimal'];
  trackedReserveETH: Scalars['XDAI_BigDecimal'];
  token0Price: Scalars['XDAI_BigDecimal'];
  token1Price: Scalars['XDAI_BigDecimal'];
  volumeToken0: Scalars['XDAI_BigDecimal'];
  volumeToken1: Scalars['XDAI_BigDecimal'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  untrackedVolumeUSD: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidityProviderCount: Scalars['BigInt'];
  liquidityPositions: Array<XDAI_LiquidityPosition>;
  liquidityPositionSnapshots: Array<XDAI_LiquidityPositionSnapshot>;
  dayData: Array<XDAI_PairDayData>;
  hourData: Array<XDAI_PairHourData>;
  mints: Array<XDAI_Mint>;
  burns: Array<XDAI_Burn>;
  swaps: Array<XDAI_Swap>;
  timestamp: Scalars['BigInt'];
  block: Scalars['BigInt'];
};


export type XDAI_PairliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_LiquidityPosition_filter>;
};


export type XDAI_PairliquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_LiquidityPositionSnapshot_filter>;
};


export type XDAI_PairdayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_PairDayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_PairDayData_filter>;
};


export type XDAI_PairhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_PairHourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_PairHourData_filter>;
};


export type XDAI_PairmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Mint_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Mint_filter>;
};


export type XDAI_PairburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Burn_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Burn_filter>;
};


export type XDAI_PairswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Swap_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Swap_filter>;
};

export type XDAI_PairDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: XDAI_Pair;
  token0: XDAI_Token;
  token1: XDAI_Token;
  reserve0: Scalars['XDAI_BigDecimal'];
  reserve1: Scalars['XDAI_BigDecimal'];
  totalSupply: Scalars['XDAI_BigDecimal'];
  reserveUSD: Scalars['XDAI_BigDecimal'];
  volumeToken0: Scalars['XDAI_BigDecimal'];
  volumeToken1: Scalars['XDAI_BigDecimal'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type XDAI_PairDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type XDAI_PairDayData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type XDAI_PairHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: XDAI_Pair;
  reserve0: Scalars['XDAI_BigDecimal'];
  reserve1: Scalars['XDAI_BigDecimal'];
  reserveUSD: Scalars['XDAI_BigDecimal'];
  volumeToken0: Scalars['XDAI_BigDecimal'];
  volumeToken1: Scalars['XDAI_BigDecimal'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type XDAI_PairHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type XDAI_PairHourData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type XDAI_Pair_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  trackedReserveETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  trackedReserveETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  trackedReserveETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  trackedReserveETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  trackedReserveETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  trackedReserveETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  trackedReserveETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  trackedReserveETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  token0Price?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0Price_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0Price_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0Price_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0Price_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0Price_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token0Price_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  token0Price_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  token1Price?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1Price_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1Price_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1Price_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1Price_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1Price_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  token1Price_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  token1Price_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type XDAI_Pair_orderBy =
  | 'id'
  | 'factory'
  | 'name'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveETH'
  | 'reserveUSD'
  | 'trackedReserveETH'
  | 'token0Price'
  | 'token1Price'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidityProviderCount'
  | 'liquidityPositions'
  | 'liquidityPositionSnapshots'
  | 'dayData'
  | 'hourData'
  | 'mints'
  | 'burns'
  | 'swaps'
  | 'timestamp'
  | 'block';

export type Query = {
  XDAI_user?: Maybe<XDAI_User>;
  XDAI_users: Array<XDAI_User>;
  XDAI_bundle?: Maybe<XDAI_Bundle>;
  XDAI_bundles: Array<XDAI_Bundle>;
  XDAI_factory?: Maybe<XDAI_Factory>;
  XDAI_factories: Array<XDAI_Factory>;
  XDAI_hourData?: Maybe<XDAI_HourData>;
  XDAI_hourDatas: Array<XDAI_HourData>;
  XDAI_dayData?: Maybe<XDAI_DayData>;
  XDAI_dayDatas: Array<XDAI_DayData>;
  XDAI_token?: Maybe<XDAI_Token>;
  XDAI_tokens: Array<XDAI_Token>;
  XDAI_tokenHourData?: Maybe<XDAI_TokenHourData>;
  XDAI_tokenHourDatas: Array<XDAI_TokenHourData>;
  XDAI_tokenDayData?: Maybe<XDAI_TokenDayData>;
  XDAI_tokenDayDatas: Array<XDAI_TokenDayData>;
  XDAI_pair?: Maybe<XDAI_Pair>;
  XDAI_pairs: Array<XDAI_Pair>;
  XDAI_pairHourData?: Maybe<XDAI_PairHourData>;
  XDAI_pairHourDatas: Array<XDAI_PairHourData>;
  XDAI_pairDayData?: Maybe<XDAI_PairDayData>;
  XDAI_pairDayDatas: Array<XDAI_PairDayData>;
  XDAI_liquidityPosition?: Maybe<XDAI_LiquidityPosition>;
  XDAI_liquidityPositions: Array<XDAI_LiquidityPosition>;
  XDAI_liquidityPositionSnapshot?: Maybe<XDAI_LiquidityPositionSnapshot>;
  XDAI_liquidityPositionSnapshots: Array<XDAI_LiquidityPositionSnapshot>;
  XDAI_transaction?: Maybe<XDAI_Transaction>;
  XDAI_transactions: Array<XDAI_Transaction>;
  XDAI_mint?: Maybe<XDAI_Mint>;
  XDAI_mints: Array<XDAI_Mint>;
  XDAI_burn?: Maybe<XDAI_Burn>;
  XDAI_burns: Array<XDAI_Burn>;
  XDAI_swap?: Maybe<XDAI_Swap>;
  XDAI_swaps: Array<XDAI_Swap>;
  /** Access to subgraph metadata */
  XDAI__meta?: Maybe<XDAI__Meta_>;
};


export type QueryXDAI_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_User_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_User_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Bundle_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Bundle_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Factory_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Factory_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_HourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_HourData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_DayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_DayData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Token_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Token_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_TokenHourData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_TokenDayData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Pair_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Pair_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_PairHourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_PairHourData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_PairDayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_PairDayData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_LiquidityPosition_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Transaction_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Transaction_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Mint_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Mint_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Burn_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Burn_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Swap_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Swap_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryXDAI__metaArgs = {
  block?: InputMaybe<XDAI_Block_height>;
};

export type Subscription = {
  XDAI_user?: Maybe<XDAI_User>;
  XDAI_users: Array<XDAI_User>;
  XDAI_bundle?: Maybe<XDAI_Bundle>;
  XDAI_bundles: Array<XDAI_Bundle>;
  XDAI_factory?: Maybe<XDAI_Factory>;
  XDAI_factories: Array<XDAI_Factory>;
  XDAI_hourData?: Maybe<XDAI_HourData>;
  XDAI_hourDatas: Array<XDAI_HourData>;
  XDAI_dayData?: Maybe<XDAI_DayData>;
  XDAI_dayDatas: Array<XDAI_DayData>;
  XDAI_token?: Maybe<XDAI_Token>;
  XDAI_tokens: Array<XDAI_Token>;
  XDAI_tokenHourData?: Maybe<XDAI_TokenHourData>;
  XDAI_tokenHourDatas: Array<XDAI_TokenHourData>;
  XDAI_tokenDayData?: Maybe<XDAI_TokenDayData>;
  XDAI_tokenDayDatas: Array<XDAI_TokenDayData>;
  XDAI_pair?: Maybe<XDAI_Pair>;
  XDAI_pairs: Array<XDAI_Pair>;
  XDAI_pairHourData?: Maybe<XDAI_PairHourData>;
  XDAI_pairHourDatas: Array<XDAI_PairHourData>;
  XDAI_pairDayData?: Maybe<XDAI_PairDayData>;
  XDAI_pairDayDatas: Array<XDAI_PairDayData>;
  XDAI_liquidityPosition?: Maybe<XDAI_LiquidityPosition>;
  XDAI_liquidityPositions: Array<XDAI_LiquidityPosition>;
  XDAI_liquidityPositionSnapshot?: Maybe<XDAI_LiquidityPositionSnapshot>;
  XDAI_liquidityPositionSnapshots: Array<XDAI_LiquidityPositionSnapshot>;
  XDAI_transaction?: Maybe<XDAI_Transaction>;
  XDAI_transactions: Array<XDAI_Transaction>;
  XDAI_mint?: Maybe<XDAI_Mint>;
  XDAI_mints: Array<XDAI_Mint>;
  XDAI_burn?: Maybe<XDAI_Burn>;
  XDAI_burns: Array<XDAI_Burn>;
  XDAI_swap?: Maybe<XDAI_Swap>;
  XDAI_swaps: Array<XDAI_Swap>;
  /** Access to subgraph metadata */
  XDAI__meta?: Maybe<XDAI__Meta_>;
};


export type SubscriptionXDAI_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_User_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_User_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Bundle_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Bundle_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Factory_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Factory_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_HourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_HourData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_DayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_DayData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Token_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Token_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_TokenHourData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_TokenDayData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Pair_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Pair_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_PairHourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_PairHourData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_PairDayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_PairDayData_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_LiquidityPosition_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Transaction_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Transaction_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Mint_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Mint_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Burn_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Burn_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Swap_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Swap_filter>;
  block?: InputMaybe<XDAI_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionXDAI__metaArgs = {
  block?: InputMaybe<XDAI_Block_height>;
};

export type XDAI_Swap = {
  id: Scalars['ID'];
  transaction: XDAI_Transaction;
  timestamp: Scalars['BigInt'];
  pair: XDAI_Pair;
  sender: Scalars['XDAI_Bytes'];
  amount0In: Scalars['XDAI_BigDecimal'];
  amount1In: Scalars['XDAI_BigDecimal'];
  amount0Out: Scalars['XDAI_BigDecimal'];
  amount1Out: Scalars['XDAI_BigDecimal'];
  to: Scalars['XDAI_Bytes'];
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD: Scalars['XDAI_BigDecimal'];
};

export type XDAI_Swap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_not?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  amount0In?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0In_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0In_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0In_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0In_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0In_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0In_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount0In_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount1In?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1In_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1In_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1In_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1In_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1In_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1In_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount1In_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount0Out?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0Out_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0Out_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0Out_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0Out_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0Out_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount0Out_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount0Out_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount1Out?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1Out_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1Out_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1Out_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1Out_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1Out_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amount1Out_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amount1Out_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  to?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_not?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['XDAI_Bytes']>>;
  to_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['XDAI_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
};

export type XDAI_Swap_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'sender'
  | 'amount0In'
  | 'amount1In'
  | 'amount0Out'
  | 'amount1Out'
  | 'to'
  | 'logIndex'
  | 'amountUSD';

export type XDAI_Token = {
  id: Scalars['ID'];
  factory: XDAI_Factory;
  symbol: Scalars['String'];
  name: Scalars['String'];
  decimals: Scalars['BigInt'];
  totalSupply: Scalars['BigInt'];
  volume: Scalars['XDAI_BigDecimal'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  untrackedVolumeUSD: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['XDAI_BigDecimal'];
  derivedETH: Scalars['XDAI_BigDecimal'];
  whitelistPairs: Array<XDAI_Pair>;
  hourData: Array<XDAI_TokenHourData>;
  dayData: Array<XDAI_TokenDayData>;
  basePairs: Array<XDAI_Pair>;
  quotePairs: Array<XDAI_Pair>;
  basePairsDayData: Array<XDAI_PairDayData>;
  quotePairsDayData: Array<XDAI_PairDayData>;
};


export type XDAI_TokenwhitelistPairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Pair_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Pair_filter>;
};


export type XDAI_TokenhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_TokenHourData_filter>;
};


export type XDAI_TokendayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_TokenDayData_filter>;
};


export type XDAI_TokenbasePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Pair_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Pair_filter>;
};


export type XDAI_TokenquotePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Pair_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Pair_filter>;
};


export type XDAI_TokenbasePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_PairDayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_PairDayData_filter>;
};


export type XDAI_TokenquotePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_PairDayData_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_PairDayData_filter>;
};

export type XDAI_TokenDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: XDAI_Token;
  volume: Scalars['XDAI_BigDecimal'];
  volumeETH: Scalars['XDAI_BigDecimal'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['XDAI_BigDecimal'];
  liquidityETH: Scalars['XDAI_BigDecimal'];
  liquidityUSD: Scalars['XDAI_BigDecimal'];
  priceUSD: Scalars['XDAI_BigDecimal'];
};

export type XDAI_TokenDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
};

export type XDAI_TokenDayData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type XDAI_TokenHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: XDAI_Token;
  volume: Scalars['XDAI_BigDecimal'];
  volumeETH: Scalars['XDAI_BigDecimal'];
  volumeUSD: Scalars['XDAI_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['XDAI_BigDecimal'];
  liquidityETH: Scalars['XDAI_BigDecimal'];
  liquidityUSD: Scalars['XDAI_BigDecimal'];
  priceUSD: Scalars['XDAI_BigDecimal'];
};

export type XDAI_TokenHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
};

export type XDAI_TokenHourData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type XDAI_Token_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  decimals?: InputMaybe<Scalars['BigInt']>;
  decimals_not?: InputMaybe<Scalars['BigInt']>;
  decimals_gt?: InputMaybe<Scalars['BigInt']>;
  decimals_lt?: InputMaybe<Scalars['BigInt']>;
  decimals_gte?: InputMaybe<Scalars['BigInt']>;
  decimals_lte?: InputMaybe<Scalars['BigInt']>;
  decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  derivedETH?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  derivedETH_not?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  derivedETH_gt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  derivedETH_lt?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  derivedETH_gte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  derivedETH_lte?: InputMaybe<Scalars['XDAI_BigDecimal']>;
  derivedETH_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  derivedETH_not_in?: InputMaybe<Array<Scalars['XDAI_BigDecimal']>>;
  whitelistPairs?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type XDAI_Token_orderBy =
  | 'id'
  | 'factory'
  | 'symbol'
  | 'name'
  | 'decimals'
  | 'totalSupply'
  | 'volume'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'derivedETH'
  | 'whitelistPairs'
  | 'hourData'
  | 'dayData'
  | 'basePairs'
  | 'quotePairs'
  | 'basePairsDayData'
  | 'quotePairsDayData';

export type XDAI_Transaction = {
  id: Scalars['ID'];
  blockNumber: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  mints: Array<Maybe<XDAI_Mint>>;
  burns: Array<Maybe<XDAI_Burn>>;
  swaps: Array<Maybe<XDAI_Swap>>;
};


export type XDAI_TransactionmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Mint_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Mint_filter>;
};


export type XDAI_TransactionburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Burn_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Burn_filter>;
};


export type XDAI_TransactionswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_Swap_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_Swap_filter>;
};

export type XDAI_Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  mints?: InputMaybe<Array<Scalars['String']>>;
  mints_not?: InputMaybe<Array<Scalars['String']>>;
  mints_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns?: InputMaybe<Array<Scalars['String']>>;
  burns_not?: InputMaybe<Array<Scalars['String']>>;
  burns_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps?: InputMaybe<Array<Scalars['String']>>;
  swaps_not?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type XDAI_Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'mints'
  | 'burns'
  | 'swaps';

export type XDAI_User = {
  id: Scalars['ID'];
  liquidityPositions: Array<XDAI_LiquidityPosition>;
};


export type XDAI_UserliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<XDAI_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<XDAI_OrderDirection>;
  where?: InputMaybe<XDAI_LiquidityPosition_filter>;
};

export type XDAI_User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
};

export type XDAI_User_orderBy =
  | 'id'
  | 'liquidityPositions';

export type XDAI__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['XDAI_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
};

/** The type for the top-level _meta field */
export type XDAI__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: XDAI__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type _SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

    }
    export type QueryXdaiExchangeSdk = {
  /** null **/
  XDAI_user: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_user'], XdaiExchangeTypes.QueryXDAI_userArgs, MeshContext>,
  /** null **/
  XDAI_users: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_users'], XdaiExchangeTypes.QueryXDAI_usersArgs, MeshContext>,
  /** null **/
  XDAI_bundle: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_bundle'], XdaiExchangeTypes.QueryXDAI_bundleArgs, MeshContext>,
  /** null **/
  XDAI_bundles: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_bundles'], XdaiExchangeTypes.QueryXDAI_bundlesArgs, MeshContext>,
  /** null **/
  XDAI_factory: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_factory'], XdaiExchangeTypes.QueryXDAI_factoryArgs, MeshContext>,
  /** null **/
  XDAI_factories: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_factories'], XdaiExchangeTypes.QueryXDAI_factoriesArgs, MeshContext>,
  /** null **/
  XDAI_hourData: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_hourData'], XdaiExchangeTypes.QueryXDAI_hourDataArgs, MeshContext>,
  /** null **/
  XDAI_hourDatas: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_hourDatas'], XdaiExchangeTypes.QueryXDAI_hourDatasArgs, MeshContext>,
  /** null **/
  XDAI_dayData: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_dayData'], XdaiExchangeTypes.QueryXDAI_dayDataArgs, MeshContext>,
  /** null **/
  XDAI_dayDatas: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_dayDatas'], XdaiExchangeTypes.QueryXDAI_dayDatasArgs, MeshContext>,
  /** null **/
  XDAI_token: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_token'], XdaiExchangeTypes.QueryXDAI_tokenArgs, MeshContext>,
  /** null **/
  XDAI_tokens: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_tokens'], XdaiExchangeTypes.QueryXDAI_tokensArgs, MeshContext>,
  /** null **/
  XDAI_tokenHourData: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_tokenHourData'], XdaiExchangeTypes.QueryXDAI_tokenHourDataArgs, MeshContext>,
  /** null **/
  XDAI_tokenHourDatas: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_tokenHourDatas'], XdaiExchangeTypes.QueryXDAI_tokenHourDatasArgs, MeshContext>,
  /** null **/
  XDAI_tokenDayData: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_tokenDayData'], XdaiExchangeTypes.QueryXDAI_tokenDayDataArgs, MeshContext>,
  /** null **/
  XDAI_tokenDayDatas: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_tokenDayDatas'], XdaiExchangeTypes.QueryXDAI_tokenDayDatasArgs, MeshContext>,
  /** null **/
  XDAI_pair: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_pair'], XdaiExchangeTypes.QueryXDAI_pairArgs, MeshContext>,
  /** null **/
  XDAI_pairs: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_pairs'], XdaiExchangeTypes.QueryXDAI_pairsArgs, MeshContext>,
  /** null **/
  XDAI_pairHourData: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_pairHourData'], XdaiExchangeTypes.QueryXDAI_pairHourDataArgs, MeshContext>,
  /** null **/
  XDAI_pairHourDatas: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_pairHourDatas'], XdaiExchangeTypes.QueryXDAI_pairHourDatasArgs, MeshContext>,
  /** null **/
  XDAI_pairDayData: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_pairDayData'], XdaiExchangeTypes.QueryXDAI_pairDayDataArgs, MeshContext>,
  /** null **/
  XDAI_pairDayDatas: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_pairDayDatas'], XdaiExchangeTypes.QueryXDAI_pairDayDatasArgs, MeshContext>,
  /** null **/
  XDAI_liquidityPosition: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_liquidityPosition'], XdaiExchangeTypes.QueryXDAI_liquidityPositionArgs, MeshContext>,
  /** null **/
  XDAI_liquidityPositions: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_liquidityPositions'], XdaiExchangeTypes.QueryXDAI_liquidityPositionsArgs, MeshContext>,
  /** null **/
  XDAI_liquidityPositionSnapshot: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_liquidityPositionSnapshot'], XdaiExchangeTypes.QueryXDAI_liquidityPositionSnapshotArgs, MeshContext>,
  /** null **/
  XDAI_liquidityPositionSnapshots: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_liquidityPositionSnapshots'], XdaiExchangeTypes.QueryXDAI_liquidityPositionSnapshotsArgs, MeshContext>,
  /** null **/
  XDAI_transaction: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_transaction'], XdaiExchangeTypes.QueryXDAI_transactionArgs, MeshContext>,
  /** null **/
  XDAI_transactions: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_transactions'], XdaiExchangeTypes.QueryXDAI_transactionsArgs, MeshContext>,
  /** null **/
  XDAI_mint: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_mint'], XdaiExchangeTypes.QueryXDAI_mintArgs, MeshContext>,
  /** null **/
  XDAI_mints: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_mints'], XdaiExchangeTypes.QueryXDAI_mintsArgs, MeshContext>,
  /** null **/
  XDAI_burn: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_burn'], XdaiExchangeTypes.QueryXDAI_burnArgs, MeshContext>,
  /** null **/
  XDAI_burns: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_burns'], XdaiExchangeTypes.QueryXDAI_burnsArgs, MeshContext>,
  /** null **/
  XDAI_swap: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_swap'], XdaiExchangeTypes.QueryXDAI_swapArgs, MeshContext>,
  /** null **/
  XDAI_swaps: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI_swaps'], XdaiExchangeTypes.QueryXDAI_swapsArgs, MeshContext>,
  /** Access to subgraph metadata **/
  XDAI__meta: InContextSdkMethod<XdaiExchangeTypes.Query['XDAI__meta'], XdaiExchangeTypes.QueryXDAI__metaArgs, MeshContext>
};

export type MutationXdaiExchangeSdk = {

};

export type SubscriptionXdaiExchangeSdk = {
  /** null **/
  XDAI_user: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_user'], XdaiExchangeTypes.SubscriptionXDAI_userArgs, MeshContext>,
  /** null **/
  XDAI_users: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_users'], XdaiExchangeTypes.SubscriptionXDAI_usersArgs, MeshContext>,
  /** null **/
  XDAI_bundle: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_bundle'], XdaiExchangeTypes.SubscriptionXDAI_bundleArgs, MeshContext>,
  /** null **/
  XDAI_bundles: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_bundles'], XdaiExchangeTypes.SubscriptionXDAI_bundlesArgs, MeshContext>,
  /** null **/
  XDAI_factory: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_factory'], XdaiExchangeTypes.SubscriptionXDAI_factoryArgs, MeshContext>,
  /** null **/
  XDAI_factories: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_factories'], XdaiExchangeTypes.SubscriptionXDAI_factoriesArgs, MeshContext>,
  /** null **/
  XDAI_hourData: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_hourData'], XdaiExchangeTypes.SubscriptionXDAI_hourDataArgs, MeshContext>,
  /** null **/
  XDAI_hourDatas: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_hourDatas'], XdaiExchangeTypes.SubscriptionXDAI_hourDatasArgs, MeshContext>,
  /** null **/
  XDAI_dayData: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_dayData'], XdaiExchangeTypes.SubscriptionXDAI_dayDataArgs, MeshContext>,
  /** null **/
  XDAI_dayDatas: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_dayDatas'], XdaiExchangeTypes.SubscriptionXDAI_dayDatasArgs, MeshContext>,
  /** null **/
  XDAI_token: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_token'], XdaiExchangeTypes.SubscriptionXDAI_tokenArgs, MeshContext>,
  /** null **/
  XDAI_tokens: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_tokens'], XdaiExchangeTypes.SubscriptionXDAI_tokensArgs, MeshContext>,
  /** null **/
  XDAI_tokenHourData: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_tokenHourData'], XdaiExchangeTypes.SubscriptionXDAI_tokenHourDataArgs, MeshContext>,
  /** null **/
  XDAI_tokenHourDatas: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_tokenHourDatas'], XdaiExchangeTypes.SubscriptionXDAI_tokenHourDatasArgs, MeshContext>,
  /** null **/
  XDAI_tokenDayData: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_tokenDayData'], XdaiExchangeTypes.SubscriptionXDAI_tokenDayDataArgs, MeshContext>,
  /** null **/
  XDAI_tokenDayDatas: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_tokenDayDatas'], XdaiExchangeTypes.SubscriptionXDAI_tokenDayDatasArgs, MeshContext>,
  /** null **/
  XDAI_pair: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_pair'], XdaiExchangeTypes.SubscriptionXDAI_pairArgs, MeshContext>,
  /** null **/
  XDAI_pairs: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_pairs'], XdaiExchangeTypes.SubscriptionXDAI_pairsArgs, MeshContext>,
  /** null **/
  XDAI_pairHourData: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_pairHourData'], XdaiExchangeTypes.SubscriptionXDAI_pairHourDataArgs, MeshContext>,
  /** null **/
  XDAI_pairHourDatas: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_pairHourDatas'], XdaiExchangeTypes.SubscriptionXDAI_pairHourDatasArgs, MeshContext>,
  /** null **/
  XDAI_pairDayData: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_pairDayData'], XdaiExchangeTypes.SubscriptionXDAI_pairDayDataArgs, MeshContext>,
  /** null **/
  XDAI_pairDayDatas: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_pairDayDatas'], XdaiExchangeTypes.SubscriptionXDAI_pairDayDatasArgs, MeshContext>,
  /** null **/
  XDAI_liquidityPosition: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_liquidityPosition'], XdaiExchangeTypes.SubscriptionXDAI_liquidityPositionArgs, MeshContext>,
  /** null **/
  XDAI_liquidityPositions: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_liquidityPositions'], XdaiExchangeTypes.SubscriptionXDAI_liquidityPositionsArgs, MeshContext>,
  /** null **/
  XDAI_liquidityPositionSnapshot: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_liquidityPositionSnapshot'], XdaiExchangeTypes.SubscriptionXDAI_liquidityPositionSnapshotArgs, MeshContext>,
  /** null **/
  XDAI_liquidityPositionSnapshots: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_liquidityPositionSnapshots'], XdaiExchangeTypes.SubscriptionXDAI_liquidityPositionSnapshotsArgs, MeshContext>,
  /** null **/
  XDAI_transaction: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_transaction'], XdaiExchangeTypes.SubscriptionXDAI_transactionArgs, MeshContext>,
  /** null **/
  XDAI_transactions: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_transactions'], XdaiExchangeTypes.SubscriptionXDAI_transactionsArgs, MeshContext>,
  /** null **/
  XDAI_mint: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_mint'], XdaiExchangeTypes.SubscriptionXDAI_mintArgs, MeshContext>,
  /** null **/
  XDAI_mints: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_mints'], XdaiExchangeTypes.SubscriptionXDAI_mintsArgs, MeshContext>,
  /** null **/
  XDAI_burn: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_burn'], XdaiExchangeTypes.SubscriptionXDAI_burnArgs, MeshContext>,
  /** null **/
  XDAI_burns: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_burns'], XdaiExchangeTypes.SubscriptionXDAI_burnsArgs, MeshContext>,
  /** null **/
  XDAI_swap: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_swap'], XdaiExchangeTypes.SubscriptionXDAI_swapArgs, MeshContext>,
  /** null **/
  XDAI_swaps: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI_swaps'], XdaiExchangeTypes.SubscriptionXDAI_swapsArgs, MeshContext>,
  /** Access to subgraph metadata **/
  XDAI__meta: InContextSdkMethod<XdaiExchangeTypes.Subscription['XDAI__meta'], XdaiExchangeTypes.SubscriptionXDAI__metaArgs, MeshContext>
};


    export namespace AvalancheExchangeTypes {
      export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  AVALANCHE_BigDecimal: any;
  BigInt: any;
  AVALANCHE_Bytes: any;
};

/** The block at which the query should be executed. */
export type AVALANCHE_Block_height = {
  /** Value containing a block hash */
  hash?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  /** Value containing a block number */
  number?: InputMaybe<Scalars['Int']>;
  /**
   * Value containing the minimum block number.
   * In the case of `number_gte`, the query will be executed on the latest block only if
   * the subgraph has progressed to or past the minimum block number.
   * Defaults to the latest block when omitted.
   *
   */
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type AVALANCHE_Bundle = {
  id: Scalars['ID'];
  ethPrice: Scalars['AVALANCHE_BigDecimal'];
};

export type AVALANCHE_Bundle_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ethPrice?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  ethPrice_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  ethPrice_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  ethPrice_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  ethPrice_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  ethPrice_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  ethPrice_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  ethPrice_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
};

export type AVALANCHE_Bundle_orderBy =
  | 'id'
  | 'ethPrice';

export type AVALANCHE_Burn = {
  id: Scalars['ID'];
  transaction: AVALANCHE_Transaction;
  timestamp: Scalars['BigInt'];
  pair: AVALANCHE_Pair;
  liquidity: Scalars['AVALANCHE_BigDecimal'];
  sender?: Maybe<Scalars['AVALANCHE_Bytes']>;
  amount0?: Maybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1?: Maybe<Scalars['AVALANCHE_BigDecimal']>;
  to?: Maybe<Scalars['AVALANCHE_Bytes']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['AVALANCHE_BigDecimal']>;
  complete: Scalars['Boolean'];
  feeTo?: Maybe<Scalars['AVALANCHE_Bytes']>;
  feeLiquidity?: Maybe<Scalars['AVALANCHE_BigDecimal']>;
};

export type AVALANCHE_Burn_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidity?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  sender?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_not?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  amount0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  to?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_not?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  to_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  complete?: InputMaybe<Scalars['Boolean']>;
  complete_not?: InputMaybe<Scalars['Boolean']>;
  complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
  complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  feeTo?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
};

export type AVALANCHE_Burn_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'to'
  | 'logIndex'
  | 'amountUSD'
  | 'complete'
  | 'feeTo'
  | 'feeLiquidity';

export type AVALANCHE_DayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: AVALANCHE_Factory;
  volumeETH: Scalars['AVALANCHE_BigDecimal'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  untrackedVolume: Scalars['AVALANCHE_BigDecimal'];
  liquidityETH: Scalars['AVALANCHE_BigDecimal'];
  liquidityUSD: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type AVALANCHE_DayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type AVALANCHE_DayData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type AVALANCHE_Factory = {
  id: Scalars['ID'];
  pairCount: Scalars['BigInt'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  volumeETH: Scalars['AVALANCHE_BigDecimal'];
  untrackedVolumeUSD: Scalars['AVALANCHE_BigDecimal'];
  liquidityUSD: Scalars['AVALANCHE_BigDecimal'];
  liquidityETH: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
  tokenCount: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  pairs: Array<AVALANCHE_Pair>;
  tokens: Array<AVALANCHE_Token>;
  hourData: Array<AVALANCHE_HourData>;
  dayData: Array<AVALANCHE_DayData>;
};


export type AVALANCHE_FactorypairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Pair_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Pair_filter>;
};


export type AVALANCHE_FactorytokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Token_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Token_filter>;
};


export type AVALANCHE_FactoryhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_HourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_HourData_filter>;
};


export type AVALANCHE_FactorydayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_DayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_DayData_filter>;
};

export type AVALANCHE_Factory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  pairCount?: InputMaybe<Scalars['BigInt']>;
  pairCount_not?: InputMaybe<Scalars['BigInt']>;
  pairCount_gt?: InputMaybe<Scalars['BigInt']>;
  pairCount_lt?: InputMaybe<Scalars['BigInt']>;
  pairCount_gte?: InputMaybe<Scalars['BigInt']>;
  pairCount_lte?: InputMaybe<Scalars['BigInt']>;
  pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount?: InputMaybe<Scalars['BigInt']>;
  tokenCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount?: InputMaybe<Scalars['BigInt']>;
  userCount_not?: InputMaybe<Scalars['BigInt']>;
  userCount_gt?: InputMaybe<Scalars['BigInt']>;
  userCount_lt?: InputMaybe<Scalars['BigInt']>;
  userCount_gte?: InputMaybe<Scalars['BigInt']>;
  userCount_lte?: InputMaybe<Scalars['BigInt']>;
  userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type AVALANCHE_Factory_orderBy =
  | 'id'
  | 'pairCount'
  | 'volumeUSD'
  | 'volumeETH'
  | 'untrackedVolumeUSD'
  | 'liquidityUSD'
  | 'liquidityETH'
  | 'txCount'
  | 'tokenCount'
  | 'userCount'
  | 'pairs'
  | 'tokens'
  | 'hourData'
  | 'dayData';

export type AVALANCHE_HourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: AVALANCHE_Factory;
  volumeETH: Scalars['AVALANCHE_BigDecimal'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  untrackedVolume: Scalars['AVALANCHE_BigDecimal'];
  liquidityETH: Scalars['AVALANCHE_BigDecimal'];
  liquidityUSD: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type AVALANCHE_HourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type AVALANCHE_HourData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type AVALANCHE_LiquidityPosition = {
  id: Scalars['ID'];
  user: AVALANCHE_User;
  pair: AVALANCHE_Pair;
  liquidityTokenBalance: Scalars['AVALANCHE_BigDecimal'];
  snapshots: Array<Maybe<AVALANCHE_LiquidityPositionSnapshot>>;
  block: Scalars['Int'];
  timestamp: Scalars['Int'];
};


export type AVALANCHE_LiquidityPositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_LiquidityPositionSnapshot_filter>;
};

export type AVALANCHE_LiquidityPositionSnapshot = {
  id: Scalars['ID'];
  liquidityPosition: AVALANCHE_LiquidityPosition;
  timestamp: Scalars['Int'];
  block: Scalars['Int'];
  user: AVALANCHE_User;
  pair: AVALANCHE_Pair;
  token0PriceUSD: Scalars['AVALANCHE_BigDecimal'];
  token1PriceUSD: Scalars['AVALANCHE_BigDecimal'];
  reserve0: Scalars['AVALANCHE_BigDecimal'];
  reserve1: Scalars['AVALANCHE_BigDecimal'];
  reserveUSD: Scalars['AVALANCHE_BigDecimal'];
  liquidityTokenTotalSupply: Scalars['AVALANCHE_BigDecimal'];
  liquidityTokenBalance: Scalars['AVALANCHE_BigDecimal'];
};

export type AVALANCHE_LiquidityPositionSnapshot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityPosition?: InputMaybe<Scalars['String']>;
  liquidityPosition_not?: InputMaybe<Scalars['String']>;
  liquidityPosition_gt?: InputMaybe<Scalars['String']>;
  liquidityPosition_lt?: InputMaybe<Scalars['String']>;
  liquidityPosition_gte?: InputMaybe<Scalars['String']>;
  liquidityPosition_lte?: InputMaybe<Scalars['String']>;
  liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0PriceUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0PriceUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0PriceUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0PriceUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0PriceUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0PriceUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0PriceUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  token0PriceUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  token1PriceUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1PriceUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1PriceUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1PriceUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1PriceUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1PriceUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1PriceUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  token1PriceUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityTokenTotalSupply?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenTotalSupply_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityTokenBalance?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
};

export type AVALANCHE_LiquidityPositionSnapshot_orderBy =
  | 'id'
  | 'liquidityPosition'
  | 'timestamp'
  | 'block'
  | 'user'
  | 'pair'
  | 'token0PriceUSD'
  | 'token1PriceUSD'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'liquidityTokenTotalSupply'
  | 'liquidityTokenBalance';

export type AVALANCHE_LiquidityPosition_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityTokenBalance?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type AVALANCHE_LiquidityPosition_orderBy =
  | 'id'
  | 'user'
  | 'pair'
  | 'liquidityTokenBalance'
  | 'snapshots'
  | 'block'
  | 'timestamp';

export type AVALANCHE_Mint = {
  id: Scalars['ID'];
  transaction: AVALANCHE_Transaction;
  timestamp: Scalars['BigInt'];
  pair: AVALANCHE_Pair;
  to: Scalars['AVALANCHE_Bytes'];
  liquidity: Scalars['AVALANCHE_BigDecimal'];
  sender?: Maybe<Scalars['AVALANCHE_Bytes']>;
  amount0?: Maybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1?: Maybe<Scalars['AVALANCHE_BigDecimal']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['AVALANCHE_BigDecimal']>;
  feeTo?: Maybe<Scalars['AVALANCHE_Bytes']>;
  feeLiquidity?: Maybe<Scalars['AVALANCHE_BigDecimal']>;
};

export type AVALANCHE_Mint_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_not?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  to_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  liquidity?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  sender?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_not?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  amount0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  feeTo?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
};

export type AVALANCHE_Mint_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'to'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'logIndex'
  | 'amountUSD'
  | 'feeTo'
  | 'feeLiquidity';

/** Defines the order direction, either ascending or descending */
export type AVALANCHE_OrderDirection =
  | 'asc'
  | 'desc';

export type AVALANCHE_Pair = {
  id: Scalars['ID'];
  factory: AVALANCHE_Factory;
  name: Scalars['String'];
  token0: AVALANCHE_Token;
  token1: AVALANCHE_Token;
  reserve0: Scalars['AVALANCHE_BigDecimal'];
  reserve1: Scalars['AVALANCHE_BigDecimal'];
  totalSupply: Scalars['AVALANCHE_BigDecimal'];
  reserveETH: Scalars['AVALANCHE_BigDecimal'];
  reserveUSD: Scalars['AVALANCHE_BigDecimal'];
  trackedReserveETH: Scalars['AVALANCHE_BigDecimal'];
  token0Price: Scalars['AVALANCHE_BigDecimal'];
  token1Price: Scalars['AVALANCHE_BigDecimal'];
  volumeToken0: Scalars['AVALANCHE_BigDecimal'];
  volumeToken1: Scalars['AVALANCHE_BigDecimal'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  untrackedVolumeUSD: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidityProviderCount: Scalars['BigInt'];
  liquidityPositions: Array<AVALANCHE_LiquidityPosition>;
  liquidityPositionSnapshots: Array<AVALANCHE_LiquidityPositionSnapshot>;
  dayData: Array<AVALANCHE_PairDayData>;
  hourData: Array<AVALANCHE_PairHourData>;
  mints: Array<AVALANCHE_Mint>;
  burns: Array<AVALANCHE_Burn>;
  swaps: Array<AVALANCHE_Swap>;
  timestamp: Scalars['BigInt'];
  block: Scalars['BigInt'];
};


export type AVALANCHE_PairliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_LiquidityPosition_filter>;
};


export type AVALANCHE_PairliquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_LiquidityPositionSnapshot_filter>;
};


export type AVALANCHE_PairdayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_PairDayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_PairDayData_filter>;
};


export type AVALANCHE_PairhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_PairHourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_PairHourData_filter>;
};


export type AVALANCHE_PairmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Mint_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Mint_filter>;
};


export type AVALANCHE_PairburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Burn_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Burn_filter>;
};


export type AVALANCHE_PairswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Swap_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Swap_filter>;
};

export type AVALANCHE_PairDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: AVALANCHE_Pair;
  token0: AVALANCHE_Token;
  token1: AVALANCHE_Token;
  reserve0: Scalars['AVALANCHE_BigDecimal'];
  reserve1: Scalars['AVALANCHE_BigDecimal'];
  totalSupply: Scalars['AVALANCHE_BigDecimal'];
  reserveUSD: Scalars['AVALANCHE_BigDecimal'];
  volumeToken0: Scalars['AVALANCHE_BigDecimal'];
  volumeToken1: Scalars['AVALANCHE_BigDecimal'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type AVALANCHE_PairDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type AVALANCHE_PairDayData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type AVALANCHE_PairHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: AVALANCHE_Pair;
  reserve0: Scalars['AVALANCHE_BigDecimal'];
  reserve1: Scalars['AVALANCHE_BigDecimal'];
  reserveUSD: Scalars['AVALANCHE_BigDecimal'];
  volumeToken0: Scalars['AVALANCHE_BigDecimal'];
  volumeToken1: Scalars['AVALANCHE_BigDecimal'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type AVALANCHE_PairHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type AVALANCHE_PairHourData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type AVALANCHE_Pair_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  trackedReserveETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  trackedReserveETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  trackedReserveETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  trackedReserveETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  trackedReserveETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  trackedReserveETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  trackedReserveETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  trackedReserveETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  token0Price?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0Price_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0Price_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0Price_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0Price_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0Price_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token0Price_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  token0Price_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  token1Price?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1Price_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1Price_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1Price_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1Price_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1Price_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  token1Price_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  token1Price_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type AVALANCHE_Pair_orderBy =
  | 'id'
  | 'factory'
  | 'name'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveETH'
  | 'reserveUSD'
  | 'trackedReserveETH'
  | 'token0Price'
  | 'token1Price'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidityProviderCount'
  | 'liquidityPositions'
  | 'liquidityPositionSnapshots'
  | 'dayData'
  | 'hourData'
  | 'mints'
  | 'burns'
  | 'swaps'
  | 'timestamp'
  | 'block';

export type Query = {
  AVALANCHE_user?: Maybe<AVALANCHE_User>;
  AVALANCHE_users: Array<AVALANCHE_User>;
  AVALANCHE_bundle?: Maybe<AVALANCHE_Bundle>;
  AVALANCHE_bundles: Array<AVALANCHE_Bundle>;
  AVALANCHE_factory?: Maybe<AVALANCHE_Factory>;
  AVALANCHE_factories: Array<AVALANCHE_Factory>;
  AVALANCHE_hourData?: Maybe<AVALANCHE_HourData>;
  AVALANCHE_hourDatas: Array<AVALANCHE_HourData>;
  AVALANCHE_dayData?: Maybe<AVALANCHE_DayData>;
  AVALANCHE_dayDatas: Array<AVALANCHE_DayData>;
  AVALANCHE_token?: Maybe<AVALANCHE_Token>;
  AVALANCHE_tokens: Array<AVALANCHE_Token>;
  AVALANCHE_tokenHourData?: Maybe<AVALANCHE_TokenHourData>;
  AVALANCHE_tokenHourDatas: Array<AVALANCHE_TokenHourData>;
  AVALANCHE_tokenDayData?: Maybe<AVALANCHE_TokenDayData>;
  AVALANCHE_tokenDayDatas: Array<AVALANCHE_TokenDayData>;
  AVALANCHE_pair?: Maybe<AVALANCHE_Pair>;
  AVALANCHE_pairs: Array<AVALANCHE_Pair>;
  AVALANCHE_pairHourData?: Maybe<AVALANCHE_PairHourData>;
  AVALANCHE_pairHourDatas: Array<AVALANCHE_PairHourData>;
  AVALANCHE_pairDayData?: Maybe<AVALANCHE_PairDayData>;
  AVALANCHE_pairDayDatas: Array<AVALANCHE_PairDayData>;
  AVALANCHE_liquidityPosition?: Maybe<AVALANCHE_LiquidityPosition>;
  AVALANCHE_liquidityPositions: Array<AVALANCHE_LiquidityPosition>;
  AVALANCHE_liquidityPositionSnapshot?: Maybe<AVALANCHE_LiquidityPositionSnapshot>;
  AVALANCHE_liquidityPositionSnapshots: Array<AVALANCHE_LiquidityPositionSnapshot>;
  AVALANCHE_transaction?: Maybe<AVALANCHE_Transaction>;
  AVALANCHE_transactions: Array<AVALANCHE_Transaction>;
  AVALANCHE_mint?: Maybe<AVALANCHE_Mint>;
  AVALANCHE_mints: Array<AVALANCHE_Mint>;
  AVALANCHE_burn?: Maybe<AVALANCHE_Burn>;
  AVALANCHE_burns: Array<AVALANCHE_Burn>;
  AVALANCHE_swap?: Maybe<AVALANCHE_Swap>;
  AVALANCHE_swaps: Array<AVALANCHE_Swap>;
  /** Access to subgraph metadata */
  AVALANCHE__meta?: Maybe<AVALANCHE__Meta_>;
};


export type QueryAVALANCHE_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_User_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_User_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Bundle_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Bundle_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Factory_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Factory_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_HourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_HourData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_DayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_DayData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Token_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Token_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_TokenHourData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_TokenDayData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Pair_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Pair_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_PairHourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_PairHourData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_PairDayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_PairDayData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_LiquidityPosition_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Transaction_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Transaction_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Mint_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Mint_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Burn_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Burn_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Swap_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Swap_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryAVALANCHE__metaArgs = {
  block?: InputMaybe<AVALANCHE_Block_height>;
};

export type Subscription = {
  AVALANCHE_user?: Maybe<AVALANCHE_User>;
  AVALANCHE_users: Array<AVALANCHE_User>;
  AVALANCHE_bundle?: Maybe<AVALANCHE_Bundle>;
  AVALANCHE_bundles: Array<AVALANCHE_Bundle>;
  AVALANCHE_factory?: Maybe<AVALANCHE_Factory>;
  AVALANCHE_factories: Array<AVALANCHE_Factory>;
  AVALANCHE_hourData?: Maybe<AVALANCHE_HourData>;
  AVALANCHE_hourDatas: Array<AVALANCHE_HourData>;
  AVALANCHE_dayData?: Maybe<AVALANCHE_DayData>;
  AVALANCHE_dayDatas: Array<AVALANCHE_DayData>;
  AVALANCHE_token?: Maybe<AVALANCHE_Token>;
  AVALANCHE_tokens: Array<AVALANCHE_Token>;
  AVALANCHE_tokenHourData?: Maybe<AVALANCHE_TokenHourData>;
  AVALANCHE_tokenHourDatas: Array<AVALANCHE_TokenHourData>;
  AVALANCHE_tokenDayData?: Maybe<AVALANCHE_TokenDayData>;
  AVALANCHE_tokenDayDatas: Array<AVALANCHE_TokenDayData>;
  AVALANCHE_pair?: Maybe<AVALANCHE_Pair>;
  AVALANCHE_pairs: Array<AVALANCHE_Pair>;
  AVALANCHE_pairHourData?: Maybe<AVALANCHE_PairHourData>;
  AVALANCHE_pairHourDatas: Array<AVALANCHE_PairHourData>;
  AVALANCHE_pairDayData?: Maybe<AVALANCHE_PairDayData>;
  AVALANCHE_pairDayDatas: Array<AVALANCHE_PairDayData>;
  AVALANCHE_liquidityPosition?: Maybe<AVALANCHE_LiquidityPosition>;
  AVALANCHE_liquidityPositions: Array<AVALANCHE_LiquidityPosition>;
  AVALANCHE_liquidityPositionSnapshot?: Maybe<AVALANCHE_LiquidityPositionSnapshot>;
  AVALANCHE_liquidityPositionSnapshots: Array<AVALANCHE_LiquidityPositionSnapshot>;
  AVALANCHE_transaction?: Maybe<AVALANCHE_Transaction>;
  AVALANCHE_transactions: Array<AVALANCHE_Transaction>;
  AVALANCHE_mint?: Maybe<AVALANCHE_Mint>;
  AVALANCHE_mints: Array<AVALANCHE_Mint>;
  AVALANCHE_burn?: Maybe<AVALANCHE_Burn>;
  AVALANCHE_burns: Array<AVALANCHE_Burn>;
  AVALANCHE_swap?: Maybe<AVALANCHE_Swap>;
  AVALANCHE_swaps: Array<AVALANCHE_Swap>;
  /** Access to subgraph metadata */
  AVALANCHE__meta?: Maybe<AVALANCHE__Meta_>;
};


export type SubscriptionAVALANCHE_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_User_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_User_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Bundle_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Bundle_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Factory_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Factory_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_HourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_HourData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_DayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_DayData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Token_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Token_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_TokenHourData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_TokenDayData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Pair_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Pair_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_PairHourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_PairHourData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_PairDayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_PairDayData_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_LiquidityPosition_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Transaction_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Transaction_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Mint_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Mint_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Burn_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Burn_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Swap_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Swap_filter>;
  block?: InputMaybe<AVALANCHE_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionAVALANCHE__metaArgs = {
  block?: InputMaybe<AVALANCHE_Block_height>;
};

export type AVALANCHE_Swap = {
  id: Scalars['ID'];
  transaction: AVALANCHE_Transaction;
  timestamp: Scalars['BigInt'];
  pair: AVALANCHE_Pair;
  sender: Scalars['AVALANCHE_Bytes'];
  amount0In: Scalars['AVALANCHE_BigDecimal'];
  amount1In: Scalars['AVALANCHE_BigDecimal'];
  amount0Out: Scalars['AVALANCHE_BigDecimal'];
  amount1Out: Scalars['AVALANCHE_BigDecimal'];
  to: Scalars['AVALANCHE_Bytes'];
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD: Scalars['AVALANCHE_BigDecimal'];
};

export type AVALANCHE_Swap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_not?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  amount0In?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0In_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0In_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0In_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0In_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0In_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0In_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount0In_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount1In?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1In_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1In_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1In_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1In_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1In_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1In_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount1In_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount0Out?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0Out_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0Out_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0Out_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0Out_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0Out_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount0Out_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount0Out_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount1Out?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1Out_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1Out_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1Out_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1Out_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1Out_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amount1Out_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amount1Out_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  to?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_not?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['AVALANCHE_Bytes']>>;
  to_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['AVALANCHE_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
};

export type AVALANCHE_Swap_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'sender'
  | 'amount0In'
  | 'amount1In'
  | 'amount0Out'
  | 'amount1Out'
  | 'to'
  | 'logIndex'
  | 'amountUSD';

export type AVALANCHE_Token = {
  id: Scalars['ID'];
  factory: AVALANCHE_Factory;
  symbol: Scalars['String'];
  name: Scalars['String'];
  decimals: Scalars['BigInt'];
  totalSupply: Scalars['BigInt'];
  volume: Scalars['AVALANCHE_BigDecimal'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  untrackedVolumeUSD: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['AVALANCHE_BigDecimal'];
  derivedETH: Scalars['AVALANCHE_BigDecimal'];
  whitelistPairs: Array<AVALANCHE_Pair>;
  hourData: Array<AVALANCHE_TokenHourData>;
  dayData: Array<AVALANCHE_TokenDayData>;
  basePairs: Array<AVALANCHE_Pair>;
  quotePairs: Array<AVALANCHE_Pair>;
  basePairsDayData: Array<AVALANCHE_PairDayData>;
  quotePairsDayData: Array<AVALANCHE_PairDayData>;
};


export type AVALANCHE_TokenwhitelistPairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Pair_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Pair_filter>;
};


export type AVALANCHE_TokenhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_TokenHourData_filter>;
};


export type AVALANCHE_TokendayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_TokenDayData_filter>;
};


export type AVALANCHE_TokenbasePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Pair_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Pair_filter>;
};


export type AVALANCHE_TokenquotePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Pair_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Pair_filter>;
};


export type AVALANCHE_TokenbasePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_PairDayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_PairDayData_filter>;
};


export type AVALANCHE_TokenquotePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_PairDayData_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_PairDayData_filter>;
};

export type AVALANCHE_TokenDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: AVALANCHE_Token;
  volume: Scalars['AVALANCHE_BigDecimal'];
  volumeETH: Scalars['AVALANCHE_BigDecimal'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['AVALANCHE_BigDecimal'];
  liquidityETH: Scalars['AVALANCHE_BigDecimal'];
  liquidityUSD: Scalars['AVALANCHE_BigDecimal'];
  priceUSD: Scalars['AVALANCHE_BigDecimal'];
};

export type AVALANCHE_TokenDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
};

export type AVALANCHE_TokenDayData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type AVALANCHE_TokenHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: AVALANCHE_Token;
  volume: Scalars['AVALANCHE_BigDecimal'];
  volumeETH: Scalars['AVALANCHE_BigDecimal'];
  volumeUSD: Scalars['AVALANCHE_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['AVALANCHE_BigDecimal'];
  liquidityETH: Scalars['AVALANCHE_BigDecimal'];
  liquidityUSD: Scalars['AVALANCHE_BigDecimal'];
  priceUSD: Scalars['AVALANCHE_BigDecimal'];
};

export type AVALANCHE_TokenHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
};

export type AVALANCHE_TokenHourData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type AVALANCHE_Token_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  decimals?: InputMaybe<Scalars['BigInt']>;
  decimals_not?: InputMaybe<Scalars['BigInt']>;
  decimals_gt?: InputMaybe<Scalars['BigInt']>;
  decimals_lt?: InputMaybe<Scalars['BigInt']>;
  decimals_gte?: InputMaybe<Scalars['BigInt']>;
  decimals_lte?: InputMaybe<Scalars['BigInt']>;
  decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  derivedETH?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  derivedETH_not?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  derivedETH_gt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  derivedETH_lt?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  derivedETH_gte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  derivedETH_lte?: InputMaybe<Scalars['AVALANCHE_BigDecimal']>;
  derivedETH_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  derivedETH_not_in?: InputMaybe<Array<Scalars['AVALANCHE_BigDecimal']>>;
  whitelistPairs?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type AVALANCHE_Token_orderBy =
  | 'id'
  | 'factory'
  | 'symbol'
  | 'name'
  | 'decimals'
  | 'totalSupply'
  | 'volume'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'derivedETH'
  | 'whitelistPairs'
  | 'hourData'
  | 'dayData'
  | 'basePairs'
  | 'quotePairs'
  | 'basePairsDayData'
  | 'quotePairsDayData';

export type AVALANCHE_Transaction = {
  id: Scalars['ID'];
  blockNumber: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  mints: Array<Maybe<AVALANCHE_Mint>>;
  burns: Array<Maybe<AVALANCHE_Burn>>;
  swaps: Array<Maybe<AVALANCHE_Swap>>;
};


export type AVALANCHE_TransactionmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Mint_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Mint_filter>;
};


export type AVALANCHE_TransactionburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Burn_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Burn_filter>;
};


export type AVALANCHE_TransactionswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_Swap_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_Swap_filter>;
};

export type AVALANCHE_Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  mints?: InputMaybe<Array<Scalars['String']>>;
  mints_not?: InputMaybe<Array<Scalars['String']>>;
  mints_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns?: InputMaybe<Array<Scalars['String']>>;
  burns_not?: InputMaybe<Array<Scalars['String']>>;
  burns_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps?: InputMaybe<Array<Scalars['String']>>;
  swaps_not?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type AVALANCHE_Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'mints'
  | 'burns'
  | 'swaps';

export type AVALANCHE_User = {
  id: Scalars['ID'];
  liquidityPositions: Array<AVALANCHE_LiquidityPosition>;
};


export type AVALANCHE_UserliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AVALANCHE_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<AVALANCHE_OrderDirection>;
  where?: InputMaybe<AVALANCHE_LiquidityPosition_filter>;
};

export type AVALANCHE_User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
};

export type AVALANCHE_User_orderBy =
  | 'id'
  | 'liquidityPositions';

export type AVALANCHE__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['AVALANCHE_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
};

/** The type for the top-level _meta field */
export type AVALANCHE__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: AVALANCHE__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type _SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

    }
    export type QueryAvalancheExchangeSdk = {
  /** null **/
  AVALANCHE_user: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_user'], AvalancheExchangeTypes.QueryAVALANCHE_userArgs, MeshContext>,
  /** null **/
  AVALANCHE_users: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_users'], AvalancheExchangeTypes.QueryAVALANCHE_usersArgs, MeshContext>,
  /** null **/
  AVALANCHE_bundle: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_bundle'], AvalancheExchangeTypes.QueryAVALANCHE_bundleArgs, MeshContext>,
  /** null **/
  AVALANCHE_bundles: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_bundles'], AvalancheExchangeTypes.QueryAVALANCHE_bundlesArgs, MeshContext>,
  /** null **/
  AVALANCHE_factory: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_factory'], AvalancheExchangeTypes.QueryAVALANCHE_factoryArgs, MeshContext>,
  /** null **/
  AVALANCHE_factories: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_factories'], AvalancheExchangeTypes.QueryAVALANCHE_factoriesArgs, MeshContext>,
  /** null **/
  AVALANCHE_hourData: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_hourData'], AvalancheExchangeTypes.QueryAVALANCHE_hourDataArgs, MeshContext>,
  /** null **/
  AVALANCHE_hourDatas: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_hourDatas'], AvalancheExchangeTypes.QueryAVALANCHE_hourDatasArgs, MeshContext>,
  /** null **/
  AVALANCHE_dayData: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_dayData'], AvalancheExchangeTypes.QueryAVALANCHE_dayDataArgs, MeshContext>,
  /** null **/
  AVALANCHE_dayDatas: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_dayDatas'], AvalancheExchangeTypes.QueryAVALANCHE_dayDatasArgs, MeshContext>,
  /** null **/
  AVALANCHE_token: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_token'], AvalancheExchangeTypes.QueryAVALANCHE_tokenArgs, MeshContext>,
  /** null **/
  AVALANCHE_tokens: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_tokens'], AvalancheExchangeTypes.QueryAVALANCHE_tokensArgs, MeshContext>,
  /** null **/
  AVALANCHE_tokenHourData: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_tokenHourData'], AvalancheExchangeTypes.QueryAVALANCHE_tokenHourDataArgs, MeshContext>,
  /** null **/
  AVALANCHE_tokenHourDatas: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_tokenHourDatas'], AvalancheExchangeTypes.QueryAVALANCHE_tokenHourDatasArgs, MeshContext>,
  /** null **/
  AVALANCHE_tokenDayData: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_tokenDayData'], AvalancheExchangeTypes.QueryAVALANCHE_tokenDayDataArgs, MeshContext>,
  /** null **/
  AVALANCHE_tokenDayDatas: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_tokenDayDatas'], AvalancheExchangeTypes.QueryAVALANCHE_tokenDayDatasArgs, MeshContext>,
  /** null **/
  AVALANCHE_pair: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_pair'], AvalancheExchangeTypes.QueryAVALANCHE_pairArgs, MeshContext>,
  /** null **/
  AVALANCHE_pairs: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_pairs'], AvalancheExchangeTypes.QueryAVALANCHE_pairsArgs, MeshContext>,
  /** null **/
  AVALANCHE_pairHourData: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_pairHourData'], AvalancheExchangeTypes.QueryAVALANCHE_pairHourDataArgs, MeshContext>,
  /** null **/
  AVALANCHE_pairHourDatas: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_pairHourDatas'], AvalancheExchangeTypes.QueryAVALANCHE_pairHourDatasArgs, MeshContext>,
  /** null **/
  AVALANCHE_pairDayData: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_pairDayData'], AvalancheExchangeTypes.QueryAVALANCHE_pairDayDataArgs, MeshContext>,
  /** null **/
  AVALANCHE_pairDayDatas: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_pairDayDatas'], AvalancheExchangeTypes.QueryAVALANCHE_pairDayDatasArgs, MeshContext>,
  /** null **/
  AVALANCHE_liquidityPosition: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_liquidityPosition'], AvalancheExchangeTypes.QueryAVALANCHE_liquidityPositionArgs, MeshContext>,
  /** null **/
  AVALANCHE_liquidityPositions: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_liquidityPositions'], AvalancheExchangeTypes.QueryAVALANCHE_liquidityPositionsArgs, MeshContext>,
  /** null **/
  AVALANCHE_liquidityPositionSnapshot: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_liquidityPositionSnapshot'], AvalancheExchangeTypes.QueryAVALANCHE_liquidityPositionSnapshotArgs, MeshContext>,
  /** null **/
  AVALANCHE_liquidityPositionSnapshots: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_liquidityPositionSnapshots'], AvalancheExchangeTypes.QueryAVALANCHE_liquidityPositionSnapshotsArgs, MeshContext>,
  /** null **/
  AVALANCHE_transaction: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_transaction'], AvalancheExchangeTypes.QueryAVALANCHE_transactionArgs, MeshContext>,
  /** null **/
  AVALANCHE_transactions: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_transactions'], AvalancheExchangeTypes.QueryAVALANCHE_transactionsArgs, MeshContext>,
  /** null **/
  AVALANCHE_mint: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_mint'], AvalancheExchangeTypes.QueryAVALANCHE_mintArgs, MeshContext>,
  /** null **/
  AVALANCHE_mints: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_mints'], AvalancheExchangeTypes.QueryAVALANCHE_mintsArgs, MeshContext>,
  /** null **/
  AVALANCHE_burn: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_burn'], AvalancheExchangeTypes.QueryAVALANCHE_burnArgs, MeshContext>,
  /** null **/
  AVALANCHE_burns: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_burns'], AvalancheExchangeTypes.QueryAVALANCHE_burnsArgs, MeshContext>,
  /** null **/
  AVALANCHE_swap: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_swap'], AvalancheExchangeTypes.QueryAVALANCHE_swapArgs, MeshContext>,
  /** null **/
  AVALANCHE_swaps: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE_swaps'], AvalancheExchangeTypes.QueryAVALANCHE_swapsArgs, MeshContext>,
  /** Access to subgraph metadata **/
  AVALANCHE__meta: InContextSdkMethod<AvalancheExchangeTypes.Query['AVALANCHE__meta'], AvalancheExchangeTypes.QueryAVALANCHE__metaArgs, MeshContext>
};

export type MutationAvalancheExchangeSdk = {

};

export type SubscriptionAvalancheExchangeSdk = {
  /** null **/
  AVALANCHE_user: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_user'], AvalancheExchangeTypes.SubscriptionAVALANCHE_userArgs, MeshContext>,
  /** null **/
  AVALANCHE_users: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_users'], AvalancheExchangeTypes.SubscriptionAVALANCHE_usersArgs, MeshContext>,
  /** null **/
  AVALANCHE_bundle: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_bundle'], AvalancheExchangeTypes.SubscriptionAVALANCHE_bundleArgs, MeshContext>,
  /** null **/
  AVALANCHE_bundles: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_bundles'], AvalancheExchangeTypes.SubscriptionAVALANCHE_bundlesArgs, MeshContext>,
  /** null **/
  AVALANCHE_factory: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_factory'], AvalancheExchangeTypes.SubscriptionAVALANCHE_factoryArgs, MeshContext>,
  /** null **/
  AVALANCHE_factories: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_factories'], AvalancheExchangeTypes.SubscriptionAVALANCHE_factoriesArgs, MeshContext>,
  /** null **/
  AVALANCHE_hourData: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_hourData'], AvalancheExchangeTypes.SubscriptionAVALANCHE_hourDataArgs, MeshContext>,
  /** null **/
  AVALANCHE_hourDatas: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_hourDatas'], AvalancheExchangeTypes.SubscriptionAVALANCHE_hourDatasArgs, MeshContext>,
  /** null **/
  AVALANCHE_dayData: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_dayData'], AvalancheExchangeTypes.SubscriptionAVALANCHE_dayDataArgs, MeshContext>,
  /** null **/
  AVALANCHE_dayDatas: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_dayDatas'], AvalancheExchangeTypes.SubscriptionAVALANCHE_dayDatasArgs, MeshContext>,
  /** null **/
  AVALANCHE_token: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_token'], AvalancheExchangeTypes.SubscriptionAVALANCHE_tokenArgs, MeshContext>,
  /** null **/
  AVALANCHE_tokens: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_tokens'], AvalancheExchangeTypes.SubscriptionAVALANCHE_tokensArgs, MeshContext>,
  /** null **/
  AVALANCHE_tokenHourData: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_tokenHourData'], AvalancheExchangeTypes.SubscriptionAVALANCHE_tokenHourDataArgs, MeshContext>,
  /** null **/
  AVALANCHE_tokenHourDatas: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_tokenHourDatas'], AvalancheExchangeTypes.SubscriptionAVALANCHE_tokenHourDatasArgs, MeshContext>,
  /** null **/
  AVALANCHE_tokenDayData: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_tokenDayData'], AvalancheExchangeTypes.SubscriptionAVALANCHE_tokenDayDataArgs, MeshContext>,
  /** null **/
  AVALANCHE_tokenDayDatas: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_tokenDayDatas'], AvalancheExchangeTypes.SubscriptionAVALANCHE_tokenDayDatasArgs, MeshContext>,
  /** null **/
  AVALANCHE_pair: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_pair'], AvalancheExchangeTypes.SubscriptionAVALANCHE_pairArgs, MeshContext>,
  /** null **/
  AVALANCHE_pairs: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_pairs'], AvalancheExchangeTypes.SubscriptionAVALANCHE_pairsArgs, MeshContext>,
  /** null **/
  AVALANCHE_pairHourData: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_pairHourData'], AvalancheExchangeTypes.SubscriptionAVALANCHE_pairHourDataArgs, MeshContext>,
  /** null **/
  AVALANCHE_pairHourDatas: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_pairHourDatas'], AvalancheExchangeTypes.SubscriptionAVALANCHE_pairHourDatasArgs, MeshContext>,
  /** null **/
  AVALANCHE_pairDayData: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_pairDayData'], AvalancheExchangeTypes.SubscriptionAVALANCHE_pairDayDataArgs, MeshContext>,
  /** null **/
  AVALANCHE_pairDayDatas: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_pairDayDatas'], AvalancheExchangeTypes.SubscriptionAVALANCHE_pairDayDatasArgs, MeshContext>,
  /** null **/
  AVALANCHE_liquidityPosition: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_liquidityPosition'], AvalancheExchangeTypes.SubscriptionAVALANCHE_liquidityPositionArgs, MeshContext>,
  /** null **/
  AVALANCHE_liquidityPositions: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_liquidityPositions'], AvalancheExchangeTypes.SubscriptionAVALANCHE_liquidityPositionsArgs, MeshContext>,
  /** null **/
  AVALANCHE_liquidityPositionSnapshot: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_liquidityPositionSnapshot'], AvalancheExchangeTypes.SubscriptionAVALANCHE_liquidityPositionSnapshotArgs, MeshContext>,
  /** null **/
  AVALANCHE_liquidityPositionSnapshots: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_liquidityPositionSnapshots'], AvalancheExchangeTypes.SubscriptionAVALANCHE_liquidityPositionSnapshotsArgs, MeshContext>,
  /** null **/
  AVALANCHE_transaction: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_transaction'], AvalancheExchangeTypes.SubscriptionAVALANCHE_transactionArgs, MeshContext>,
  /** null **/
  AVALANCHE_transactions: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_transactions'], AvalancheExchangeTypes.SubscriptionAVALANCHE_transactionsArgs, MeshContext>,
  /** null **/
  AVALANCHE_mint: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_mint'], AvalancheExchangeTypes.SubscriptionAVALANCHE_mintArgs, MeshContext>,
  /** null **/
  AVALANCHE_mints: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_mints'], AvalancheExchangeTypes.SubscriptionAVALANCHE_mintsArgs, MeshContext>,
  /** null **/
  AVALANCHE_burn: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_burn'], AvalancheExchangeTypes.SubscriptionAVALANCHE_burnArgs, MeshContext>,
  /** null **/
  AVALANCHE_burns: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_burns'], AvalancheExchangeTypes.SubscriptionAVALANCHE_burnsArgs, MeshContext>,
  /** null **/
  AVALANCHE_swap: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_swap'], AvalancheExchangeTypes.SubscriptionAVALANCHE_swapArgs, MeshContext>,
  /** null **/
  AVALANCHE_swaps: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE_swaps'], AvalancheExchangeTypes.SubscriptionAVALANCHE_swapsArgs, MeshContext>,
  /** Access to subgraph metadata **/
  AVALANCHE__meta: InContextSdkMethod<AvalancheExchangeTypes.Subscription['AVALANCHE__meta'], AvalancheExchangeTypes.SubscriptionAVALANCHE__metaArgs, MeshContext>
};


    export namespace MaticExchangeTypes {
      export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  MATIC_BigDecimal: any;
  BigInt: any;
  MATIC_Bytes: any;
};

/** The block at which the query should be executed. */
export type MATIC_Block_height = {
  /** Value containing a block hash */
  hash?: InputMaybe<Scalars['MATIC_Bytes']>;
  /** Value containing a block number */
  number?: InputMaybe<Scalars['Int']>;
  /**
   * Value containing the minimum block number.
   * In the case of `number_gte`, the query will be executed on the latest block only if
   * the subgraph has progressed to or past the minimum block number.
   * Defaults to the latest block when omitted.
   *
   */
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type MATIC_Bundle = {
  id: Scalars['ID'];
  ethPrice: Scalars['MATIC_BigDecimal'];
};

export type MATIC_Bundle_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ethPrice?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  ethPrice_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  ethPrice_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  ethPrice_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  ethPrice_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  ethPrice_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  ethPrice_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  ethPrice_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
};

export type MATIC_Bundle_orderBy =
  | 'id'
  | 'ethPrice';

export type MATIC_Burn = {
  id: Scalars['ID'];
  transaction: MATIC_Transaction;
  timestamp: Scalars['BigInt'];
  pair: MATIC_Pair;
  liquidity: Scalars['MATIC_BigDecimal'];
  sender?: Maybe<Scalars['MATIC_Bytes']>;
  amount0?: Maybe<Scalars['MATIC_BigDecimal']>;
  amount1?: Maybe<Scalars['MATIC_BigDecimal']>;
  to?: Maybe<Scalars['MATIC_Bytes']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['MATIC_BigDecimal']>;
  complete: Scalars['Boolean'];
  feeTo?: Maybe<Scalars['MATIC_Bytes']>;
  feeLiquidity?: Maybe<Scalars['MATIC_BigDecimal']>;
};

export type MATIC_Burn_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidity?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  sender?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_not?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  amount0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  to?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_not?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  to_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  complete?: InputMaybe<Scalars['Boolean']>;
  complete_not?: InputMaybe<Scalars['Boolean']>;
  complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
  complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  feeTo?: InputMaybe<Scalars['MATIC_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['MATIC_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
};

export type MATIC_Burn_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'to'
  | 'logIndex'
  | 'amountUSD'
  | 'complete'
  | 'feeTo'
  | 'feeLiquidity';

export type MATIC_DayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: MATIC_Factory;
  volumeETH: Scalars['MATIC_BigDecimal'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  untrackedVolume: Scalars['MATIC_BigDecimal'];
  liquidityETH: Scalars['MATIC_BigDecimal'];
  liquidityUSD: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type MATIC_DayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MATIC_DayData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type MATIC_Factory = {
  id: Scalars['ID'];
  pairCount: Scalars['BigInt'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  volumeETH: Scalars['MATIC_BigDecimal'];
  untrackedVolumeUSD: Scalars['MATIC_BigDecimal'];
  liquidityUSD: Scalars['MATIC_BigDecimal'];
  liquidityETH: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
  tokenCount: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  pairs: Array<MATIC_Pair>;
  tokens: Array<MATIC_Token>;
  hourData: Array<MATIC_HourData>;
  dayData: Array<MATIC_DayData>;
};


export type MATIC_FactorypairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Pair_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Pair_filter>;
};


export type MATIC_FactorytokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Token_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Token_filter>;
};


export type MATIC_FactoryhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_HourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_HourData_filter>;
};


export type MATIC_FactorydayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_DayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_DayData_filter>;
};

export type MATIC_Factory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  pairCount?: InputMaybe<Scalars['BigInt']>;
  pairCount_not?: InputMaybe<Scalars['BigInt']>;
  pairCount_gt?: InputMaybe<Scalars['BigInt']>;
  pairCount_lt?: InputMaybe<Scalars['BigInt']>;
  pairCount_gte?: InputMaybe<Scalars['BigInt']>;
  pairCount_lte?: InputMaybe<Scalars['BigInt']>;
  pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount?: InputMaybe<Scalars['BigInt']>;
  tokenCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount?: InputMaybe<Scalars['BigInt']>;
  userCount_not?: InputMaybe<Scalars['BigInt']>;
  userCount_gt?: InputMaybe<Scalars['BigInt']>;
  userCount_lt?: InputMaybe<Scalars['BigInt']>;
  userCount_gte?: InputMaybe<Scalars['BigInt']>;
  userCount_lte?: InputMaybe<Scalars['BigInt']>;
  userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MATIC_Factory_orderBy =
  | 'id'
  | 'pairCount'
  | 'volumeUSD'
  | 'volumeETH'
  | 'untrackedVolumeUSD'
  | 'liquidityUSD'
  | 'liquidityETH'
  | 'txCount'
  | 'tokenCount'
  | 'userCount'
  | 'pairs'
  | 'tokens'
  | 'hourData'
  | 'dayData';

export type MATIC_HourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: MATIC_Factory;
  volumeETH: Scalars['MATIC_BigDecimal'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  untrackedVolume: Scalars['MATIC_BigDecimal'];
  liquidityETH: Scalars['MATIC_BigDecimal'];
  liquidityUSD: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type MATIC_HourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MATIC_HourData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type MATIC_LiquidityPosition = {
  id: Scalars['ID'];
  user: MATIC_User;
  pair: MATIC_Pair;
  liquidityTokenBalance: Scalars['MATIC_BigDecimal'];
  snapshots: Array<Maybe<MATIC_LiquidityPositionSnapshot>>;
  block: Scalars['Int'];
  timestamp: Scalars['Int'];
};


export type MATIC_LiquidityPositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_LiquidityPositionSnapshot_filter>;
};

export type MATIC_LiquidityPositionSnapshot = {
  id: Scalars['ID'];
  liquidityPosition: MATIC_LiquidityPosition;
  timestamp: Scalars['Int'];
  block: Scalars['Int'];
  user: MATIC_User;
  pair: MATIC_Pair;
  token0PriceUSD: Scalars['MATIC_BigDecimal'];
  token1PriceUSD: Scalars['MATIC_BigDecimal'];
  reserve0: Scalars['MATIC_BigDecimal'];
  reserve1: Scalars['MATIC_BigDecimal'];
  reserveUSD: Scalars['MATIC_BigDecimal'];
  liquidityTokenTotalSupply: Scalars['MATIC_BigDecimal'];
  liquidityTokenBalance: Scalars['MATIC_BigDecimal'];
};

export type MATIC_LiquidityPositionSnapshot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityPosition?: InputMaybe<Scalars['String']>;
  liquidityPosition_not?: InputMaybe<Scalars['String']>;
  liquidityPosition_gt?: InputMaybe<Scalars['String']>;
  liquidityPosition_lt?: InputMaybe<Scalars['String']>;
  liquidityPosition_gte?: InputMaybe<Scalars['String']>;
  liquidityPosition_lte?: InputMaybe<Scalars['String']>;
  liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0PriceUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0PriceUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0PriceUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0PriceUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0PriceUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0PriceUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0PriceUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  token0PriceUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  token1PriceUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1PriceUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1PriceUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1PriceUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1PriceUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1PriceUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1PriceUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  token1PriceUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityTokenTotalSupply?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenTotalSupply_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityTokenBalance?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
};

export type MATIC_LiquidityPositionSnapshot_orderBy =
  | 'id'
  | 'liquidityPosition'
  | 'timestamp'
  | 'block'
  | 'user'
  | 'pair'
  | 'token0PriceUSD'
  | 'token1PriceUSD'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'liquidityTokenTotalSupply'
  | 'liquidityTokenBalance';

export type MATIC_LiquidityPosition_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityTokenBalance?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type MATIC_LiquidityPosition_orderBy =
  | 'id'
  | 'user'
  | 'pair'
  | 'liquidityTokenBalance'
  | 'snapshots'
  | 'block'
  | 'timestamp';

export type MATIC_Mint = {
  id: Scalars['ID'];
  transaction: MATIC_Transaction;
  timestamp: Scalars['BigInt'];
  pair: MATIC_Pair;
  to: Scalars['MATIC_Bytes'];
  liquidity: Scalars['MATIC_BigDecimal'];
  sender?: Maybe<Scalars['MATIC_Bytes']>;
  amount0?: Maybe<Scalars['MATIC_BigDecimal']>;
  amount1?: Maybe<Scalars['MATIC_BigDecimal']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['MATIC_BigDecimal']>;
  feeTo?: Maybe<Scalars['MATIC_Bytes']>;
  feeLiquidity?: Maybe<Scalars['MATIC_BigDecimal']>;
};

export type MATIC_Mint_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_not?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  to_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  liquidity?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  sender?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_not?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  amount0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  feeTo?: InputMaybe<Scalars['MATIC_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['MATIC_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
};

export type MATIC_Mint_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'to'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'logIndex'
  | 'amountUSD'
  | 'feeTo'
  | 'feeLiquidity';

/** Defines the order direction, either ascending or descending */
export type MATIC_OrderDirection =
  | 'asc'
  | 'desc';

export type MATIC_Pair = {
  id: Scalars['ID'];
  factory: MATIC_Factory;
  name: Scalars['String'];
  token0: MATIC_Token;
  token1: MATIC_Token;
  reserve0: Scalars['MATIC_BigDecimal'];
  reserve1: Scalars['MATIC_BigDecimal'];
  totalSupply: Scalars['MATIC_BigDecimal'];
  reserveETH: Scalars['MATIC_BigDecimal'];
  reserveUSD: Scalars['MATIC_BigDecimal'];
  trackedReserveETH: Scalars['MATIC_BigDecimal'];
  token0Price: Scalars['MATIC_BigDecimal'];
  token1Price: Scalars['MATIC_BigDecimal'];
  volumeToken0: Scalars['MATIC_BigDecimal'];
  volumeToken1: Scalars['MATIC_BigDecimal'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  untrackedVolumeUSD: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidityProviderCount: Scalars['BigInt'];
  liquidityPositions: Array<MATIC_LiquidityPosition>;
  liquidityPositionSnapshots: Array<MATIC_LiquidityPositionSnapshot>;
  dayData: Array<MATIC_PairDayData>;
  hourData: Array<MATIC_PairHourData>;
  mints: Array<MATIC_Mint>;
  burns: Array<MATIC_Burn>;
  swaps: Array<MATIC_Swap>;
  timestamp: Scalars['BigInt'];
  block: Scalars['BigInt'];
};


export type MATIC_PairliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_LiquidityPosition_filter>;
};


export type MATIC_PairliquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_LiquidityPositionSnapshot_filter>;
};


export type MATIC_PairdayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_PairDayData_filter>;
};


export type MATIC_PairhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_PairHourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_PairHourData_filter>;
};


export type MATIC_PairmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Mint_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Mint_filter>;
};


export type MATIC_PairburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Burn_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Burn_filter>;
};


export type MATIC_PairswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Swap_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Swap_filter>;
};

export type MATIC_PairDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: MATIC_Pair;
  token0: MATIC_Token;
  token1: MATIC_Token;
  reserve0: Scalars['MATIC_BigDecimal'];
  reserve1: Scalars['MATIC_BigDecimal'];
  totalSupply: Scalars['MATIC_BigDecimal'];
  reserveUSD: Scalars['MATIC_BigDecimal'];
  volumeToken0: Scalars['MATIC_BigDecimal'];
  volumeToken1: Scalars['MATIC_BigDecimal'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type MATIC_PairDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MATIC_PairDayData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type MATIC_PairHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: MATIC_Pair;
  reserve0: Scalars['MATIC_BigDecimal'];
  reserve1: Scalars['MATIC_BigDecimal'];
  reserveUSD: Scalars['MATIC_BigDecimal'];
  volumeToken0: Scalars['MATIC_BigDecimal'];
  volumeToken1: Scalars['MATIC_BigDecimal'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type MATIC_PairHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MATIC_PairHourData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type MATIC_Pair_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  trackedReserveETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  trackedReserveETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  trackedReserveETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  trackedReserveETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  trackedReserveETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  trackedReserveETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  trackedReserveETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  trackedReserveETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  token0Price?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0Price_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0Price_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0Price_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0Price_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0Price_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token0Price_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  token0Price_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  token1Price?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1Price_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1Price_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1Price_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1Price_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1Price_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  token1Price_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  token1Price_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type MATIC_Pair_orderBy =
  | 'id'
  | 'factory'
  | 'name'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveETH'
  | 'reserveUSD'
  | 'trackedReserveETH'
  | 'token0Price'
  | 'token1Price'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidityProviderCount'
  | 'liquidityPositions'
  | 'liquidityPositionSnapshots'
  | 'dayData'
  | 'hourData'
  | 'mints'
  | 'burns'
  | 'swaps'
  | 'timestamp'
  | 'block';

export type Query = {
  MATIC_user?: Maybe<MATIC_User>;
  MATIC_users: Array<MATIC_User>;
  MATIC_bundle?: Maybe<MATIC_Bundle>;
  MATIC_bundles: Array<MATIC_Bundle>;
  MATIC_factory?: Maybe<MATIC_Factory>;
  MATIC_factories: Array<MATIC_Factory>;
  MATIC_hourData?: Maybe<MATIC_HourData>;
  MATIC_hourDatas: Array<MATIC_HourData>;
  MATIC_dayData?: Maybe<MATIC_DayData>;
  MATIC_dayDatas: Array<MATIC_DayData>;
  MATIC_token?: Maybe<MATIC_Token>;
  MATIC_tokens: Array<MATIC_Token>;
  MATIC_tokenHourData?: Maybe<MATIC_TokenHourData>;
  MATIC_tokenHourDatas: Array<MATIC_TokenHourData>;
  MATIC_tokenDayData?: Maybe<MATIC_TokenDayData>;
  MATIC_tokenDayDatas: Array<MATIC_TokenDayData>;
  MATIC_pair?: Maybe<MATIC_Pair>;
  MATIC_pairs: Array<MATIC_Pair>;
  MATIC_pairHourData?: Maybe<MATIC_PairHourData>;
  MATIC_pairHourDatas: Array<MATIC_PairHourData>;
  MATIC_pairDayData?: Maybe<MATIC_PairDayData>;
  MATIC_pairDayDatas: Array<MATIC_PairDayData>;
  MATIC_liquidityPosition?: Maybe<MATIC_LiquidityPosition>;
  MATIC_liquidityPositions: Array<MATIC_LiquidityPosition>;
  MATIC_liquidityPositionSnapshot?: Maybe<MATIC_LiquidityPositionSnapshot>;
  MATIC_liquidityPositionSnapshots: Array<MATIC_LiquidityPositionSnapshot>;
  MATIC_transaction?: Maybe<MATIC_Transaction>;
  MATIC_transactions: Array<MATIC_Transaction>;
  MATIC_mint?: Maybe<MATIC_Mint>;
  MATIC_mints: Array<MATIC_Mint>;
  MATIC_burn?: Maybe<MATIC_Burn>;
  MATIC_burns: Array<MATIC_Burn>;
  MATIC_swap?: Maybe<MATIC_Swap>;
  MATIC_swaps: Array<MATIC_Swap>;
  /** Access to subgraph metadata */
  MATIC__meta?: Maybe<MATIC__Meta_>;
};


export type QueryMATIC_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_User_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_User_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Bundle_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Bundle_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Factory_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Factory_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_HourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_HourData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_DayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_DayData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Token_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Token_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_TokenHourData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_TokenDayData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Pair_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Pair_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_PairHourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_PairHourData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_PairDayData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_LiquidityPosition_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Transaction_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Transaction_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Mint_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Mint_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Burn_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Burn_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Swap_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Swap_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryMATIC__metaArgs = {
  block?: InputMaybe<MATIC_Block_height>;
};

export type Subscription = {
  MATIC_user?: Maybe<MATIC_User>;
  MATIC_users: Array<MATIC_User>;
  MATIC_bundle?: Maybe<MATIC_Bundle>;
  MATIC_bundles: Array<MATIC_Bundle>;
  MATIC_factory?: Maybe<MATIC_Factory>;
  MATIC_factories: Array<MATIC_Factory>;
  MATIC_hourData?: Maybe<MATIC_HourData>;
  MATIC_hourDatas: Array<MATIC_HourData>;
  MATIC_dayData?: Maybe<MATIC_DayData>;
  MATIC_dayDatas: Array<MATIC_DayData>;
  MATIC_token?: Maybe<MATIC_Token>;
  MATIC_tokens: Array<MATIC_Token>;
  MATIC_tokenHourData?: Maybe<MATIC_TokenHourData>;
  MATIC_tokenHourDatas: Array<MATIC_TokenHourData>;
  MATIC_tokenDayData?: Maybe<MATIC_TokenDayData>;
  MATIC_tokenDayDatas: Array<MATIC_TokenDayData>;
  MATIC_pair?: Maybe<MATIC_Pair>;
  MATIC_pairs: Array<MATIC_Pair>;
  MATIC_pairHourData?: Maybe<MATIC_PairHourData>;
  MATIC_pairHourDatas: Array<MATIC_PairHourData>;
  MATIC_pairDayData?: Maybe<MATIC_PairDayData>;
  MATIC_pairDayDatas: Array<MATIC_PairDayData>;
  MATIC_liquidityPosition?: Maybe<MATIC_LiquidityPosition>;
  MATIC_liquidityPositions: Array<MATIC_LiquidityPosition>;
  MATIC_liquidityPositionSnapshot?: Maybe<MATIC_LiquidityPositionSnapshot>;
  MATIC_liquidityPositionSnapshots: Array<MATIC_LiquidityPositionSnapshot>;
  MATIC_transaction?: Maybe<MATIC_Transaction>;
  MATIC_transactions: Array<MATIC_Transaction>;
  MATIC_mint?: Maybe<MATIC_Mint>;
  MATIC_mints: Array<MATIC_Mint>;
  MATIC_burn?: Maybe<MATIC_Burn>;
  MATIC_burns: Array<MATIC_Burn>;
  MATIC_swap?: Maybe<MATIC_Swap>;
  MATIC_swaps: Array<MATIC_Swap>;
  /** Access to subgraph metadata */
  MATIC__meta?: Maybe<MATIC__Meta_>;
};


export type SubscriptionMATIC_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_User_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_User_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Bundle_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Bundle_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Factory_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Factory_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_HourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_HourData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_DayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_DayData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Token_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Token_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_TokenHourData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_TokenDayData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Pair_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Pair_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_PairHourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_PairHourData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_PairDayData_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_LiquidityPosition_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Transaction_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Transaction_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Mint_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Mint_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Burn_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Burn_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Swap_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Swap_filter>;
  block?: InputMaybe<MATIC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionMATIC__metaArgs = {
  block?: InputMaybe<MATIC_Block_height>;
};

export type MATIC_Swap = {
  id: Scalars['ID'];
  transaction: MATIC_Transaction;
  timestamp: Scalars['BigInt'];
  pair: MATIC_Pair;
  sender: Scalars['MATIC_Bytes'];
  amount0In: Scalars['MATIC_BigDecimal'];
  amount1In: Scalars['MATIC_BigDecimal'];
  amount0Out: Scalars['MATIC_BigDecimal'];
  amount1Out: Scalars['MATIC_BigDecimal'];
  to: Scalars['MATIC_Bytes'];
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD: Scalars['MATIC_BigDecimal'];
};

export type MATIC_Swap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_not?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  amount0In?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0In_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0In_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0In_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0In_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0In_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0In_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount0In_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount1In?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1In_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1In_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1In_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1In_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1In_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1In_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount1In_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount0Out?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0Out_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0Out_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0Out_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0Out_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0Out_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount0Out_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount0Out_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount1Out?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1Out_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1Out_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1Out_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1Out_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1Out_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amount1Out_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amount1Out_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  to?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_not?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['MATIC_Bytes']>>;
  to_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['MATIC_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
};

export type MATIC_Swap_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'sender'
  | 'amount0In'
  | 'amount1In'
  | 'amount0Out'
  | 'amount1Out'
  | 'to'
  | 'logIndex'
  | 'amountUSD';

export type MATIC_Token = {
  id: Scalars['ID'];
  factory: MATIC_Factory;
  symbol: Scalars['String'];
  name: Scalars['String'];
  decimals: Scalars['BigInt'];
  totalSupply: Scalars['BigInt'];
  volume: Scalars['MATIC_BigDecimal'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  untrackedVolumeUSD: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['MATIC_BigDecimal'];
  derivedETH: Scalars['MATIC_BigDecimal'];
  whitelistPairs: Array<MATIC_Pair>;
  hourData: Array<MATIC_TokenHourData>;
  dayData: Array<MATIC_TokenDayData>;
  basePairs: Array<MATIC_Pair>;
  quotePairs: Array<MATIC_Pair>;
  basePairsDayData: Array<MATIC_PairDayData>;
  quotePairsDayData: Array<MATIC_PairDayData>;
};


export type MATIC_TokenwhitelistPairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Pair_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Pair_filter>;
};


export type MATIC_TokenhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_TokenHourData_filter>;
};


export type MATIC_TokendayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_TokenDayData_filter>;
};


export type MATIC_TokenbasePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Pair_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Pair_filter>;
};


export type MATIC_TokenquotePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Pair_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Pair_filter>;
};


export type MATIC_TokenbasePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_PairDayData_filter>;
};


export type MATIC_TokenquotePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_PairDayData_filter>;
};

export type MATIC_TokenDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: MATIC_Token;
  volume: Scalars['MATIC_BigDecimal'];
  volumeETH: Scalars['MATIC_BigDecimal'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['MATIC_BigDecimal'];
  liquidityETH: Scalars['MATIC_BigDecimal'];
  liquidityUSD: Scalars['MATIC_BigDecimal'];
  priceUSD: Scalars['MATIC_BigDecimal'];
};

export type MATIC_TokenDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
};

export type MATIC_TokenDayData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type MATIC_TokenHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: MATIC_Token;
  volume: Scalars['MATIC_BigDecimal'];
  volumeETH: Scalars['MATIC_BigDecimal'];
  volumeUSD: Scalars['MATIC_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['MATIC_BigDecimal'];
  liquidityETH: Scalars['MATIC_BigDecimal'];
  liquidityUSD: Scalars['MATIC_BigDecimal'];
  priceUSD: Scalars['MATIC_BigDecimal'];
};

export type MATIC_TokenHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
};

export type MATIC_TokenHourData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type MATIC_Token_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  decimals?: InputMaybe<Scalars['BigInt']>;
  decimals_not?: InputMaybe<Scalars['BigInt']>;
  decimals_gt?: InputMaybe<Scalars['BigInt']>;
  decimals_lt?: InputMaybe<Scalars['BigInt']>;
  decimals_gte?: InputMaybe<Scalars['BigInt']>;
  decimals_lte?: InputMaybe<Scalars['BigInt']>;
  decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  derivedETH?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  derivedETH_not?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  derivedETH_gt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  derivedETH_lt?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  derivedETH_gte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  derivedETH_lte?: InputMaybe<Scalars['MATIC_BigDecimal']>;
  derivedETH_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  derivedETH_not_in?: InputMaybe<Array<Scalars['MATIC_BigDecimal']>>;
  whitelistPairs?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type MATIC_Token_orderBy =
  | 'id'
  | 'factory'
  | 'symbol'
  | 'name'
  | 'decimals'
  | 'totalSupply'
  | 'volume'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'derivedETH'
  | 'whitelistPairs'
  | 'hourData'
  | 'dayData'
  | 'basePairs'
  | 'quotePairs'
  | 'basePairsDayData'
  | 'quotePairsDayData';

export type MATIC_Transaction = {
  id: Scalars['ID'];
  blockNumber: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  mints: Array<Maybe<MATIC_Mint>>;
  burns: Array<Maybe<MATIC_Burn>>;
  swaps: Array<Maybe<MATIC_Swap>>;
};


export type MATIC_TransactionmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Mint_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Mint_filter>;
};


export type MATIC_TransactionburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Burn_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Burn_filter>;
};


export type MATIC_TransactionswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_Swap_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_Swap_filter>;
};

export type MATIC_Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  mints?: InputMaybe<Array<Scalars['String']>>;
  mints_not?: InputMaybe<Array<Scalars['String']>>;
  mints_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns?: InputMaybe<Array<Scalars['String']>>;
  burns_not?: InputMaybe<Array<Scalars['String']>>;
  burns_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps?: InputMaybe<Array<Scalars['String']>>;
  swaps_not?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type MATIC_Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'mints'
  | 'burns'
  | 'swaps';

export type MATIC_User = {
  id: Scalars['ID'];
  liquidityPositions: Array<MATIC_LiquidityPosition>;
};


export type MATIC_UserliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MATIC_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<MATIC_OrderDirection>;
  where?: InputMaybe<MATIC_LiquidityPosition_filter>;
};

export type MATIC_User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
};

export type MATIC_User_orderBy =
  | 'id'
  | 'liquidityPositions';

export type MATIC__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['MATIC_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
};

/** The type for the top-level _meta field */
export type MATIC__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: MATIC__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type _SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

    }
    export type QueryMaticExchangeSdk = {
  /** null **/
  MATIC_user: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_user'], MaticExchangeTypes.QueryMATIC_userArgs, MeshContext>,
  /** null **/
  MATIC_users: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_users'], MaticExchangeTypes.QueryMATIC_usersArgs, MeshContext>,
  /** null **/
  MATIC_bundle: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_bundle'], MaticExchangeTypes.QueryMATIC_bundleArgs, MeshContext>,
  /** null **/
  MATIC_bundles: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_bundles'], MaticExchangeTypes.QueryMATIC_bundlesArgs, MeshContext>,
  /** null **/
  MATIC_factory: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_factory'], MaticExchangeTypes.QueryMATIC_factoryArgs, MeshContext>,
  /** null **/
  MATIC_factories: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_factories'], MaticExchangeTypes.QueryMATIC_factoriesArgs, MeshContext>,
  /** null **/
  MATIC_hourData: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_hourData'], MaticExchangeTypes.QueryMATIC_hourDataArgs, MeshContext>,
  /** null **/
  MATIC_hourDatas: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_hourDatas'], MaticExchangeTypes.QueryMATIC_hourDatasArgs, MeshContext>,
  /** null **/
  MATIC_dayData: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_dayData'], MaticExchangeTypes.QueryMATIC_dayDataArgs, MeshContext>,
  /** null **/
  MATIC_dayDatas: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_dayDatas'], MaticExchangeTypes.QueryMATIC_dayDatasArgs, MeshContext>,
  /** null **/
  MATIC_token: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_token'], MaticExchangeTypes.QueryMATIC_tokenArgs, MeshContext>,
  /** null **/
  MATIC_tokens: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_tokens'], MaticExchangeTypes.QueryMATIC_tokensArgs, MeshContext>,
  /** null **/
  MATIC_tokenHourData: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_tokenHourData'], MaticExchangeTypes.QueryMATIC_tokenHourDataArgs, MeshContext>,
  /** null **/
  MATIC_tokenHourDatas: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_tokenHourDatas'], MaticExchangeTypes.QueryMATIC_tokenHourDatasArgs, MeshContext>,
  /** null **/
  MATIC_tokenDayData: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_tokenDayData'], MaticExchangeTypes.QueryMATIC_tokenDayDataArgs, MeshContext>,
  /** null **/
  MATIC_tokenDayDatas: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_tokenDayDatas'], MaticExchangeTypes.QueryMATIC_tokenDayDatasArgs, MeshContext>,
  /** null **/
  MATIC_pair: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_pair'], MaticExchangeTypes.QueryMATIC_pairArgs, MeshContext>,
  /** null **/
  MATIC_pairs: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_pairs'], MaticExchangeTypes.QueryMATIC_pairsArgs, MeshContext>,
  /** null **/
  MATIC_pairHourData: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_pairHourData'], MaticExchangeTypes.QueryMATIC_pairHourDataArgs, MeshContext>,
  /** null **/
  MATIC_pairHourDatas: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_pairHourDatas'], MaticExchangeTypes.QueryMATIC_pairHourDatasArgs, MeshContext>,
  /** null **/
  MATIC_pairDayData: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_pairDayData'], MaticExchangeTypes.QueryMATIC_pairDayDataArgs, MeshContext>,
  /** null **/
  MATIC_pairDayDatas: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_pairDayDatas'], MaticExchangeTypes.QueryMATIC_pairDayDatasArgs, MeshContext>,
  /** null **/
  MATIC_liquidityPosition: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_liquidityPosition'], MaticExchangeTypes.QueryMATIC_liquidityPositionArgs, MeshContext>,
  /** null **/
  MATIC_liquidityPositions: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_liquidityPositions'], MaticExchangeTypes.QueryMATIC_liquidityPositionsArgs, MeshContext>,
  /** null **/
  MATIC_liquidityPositionSnapshot: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_liquidityPositionSnapshot'], MaticExchangeTypes.QueryMATIC_liquidityPositionSnapshotArgs, MeshContext>,
  /** null **/
  MATIC_liquidityPositionSnapshots: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_liquidityPositionSnapshots'], MaticExchangeTypes.QueryMATIC_liquidityPositionSnapshotsArgs, MeshContext>,
  /** null **/
  MATIC_transaction: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_transaction'], MaticExchangeTypes.QueryMATIC_transactionArgs, MeshContext>,
  /** null **/
  MATIC_transactions: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_transactions'], MaticExchangeTypes.QueryMATIC_transactionsArgs, MeshContext>,
  /** null **/
  MATIC_mint: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_mint'], MaticExchangeTypes.QueryMATIC_mintArgs, MeshContext>,
  /** null **/
  MATIC_mints: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_mints'], MaticExchangeTypes.QueryMATIC_mintsArgs, MeshContext>,
  /** null **/
  MATIC_burn: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_burn'], MaticExchangeTypes.QueryMATIC_burnArgs, MeshContext>,
  /** null **/
  MATIC_burns: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_burns'], MaticExchangeTypes.QueryMATIC_burnsArgs, MeshContext>,
  /** null **/
  MATIC_swap: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_swap'], MaticExchangeTypes.QueryMATIC_swapArgs, MeshContext>,
  /** null **/
  MATIC_swaps: InContextSdkMethod<MaticExchangeTypes.Query['MATIC_swaps'], MaticExchangeTypes.QueryMATIC_swapsArgs, MeshContext>,
  /** Access to subgraph metadata **/
  MATIC__meta: InContextSdkMethod<MaticExchangeTypes.Query['MATIC__meta'], MaticExchangeTypes.QueryMATIC__metaArgs, MeshContext>
};

export type MutationMaticExchangeSdk = {

};

export type SubscriptionMaticExchangeSdk = {
  /** null **/
  MATIC_user: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_user'], MaticExchangeTypes.SubscriptionMATIC_userArgs, MeshContext>,
  /** null **/
  MATIC_users: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_users'], MaticExchangeTypes.SubscriptionMATIC_usersArgs, MeshContext>,
  /** null **/
  MATIC_bundle: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_bundle'], MaticExchangeTypes.SubscriptionMATIC_bundleArgs, MeshContext>,
  /** null **/
  MATIC_bundles: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_bundles'], MaticExchangeTypes.SubscriptionMATIC_bundlesArgs, MeshContext>,
  /** null **/
  MATIC_factory: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_factory'], MaticExchangeTypes.SubscriptionMATIC_factoryArgs, MeshContext>,
  /** null **/
  MATIC_factories: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_factories'], MaticExchangeTypes.SubscriptionMATIC_factoriesArgs, MeshContext>,
  /** null **/
  MATIC_hourData: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_hourData'], MaticExchangeTypes.SubscriptionMATIC_hourDataArgs, MeshContext>,
  /** null **/
  MATIC_hourDatas: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_hourDatas'], MaticExchangeTypes.SubscriptionMATIC_hourDatasArgs, MeshContext>,
  /** null **/
  MATIC_dayData: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_dayData'], MaticExchangeTypes.SubscriptionMATIC_dayDataArgs, MeshContext>,
  /** null **/
  MATIC_dayDatas: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_dayDatas'], MaticExchangeTypes.SubscriptionMATIC_dayDatasArgs, MeshContext>,
  /** null **/
  MATIC_token: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_token'], MaticExchangeTypes.SubscriptionMATIC_tokenArgs, MeshContext>,
  /** null **/
  MATIC_tokens: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_tokens'], MaticExchangeTypes.SubscriptionMATIC_tokensArgs, MeshContext>,
  /** null **/
  MATIC_tokenHourData: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_tokenHourData'], MaticExchangeTypes.SubscriptionMATIC_tokenHourDataArgs, MeshContext>,
  /** null **/
  MATIC_tokenHourDatas: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_tokenHourDatas'], MaticExchangeTypes.SubscriptionMATIC_tokenHourDatasArgs, MeshContext>,
  /** null **/
  MATIC_tokenDayData: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_tokenDayData'], MaticExchangeTypes.SubscriptionMATIC_tokenDayDataArgs, MeshContext>,
  /** null **/
  MATIC_tokenDayDatas: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_tokenDayDatas'], MaticExchangeTypes.SubscriptionMATIC_tokenDayDatasArgs, MeshContext>,
  /** null **/
  MATIC_pair: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_pair'], MaticExchangeTypes.SubscriptionMATIC_pairArgs, MeshContext>,
  /** null **/
  MATIC_pairs: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_pairs'], MaticExchangeTypes.SubscriptionMATIC_pairsArgs, MeshContext>,
  /** null **/
  MATIC_pairHourData: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_pairHourData'], MaticExchangeTypes.SubscriptionMATIC_pairHourDataArgs, MeshContext>,
  /** null **/
  MATIC_pairHourDatas: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_pairHourDatas'], MaticExchangeTypes.SubscriptionMATIC_pairHourDatasArgs, MeshContext>,
  /** null **/
  MATIC_pairDayData: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_pairDayData'], MaticExchangeTypes.SubscriptionMATIC_pairDayDataArgs, MeshContext>,
  /** null **/
  MATIC_pairDayDatas: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_pairDayDatas'], MaticExchangeTypes.SubscriptionMATIC_pairDayDatasArgs, MeshContext>,
  /** null **/
  MATIC_liquidityPosition: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_liquidityPosition'], MaticExchangeTypes.SubscriptionMATIC_liquidityPositionArgs, MeshContext>,
  /** null **/
  MATIC_liquidityPositions: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_liquidityPositions'], MaticExchangeTypes.SubscriptionMATIC_liquidityPositionsArgs, MeshContext>,
  /** null **/
  MATIC_liquidityPositionSnapshot: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_liquidityPositionSnapshot'], MaticExchangeTypes.SubscriptionMATIC_liquidityPositionSnapshotArgs, MeshContext>,
  /** null **/
  MATIC_liquidityPositionSnapshots: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_liquidityPositionSnapshots'], MaticExchangeTypes.SubscriptionMATIC_liquidityPositionSnapshotsArgs, MeshContext>,
  /** null **/
  MATIC_transaction: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_transaction'], MaticExchangeTypes.SubscriptionMATIC_transactionArgs, MeshContext>,
  /** null **/
  MATIC_transactions: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_transactions'], MaticExchangeTypes.SubscriptionMATIC_transactionsArgs, MeshContext>,
  /** null **/
  MATIC_mint: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_mint'], MaticExchangeTypes.SubscriptionMATIC_mintArgs, MeshContext>,
  /** null **/
  MATIC_mints: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_mints'], MaticExchangeTypes.SubscriptionMATIC_mintsArgs, MeshContext>,
  /** null **/
  MATIC_burn: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_burn'], MaticExchangeTypes.SubscriptionMATIC_burnArgs, MeshContext>,
  /** null **/
  MATIC_burns: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_burns'], MaticExchangeTypes.SubscriptionMATIC_burnsArgs, MeshContext>,
  /** null **/
  MATIC_swap: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_swap'], MaticExchangeTypes.SubscriptionMATIC_swapArgs, MeshContext>,
  /** null **/
  MATIC_swaps: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC_swaps'], MaticExchangeTypes.SubscriptionMATIC_swapsArgs, MeshContext>,
  /** Access to subgraph metadata **/
  MATIC__meta: InContextSdkMethod<MaticExchangeTypes.Subscription['MATIC__meta'], MaticExchangeTypes.SubscriptionMATIC__metaArgs, MeshContext>
};


    export namespace BscExchangeTypes {
      export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  BSC_BigDecimal: any;
  BigInt: any;
  BSC_Bytes: any;
};

/** The block at which the query should be executed. */
export type BSC_Block_height = {
  /** Value containing a block hash */
  hash?: InputMaybe<Scalars['BSC_Bytes']>;
  /** Value containing a block number */
  number?: InputMaybe<Scalars['Int']>;
  /**
   * Value containing the minimum block number.
   * In the case of `number_gte`, the query will be executed on the latest block only if
   * the subgraph has progressed to or past the minimum block number.
   * Defaults to the latest block when omitted.
   *
   */
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type BSC_Bundle = {
  id: Scalars['ID'];
  ethPrice: Scalars['BSC_BigDecimal'];
};

export type BSC_Bundle_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  ethPrice?: InputMaybe<Scalars['BSC_BigDecimal']>;
  ethPrice_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  ethPrice_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  ethPrice_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  ethPrice_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  ethPrice_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  ethPrice_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  ethPrice_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
};

export type BSC_Bundle_orderBy =
  | 'id'
  | 'ethPrice';

export type BSC_Burn = {
  id: Scalars['ID'];
  transaction: BSC_Transaction;
  timestamp: Scalars['BigInt'];
  pair: BSC_Pair;
  liquidity: Scalars['BSC_BigDecimal'];
  sender?: Maybe<Scalars['BSC_Bytes']>;
  amount0?: Maybe<Scalars['BSC_BigDecimal']>;
  amount1?: Maybe<Scalars['BSC_BigDecimal']>;
  to?: Maybe<Scalars['BSC_Bytes']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['BSC_BigDecimal']>;
  complete: Scalars['Boolean'];
  feeTo?: Maybe<Scalars['BSC_Bytes']>;
  feeLiquidity?: Maybe<Scalars['BSC_BigDecimal']>;
};

export type BSC_Burn_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidity?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  sender?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_not?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  amount0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  to?: InputMaybe<Scalars['BSC_Bytes']>;
  to_not?: InputMaybe<Scalars['BSC_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  to_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  complete?: InputMaybe<Scalars['Boolean']>;
  complete_not?: InputMaybe<Scalars['Boolean']>;
  complete_in?: InputMaybe<Array<Scalars['Boolean']>>;
  complete_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  feeTo?: InputMaybe<Scalars['BSC_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['BSC_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
};

export type BSC_Burn_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'to'
  | 'logIndex'
  | 'amountUSD'
  | 'complete'
  | 'feeTo'
  | 'feeLiquidity';

export type BSC_DayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: BSC_Factory;
  volumeETH: Scalars['BSC_BigDecimal'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  untrackedVolume: Scalars['BSC_BigDecimal'];
  liquidityETH: Scalars['BSC_BigDecimal'];
  liquidityUSD: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type BSC_DayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type BSC_DayData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type BSC_Factory = {
  id: Scalars['ID'];
  pairCount: Scalars['BigInt'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  volumeETH: Scalars['BSC_BigDecimal'];
  untrackedVolumeUSD: Scalars['BSC_BigDecimal'];
  liquidityUSD: Scalars['BSC_BigDecimal'];
  liquidityETH: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
  tokenCount: Scalars['BigInt'];
  userCount: Scalars['BigInt'];
  pairs: Array<BSC_Pair>;
  tokens: Array<BSC_Token>;
  hourData: Array<BSC_HourData>;
  dayData: Array<BSC_DayData>;
};


export type BSC_FactorypairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Pair_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Pair_filter>;
};


export type BSC_FactorytokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Token_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Token_filter>;
};


export type BSC_FactoryhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_HourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_HourData_filter>;
};


export type BSC_FactorydayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_DayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_DayData_filter>;
};

export type BSC_Factory_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  pairCount?: InputMaybe<Scalars['BigInt']>;
  pairCount_not?: InputMaybe<Scalars['BigInt']>;
  pairCount_gt?: InputMaybe<Scalars['BigInt']>;
  pairCount_lt?: InputMaybe<Scalars['BigInt']>;
  pairCount_gte?: InputMaybe<Scalars['BigInt']>;
  pairCount_lte?: InputMaybe<Scalars['BigInt']>;
  pairCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pairCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount?: InputMaybe<Scalars['BigInt']>;
  tokenCount_not?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lt?: InputMaybe<Scalars['BigInt']>;
  tokenCount_gte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_lte?: InputMaybe<Scalars['BigInt']>;
  tokenCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount?: InputMaybe<Scalars['BigInt']>;
  userCount_not?: InputMaybe<Scalars['BigInt']>;
  userCount_gt?: InputMaybe<Scalars['BigInt']>;
  userCount_lt?: InputMaybe<Scalars['BigInt']>;
  userCount_gte?: InputMaybe<Scalars['BigInt']>;
  userCount_lte?: InputMaybe<Scalars['BigInt']>;
  userCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  userCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type BSC_Factory_orderBy =
  | 'id'
  | 'pairCount'
  | 'volumeUSD'
  | 'volumeETH'
  | 'untrackedVolumeUSD'
  | 'liquidityUSD'
  | 'liquidityETH'
  | 'txCount'
  | 'tokenCount'
  | 'userCount'
  | 'pairs'
  | 'tokens'
  | 'hourData'
  | 'dayData';

export type BSC_HourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  factory: BSC_Factory;
  volumeETH: Scalars['BSC_BigDecimal'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  untrackedVolume: Scalars['BSC_BigDecimal'];
  liquidityETH: Scalars['BSC_BigDecimal'];
  liquidityUSD: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type BSC_HourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volumeETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolume?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolume_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolume_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type BSC_HourData_orderBy =
  | 'id'
  | 'date'
  | 'factory'
  | 'volumeETH'
  | 'volumeUSD'
  | 'untrackedVolume'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'txCount';

export type BSC_LiquidityPosition = {
  id: Scalars['ID'];
  user: BSC_User;
  pair: BSC_Pair;
  liquidityTokenBalance: Scalars['BSC_BigDecimal'];
  snapshots: Array<Maybe<BSC_LiquidityPositionSnapshot>>;
  block: Scalars['Int'];
  timestamp: Scalars['Int'];
};


export type BSC_LiquidityPositionsnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_LiquidityPositionSnapshot_filter>;
};

export type BSC_LiquidityPositionSnapshot = {
  id: Scalars['ID'];
  liquidityPosition: BSC_LiquidityPosition;
  timestamp: Scalars['Int'];
  block: Scalars['Int'];
  user: BSC_User;
  pair: BSC_Pair;
  token0PriceUSD: Scalars['BSC_BigDecimal'];
  token1PriceUSD: Scalars['BSC_BigDecimal'];
  reserve0: Scalars['BSC_BigDecimal'];
  reserve1: Scalars['BSC_BigDecimal'];
  reserveUSD: Scalars['BSC_BigDecimal'];
  liquidityTokenTotalSupply: Scalars['BSC_BigDecimal'];
  liquidityTokenBalance: Scalars['BSC_BigDecimal'];
};

export type BSC_LiquidityPositionSnapshot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityPosition?: InputMaybe<Scalars['String']>;
  liquidityPosition_not?: InputMaybe<Scalars['String']>;
  liquidityPosition_gt?: InputMaybe<Scalars['String']>;
  liquidityPosition_lt?: InputMaybe<Scalars['String']>;
  liquidityPosition_gte?: InputMaybe<Scalars['String']>;
  liquidityPosition_lte?: InputMaybe<Scalars['String']>;
  liquidityPosition_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityPosition_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0PriceUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0PriceUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0PriceUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0PriceUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0PriceUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0PriceUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0PriceUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  token0PriceUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  token1PriceUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1PriceUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1PriceUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1PriceUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1PriceUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1PriceUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1PriceUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  token1PriceUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityTokenTotalSupply?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenTotalSupply_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenTotalSupply_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenTotalSupply_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenTotalSupply_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenTotalSupply_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenTotalSupply_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityTokenTotalSupply_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityTokenBalance?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
};

export type BSC_LiquidityPositionSnapshot_orderBy =
  | 'id'
  | 'liquidityPosition'
  | 'timestamp'
  | 'block'
  | 'user'
  | 'pair'
  | 'token0PriceUSD'
  | 'token1PriceUSD'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'liquidityTokenTotalSupply'
  | 'liquidityTokenBalance';

export type BSC_LiquidityPosition_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  user?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityTokenBalance?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityTokenBalance_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityTokenBalance_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  block?: InputMaybe<Scalars['Int']>;
  block_not?: InputMaybe<Scalars['Int']>;
  block_gt?: InputMaybe<Scalars['Int']>;
  block_lt?: InputMaybe<Scalars['Int']>;
  block_gte?: InputMaybe<Scalars['Int']>;
  block_lte?: InputMaybe<Scalars['Int']>;
  block_in?: InputMaybe<Array<Scalars['Int']>>;
  block_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export type BSC_LiquidityPosition_orderBy =
  | 'id'
  | 'user'
  | 'pair'
  | 'liquidityTokenBalance'
  | 'snapshots'
  | 'block'
  | 'timestamp';

export type BSC_Mint = {
  id: Scalars['ID'];
  transaction: BSC_Transaction;
  timestamp: Scalars['BigInt'];
  pair: BSC_Pair;
  to: Scalars['BSC_Bytes'];
  liquidity: Scalars['BSC_BigDecimal'];
  sender?: Maybe<Scalars['BSC_Bytes']>;
  amount0?: Maybe<Scalars['BSC_BigDecimal']>;
  amount1?: Maybe<Scalars['BSC_BigDecimal']>;
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD?: Maybe<Scalars['BSC_BigDecimal']>;
  feeTo?: Maybe<Scalars['BSC_Bytes']>;
  feeLiquidity?: Maybe<Scalars['BSC_BigDecimal']>;
};

export type BSC_Mint_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to?: InputMaybe<Scalars['BSC_Bytes']>;
  to_not?: InputMaybe<Scalars['BSC_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  to_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  liquidity?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  sender?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_not?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  amount0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  feeTo?: InputMaybe<Scalars['BSC_Bytes']>;
  feeTo_not?: InputMaybe<Scalars['BSC_Bytes']>;
  feeTo_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  feeTo_not_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  feeTo_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  feeTo_not_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  feeLiquidity?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  feeLiquidity_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  feeLiquidity_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
};

export type BSC_Mint_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'to'
  | 'liquidity'
  | 'sender'
  | 'amount0'
  | 'amount1'
  | 'logIndex'
  | 'amountUSD'
  | 'feeTo'
  | 'feeLiquidity';

/** Defines the order direction, either ascending or descending */
export type BSC_OrderDirection =
  | 'asc'
  | 'desc';

export type BSC_Pair = {
  id: Scalars['ID'];
  factory: BSC_Factory;
  name: Scalars['String'];
  token0: BSC_Token;
  token1: BSC_Token;
  reserve0: Scalars['BSC_BigDecimal'];
  reserve1: Scalars['BSC_BigDecimal'];
  totalSupply: Scalars['BSC_BigDecimal'];
  reserveETH: Scalars['BSC_BigDecimal'];
  reserveUSD: Scalars['BSC_BigDecimal'];
  trackedReserveETH: Scalars['BSC_BigDecimal'];
  token0Price: Scalars['BSC_BigDecimal'];
  token1Price: Scalars['BSC_BigDecimal'];
  volumeToken0: Scalars['BSC_BigDecimal'];
  volumeToken1: Scalars['BSC_BigDecimal'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  untrackedVolumeUSD: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidityProviderCount: Scalars['BigInt'];
  liquidityPositions: Array<BSC_LiquidityPosition>;
  liquidityPositionSnapshots: Array<BSC_LiquidityPositionSnapshot>;
  dayData: Array<BSC_PairDayData>;
  hourData: Array<BSC_PairHourData>;
  mints: Array<BSC_Mint>;
  burns: Array<BSC_Burn>;
  swaps: Array<BSC_Swap>;
  timestamp: Scalars['BigInt'];
  block: Scalars['BigInt'];
};


export type BSC_PairliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_LiquidityPosition_filter>;
};


export type BSC_PairliquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_LiquidityPositionSnapshot_filter>;
};


export type BSC_PairdayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_PairDayData_filter>;
};


export type BSC_PairhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_PairHourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_PairHourData_filter>;
};


export type BSC_PairmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Mint_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Mint_filter>;
};


export type BSC_PairburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Burn_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Burn_filter>;
};


export type BSC_PairswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Swap_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Swap_filter>;
};

export type BSC_PairDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: BSC_Pair;
  token0: BSC_Token;
  token1: BSC_Token;
  reserve0: Scalars['BSC_BigDecimal'];
  reserve1: Scalars['BSC_BigDecimal'];
  totalSupply: Scalars['BSC_BigDecimal'];
  reserveUSD: Scalars['BSC_BigDecimal'];
  volumeToken0: Scalars['BSC_BigDecimal'];
  volumeToken1: Scalars['BSC_BigDecimal'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type BSC_PairDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type BSC_PairDayData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type BSC_PairHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  pair: BSC_Pair;
  reserve0: Scalars['BSC_BigDecimal'];
  reserve1: Scalars['BSC_BigDecimal'];
  reserveUSD: Scalars['BSC_BigDecimal'];
  volumeToken0: Scalars['BSC_BigDecimal'];
  volumeToken1: Scalars['BSC_BigDecimal'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
};

export type BSC_PairHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type BSC_PairHourData_orderBy =
  | 'id'
  | 'date'
  | 'pair'
  | 'reserve0'
  | 'reserve1'
  | 'reserveUSD'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'txCount';

export type BSC_Pair_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reserve0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserve1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserve1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  totalSupply?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  reserveUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  reserveUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  trackedReserveETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  trackedReserveETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  trackedReserveETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  trackedReserveETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  trackedReserveETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  trackedReserveETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  trackedReserveETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  trackedReserveETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  token0Price?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0Price_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0Price_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0Price_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0Price_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0Price_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token0Price_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  token0Price_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  token1Price?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1Price_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1Price_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1Price_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1Price_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1Price_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  token1Price_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  token1Price_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken0?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken0_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken0_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken1?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeToken1_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeToken1_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_not?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lt?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_gte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_lte?: InputMaybe<Scalars['BigInt']>;
  liquidityProviderCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidityProviderCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
};

export type BSC_Pair_orderBy =
  | 'id'
  | 'factory'
  | 'name'
  | 'token0'
  | 'token1'
  | 'reserve0'
  | 'reserve1'
  | 'totalSupply'
  | 'reserveETH'
  | 'reserveUSD'
  | 'trackedReserveETH'
  | 'token0Price'
  | 'token1Price'
  | 'volumeToken0'
  | 'volumeToken1'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidityProviderCount'
  | 'liquidityPositions'
  | 'liquidityPositionSnapshots'
  | 'dayData'
  | 'hourData'
  | 'mints'
  | 'burns'
  | 'swaps'
  | 'timestamp'
  | 'block';

export type Query = {
  BSC_user?: Maybe<BSC_User>;
  BSC_users: Array<BSC_User>;
  BSC_bundle?: Maybe<BSC_Bundle>;
  BSC_bundles: Array<BSC_Bundle>;
  BSC_factory?: Maybe<BSC_Factory>;
  BSC_factories: Array<BSC_Factory>;
  BSC_hourData?: Maybe<BSC_HourData>;
  BSC_hourDatas: Array<BSC_HourData>;
  BSC_dayData?: Maybe<BSC_DayData>;
  BSC_dayDatas: Array<BSC_DayData>;
  BSC_token?: Maybe<BSC_Token>;
  BSC_tokens: Array<BSC_Token>;
  BSC_tokenHourData?: Maybe<BSC_TokenHourData>;
  BSC_tokenHourDatas: Array<BSC_TokenHourData>;
  BSC_tokenDayData?: Maybe<BSC_TokenDayData>;
  BSC_tokenDayDatas: Array<BSC_TokenDayData>;
  BSC_pair?: Maybe<BSC_Pair>;
  BSC_pairs: Array<BSC_Pair>;
  BSC_pairHourData?: Maybe<BSC_PairHourData>;
  BSC_pairHourDatas: Array<BSC_PairHourData>;
  BSC_pairDayData?: Maybe<BSC_PairDayData>;
  BSC_pairDayDatas: Array<BSC_PairDayData>;
  BSC_liquidityPosition?: Maybe<BSC_LiquidityPosition>;
  BSC_liquidityPositions: Array<BSC_LiquidityPosition>;
  BSC_liquidityPositionSnapshot?: Maybe<BSC_LiquidityPositionSnapshot>;
  BSC_liquidityPositionSnapshots: Array<BSC_LiquidityPositionSnapshot>;
  BSC_transaction?: Maybe<BSC_Transaction>;
  BSC_transactions: Array<BSC_Transaction>;
  BSC_mint?: Maybe<BSC_Mint>;
  BSC_mints: Array<BSC_Mint>;
  BSC_burn?: Maybe<BSC_Burn>;
  BSC_burns: Array<BSC_Burn>;
  BSC_swap?: Maybe<BSC_Swap>;
  BSC_swaps: Array<BSC_Swap>;
  /** Access to subgraph metadata */
  BSC__meta?: Maybe<BSC__Meta_>;
};


export type QueryBSC_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_User_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_User_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Bundle_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Bundle_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Factory_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Factory_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_HourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_HourData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_DayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_DayData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Token_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Token_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_TokenHourData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_TokenDayData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Pair_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Pair_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_PairHourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_PairHourData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_PairDayData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_LiquidityPosition_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Transaction_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Transaction_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Mint_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Mint_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Burn_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Burn_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Swap_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Swap_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type QueryBSC__metaArgs = {
  block?: InputMaybe<BSC_Block_height>;
};

export type Subscription = {
  BSC_user?: Maybe<BSC_User>;
  BSC_users: Array<BSC_User>;
  BSC_bundle?: Maybe<BSC_Bundle>;
  BSC_bundles: Array<BSC_Bundle>;
  BSC_factory?: Maybe<BSC_Factory>;
  BSC_factories: Array<BSC_Factory>;
  BSC_hourData?: Maybe<BSC_HourData>;
  BSC_hourDatas: Array<BSC_HourData>;
  BSC_dayData?: Maybe<BSC_DayData>;
  BSC_dayDatas: Array<BSC_DayData>;
  BSC_token?: Maybe<BSC_Token>;
  BSC_tokens: Array<BSC_Token>;
  BSC_tokenHourData?: Maybe<BSC_TokenHourData>;
  BSC_tokenHourDatas: Array<BSC_TokenHourData>;
  BSC_tokenDayData?: Maybe<BSC_TokenDayData>;
  BSC_tokenDayDatas: Array<BSC_TokenDayData>;
  BSC_pair?: Maybe<BSC_Pair>;
  BSC_pairs: Array<BSC_Pair>;
  BSC_pairHourData?: Maybe<BSC_PairHourData>;
  BSC_pairHourDatas: Array<BSC_PairHourData>;
  BSC_pairDayData?: Maybe<BSC_PairDayData>;
  BSC_pairDayDatas: Array<BSC_PairDayData>;
  BSC_liquidityPosition?: Maybe<BSC_LiquidityPosition>;
  BSC_liquidityPositions: Array<BSC_LiquidityPosition>;
  BSC_liquidityPositionSnapshot?: Maybe<BSC_LiquidityPositionSnapshot>;
  BSC_liquidityPositionSnapshots: Array<BSC_LiquidityPositionSnapshot>;
  BSC_transaction?: Maybe<BSC_Transaction>;
  BSC_transactions: Array<BSC_Transaction>;
  BSC_mint?: Maybe<BSC_Mint>;
  BSC_mints: Array<BSC_Mint>;
  BSC_burn?: Maybe<BSC_Burn>;
  BSC_burns: Array<BSC_Burn>;
  BSC_swap?: Maybe<BSC_Swap>;
  BSC_swaps: Array<BSC_Swap>;
  /** Access to subgraph metadata */
  BSC__meta?: Maybe<BSC__Meta_>;
};


export type SubscriptionBSC_userArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_usersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_User_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_User_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_bundleArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_bundlesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Bundle_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Bundle_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_factoryArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_factoriesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Factory_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Factory_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_hourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_hourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_HourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_HourData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_dayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_dayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_DayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_DayData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_tokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_tokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Token_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Token_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_tokenHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_tokenHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_TokenHourData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_tokenDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_tokenDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_TokenDayData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_pairArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_pairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Pair_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Pair_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_pairHourDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_pairHourDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_PairHourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_PairHourData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_pairDayDataArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_pairDayDatasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_PairDayData_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_liquidityPositionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_liquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_LiquidityPosition_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_liquidityPositionSnapshotArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_liquidityPositionSnapshotsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_LiquidityPositionSnapshot_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_LiquidityPositionSnapshot_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_transactionArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_transactionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Transaction_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Transaction_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_mintArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_mintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Mint_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Mint_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_burnArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_burnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Burn_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Burn_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_swapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC_swapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Swap_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Swap_filter>;
  block?: InputMaybe<BSC_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type SubscriptionBSC__metaArgs = {
  block?: InputMaybe<BSC_Block_height>;
};

export type BSC_Swap = {
  id: Scalars['ID'];
  transaction: BSC_Transaction;
  timestamp: Scalars['BigInt'];
  pair: BSC_Pair;
  sender: Scalars['BSC_Bytes'];
  amount0In: Scalars['BSC_BigDecimal'];
  amount1In: Scalars['BSC_BigDecimal'];
  amount0Out: Scalars['BSC_BigDecimal'];
  amount1Out: Scalars['BSC_BigDecimal'];
  to: Scalars['BSC_Bytes'];
  logIndex?: Maybe<Scalars['BigInt']>;
  amountUSD: Scalars['BSC_BigDecimal'];
};

export type BSC_Swap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transaction?: InputMaybe<Scalars['String']>;
  transaction_not?: InputMaybe<Scalars['String']>;
  transaction_gt?: InputMaybe<Scalars['String']>;
  transaction_lt?: InputMaybe<Scalars['String']>;
  transaction_gte?: InputMaybe<Scalars['String']>;
  transaction_lte?: InputMaybe<Scalars['String']>;
  transaction_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['String']>>;
  transaction_contains?: InputMaybe<Scalars['String']>;
  transaction_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_contains?: InputMaybe<Scalars['String']>;
  transaction_not_contains_nocase?: InputMaybe<Scalars['String']>;
  transaction_starts_with?: InputMaybe<Scalars['String']>;
  transaction_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with?: InputMaybe<Scalars['String']>;
  transaction_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_ends_with?: InputMaybe<Scalars['String']>;
  transaction_ends_with_nocase?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with?: InputMaybe<Scalars['String']>;
  transaction_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pair?: InputMaybe<Scalars['String']>;
  pair_not?: InputMaybe<Scalars['String']>;
  pair_gt?: InputMaybe<Scalars['String']>;
  pair_lt?: InputMaybe<Scalars['String']>;
  pair_gte?: InputMaybe<Scalars['String']>;
  pair_lte?: InputMaybe<Scalars['String']>;
  pair_in?: InputMaybe<Array<Scalars['String']>>;
  pair_not_in?: InputMaybe<Array<Scalars['String']>>;
  pair_contains?: InputMaybe<Scalars['String']>;
  pair_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_not_contains?: InputMaybe<Scalars['String']>;
  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;
  pair_starts_with?: InputMaybe<Scalars['String']>;
  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_starts_with?: InputMaybe<Scalars['String']>;
  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  pair_ends_with?: InputMaybe<Scalars['String']>;
  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;
  pair_not_ends_with?: InputMaybe<Scalars['String']>;
  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_not?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  sender_not_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  sender_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  sender_not_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  amount0In?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0In_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0In_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0In_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0In_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0In_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0In_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount0In_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount1In?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1In_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1In_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1In_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1In_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1In_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1In_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount1In_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount0Out?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0Out_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0Out_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0Out_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0Out_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0Out_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount0Out_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount0Out_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount1Out?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1Out_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1Out_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1Out_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1Out_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1Out_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amount1Out_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amount1Out_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  to?: InputMaybe<Scalars['BSC_Bytes']>;
  to_not?: InputMaybe<Scalars['BSC_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['BSC_Bytes']>>;
  to_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['BSC_Bytes']>;
  logIndex?: InputMaybe<Scalars['BigInt']>;
  logIndex_not?: InputMaybe<Scalars['BigInt']>;
  logIndex_gt?: InputMaybe<Scalars['BigInt']>;
  logIndex_lt?: InputMaybe<Scalars['BigInt']>;
  logIndex_gte?: InputMaybe<Scalars['BigInt']>;
  logIndex_lte?: InputMaybe<Scalars['BigInt']>;
  logIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
  logIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amountUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  amountUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  amountUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
};

export type BSC_Swap_orderBy =
  | 'id'
  | 'transaction'
  | 'timestamp'
  | 'pair'
  | 'sender'
  | 'amount0In'
  | 'amount1In'
  | 'amount0Out'
  | 'amount1Out'
  | 'to'
  | 'logIndex'
  | 'amountUSD';

export type BSC_Token = {
  id: Scalars['ID'];
  factory: BSC_Factory;
  symbol: Scalars['String'];
  name: Scalars['String'];
  decimals: Scalars['BigInt'];
  totalSupply: Scalars['BigInt'];
  volume: Scalars['BSC_BigDecimal'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  untrackedVolumeUSD: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['BSC_BigDecimal'];
  derivedETH: Scalars['BSC_BigDecimal'];
  whitelistPairs: Array<BSC_Pair>;
  hourData: Array<BSC_TokenHourData>;
  dayData: Array<BSC_TokenDayData>;
  basePairs: Array<BSC_Pair>;
  quotePairs: Array<BSC_Pair>;
  basePairsDayData: Array<BSC_PairDayData>;
  quotePairsDayData: Array<BSC_PairDayData>;
};


export type BSC_TokenwhitelistPairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Pair_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Pair_filter>;
};


export type BSC_TokenhourDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_TokenHourData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_TokenHourData_filter>;
};


export type BSC_TokendayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_TokenDayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_TokenDayData_filter>;
};


export type BSC_TokenbasePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Pair_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Pair_filter>;
};


export type BSC_TokenquotePairsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Pair_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Pair_filter>;
};


export type BSC_TokenbasePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_PairDayData_filter>;
};


export type BSC_TokenquotePairsDayDataArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_PairDayData_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_PairDayData_filter>;
};

export type BSC_TokenDayData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: BSC_Token;
  volume: Scalars['BSC_BigDecimal'];
  volumeETH: Scalars['BSC_BigDecimal'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['BSC_BigDecimal'];
  liquidityETH: Scalars['BSC_BigDecimal'];
  liquidityUSD: Scalars['BSC_BigDecimal'];
  priceUSD: Scalars['BSC_BigDecimal'];
};

export type BSC_TokenDayData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
};

export type BSC_TokenDayData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type BSC_TokenHourData = {
  id: Scalars['ID'];
  date: Scalars['Int'];
  token: BSC_Token;
  volume: Scalars['BSC_BigDecimal'];
  volumeETH: Scalars['BSC_BigDecimal'];
  volumeUSD: Scalars['BSC_BigDecimal'];
  txCount: Scalars['BigInt'];
  liquidity: Scalars['BSC_BigDecimal'];
  liquidityETH: Scalars['BSC_BigDecimal'];
  liquidityUSD: Scalars['BSC_BigDecimal'];
  priceUSD: Scalars['BSC_BigDecimal'];
};

export type BSC_TokenHourData_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  date?: InputMaybe<Scalars['Int']>;
  date_not?: InputMaybe<Scalars['Int']>;
  date_gt?: InputMaybe<Scalars['Int']>;
  date_lt?: InputMaybe<Scalars['Int']>;
  date_gte?: InputMaybe<Scalars['Int']>;
  date_lte?: InputMaybe<Scalars['Int']>;
  date_in?: InputMaybe<Array<Scalars['Int']>>;
  date_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token?: InputMaybe<Scalars['String']>;
  token_not?: InputMaybe<Scalars['String']>;
  token_gt?: InputMaybe<Scalars['String']>;
  token_lt?: InputMaybe<Scalars['String']>;
  token_gte?: InputMaybe<Scalars['String']>;
  token_lte?: InputMaybe<Scalars['String']>;
  token_in?: InputMaybe<Array<Scalars['String']>>;
  token_not_in?: InputMaybe<Array<Scalars['String']>>;
  token_contains?: InputMaybe<Scalars['String']>;
  token_contains_nocase?: InputMaybe<Scalars['String']>;
  token_not_contains?: InputMaybe<Scalars['String']>;
  token_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token_starts_with?: InputMaybe<Scalars['String']>;
  token_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_starts_with?: InputMaybe<Scalars['String']>;
  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token_ends_with?: InputMaybe<Scalars['String']>;
  token_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token_not_ends_with?: InputMaybe<Scalars['String']>;
  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  volume?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidityUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidityUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  priceUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  priceUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  priceUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
};

export type BSC_TokenHourData_orderBy =
  | 'id'
  | 'date'
  | 'token'
  | 'volume'
  | 'volumeETH'
  | 'volumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'liquidityETH'
  | 'liquidityUSD'
  | 'priceUSD';

export type BSC_Token_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  factory?: InputMaybe<Scalars['String']>;
  factory_not?: InputMaybe<Scalars['String']>;
  factory_gt?: InputMaybe<Scalars['String']>;
  factory_lt?: InputMaybe<Scalars['String']>;
  factory_gte?: InputMaybe<Scalars['String']>;
  factory_lte?: InputMaybe<Scalars['String']>;
  factory_in?: InputMaybe<Array<Scalars['String']>>;
  factory_not_in?: InputMaybe<Array<Scalars['String']>>;
  factory_contains?: InputMaybe<Scalars['String']>;
  factory_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_not_contains?: InputMaybe<Scalars['String']>;
  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;
  factory_starts_with?: InputMaybe<Scalars['String']>;
  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_starts_with?: InputMaybe<Scalars['String']>;
  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  factory_ends_with?: InputMaybe<Scalars['String']>;
  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;
  factory_not_ends_with?: InputMaybe<Scalars['String']>;
  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  decimals?: InputMaybe<Scalars['BigInt']>;
  decimals_not?: InputMaybe<Scalars['BigInt']>;
  decimals_gt?: InputMaybe<Scalars['BigInt']>;
  decimals_lt?: InputMaybe<Scalars['BigInt']>;
  decimals_gte?: InputMaybe<Scalars['BigInt']>;
  decimals_lte?: InputMaybe<Scalars['BigInt']>;
  decimals_in?: InputMaybe<Array<Scalars['BigInt']>>;
  decimals_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply?: InputMaybe<Scalars['BigInt']>;
  totalSupply_not?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lt?: InputMaybe<Scalars['BigInt']>;
  totalSupply_gte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_lte?: InputMaybe<Scalars['BigInt']>;
  totalSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  volumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  volumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolumeUSD?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  untrackedVolumeUSD_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  untrackedVolumeUSD_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  txCount?: InputMaybe<Scalars['BigInt']>;
  txCount_not?: InputMaybe<Scalars['BigInt']>;
  txCount_gt?: InputMaybe<Scalars['BigInt']>;
  txCount_lt?: InputMaybe<Scalars['BigInt']>;
  txCount_gte?: InputMaybe<Scalars['BigInt']>;
  txCount_lte?: InputMaybe<Scalars['BigInt']>;
  txCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  liquidity_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  derivedETH?: InputMaybe<Scalars['BSC_BigDecimal']>;
  derivedETH_not?: InputMaybe<Scalars['BSC_BigDecimal']>;
  derivedETH_gt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  derivedETH_lt?: InputMaybe<Scalars['BSC_BigDecimal']>;
  derivedETH_gte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  derivedETH_lte?: InputMaybe<Scalars['BSC_BigDecimal']>;
  derivedETH_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  derivedETH_not_in?: InputMaybe<Array<Scalars['BSC_BigDecimal']>>;
  whitelistPairs?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains?: InputMaybe<Array<Scalars['String']>>;
  whitelistPairs_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type BSC_Token_orderBy =
  | 'id'
  | 'factory'
  | 'symbol'
  | 'name'
  | 'decimals'
  | 'totalSupply'
  | 'volume'
  | 'volumeUSD'
  | 'untrackedVolumeUSD'
  | 'txCount'
  | 'liquidity'
  | 'derivedETH'
  | 'whitelistPairs'
  | 'hourData'
  | 'dayData'
  | 'basePairs'
  | 'quotePairs'
  | 'basePairsDayData'
  | 'quotePairsDayData';

export type BSC_Transaction = {
  id: Scalars['ID'];
  blockNumber: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  mints: Array<Maybe<BSC_Mint>>;
  burns: Array<Maybe<BSC_Burn>>;
  swaps: Array<Maybe<BSC_Swap>>;
};


export type BSC_TransactionmintsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Mint_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Mint_filter>;
};


export type BSC_TransactionburnsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Burn_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Burn_filter>;
};


export type BSC_TransactionswapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_Swap_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_Swap_filter>;
};

export type BSC_Transaction_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  mints?: InputMaybe<Array<Scalars['String']>>;
  mints_not?: InputMaybe<Array<Scalars['String']>>;
  mints_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains?: InputMaybe<Array<Scalars['String']>>;
  mints_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns?: InputMaybe<Array<Scalars['String']>>;
  burns_not?: InputMaybe<Array<Scalars['String']>>;
  burns_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains?: InputMaybe<Array<Scalars['String']>>;
  burns_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps?: InputMaybe<Array<Scalars['String']>>;
  swaps_not?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains?: InputMaybe<Array<Scalars['String']>>;
  swaps_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export type BSC_Transaction_orderBy =
  | 'id'
  | 'blockNumber'
  | 'timestamp'
  | 'mints'
  | 'burns'
  | 'swaps';

export type BSC_User = {
  id: Scalars['ID'];
  liquidityPositions: Array<BSC_LiquidityPosition>;
};


export type BSC_UserliquidityPositionsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BSC_LiquidityPosition_orderBy>;
  orderDirection?: InputMaybe<BSC_OrderDirection>;
  where?: InputMaybe<BSC_LiquidityPosition_filter>;
};

export type BSC_User_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
};

export type BSC_User_orderBy =
  | 'id'
  | 'liquidityPositions';

export type BSC__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['BSC_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
};

/** The type for the top-level _meta field */
export type BSC__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: BSC__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type _SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

    }
    export type QueryBscExchangeSdk = {
  /** null **/
  BSC_user: InContextSdkMethod<BscExchangeTypes.Query['BSC_user'], BscExchangeTypes.QueryBSC_userArgs, MeshContext>,
  /** null **/
  BSC_users: InContextSdkMethod<BscExchangeTypes.Query['BSC_users'], BscExchangeTypes.QueryBSC_usersArgs, MeshContext>,
  /** null **/
  BSC_bundle: InContextSdkMethod<BscExchangeTypes.Query['BSC_bundle'], BscExchangeTypes.QueryBSC_bundleArgs, MeshContext>,
  /** null **/
  BSC_bundles: InContextSdkMethod<BscExchangeTypes.Query['BSC_bundles'], BscExchangeTypes.QueryBSC_bundlesArgs, MeshContext>,
  /** null **/
  BSC_factory: InContextSdkMethod<BscExchangeTypes.Query['BSC_factory'], BscExchangeTypes.QueryBSC_factoryArgs, MeshContext>,
  /** null **/
  BSC_factories: InContextSdkMethod<BscExchangeTypes.Query['BSC_factories'], BscExchangeTypes.QueryBSC_factoriesArgs, MeshContext>,
  /** null **/
  BSC_hourData: InContextSdkMethod<BscExchangeTypes.Query['BSC_hourData'], BscExchangeTypes.QueryBSC_hourDataArgs, MeshContext>,
  /** null **/
  BSC_hourDatas: InContextSdkMethod<BscExchangeTypes.Query['BSC_hourDatas'], BscExchangeTypes.QueryBSC_hourDatasArgs, MeshContext>,
  /** null **/
  BSC_dayData: InContextSdkMethod<BscExchangeTypes.Query['BSC_dayData'], BscExchangeTypes.QueryBSC_dayDataArgs, MeshContext>,
  /** null **/
  BSC_dayDatas: InContextSdkMethod<BscExchangeTypes.Query['BSC_dayDatas'], BscExchangeTypes.QueryBSC_dayDatasArgs, MeshContext>,
  /** null **/
  BSC_token: InContextSdkMethod<BscExchangeTypes.Query['BSC_token'], BscExchangeTypes.QueryBSC_tokenArgs, MeshContext>,
  /** null **/
  BSC_tokens: InContextSdkMethod<BscExchangeTypes.Query['BSC_tokens'], BscExchangeTypes.QueryBSC_tokensArgs, MeshContext>,
  /** null **/
  BSC_tokenHourData: InContextSdkMethod<BscExchangeTypes.Query['BSC_tokenHourData'], BscExchangeTypes.QueryBSC_tokenHourDataArgs, MeshContext>,
  /** null **/
  BSC_tokenHourDatas: InContextSdkMethod<BscExchangeTypes.Query['BSC_tokenHourDatas'], BscExchangeTypes.QueryBSC_tokenHourDatasArgs, MeshContext>,
  /** null **/
  BSC_tokenDayData: InContextSdkMethod<BscExchangeTypes.Query['BSC_tokenDayData'], BscExchangeTypes.QueryBSC_tokenDayDataArgs, MeshContext>,
  /** null **/
  BSC_tokenDayDatas: InContextSdkMethod<BscExchangeTypes.Query['BSC_tokenDayDatas'], BscExchangeTypes.QueryBSC_tokenDayDatasArgs, MeshContext>,
  /** null **/
  BSC_pair: InContextSdkMethod<BscExchangeTypes.Query['BSC_pair'], BscExchangeTypes.QueryBSC_pairArgs, MeshContext>,
  /** null **/
  BSC_pairs: InContextSdkMethod<BscExchangeTypes.Query['BSC_pairs'], BscExchangeTypes.QueryBSC_pairsArgs, MeshContext>,
  /** null **/
  BSC_pairHourData: InContextSdkMethod<BscExchangeTypes.Query['BSC_pairHourData'], BscExchangeTypes.QueryBSC_pairHourDataArgs, MeshContext>,
  /** null **/
  BSC_pairHourDatas: InContextSdkMethod<BscExchangeTypes.Query['BSC_pairHourDatas'], BscExchangeTypes.QueryBSC_pairHourDatasArgs, MeshContext>,
  /** null **/
  BSC_pairDayData: InContextSdkMethod<BscExchangeTypes.Query['BSC_pairDayData'], BscExchangeTypes.QueryBSC_pairDayDataArgs, MeshContext>,
  /** null **/
  BSC_pairDayDatas: InContextSdkMethod<BscExchangeTypes.Query['BSC_pairDayDatas'], BscExchangeTypes.QueryBSC_pairDayDatasArgs, MeshContext>,
  /** null **/
  BSC_liquidityPosition: InContextSdkMethod<BscExchangeTypes.Query['BSC_liquidityPosition'], BscExchangeTypes.QueryBSC_liquidityPositionArgs, MeshContext>,
  /** null **/
  BSC_liquidityPositions: InContextSdkMethod<BscExchangeTypes.Query['BSC_liquidityPositions'], BscExchangeTypes.QueryBSC_liquidityPositionsArgs, MeshContext>,
  /** null **/
  BSC_liquidityPositionSnapshot: InContextSdkMethod<BscExchangeTypes.Query['BSC_liquidityPositionSnapshot'], BscExchangeTypes.QueryBSC_liquidityPositionSnapshotArgs, MeshContext>,
  /** null **/
  BSC_liquidityPositionSnapshots: InContextSdkMethod<BscExchangeTypes.Query['BSC_liquidityPositionSnapshots'], BscExchangeTypes.QueryBSC_liquidityPositionSnapshotsArgs, MeshContext>,
  /** null **/
  BSC_transaction: InContextSdkMethod<BscExchangeTypes.Query['BSC_transaction'], BscExchangeTypes.QueryBSC_transactionArgs, MeshContext>,
  /** null **/
  BSC_transactions: InContextSdkMethod<BscExchangeTypes.Query['BSC_transactions'], BscExchangeTypes.QueryBSC_transactionsArgs, MeshContext>,
  /** null **/
  BSC_mint: InContextSdkMethod<BscExchangeTypes.Query['BSC_mint'], BscExchangeTypes.QueryBSC_mintArgs, MeshContext>,
  /** null **/
  BSC_mints: InContextSdkMethod<BscExchangeTypes.Query['BSC_mints'], BscExchangeTypes.QueryBSC_mintsArgs, MeshContext>,
  /** null **/
  BSC_burn: InContextSdkMethod<BscExchangeTypes.Query['BSC_burn'], BscExchangeTypes.QueryBSC_burnArgs, MeshContext>,
  /** null **/
  BSC_burns: InContextSdkMethod<BscExchangeTypes.Query['BSC_burns'], BscExchangeTypes.QueryBSC_burnsArgs, MeshContext>,
  /** null **/
  BSC_swap: InContextSdkMethod<BscExchangeTypes.Query['BSC_swap'], BscExchangeTypes.QueryBSC_swapArgs, MeshContext>,
  /** null **/
  BSC_swaps: InContextSdkMethod<BscExchangeTypes.Query['BSC_swaps'], BscExchangeTypes.QueryBSC_swapsArgs, MeshContext>,
  /** Access to subgraph metadata **/
  BSC__meta: InContextSdkMethod<BscExchangeTypes.Query['BSC__meta'], BscExchangeTypes.QueryBSC__metaArgs, MeshContext>
};

export type MutationBscExchangeSdk = {

};

export type SubscriptionBscExchangeSdk = {
  /** null **/
  BSC_user: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_user'], BscExchangeTypes.SubscriptionBSC_userArgs, MeshContext>,
  /** null **/
  BSC_users: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_users'], BscExchangeTypes.SubscriptionBSC_usersArgs, MeshContext>,
  /** null **/
  BSC_bundle: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_bundle'], BscExchangeTypes.SubscriptionBSC_bundleArgs, MeshContext>,
  /** null **/
  BSC_bundles: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_bundles'], BscExchangeTypes.SubscriptionBSC_bundlesArgs, MeshContext>,
  /** null **/
  BSC_factory: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_factory'], BscExchangeTypes.SubscriptionBSC_factoryArgs, MeshContext>,
  /** null **/
  BSC_factories: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_factories'], BscExchangeTypes.SubscriptionBSC_factoriesArgs, MeshContext>,
  /** null **/
  BSC_hourData: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_hourData'], BscExchangeTypes.SubscriptionBSC_hourDataArgs, MeshContext>,
  /** null **/
  BSC_hourDatas: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_hourDatas'], BscExchangeTypes.SubscriptionBSC_hourDatasArgs, MeshContext>,
  /** null **/
  BSC_dayData: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_dayData'], BscExchangeTypes.SubscriptionBSC_dayDataArgs, MeshContext>,
  /** null **/
  BSC_dayDatas: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_dayDatas'], BscExchangeTypes.SubscriptionBSC_dayDatasArgs, MeshContext>,
  /** null **/
  BSC_token: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_token'], BscExchangeTypes.SubscriptionBSC_tokenArgs, MeshContext>,
  /** null **/
  BSC_tokens: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_tokens'], BscExchangeTypes.SubscriptionBSC_tokensArgs, MeshContext>,
  /** null **/
  BSC_tokenHourData: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_tokenHourData'], BscExchangeTypes.SubscriptionBSC_tokenHourDataArgs, MeshContext>,
  /** null **/
  BSC_tokenHourDatas: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_tokenHourDatas'], BscExchangeTypes.SubscriptionBSC_tokenHourDatasArgs, MeshContext>,
  /** null **/
  BSC_tokenDayData: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_tokenDayData'], BscExchangeTypes.SubscriptionBSC_tokenDayDataArgs, MeshContext>,
  /** null **/
  BSC_tokenDayDatas: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_tokenDayDatas'], BscExchangeTypes.SubscriptionBSC_tokenDayDatasArgs, MeshContext>,
  /** null **/
  BSC_pair: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_pair'], BscExchangeTypes.SubscriptionBSC_pairArgs, MeshContext>,
  /** null **/
  BSC_pairs: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_pairs'], BscExchangeTypes.SubscriptionBSC_pairsArgs, MeshContext>,
  /** null **/
  BSC_pairHourData: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_pairHourData'], BscExchangeTypes.SubscriptionBSC_pairHourDataArgs, MeshContext>,
  /** null **/
  BSC_pairHourDatas: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_pairHourDatas'], BscExchangeTypes.SubscriptionBSC_pairHourDatasArgs, MeshContext>,
  /** null **/
  BSC_pairDayData: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_pairDayData'], BscExchangeTypes.SubscriptionBSC_pairDayDataArgs, MeshContext>,
  /** null **/
  BSC_pairDayDatas: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_pairDayDatas'], BscExchangeTypes.SubscriptionBSC_pairDayDatasArgs, MeshContext>,
  /** null **/
  BSC_liquidityPosition: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_liquidityPosition'], BscExchangeTypes.SubscriptionBSC_liquidityPositionArgs, MeshContext>,
  /** null **/
  BSC_liquidityPositions: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_liquidityPositions'], BscExchangeTypes.SubscriptionBSC_liquidityPositionsArgs, MeshContext>,
  /** null **/
  BSC_liquidityPositionSnapshot: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_liquidityPositionSnapshot'], BscExchangeTypes.SubscriptionBSC_liquidityPositionSnapshotArgs, MeshContext>,
  /** null **/
  BSC_liquidityPositionSnapshots: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_liquidityPositionSnapshots'], BscExchangeTypes.SubscriptionBSC_liquidityPositionSnapshotsArgs, MeshContext>,
  /** null **/
  BSC_transaction: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_transaction'], BscExchangeTypes.SubscriptionBSC_transactionArgs, MeshContext>,
  /** null **/
  BSC_transactions: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_transactions'], BscExchangeTypes.SubscriptionBSC_transactionsArgs, MeshContext>,
  /** null **/
  BSC_mint: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_mint'], BscExchangeTypes.SubscriptionBSC_mintArgs, MeshContext>,
  /** null **/
  BSC_mints: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_mints'], BscExchangeTypes.SubscriptionBSC_mintsArgs, MeshContext>,
  /** null **/
  BSC_burn: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_burn'], BscExchangeTypes.SubscriptionBSC_burnArgs, MeshContext>,
  /** null **/
  BSC_burns: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_burns'], BscExchangeTypes.SubscriptionBSC_burnsArgs, MeshContext>,
  /** null **/
  BSC_swap: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_swap'], BscExchangeTypes.SubscriptionBSC_swapArgs, MeshContext>,
  /** null **/
  BSC_swaps: InContextSdkMethod<BscExchangeTypes.Subscription['BSC_swaps'], BscExchangeTypes.SubscriptionBSC_swapsArgs, MeshContext>,
  /** Access to subgraph metadata **/
  BSC__meta: InContextSdkMethod<BscExchangeTypes.Subscription['BSC__meta'], BscExchangeTypes.SubscriptionBSC__metaArgs, MeshContext>
};

export type EthereumExchangeContext = {
      ["ethereum-exchange"]: { Query: QueryEthereumExchangeSdk, Mutation: MutationEthereumExchangeSdk, Subscription: SubscriptionEthereumExchangeSdk },
    };

export type MoonriverExchangeContext = {
      ["moonriver-exchange"]: { Query: QueryMoonriverExchangeSdk, Mutation: MutationMoonriverExchangeSdk, Subscription: SubscriptionMoonriverExchangeSdk },
    };

export type ArbitrumExchangeContext = {
      ["arbitrum-exchange"]: { Query: QueryArbitrumExchangeSdk, Mutation: MutationArbitrumExchangeSdk, Subscription: SubscriptionArbitrumExchangeSdk },
    };

export type FantomExchangeContext = {
      ["fantom-exchange"]: { Query: QueryFantomExchangeSdk, Mutation: MutationFantomExchangeSdk, Subscription: SubscriptionFantomExchangeSdk },
    };

export type XdaiExchangeContext = {
      ["xdai-exchange"]: { Query: QueryXdaiExchangeSdk, Mutation: MutationXdaiExchangeSdk, Subscription: SubscriptionXdaiExchangeSdk },
    };

export type AvalancheExchangeContext = {
      ["avalanche-exchange"]: { Query: QueryAvalancheExchangeSdk, Mutation: MutationAvalancheExchangeSdk, Subscription: SubscriptionAvalancheExchangeSdk },
    };

export type MaticExchangeContext = {
      ["matic-exchange"]: { Query: QueryMaticExchangeSdk, Mutation: MutationMaticExchangeSdk, Subscription: SubscriptionMaticExchangeSdk },
    };

export type BscExchangeContext = {
      ["bsc-exchange"]: { Query: QueryBscExchangeSdk, Mutation: MutationBscExchangeSdk, Subscription: SubscriptionBscExchangeSdk },
    };

export type MeshContext = EthereumExchangeContext & MoonriverExchangeContext & ArbitrumExchangeContext & FantomExchangeContext & XdaiExchangeContext & AvalancheExchangeContext & MaticExchangeContext & BscExchangeContext & BaseMeshContext;


import { getMesh } from '@graphql-mesh/runtime';
import { MeshStore, FsStoreStorageAdapter } from '@graphql-mesh/store';
import pathModule from 'path';
import { fileURLToPath } from '@graphql-mesh/utils';
import ExternalModule_0 from '@graphql-mesh/cache-inmemory-lru';
import ExternalModule_1 from '@graphql-mesh/graphql';
import ExternalModule_2 from '@graphql-mesh/merger-stitching';
import ExternalModule_3 from '@graphql-mesh/transform-prefix';
import ExternalModule_4 from '@graphql-mesh/transform-type-merging';
import ExternalModule_5 from './sources/ethereum-exchange/schema.graphql.ts';
import ExternalModule_6 from './sources/moonriver-exchange/schema.graphql.ts';
import ExternalModule_7 from './sources/arbitrum-exchange/schema.graphql.ts';
import ExternalModule_8 from './sources/fantom-exchange/schema.graphql.ts';
import ExternalModule_9 from './sources/xdai-exchange/schema.graphql.ts';
import ExternalModule_10 from './sources/avalanche-exchange/schema.graphql.ts';
import ExternalModule_11 from './sources/matic-exchange/schema.graphql.ts';
import ExternalModule_12 from './sources/bsc-exchange/schema.graphql.ts';

const importedModules: Record<string, any> = {
  // @ts-ignore
  ["@graphql-mesh/cache-inmemory-lru"]: ExternalModule_0,
  // @ts-ignore
  ["@graphql-mesh/graphql"]: ExternalModule_1,
  // @ts-ignore
  ["@graphql-mesh/merger-stitching"]: ExternalModule_2,
  // @ts-ignore
  ["@graphql-mesh/transform-prefix"]: ExternalModule_3,
  // @ts-ignore
  ["@graphql-mesh/transform-type-merging"]: ExternalModule_4,
  // @ts-ignore
  [".graphclient/sources/ethereum-exchange/schema.graphql.ts"]: ExternalModule_5,
  // @ts-ignore
  [".graphclient/sources/moonriver-exchange/schema.graphql.ts"]: ExternalModule_6,
  // @ts-ignore
  [".graphclient/sources/arbitrum-exchange/schema.graphql.ts"]: ExternalModule_7,
  // @ts-ignore
  [".graphclient/sources/fantom-exchange/schema.graphql.ts"]: ExternalModule_8,
  // @ts-ignore
  [".graphclient/sources/xdai-exchange/schema.graphql.ts"]: ExternalModule_9,
  // @ts-ignore
  [".graphclient/sources/avalanche-exchange/schema.graphql.ts"]: ExternalModule_10,
  // @ts-ignore
  [".graphclient/sources/matic-exchange/schema.graphql.ts"]: ExternalModule_11,
  // @ts-ignore
  [".graphclient/sources/bsc-exchange/schema.graphql.ts"]: ExternalModule_12
};

const baseDir = pathModule.join(__dirname, '..');

const importFn = (moduleId: string) => {
  const relativeModuleId = (pathModule.isAbsolute(moduleId) ? pathModule.relative(baseDir, moduleId) : moduleId).split('\\').join('/').replace(baseDir + '/', '');
  if (!(relativeModuleId in importedModules)) {
    throw new Error(`Cannot find module '${relativeModuleId}'.`);
  }
  return Promise.resolve(importedModules[relativeModuleId]);
};

const rootStore = new MeshStore('.graphclient', new FsStoreStorageAdapter({
  cwd: baseDir,
  importFn,
}), {
  readonly: true,
  validate: false
});

import { GetMeshOptions } from '@graphql-mesh/runtime';
import { YamlConfig } from '@graphql-mesh/types';
import { parse } from 'graphql';
import { PubSub } from '@graphql-mesh/utils';
import MeshCache from '@graphql-mesh/cache-inmemory-lru';
import { DefaultLogger } from '@graphql-mesh/utils';
import GraphqlHandler from '@graphql-mesh/graphql'
import StitchingMerger from '@graphql-mesh/merger-stitching';
import PrefixTransform from '@graphql-mesh/transform-prefix';
import TypeMergingTransform from '@graphql-mesh/transform-type-merging';
import { resolveAdditionalResolvers } from '@graphql-mesh/utils';
export const rawConfig: YamlConfig.Config = {"sources":[{"name":"ethereum-exchange","handler":{"graphql":{"endpoint":"https://api.thegraph.com/subgraphs/name/sushiswap/exchange"}},"transforms":[{"prefix":{"value":"ETHEREUM_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]}},{"typeMerging":{"queryFields":[{"queryFieldName":"ETHEREUM_factory","keyField":"id","keyArg":"id"}]}}]},{"name":"matic-exchange","handler":{"graphql":{"endpoint":"https://api.thegraph.com/subgraphs/name/sushiswap/matic-exchange"}},"transforms":[{"prefix":{"value":"MATIC_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]}},{"typeMerging":{"queryFields":[{"queryFieldName":"MATIC_factory","keyField":"id","keyArg":"id"}]}}]},{"name":"arbitrum-exchange","handler":{"graphql":{"endpoint":"https://api.thegraph.com/subgraphs/name/sushiswap/arbitrum-exchange"}},"transforms":[{"prefix":{"value":"ARBITRUM_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]}},{"typeMerging":{"queryFields":[{"queryFieldName":"ARBITRUM_factory","keyField":"id","keyArg":"id"}]}}]},{"name":"fantom-exchange","handler":{"graphql":{"endpoint":"https://api.thegraph.com/subgraphs/name/sushiswap/fantom-exchange"}},"transforms":[{"prefix":{"value":"FANTOM_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]}},{"typeMerging":{"queryFields":[{"queryFieldName":"FANTOM_factory","keyField":"id","keyArg":"id"}]}}]},{"name":"xdai-exchange","handler":{"graphql":{"endpoint":"https://api.thegraph.com/subgraphs/name/sushiswap/xdai-exchange"}},"transforms":[{"prefix":{"value":"XDAI_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]}},{"typeMerging":{"queryFields":[{"queryFieldName":"XDAI_factory","keyField":"id","keyArg":"id"}]}}]},{"name":"moonriver-exchange","handler":{"graphql":{"endpoint":"https://api.thegraph.com/subgraphs/name/sushiswap/moonriver-exchange"}},"transforms":[{"prefix":{"value":"MOONRIVER_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]}},{"typeMerging":{"queryFields":[{"queryFieldName":"MOONRIVER_factory","keyField":"id","keyArg":"id"}]}}]},{"name":"avalanche-exchange","handler":{"graphql":{"endpoint":"https://api.thegraph.com/subgraphs/name/sushiswap/avalanche-exchange"}},"transforms":[{"prefix":{"value":"AVALANCHE_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]}},{"typeMerging":{"queryFields":[{"queryFieldName":"AVALANCHE_factory","keyField":"id","keyArg":"id"}]}}]},{"name":"bsc-exchange","handler":{"graphql":{"endpoint":"https://api.thegraph.com/subgraphs/name/sushiswap/bsc-exchange"}},"transforms":[{"prefix":{"value":"BSC_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]}},{"typeMerging":{"queryFields":[{"queryFieldName":"BSC_factory","keyField":"id","keyArg":"id"}]}}]}],"documents":["./factory-query.graphql"]} as any
export async function getMeshOptions(): Promise<GetMeshOptions> {
const pubsub = new PubSub();
const cache = new (MeshCache as any)({
      ...(rawConfig.cache || {}),
      importFn,
      store: rootStore.child('cache'),
      pubsub,
    } as any)
const sourcesStore = rootStore.child('sources');
const logger = new DefaultLogger('🕸️');
const sources = [];
const transforms = [];
const ethereumExchangeTransforms = [];
const maticExchangeTransforms = [];
const arbitrumExchangeTransforms = [];
const fantomExchangeTransforms = [];
const xdaiExchangeTransforms = [];
const moonriverExchangeTransforms = [];
const avalancheExchangeTransforms = [];
const bscExchangeTransforms = [];
const additionalTypeDefs: DocumentNode[] = [] as any[];
const ethereumExchangeHandler = new GraphqlHandler({
              name: rawConfig.sources[0].name,
              config: rawConfig.sources[0].handler["graphql"],
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child(rawConfig.sources[0].name),
              logger: logger.child(rawConfig.sources[0].name),
              importFn
            });
const maticExchangeHandler = new GraphqlHandler({
              name: rawConfig.sources[1].name,
              config: rawConfig.sources[1].handler["graphql"],
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child(rawConfig.sources[1].name),
              logger: logger.child(rawConfig.sources[1].name),
              importFn
            });
const arbitrumExchangeHandler = new GraphqlHandler({
              name: rawConfig.sources[2].name,
              config: rawConfig.sources[2].handler["graphql"],
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child(rawConfig.sources[2].name),
              logger: logger.child(rawConfig.sources[2].name),
              importFn
            });
const fantomExchangeHandler = new GraphqlHandler({
              name: rawConfig.sources[3].name,
              config: rawConfig.sources[3].handler["graphql"],
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child(rawConfig.sources[3].name),
              logger: logger.child(rawConfig.sources[3].name),
              importFn
            });
const xdaiExchangeHandler = new GraphqlHandler({
              name: rawConfig.sources[4].name,
              config: rawConfig.sources[4].handler["graphql"],
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child(rawConfig.sources[4].name),
              logger: logger.child(rawConfig.sources[4].name),
              importFn
            });
const moonriverExchangeHandler = new GraphqlHandler({
              name: rawConfig.sources[5].name,
              config: rawConfig.sources[5].handler["graphql"],
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child(rawConfig.sources[5].name),
              logger: logger.child(rawConfig.sources[5].name),
              importFn
            });
const avalancheExchangeHandler = new GraphqlHandler({
              name: rawConfig.sources[6].name,
              config: rawConfig.sources[6].handler["graphql"],
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child(rawConfig.sources[6].name),
              logger: logger.child(rawConfig.sources[6].name),
              importFn
            });
const bscExchangeHandler = new GraphqlHandler({
              name: rawConfig.sources[7].name,
              config: rawConfig.sources[7].handler["graphql"],
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child(rawConfig.sources[7].name),
              logger: logger.child(rawConfig.sources[7].name),
              importFn
            });
const merger = new(StitchingMerger as any)({
        cache,
        pubsub,
        logger: logger.child('StitchingMerger'),
        store: rootStore.child('stitchingMerger')
      })
ethereumExchangeTransforms.push(
                new PrefixTransform({
                  apiName: rawConfig.sources[0].name,
                  config: rawConfig.sources[0].transforms[0]["prefix"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
ethereumExchangeTransforms.push(
                new TypeMergingTransform({
                  apiName: rawConfig.sources[0].name,
                  config: rawConfig.sources[0].transforms[1]["typeMerging"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
maticExchangeTransforms.push(
                new PrefixTransform({
                  apiName: rawConfig.sources[1].name,
                  config: rawConfig.sources[1].transforms[0]["prefix"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
maticExchangeTransforms.push(
                new TypeMergingTransform({
                  apiName: rawConfig.sources[1].name,
                  config: rawConfig.sources[1].transforms[1]["typeMerging"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
arbitrumExchangeTransforms.push(
                new PrefixTransform({
                  apiName: rawConfig.sources[2].name,
                  config: rawConfig.sources[2].transforms[0]["prefix"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
arbitrumExchangeTransforms.push(
                new TypeMergingTransform({
                  apiName: rawConfig.sources[2].name,
                  config: rawConfig.sources[2].transforms[1]["typeMerging"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
fantomExchangeTransforms.push(
                new PrefixTransform({
                  apiName: rawConfig.sources[3].name,
                  config: rawConfig.sources[3].transforms[0]["prefix"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
fantomExchangeTransforms.push(
                new TypeMergingTransform({
                  apiName: rawConfig.sources[3].name,
                  config: rawConfig.sources[3].transforms[1]["typeMerging"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
xdaiExchangeTransforms.push(
                new PrefixTransform({
                  apiName: rawConfig.sources[4].name,
                  config: rawConfig.sources[4].transforms[0]["prefix"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
xdaiExchangeTransforms.push(
                new TypeMergingTransform({
                  apiName: rawConfig.sources[4].name,
                  config: rawConfig.sources[4].transforms[1]["typeMerging"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
moonriverExchangeTransforms.push(
                new PrefixTransform({
                  apiName: rawConfig.sources[5].name,
                  config: rawConfig.sources[5].transforms[0]["prefix"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
moonriverExchangeTransforms.push(
                new TypeMergingTransform({
                  apiName: rawConfig.sources[5].name,
                  config: rawConfig.sources[5].transforms[1]["typeMerging"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
avalancheExchangeTransforms.push(
                new PrefixTransform({
                  apiName: rawConfig.sources[6].name,
                  config: rawConfig.sources[6].transforms[0]["prefix"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
avalancheExchangeTransforms.push(
                new TypeMergingTransform({
                  apiName: rawConfig.sources[6].name,
                  config: rawConfig.sources[6].transforms[1]["typeMerging"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
bscExchangeTransforms.push(
                new PrefixTransform({
                  apiName: rawConfig.sources[7].name,
                  config: rawConfig.sources[7].transforms[0]["prefix"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
bscExchangeTransforms.push(
                new TypeMergingTransform({
                  apiName: rawConfig.sources[7].name,
                  config: rawConfig.sources[7].transforms[1]["typeMerging"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
sources.push({
          name: 'ethereum-exchange',
          handler: ethereumExchangeHandler,
          transforms: ethereumExchangeTransforms
        })
sources.push({
          name: 'matic-exchange',
          handler: maticExchangeHandler,
          transforms: maticExchangeTransforms
        })
sources.push({
          name: 'arbitrum-exchange',
          handler: arbitrumExchangeHandler,
          transforms: arbitrumExchangeTransforms
        })
sources.push({
          name: 'fantom-exchange',
          handler: fantomExchangeHandler,
          transforms: fantomExchangeTransforms
        })
sources.push({
          name: 'xdai-exchange',
          handler: xdaiExchangeHandler,
          transforms: xdaiExchangeTransforms
        })
sources.push({
          name: 'moonriver-exchange',
          handler: moonriverExchangeHandler,
          transforms: moonriverExchangeTransforms
        })
sources.push({
          name: 'avalanche-exchange',
          handler: avalancheExchangeHandler,
          transforms: avalancheExchangeTransforms
        })
sources.push({
          name: 'bsc-exchange',
          handler: bscExchangeHandler,
          transforms: bscExchangeTransforms
        })
const additionalResolversRawConfig = [];
const additionalResolvers = await resolveAdditionalResolvers(
      baseDir,
      additionalResolversRawConfig,
      importFn,
      pubsub
  )
const liveQueryInvalidations = rawConfig.liveQueryInvalidations;
const additionalEnvelopPlugins = [];

  return {
    sources,
    transforms,
    additionalTypeDefs,
    additionalResolvers,
    cache,
    pubsub,
    merger,
    logger,
    liveQueryInvalidations,
    additionalEnvelopPlugins,
  };
}

export const documentsInSDL = /*#__PURE__*/ [/* GraphQL */`query FactoriesQuery {
  ETHEREUM_factory(id: "0xc0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac") {
    __typename
    id
    volumeUSD
    liquidityUSD
  }
  MATIC_factory(id: "0xc35dadb65012ec5796536bd9864ed8773abc74c4") {
    __typename
    id
    volumeUSD
    liquidityUSD
  }
  ARBITRUM_factory(id: "0xc35dadb65012ec5796536bd9864ed8773abc74c4") {
    __typename
    id
    volumeUSD
    liquidityUSD
  }
  FANTOM_factory(id: "0xc35dadb65012ec5796536bd9864ed8773abc74c4") {
    __typename
    id
    volumeUSD
    liquidityUSD
  }
  XDAI_factory(id: "0xc35dadb65012ec5796536bd9864ed8773abc74c4") {
    __typename
    id
    volumeUSD
    liquidityUSD
  }
  AVALANCHE_factory(id: "0xc35dadb65012ec5796536bd9864ed8773abc74c4") {
    __typename
    id
    volumeUSD
    liquidityUSD
  }
  MOONRIVER_factory(id: "0xc35dadb65012ec5796536bd9864ed8773abc74c4") {
    __typename
    id
    volumeUSD
    liquidityUSD
  }
  BSC_factory(id: "0xc35dadb65012ec5796536bd9864ed8773abc74c4") {
    __typename
    id
    volumeUSD
    liquidityUSD
  }
}`];

export async function getBuiltGraphClient(): Promise<MeshInstance<MeshContext>> {
  const meshConfig = await getMeshOptions();
  return getMesh<MeshContext>(meshConfig);
}

export async function getBuiltGraphSDK<TGlobalContext = any, TGlobalRoot = any, TOperationContext = any, TOperationRoot = any>(sdkOptions?: SdkOptions<TGlobalContext, TGlobalRoot>) {
  const { schema } = await getBuiltGraphClient();
  return getSdk<TGlobalContext, TGlobalRoot, TOperationContext, TOperationRoot>(schema, sdkOptions);
}
export type FactoriesQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type FactoriesQueryQuery = { ETHEREUM_factory?: Maybe<(
    { __typename: 'ETHEREUM_Factory' }
    & Pick<ETHEREUM_Factory, 'id' | 'volumeUSD' | 'liquidityUSD'>
  )>, MATIC_factory?: Maybe<(
    { __typename: 'MATIC_Factory' }
    & Pick<MATIC_Factory, 'id' | 'volumeUSD' | 'liquidityUSD'>
  )>, ARBITRUM_factory?: Maybe<(
    { __typename: 'ARBITRUM_Factory' }
    & Pick<ARBITRUM_Factory, 'id' | 'volumeUSD' | 'liquidityUSD'>
  )>, FANTOM_factory?: Maybe<(
    { __typename: 'FANTOM_Factory' }
    & Pick<FANTOM_Factory, 'id' | 'volumeUSD' | 'liquidityUSD'>
  )>, XDAI_factory?: Maybe<(
    { __typename: 'XDAI_Factory' }
    & Pick<XDAI_Factory, 'id' | 'volumeUSD' | 'liquidityUSD'>
  )>, AVALANCHE_factory?: Maybe<(
    { __typename: 'AVALANCHE_Factory' }
    & Pick<AVALANCHE_Factory, 'id' | 'volumeUSD' | 'liquidityUSD'>
  )>, MOONRIVER_factory?: Maybe<(
    { __typename: 'MOONRIVER_Factory' }
    & Pick<MOONRIVER_Factory, 'id' | 'volumeUSD' | 'liquidityUSD'>
  )>, BSC_factory?: Maybe<(
    { __typename: 'BSC_Factory' }
    & Pick<BSC_Factory, 'id' | 'volumeUSD' | 'liquidityUSD'>
  )> };


export const FactoriesQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"FactoriesQuery"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ETHEREUM_factory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"StringValue","value":"0xc0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac","block":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"volumeUSD"}},{"kind":"Field","name":{"kind":"Name","value":"liquidityUSD"}}]}},{"kind":"Field","name":{"kind":"Name","value":"MATIC_factory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"StringValue","value":"0xc35dadb65012ec5796536bd9864ed8773abc74c4","block":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"volumeUSD"}},{"kind":"Field","name":{"kind":"Name","value":"liquidityUSD"}}]}},{"kind":"Field","name":{"kind":"Name","value":"ARBITRUM_factory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"StringValue","value":"0xc35dadb65012ec5796536bd9864ed8773abc74c4","block":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"volumeUSD"}},{"kind":"Field","name":{"kind":"Name","value":"liquidityUSD"}}]}},{"kind":"Field","name":{"kind":"Name","value":"FANTOM_factory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"StringValue","value":"0xc35dadb65012ec5796536bd9864ed8773abc74c4","block":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"volumeUSD"}},{"kind":"Field","name":{"kind":"Name","value":"liquidityUSD"}}]}},{"kind":"Field","name":{"kind":"Name","value":"XDAI_factory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"StringValue","value":"0xc35dadb65012ec5796536bd9864ed8773abc74c4","block":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"volumeUSD"}},{"kind":"Field","name":{"kind":"Name","value":"liquidityUSD"}}]}},{"kind":"Field","name":{"kind":"Name","value":"AVALANCHE_factory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"StringValue","value":"0xc35dadb65012ec5796536bd9864ed8773abc74c4","block":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"volumeUSD"}},{"kind":"Field","name":{"kind":"Name","value":"liquidityUSD"}}]}},{"kind":"Field","name":{"kind":"Name","value":"MOONRIVER_factory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"StringValue","value":"0xc35dadb65012ec5796536bd9864ed8773abc74c4","block":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"volumeUSD"}},{"kind":"Field","name":{"kind":"Name","value":"liquidityUSD"}}]}},{"kind":"Field","name":{"kind":"Name","value":"BSC_factory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"StringValue","value":"0xc35dadb65012ec5796536bd9864ed8773abc74c4","block":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"volumeUSD"}},{"kind":"Field","name":{"kind":"Name","value":"liquidityUSD"}}]}}]}}]} as unknown as DocumentNode<FactoriesQueryQuery, FactoriesQueryQueryVariables>;


function handleExecutionResult<T>(result: ExecutionResult, operationName: string) {
  if (result.errors) {
    const originalErrors = result.errors.map(error => error.originalError|| error);
    throw new AggregateError(originalErrors, `Failed to execute ${operationName}: \n\t${originalErrors.join('\n\t')}`);
  }
  return result.data as unknown as T;
}
export interface SdkOptions<TGlobalContext = any, TGlobalRoot = any> {
  globalContext?: TGlobalContext;
  globalRoot?: TGlobalRoot;
  jitOptions?: Partial<CompilerOptions>;
}
export function getSdk<TGlobalContext = any, TGlobalRoot = any, TOperationContext = any, TOperationRoot = any>(schema: GraphQLSchema, { globalContext, globalRoot, jitOptions = {} }: SdkOptions<TGlobalContext, TGlobalRoot> = {}) {
    const FactoriesQueryCompiled = compileQuery(schema, FactoriesQueryDocument, 'FactoriesQuery', jitOptions);
    if(!(isCompiledQuery(FactoriesQueryCompiled))) {
      const originalErrors = FactoriesQueryCompiled?.errors?.map(error => error.originalError || error) || [];
      throw new AggregateError(originalErrors, `Failed to compile FactoriesQuery: \n\t${originalErrors.join('\n\t')}`);
    }

  return {
    async FactoriesQuery(variables?: FactoriesQueryQueryVariables, context?: TOperationContext, root?: TOperationRoot): Promise<FactoriesQueryQuery> {
      const result = await FactoriesQueryCompiled.query({
        ...globalRoot,
        ...root
      }, {
        ...globalContext,
        ...context
      }, variables);
      return handleExecutionResult(result, 'FactoriesQuery');
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;