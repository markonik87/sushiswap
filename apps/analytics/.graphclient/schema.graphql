type Query {
  FANTOM_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_User
  FANTOM_users(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_User_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_User!]!
  FANTOM_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Bundle
  FANTOM_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Bundle_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Bundle!]!
  FANTOM_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Factory
  FANTOM_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Factory_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Factory!]!
  FANTOM_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_HourData
  FANTOM_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_HourData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_HourData!]!
  FANTOM_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_DayData
  FANTOM_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_DayData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_DayData!]!
  FANTOM_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Token
  FANTOM_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Token_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Token!]!
  FANTOM_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_TokenHourData
  FANTOM_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_TokenHourData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_TokenHourData!]!
  FANTOM_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_TokenDayData
  FANTOM_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_TokenDayData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_TokenDayData!]!
  FANTOM_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Pair
  FANTOM_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Pair_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Pair!]!
  FANTOM_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_PairHourData
  FANTOM_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_PairHourData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_PairHourData!]!
  FANTOM_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_PairDayData
  FANTOM_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_PairDayData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_PairDayData!]!
  FANTOM_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_LiquidityPosition
  FANTOM_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_LiquidityPosition_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_LiquidityPosition!]!
  FANTOM_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_LiquidityPositionSnapshot
  FANTOM_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_LiquidityPositionSnapshot_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_LiquidityPositionSnapshot!]!
  FANTOM_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Transaction
  FANTOM_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Transaction_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Transaction!]!
  FANTOM_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Mint
  FANTOM_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Mint_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Mint!]!
  FANTOM_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Burn
  FANTOM_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Burn_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Burn!]!
  FANTOM_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Swap
  FANTOM_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Swap_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Swap!]!

  """Access to subgraph metadata"""
  FANTOM__meta(block: FANTOM_Block_height): FANTOM__Meta_
  AVALANCHE_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_User
  AVALANCHE_users(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_User_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_User!]!
  AVALANCHE_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_Bundle
  AVALANCHE_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_Bundle_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_Bundle!]!
  AVALANCHE_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_Factory
  AVALANCHE_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_Factory_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_Factory!]!
  AVALANCHE_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_HourData
  AVALANCHE_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_HourData_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_HourData!]!
  AVALANCHE_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_DayData
  AVALANCHE_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_DayData_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_DayData!]!
  AVALANCHE_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_Token
  AVALANCHE_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_Token_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_Token!]!
  AVALANCHE_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_TokenHourData
  AVALANCHE_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_TokenHourData_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_TokenHourData!]!
  AVALANCHE_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_TokenDayData
  AVALANCHE_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_TokenDayData_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_TokenDayData!]!
  AVALANCHE_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_Pair
  AVALANCHE_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_Pair_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_Pair!]!
  AVALANCHE_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_PairHourData
  AVALANCHE_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_PairHourData_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_PairHourData!]!
  AVALANCHE_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_PairDayData
  AVALANCHE_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_PairDayData_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_PairDayData!]!
  AVALANCHE_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_LiquidityPosition
  AVALANCHE_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_LiquidityPosition_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_LiquidityPosition!]!
  AVALANCHE_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_LiquidityPositionSnapshot
  AVALANCHE_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_LiquidityPositionSnapshot_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_LiquidityPositionSnapshot!]!
  AVALANCHE_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_Transaction
  AVALANCHE_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_Transaction_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_Transaction!]!
  AVALANCHE_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_Mint
  AVALANCHE_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_Mint_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_Mint!]!
  AVALANCHE_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_Burn
  AVALANCHE_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_Burn_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_Burn!]!
  AVALANCHE_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_Swap
  AVALANCHE_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_Swap_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_Swap!]!

  """Access to subgraph metadata"""
  AVALANCHE__meta(block: AVALANCHE_Block_height): AVALANCHE__Meta_
  FUSE_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_User
  FUSE_users(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_User_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_User!]!
  FUSE_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Bundle
  FUSE_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Bundle_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Bundle!]!
  FUSE_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Factory
  FUSE_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Factory_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Factory!]!
  FUSE_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_HourData
  FUSE_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_HourData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_HourData!]!
  FUSE_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_DayData
  FUSE_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_DayData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_DayData!]!
  FUSE_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Token
  FUSE_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Token_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Token!]!
  FUSE_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_TokenHourData
  FUSE_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_TokenHourData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_TokenHourData!]!
  FUSE_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_TokenDayData
  FUSE_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_TokenDayData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_TokenDayData!]!
  FUSE_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Pair
  FUSE_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Pair_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Pair!]!
  FUSE_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_PairHourData
  FUSE_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_PairHourData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_PairHourData!]!
  FUSE_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_PairDayData
  FUSE_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_PairDayData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_PairDayData!]!
  FUSE_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_LiquidityPosition
  FUSE_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_LiquidityPosition_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_LiquidityPosition!]!
  FUSE_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_LiquidityPositionSnapshot
  FUSE_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_LiquidityPositionSnapshot_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_LiquidityPositionSnapshot!]!
  FUSE_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Transaction
  FUSE_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Transaction_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Transaction!]!
  FUSE_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Mint
  FUSE_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Mint_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Mint!]!
  FUSE_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Burn
  FUSE_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Burn_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Burn!]!
  FUSE_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Swap
  FUSE_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Swap_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Swap!]!

  """Access to subgraph metadata"""
  FUSE__meta(block: FUSE_Block_height): FUSE__Meta_
  ETHEREUM_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_User
  ETHEREUM_users(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_User_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_User!]!
  ETHEREUM_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_Bundle
  ETHEREUM_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_Bundle_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Bundle!]!
  ETHEREUM_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_Factory
  ETHEREUM_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_Factory_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Factory!]!
  ETHEREUM_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_HourData
  ETHEREUM_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_HourData_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_HourData!]!
  ETHEREUM_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_DayData
  ETHEREUM_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_DayData_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_DayData!]!
  ETHEREUM_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_Token
  ETHEREUM_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_Token_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Token!]!
  ETHEREUM_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_TokenHourData
  ETHEREUM_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_TokenHourData_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_TokenHourData!]!
  ETHEREUM_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_TokenDayData
  ETHEREUM_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_TokenDayData_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_TokenDayData!]!
  ETHEREUM_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_Pair
  ETHEREUM_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_Pair_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Pair!]!
  ETHEREUM_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_PairHourData
  ETHEREUM_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_PairHourData_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_PairHourData!]!
  ETHEREUM_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_PairDayData
  ETHEREUM_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_PairDayData_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_PairDayData!]!
  ETHEREUM_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_LiquidityPosition
  ETHEREUM_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_LiquidityPosition_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_LiquidityPosition!]!
  ETHEREUM_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_LiquidityPositionSnapshot
  ETHEREUM_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_LiquidityPositionSnapshot_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_LiquidityPositionSnapshot!]!
  ETHEREUM_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_Transaction
  ETHEREUM_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_Transaction_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Transaction!]!
  ETHEREUM_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_Mint
  ETHEREUM_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_Mint_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Mint!]!
  ETHEREUM_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_Burn
  ETHEREUM_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_Burn_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Burn!]!
  ETHEREUM_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_Swap
  ETHEREUM_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_Swap_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Swap!]!
  ETHEREUM_tokenSearch(
    text: String!
    first: Int = 100
    skip: Int = 0

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Token!]!
  ETHEREUM_pairSearch(
    text: String!
    first: Int = 100
    skip: Int = 0

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Pair!]!
  ETHEREUM_userSearch(
    text: String!
    first: Int = 100
    skip: Int = 0

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_User!]!

  """Access to subgraph metadata"""
  ETHEREUM__meta(block: ETHEREUM_Block_height): ETHEREUM__Meta_
  BSC_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_User
  BSC_users(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_User_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_User!]!
  BSC_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Bundle
  BSC_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Bundle_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Bundle!]!
  BSC_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Factory
  BSC_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Factory_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Factory!]!
  BSC_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_HourData
  BSC_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_HourData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_HourData!]!
  BSC_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_DayData
  BSC_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_DayData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_DayData!]!
  BSC_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Token
  BSC_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Token_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Token!]!
  BSC_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_TokenHourData
  BSC_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_TokenHourData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_TokenHourData!]!
  BSC_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_TokenDayData
  BSC_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_TokenDayData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_TokenDayData!]!
  BSC_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Pair
  BSC_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Pair_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Pair!]!
  BSC_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_PairHourData
  BSC_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_PairHourData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_PairHourData!]!
  BSC_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_PairDayData
  BSC_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_PairDayData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_PairDayData!]!
  BSC_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_LiquidityPosition
  BSC_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_LiquidityPosition_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_LiquidityPosition!]!
  BSC_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_LiquidityPositionSnapshot
  BSC_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_LiquidityPositionSnapshot_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_LiquidityPositionSnapshot!]!
  BSC_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Transaction
  BSC_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Transaction_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Transaction!]!
  BSC_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Mint
  BSC_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Mint_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Mint!]!
  BSC_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Burn
  BSC_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Burn_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Burn!]!
  BSC_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Swap
  BSC_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Swap_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Swap!]!

  """Access to subgraph metadata"""
  BSC__meta(block: BSC_Block_height): BSC__Meta_
  XDAI_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_User
  XDAI_users(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_User_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_User!]!
  XDAI_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_Bundle
  XDAI_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_Bundle_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_Bundle!]!
  XDAI_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_Factory
  XDAI_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_Factory_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_Factory!]!
  XDAI_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_HourData
  XDAI_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_HourData_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_HourData!]!
  XDAI_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_DayData
  XDAI_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_DayData_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_DayData!]!
  XDAI_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_Token
  XDAI_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_Token_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_Token!]!
  XDAI_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_TokenHourData
  XDAI_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_TokenHourData_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_TokenHourData!]!
  XDAI_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_TokenDayData
  XDAI_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_TokenDayData_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_TokenDayData!]!
  XDAI_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_Pair
  XDAI_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_Pair_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_Pair!]!
  XDAI_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_PairHourData
  XDAI_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_PairHourData_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_PairHourData!]!
  XDAI_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_PairDayData
  XDAI_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_PairDayData_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_PairDayData!]!
  XDAI_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_LiquidityPosition
  XDAI_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_LiquidityPosition_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_LiquidityPosition!]!
  XDAI_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_LiquidityPositionSnapshot
  XDAI_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_LiquidityPositionSnapshot_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_LiquidityPositionSnapshot!]!
  XDAI_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_Transaction
  XDAI_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_Transaction_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_Transaction!]!
  XDAI_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_Mint
  XDAI_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_Mint_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_Mint!]!
  XDAI_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_Burn
  XDAI_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_Burn_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_Burn!]!
  XDAI_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_Swap
  XDAI_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_Swap_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_Swap!]!

  """Access to subgraph metadata"""
  XDAI__meta(block: XDAI_Block_height): XDAI__Meta_
  MOONBEAM_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_User
  MOONBEAM_users(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_User_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_User!]!
  MOONBEAM_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_Bundle
  MOONBEAM_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_Bundle_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_Bundle!]!
  MOONBEAM_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_Factory
  MOONBEAM_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_Factory_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_Factory!]!
  MOONBEAM_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_HourData
  MOONBEAM_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_HourData_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_HourData!]!
  MOONBEAM_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_DayData
  MOONBEAM_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_DayData_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_DayData!]!
  MOONBEAM_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_Token
  MOONBEAM_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_Token_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_Token!]!
  MOONBEAM_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_TokenHourData
  MOONBEAM_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_TokenHourData_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_TokenHourData!]!
  MOONBEAM_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_TokenDayData
  MOONBEAM_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_TokenDayData_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_TokenDayData!]!
  MOONBEAM_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_Pair
  MOONBEAM_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_Pair_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_Pair!]!
  MOONBEAM_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_PairHourData
  MOONBEAM_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_PairHourData_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_PairHourData!]!
  MOONBEAM_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_PairDayData
  MOONBEAM_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_PairDayData_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_PairDayData!]!
  MOONBEAM_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_LiquidityPosition
  MOONBEAM_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_LiquidityPosition_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_LiquidityPosition!]!
  MOONBEAM_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_LiquidityPositionSnapshot
  MOONBEAM_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_LiquidityPositionSnapshot_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_LiquidityPositionSnapshot!]!
  MOONBEAM_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_Transaction
  MOONBEAM_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_Transaction_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_Transaction!]!
  MOONBEAM_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_Mint
  MOONBEAM_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_Mint_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_Mint!]!
  MOONBEAM_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_Burn
  MOONBEAM_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_Burn_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_Burn!]!
  MOONBEAM_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_Swap
  MOONBEAM_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_Swap_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_Swap!]!

  """Access to subgraph metadata"""
  MOONBEAM__meta(block: MOONBEAM_Block_height): MOONBEAM__Meta_
  CELO_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_User
  CELO_users(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_User_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_User!]!
  CELO_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_Bundle
  CELO_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_Bundle_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_Bundle!]!
  CELO_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_Factory
  CELO_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_Factory_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_Factory!]!
  CELO_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_HourData
  CELO_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_HourData_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_HourData!]!
  CELO_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_DayData
  CELO_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_DayData_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_DayData!]!
  CELO_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_Token
  CELO_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_Token_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_Token!]!
  CELO_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_TokenHourData
  CELO_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_TokenHourData_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_TokenHourData!]!
  CELO_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_TokenDayData
  CELO_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_TokenDayData_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_TokenDayData!]!
  CELO_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_Pair
  CELO_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_Pair_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_Pair!]!
  CELO_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_PairHourData
  CELO_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_PairHourData_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_PairHourData!]!
  CELO_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_PairDayData
  CELO_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_PairDayData_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_PairDayData!]!
  CELO_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_LiquidityPosition
  CELO_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_LiquidityPosition_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_LiquidityPosition!]!
  CELO_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_LiquidityPositionSnapshot
  CELO_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_LiquidityPositionSnapshot_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_LiquidityPositionSnapshot!]!
  CELO_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_Transaction
  CELO_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_Transaction_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_Transaction!]!
  CELO_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_Mint
  CELO_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_Mint_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_Mint!]!
  CELO_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_Burn
  CELO_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_Burn_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_Burn!]!
  CELO_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_Swap
  CELO_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_Swap_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_Swap!]!

  """Access to subgraph metadata"""
  CELO__meta(block: CELO_Block_height): CELO__Meta_
  MATIC_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_User
  MATIC_users(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_User_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_User!]!
  MATIC_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_Bundle
  MATIC_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_Bundle_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_Bundle!]!
  MATIC_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_Factory
  MATIC_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_Factory_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_Factory!]!
  MATIC_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_HourData
  MATIC_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_HourData_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_HourData!]!
  MATIC_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_DayData
  MATIC_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_DayData_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_DayData!]!
  MATIC_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_Token
  MATIC_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_Token_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_Token!]!
  MATIC_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_TokenHourData
  MATIC_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_TokenHourData_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_TokenHourData!]!
  MATIC_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_TokenDayData
  MATIC_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_TokenDayData_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_TokenDayData!]!
  MATIC_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_Pair
  MATIC_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_Pair_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_Pair!]!
  MATIC_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_PairHourData
  MATIC_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_PairHourData_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_PairHourData!]!
  MATIC_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_PairDayData
  MATIC_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_PairDayData_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_PairDayData!]!
  MATIC_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_LiquidityPosition
  MATIC_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_LiquidityPosition_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_LiquidityPosition!]!
  MATIC_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_LiquidityPositionSnapshot
  MATIC_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_LiquidityPositionSnapshot_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_LiquidityPositionSnapshot!]!
  MATIC_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_Transaction
  MATIC_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_Transaction_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_Transaction!]!
  MATIC_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_Mint
  MATIC_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_Mint_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_Mint!]!
  MATIC_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_Burn
  MATIC_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_Burn_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_Burn!]!
  MATIC_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_Swap
  MATIC_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_Swap_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_Swap!]!

  """Access to subgraph metadata"""
  MATIC__meta(block: MATIC_Block_height): MATIC__Meta_
  ARBITRUM_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_User
  ARBITRUM_users(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_User_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_User!]!
  ARBITRUM_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_Bundle
  ARBITRUM_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_Bundle_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_Bundle!]!
  ARBITRUM_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_Factory
  ARBITRUM_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_Factory_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_Factory!]!
  ARBITRUM_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_HourData
  ARBITRUM_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_HourData_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_HourData!]!
  ARBITRUM_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_DayData
  ARBITRUM_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_DayData_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_DayData!]!
  ARBITRUM_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_Token
  ARBITRUM_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_Token_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_Token!]!
  ARBITRUM_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_TokenHourData
  ARBITRUM_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_TokenHourData_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_TokenHourData!]!
  ARBITRUM_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_TokenDayData
  ARBITRUM_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_TokenDayData_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_TokenDayData!]!
  ARBITRUM_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_Pair
  ARBITRUM_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_Pair_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_Pair!]!
  ARBITRUM_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_PairHourData
  ARBITRUM_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_PairHourData_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_PairHourData!]!
  ARBITRUM_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_PairDayData
  ARBITRUM_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_PairDayData_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_PairDayData!]!
  ARBITRUM_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_LiquidityPosition
  ARBITRUM_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_LiquidityPosition_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_LiquidityPosition!]!
  ARBITRUM_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_LiquidityPositionSnapshot
  ARBITRUM_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_LiquidityPositionSnapshot_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_LiquidityPositionSnapshot!]!
  ARBITRUM_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_Transaction
  ARBITRUM_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_Transaction_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_Transaction!]!
  ARBITRUM_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_Mint
  ARBITRUM_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_Mint_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_Mint!]!
  ARBITRUM_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_Burn
  ARBITRUM_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_Burn_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_Burn!]!
  ARBITRUM_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_Swap
  ARBITRUM_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_Swap_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_Swap!]!

  """Access to subgraph metadata"""
  ARBITRUM__meta(block: ARBITRUM_Block_height): ARBITRUM__Meta_
  MOONRIVER_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_User
  MOONRIVER_users(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_User_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_User!]!
  MOONRIVER_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Bundle
  MOONRIVER_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Bundle_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Bundle!]!
  MOONRIVER_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Factory
  MOONRIVER_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Factory_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Factory!]!
  MOONRIVER_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_HourData
  MOONRIVER_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_HourData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_HourData!]!
  MOONRIVER_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_DayData
  MOONRIVER_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_DayData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_DayData!]!
  MOONRIVER_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Token
  MOONRIVER_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Token_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Token!]!
  MOONRIVER_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_TokenHourData
  MOONRIVER_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_TokenHourData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_TokenHourData!]!
  MOONRIVER_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_TokenDayData
  MOONRIVER_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_TokenDayData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_TokenDayData!]!
  MOONRIVER_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Pair
  MOONRIVER_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Pair_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Pair!]!
  MOONRIVER_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_PairHourData
  MOONRIVER_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_PairHourData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_PairHourData!]!
  MOONRIVER_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_PairDayData
  MOONRIVER_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_PairDayData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_PairDayData!]!
  MOONRIVER_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_LiquidityPosition
  MOONRIVER_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_LiquidityPosition_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_LiquidityPosition!]!
  MOONRIVER_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_LiquidityPositionSnapshot
  MOONRIVER_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_LiquidityPositionSnapshot_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_LiquidityPositionSnapshot!]!
  MOONRIVER_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Transaction
  MOONRIVER_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Transaction_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Transaction!]!
  MOONRIVER_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Mint
  MOONRIVER_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Mint_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Mint!]!
  MOONRIVER_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Burn
  MOONRIVER_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Burn_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Burn!]!
  MOONRIVER_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Swap
  MOONRIVER_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Swap_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Swap!]!

  """Access to subgraph metadata"""
  MOONRIVER__meta(block: MOONRIVER_Block_height): MOONRIVER__Meta_
}

type Subscription {
  FANTOM_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_User
  FANTOM_users(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_User_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_User!]!
  FANTOM_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Bundle
  FANTOM_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Bundle_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Bundle!]!
  FANTOM_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Factory
  FANTOM_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Factory_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Factory!]!
  FANTOM_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_HourData
  FANTOM_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_HourData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_HourData!]!
  FANTOM_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_DayData
  FANTOM_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_DayData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_DayData!]!
  FANTOM_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Token
  FANTOM_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Token_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Token!]!
  FANTOM_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_TokenHourData
  FANTOM_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_TokenHourData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_TokenHourData!]!
  FANTOM_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_TokenDayData
  FANTOM_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_TokenDayData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_TokenDayData!]!
  FANTOM_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Pair
  FANTOM_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Pair_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Pair!]!
  FANTOM_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_PairHourData
  FANTOM_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_PairHourData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_PairHourData!]!
  FANTOM_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_PairDayData
  FANTOM_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_PairDayData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_PairDayData!]!
  FANTOM_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_LiquidityPosition
  FANTOM_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_LiquidityPosition_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_LiquidityPosition!]!
  FANTOM_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_LiquidityPositionSnapshot
  FANTOM_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_LiquidityPositionSnapshot_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_LiquidityPositionSnapshot!]!
  FANTOM_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Transaction
  FANTOM_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Transaction_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Transaction!]!
  FANTOM_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Mint
  FANTOM_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Mint_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Mint!]!
  FANTOM_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Burn
  FANTOM_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Burn_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Burn!]!
  FANTOM_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Swap
  FANTOM_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Swap_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Swap!]!

  """Access to subgraph metadata"""
  FANTOM__meta(block: FANTOM_Block_height): FANTOM__Meta_
  AVALANCHE_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_User
  AVALANCHE_users(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_User_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_User!]!
  AVALANCHE_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_Bundle
  AVALANCHE_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_Bundle_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_Bundle!]!
  AVALANCHE_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_Factory
  AVALANCHE_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_Factory_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_Factory!]!
  AVALANCHE_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_HourData
  AVALANCHE_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_HourData_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_HourData!]!
  AVALANCHE_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_DayData
  AVALANCHE_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_DayData_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_DayData!]!
  AVALANCHE_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_Token
  AVALANCHE_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_Token_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_Token!]!
  AVALANCHE_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_TokenHourData
  AVALANCHE_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_TokenHourData_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_TokenHourData!]!
  AVALANCHE_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_TokenDayData
  AVALANCHE_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_TokenDayData_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_TokenDayData!]!
  AVALANCHE_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_Pair
  AVALANCHE_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_Pair_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_Pair!]!
  AVALANCHE_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_PairHourData
  AVALANCHE_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_PairHourData_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_PairHourData!]!
  AVALANCHE_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_PairDayData
  AVALANCHE_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_PairDayData_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_PairDayData!]!
  AVALANCHE_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_LiquidityPosition
  AVALANCHE_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_LiquidityPosition_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_LiquidityPosition!]!
  AVALANCHE_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_LiquidityPositionSnapshot
  AVALANCHE_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_LiquidityPositionSnapshot_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_LiquidityPositionSnapshot!]!
  AVALANCHE_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_Transaction
  AVALANCHE_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_Transaction_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_Transaction!]!
  AVALANCHE_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_Mint
  AVALANCHE_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_Mint_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_Mint!]!
  AVALANCHE_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_Burn
  AVALANCHE_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_Burn_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_Burn!]!
  AVALANCHE_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AVALANCHE_Swap
  AVALANCHE_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: AVALANCHE_Swap_orderBy
    orderDirection: AVALANCHE_OrderDirection
    where: AVALANCHE_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: AVALANCHE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AVALANCHE_Swap!]!

  """Access to subgraph metadata"""
  AVALANCHE__meta(block: AVALANCHE_Block_height): AVALANCHE__Meta_
  FUSE_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_User
  FUSE_users(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_User_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_User!]!
  FUSE_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Bundle
  FUSE_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Bundle_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Bundle!]!
  FUSE_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Factory
  FUSE_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Factory_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Factory!]!
  FUSE_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_HourData
  FUSE_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_HourData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_HourData!]!
  FUSE_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_DayData
  FUSE_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_DayData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_DayData!]!
  FUSE_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Token
  FUSE_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Token_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Token!]!
  FUSE_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_TokenHourData
  FUSE_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_TokenHourData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_TokenHourData!]!
  FUSE_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_TokenDayData
  FUSE_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_TokenDayData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_TokenDayData!]!
  FUSE_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Pair
  FUSE_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Pair_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Pair!]!
  FUSE_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_PairHourData
  FUSE_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_PairHourData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_PairHourData!]!
  FUSE_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_PairDayData
  FUSE_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_PairDayData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_PairDayData!]!
  FUSE_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_LiquidityPosition
  FUSE_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_LiquidityPosition_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_LiquidityPosition!]!
  FUSE_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_LiquidityPositionSnapshot
  FUSE_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_LiquidityPositionSnapshot_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_LiquidityPositionSnapshot!]!
  FUSE_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Transaction
  FUSE_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Transaction_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Transaction!]!
  FUSE_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Mint
  FUSE_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Mint_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Mint!]!
  FUSE_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Burn
  FUSE_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Burn_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Burn!]!
  FUSE_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Swap
  FUSE_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Swap_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Swap!]!

  """Access to subgraph metadata"""
  FUSE__meta(block: FUSE_Block_height): FUSE__Meta_
  ETHEREUM_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_User
  ETHEREUM_users(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_User_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_User!]!
  ETHEREUM_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_Bundle
  ETHEREUM_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_Bundle_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Bundle!]!
  ETHEREUM_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_Factory
  ETHEREUM_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_Factory_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Factory!]!
  ETHEREUM_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_HourData
  ETHEREUM_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_HourData_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_HourData!]!
  ETHEREUM_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_DayData
  ETHEREUM_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_DayData_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_DayData!]!
  ETHEREUM_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_Token
  ETHEREUM_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_Token_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Token!]!
  ETHEREUM_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_TokenHourData
  ETHEREUM_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_TokenHourData_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_TokenHourData!]!
  ETHEREUM_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_TokenDayData
  ETHEREUM_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_TokenDayData_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_TokenDayData!]!
  ETHEREUM_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_Pair
  ETHEREUM_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_Pair_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Pair!]!
  ETHEREUM_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_PairHourData
  ETHEREUM_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_PairHourData_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_PairHourData!]!
  ETHEREUM_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_PairDayData
  ETHEREUM_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_PairDayData_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_PairDayData!]!
  ETHEREUM_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_LiquidityPosition
  ETHEREUM_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_LiquidityPosition_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_LiquidityPosition!]!
  ETHEREUM_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_LiquidityPositionSnapshot
  ETHEREUM_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_LiquidityPositionSnapshot_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_LiquidityPositionSnapshot!]!
  ETHEREUM_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_Transaction
  ETHEREUM_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_Transaction_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Transaction!]!
  ETHEREUM_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_Mint
  ETHEREUM_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_Mint_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Mint!]!
  ETHEREUM_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_Burn
  ETHEREUM_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_Burn_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Burn!]!
  ETHEREUM_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ETHEREUM_Swap
  ETHEREUM_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: ETHEREUM_Swap_orderBy
    orderDirection: ETHEREUM_OrderDirection
    where: ETHEREUM_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ETHEREUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ETHEREUM_Swap!]!

  """Access to subgraph metadata"""
  ETHEREUM__meta(block: ETHEREUM_Block_height): ETHEREUM__Meta_
  BSC_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_User
  BSC_users(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_User_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_User!]!
  BSC_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Bundle
  BSC_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Bundle_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Bundle!]!
  BSC_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Factory
  BSC_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Factory_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Factory!]!
  BSC_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_HourData
  BSC_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_HourData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_HourData!]!
  BSC_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_DayData
  BSC_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_DayData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_DayData!]!
  BSC_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Token
  BSC_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Token_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Token!]!
  BSC_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_TokenHourData
  BSC_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_TokenHourData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_TokenHourData!]!
  BSC_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_TokenDayData
  BSC_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_TokenDayData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_TokenDayData!]!
  BSC_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Pair
  BSC_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Pair_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Pair!]!
  BSC_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_PairHourData
  BSC_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_PairHourData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_PairHourData!]!
  BSC_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_PairDayData
  BSC_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_PairDayData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_PairDayData!]!
  BSC_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_LiquidityPosition
  BSC_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_LiquidityPosition_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_LiquidityPosition!]!
  BSC_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_LiquidityPositionSnapshot
  BSC_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_LiquidityPositionSnapshot_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_LiquidityPositionSnapshot!]!
  BSC_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Transaction
  BSC_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Transaction_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Transaction!]!
  BSC_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Mint
  BSC_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Mint_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Mint!]!
  BSC_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Burn
  BSC_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Burn_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Burn!]!
  BSC_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Swap
  BSC_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Swap_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Swap!]!

  """Access to subgraph metadata"""
  BSC__meta(block: BSC_Block_height): BSC__Meta_
  XDAI_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_User
  XDAI_users(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_User_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_User!]!
  XDAI_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_Bundle
  XDAI_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_Bundle_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_Bundle!]!
  XDAI_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_Factory
  XDAI_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_Factory_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_Factory!]!
  XDAI_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_HourData
  XDAI_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_HourData_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_HourData!]!
  XDAI_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_DayData
  XDAI_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_DayData_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_DayData!]!
  XDAI_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_Token
  XDAI_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_Token_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_Token!]!
  XDAI_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_TokenHourData
  XDAI_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_TokenHourData_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_TokenHourData!]!
  XDAI_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_TokenDayData
  XDAI_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_TokenDayData_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_TokenDayData!]!
  XDAI_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_Pair
  XDAI_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_Pair_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_Pair!]!
  XDAI_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_PairHourData
  XDAI_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_PairHourData_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_PairHourData!]!
  XDAI_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_PairDayData
  XDAI_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_PairDayData_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_PairDayData!]!
  XDAI_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_LiquidityPosition
  XDAI_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_LiquidityPosition_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_LiquidityPosition!]!
  XDAI_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_LiquidityPositionSnapshot
  XDAI_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_LiquidityPositionSnapshot_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_LiquidityPositionSnapshot!]!
  XDAI_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_Transaction
  XDAI_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_Transaction_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_Transaction!]!
  XDAI_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_Mint
  XDAI_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_Mint_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_Mint!]!
  XDAI_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_Burn
  XDAI_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_Burn_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_Burn!]!
  XDAI_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): XDAI_Swap
  XDAI_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: XDAI_Swap_orderBy
    orderDirection: XDAI_OrderDirection
    where: XDAI_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: XDAI_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [XDAI_Swap!]!

  """Access to subgraph metadata"""
  XDAI__meta(block: XDAI_Block_height): XDAI__Meta_
  MOONBEAM_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_User
  MOONBEAM_users(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_User_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_User!]!
  MOONBEAM_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_Bundle
  MOONBEAM_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_Bundle_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_Bundle!]!
  MOONBEAM_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_Factory
  MOONBEAM_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_Factory_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_Factory!]!
  MOONBEAM_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_HourData
  MOONBEAM_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_HourData_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_HourData!]!
  MOONBEAM_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_DayData
  MOONBEAM_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_DayData_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_DayData!]!
  MOONBEAM_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_Token
  MOONBEAM_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_Token_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_Token!]!
  MOONBEAM_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_TokenHourData
  MOONBEAM_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_TokenHourData_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_TokenHourData!]!
  MOONBEAM_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_TokenDayData
  MOONBEAM_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_TokenDayData_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_TokenDayData!]!
  MOONBEAM_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_Pair
  MOONBEAM_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_Pair_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_Pair!]!
  MOONBEAM_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_PairHourData
  MOONBEAM_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_PairHourData_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_PairHourData!]!
  MOONBEAM_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_PairDayData
  MOONBEAM_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_PairDayData_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_PairDayData!]!
  MOONBEAM_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_LiquidityPosition
  MOONBEAM_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_LiquidityPosition_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_LiquidityPosition!]!
  MOONBEAM_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_LiquidityPositionSnapshot
  MOONBEAM_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_LiquidityPositionSnapshot_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_LiquidityPositionSnapshot!]!
  MOONBEAM_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_Transaction
  MOONBEAM_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_Transaction_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_Transaction!]!
  MOONBEAM_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_Mint
  MOONBEAM_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_Mint_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_Mint!]!
  MOONBEAM_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_Burn
  MOONBEAM_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_Burn_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_Burn!]!
  MOONBEAM_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONBEAM_Swap
  MOONBEAM_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONBEAM_Swap_orderBy
    orderDirection: MOONBEAM_OrderDirection
    where: MOONBEAM_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONBEAM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONBEAM_Swap!]!

  """Access to subgraph metadata"""
  MOONBEAM__meta(block: MOONBEAM_Block_height): MOONBEAM__Meta_
  CELO_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_User
  CELO_users(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_User_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_User!]!
  CELO_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_Bundle
  CELO_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_Bundle_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_Bundle!]!
  CELO_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_Factory
  CELO_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_Factory_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_Factory!]!
  CELO_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_HourData
  CELO_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_HourData_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_HourData!]!
  CELO_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_DayData
  CELO_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_DayData_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_DayData!]!
  CELO_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_Token
  CELO_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_Token_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_Token!]!
  CELO_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_TokenHourData
  CELO_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_TokenHourData_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_TokenHourData!]!
  CELO_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_TokenDayData
  CELO_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_TokenDayData_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_TokenDayData!]!
  CELO_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_Pair
  CELO_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_Pair_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_Pair!]!
  CELO_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_PairHourData
  CELO_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_PairHourData_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_PairHourData!]!
  CELO_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_PairDayData
  CELO_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_PairDayData_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_PairDayData!]!
  CELO_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_LiquidityPosition
  CELO_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_LiquidityPosition_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_LiquidityPosition!]!
  CELO_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_LiquidityPositionSnapshot
  CELO_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_LiquidityPositionSnapshot_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_LiquidityPositionSnapshot!]!
  CELO_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_Transaction
  CELO_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_Transaction_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_Transaction!]!
  CELO_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_Mint
  CELO_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_Mint_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_Mint!]!
  CELO_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_Burn
  CELO_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_Burn_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_Burn!]!
  CELO_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CELO_Swap
  CELO_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: CELO_Swap_orderBy
    orderDirection: CELO_OrderDirection
    where: CELO_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: CELO_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CELO_Swap!]!

  """Access to subgraph metadata"""
  CELO__meta(block: CELO_Block_height): CELO__Meta_
  MATIC_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_User
  MATIC_users(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_User_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_User!]!
  MATIC_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_Bundle
  MATIC_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_Bundle_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_Bundle!]!
  MATIC_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_Factory
  MATIC_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_Factory_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_Factory!]!
  MATIC_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_HourData
  MATIC_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_HourData_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_HourData!]!
  MATIC_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_DayData
  MATIC_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_DayData_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_DayData!]!
  MATIC_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_Token
  MATIC_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_Token_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_Token!]!
  MATIC_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_TokenHourData
  MATIC_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_TokenHourData_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_TokenHourData!]!
  MATIC_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_TokenDayData
  MATIC_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_TokenDayData_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_TokenDayData!]!
  MATIC_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_Pair
  MATIC_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_Pair_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_Pair!]!
  MATIC_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_PairHourData
  MATIC_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_PairHourData_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_PairHourData!]!
  MATIC_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_PairDayData
  MATIC_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_PairDayData_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_PairDayData!]!
  MATIC_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_LiquidityPosition
  MATIC_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_LiquidityPosition_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_LiquidityPosition!]!
  MATIC_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_LiquidityPositionSnapshot
  MATIC_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_LiquidityPositionSnapshot_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_LiquidityPositionSnapshot!]!
  MATIC_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_Transaction
  MATIC_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_Transaction_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_Transaction!]!
  MATIC_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_Mint
  MATIC_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_Mint_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_Mint!]!
  MATIC_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_Burn
  MATIC_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_Burn_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_Burn!]!
  MATIC_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MATIC_Swap
  MATIC_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: MATIC_Swap_orderBy
    orderDirection: MATIC_OrderDirection
    where: MATIC_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MATIC_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MATIC_Swap!]!

  """Access to subgraph metadata"""
  MATIC__meta(block: MATIC_Block_height): MATIC__Meta_
  ARBITRUM_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_User
  ARBITRUM_users(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_User_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_User!]!
  ARBITRUM_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_Bundle
  ARBITRUM_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_Bundle_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_Bundle!]!
  ARBITRUM_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_Factory
  ARBITRUM_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_Factory_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_Factory!]!
  ARBITRUM_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_HourData
  ARBITRUM_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_HourData_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_HourData!]!
  ARBITRUM_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_DayData
  ARBITRUM_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_DayData_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_DayData!]!
  ARBITRUM_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_Token
  ARBITRUM_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_Token_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_Token!]!
  ARBITRUM_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_TokenHourData
  ARBITRUM_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_TokenHourData_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_TokenHourData!]!
  ARBITRUM_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_TokenDayData
  ARBITRUM_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_TokenDayData_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_TokenDayData!]!
  ARBITRUM_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_Pair
  ARBITRUM_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_Pair_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_Pair!]!
  ARBITRUM_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_PairHourData
  ARBITRUM_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_PairHourData_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_PairHourData!]!
  ARBITRUM_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_PairDayData
  ARBITRUM_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_PairDayData_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_PairDayData!]!
  ARBITRUM_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_LiquidityPosition
  ARBITRUM_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_LiquidityPosition_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_LiquidityPosition!]!
  ARBITRUM_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_LiquidityPositionSnapshot
  ARBITRUM_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_LiquidityPositionSnapshot_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_LiquidityPositionSnapshot!]!
  ARBITRUM_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_Transaction
  ARBITRUM_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_Transaction_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_Transaction!]!
  ARBITRUM_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_Mint
  ARBITRUM_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_Mint_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_Mint!]!
  ARBITRUM_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_Burn
  ARBITRUM_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_Burn_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_Burn!]!
  ARBITRUM_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ARBITRUM_Swap
  ARBITRUM_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: ARBITRUM_Swap_orderBy
    orderDirection: ARBITRUM_OrderDirection
    where: ARBITRUM_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: ARBITRUM_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ARBITRUM_Swap!]!

  """Access to subgraph metadata"""
  ARBITRUM__meta(block: ARBITRUM_Block_height): ARBITRUM__Meta_
  MOONRIVER_user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_User
  MOONRIVER_users(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_User_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_User!]!
  MOONRIVER_bundle(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Bundle
  MOONRIVER_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Bundle_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Bundle_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Bundle!]!
  MOONRIVER_factory(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Factory
  MOONRIVER_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Factory_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Factory_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Factory!]!
  MOONRIVER_hourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_HourData
  MOONRIVER_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_HourData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_HourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_HourData!]!
  MOONRIVER_dayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_DayData
  MOONRIVER_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_DayData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_DayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_DayData!]!
  MOONRIVER_token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Token
  MOONRIVER_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Token_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Token!]!
  MOONRIVER_tokenHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_TokenHourData
  MOONRIVER_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_TokenHourData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_TokenHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_TokenHourData!]!
  MOONRIVER_tokenDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_TokenDayData
  MOONRIVER_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_TokenDayData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_TokenDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_TokenDayData!]!
  MOONRIVER_pair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Pair
  MOONRIVER_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Pair_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Pair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Pair!]!
  MOONRIVER_pairHourData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_PairHourData
  MOONRIVER_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_PairHourData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_PairHourData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_PairHourData!]!
  MOONRIVER_pairDayData(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_PairDayData
  MOONRIVER_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_PairDayData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_PairDayData_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_PairDayData!]!
  MOONRIVER_liquidityPosition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_LiquidityPosition
  MOONRIVER_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_LiquidityPosition_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_LiquidityPosition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_LiquidityPosition!]!
  MOONRIVER_liquidityPositionSnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_LiquidityPositionSnapshot
  MOONRIVER_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_LiquidityPositionSnapshot_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_LiquidityPositionSnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_LiquidityPositionSnapshot!]!
  MOONRIVER_transaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Transaction
  MOONRIVER_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Transaction_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Transaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Transaction!]!
  MOONRIVER_mint(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Mint
  MOONRIVER_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Mint_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Mint_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Mint!]!
  MOONRIVER_burn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Burn
  MOONRIVER_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Burn_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Burn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Burn!]!
  MOONRIVER_swap(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Swap
  MOONRIVER_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Swap_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Swap_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Swap!]!

  """Access to subgraph metadata"""
  MOONRIVER__meta(block: MOONRIVER_Block_height): MOONRIVER__Meta_
}

scalar FANTOM_BigDecimal

scalar BigInt

input FANTOM_BlockChangedFilter {
  number_gte: Int!
}

input FANTOM_Block_height {
  hash: FANTOM_Bytes
  number: Int
  number_gte: Int
}

type FANTOM_Bundle {
  id: ID!
  ethPrice: FANTOM_BigDecimal!
}

input FANTOM_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: FANTOM_BigDecimal
  ethPrice_not: FANTOM_BigDecimal
  ethPrice_gt: FANTOM_BigDecimal
  ethPrice_lt: FANTOM_BigDecimal
  ethPrice_gte: FANTOM_BigDecimal
  ethPrice_lte: FANTOM_BigDecimal
  ethPrice_in: [FANTOM_BigDecimal!]
  ethPrice_not_in: [FANTOM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_Bundle_orderBy {
  id
  ethPrice
}

type FANTOM_Burn {
  id: ID!
  transaction: FANTOM_Transaction!
  timestamp: BigInt!
  pair: FANTOM_Pair!
  liquidity: FANTOM_BigDecimal!
  sender: FANTOM_Bytes
  amount0: FANTOM_BigDecimal
  amount1: FANTOM_BigDecimal
  to: FANTOM_Bytes
  logIndex: BigInt
  amountUSD: FANTOM_BigDecimal
  complete: Boolean!
  feeTo: FANTOM_Bytes
  feeLiquidity: FANTOM_BigDecimal
}

input FANTOM_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidity: FANTOM_BigDecimal
  liquidity_not: FANTOM_BigDecimal
  liquidity_gt: FANTOM_BigDecimal
  liquidity_lt: FANTOM_BigDecimal
  liquidity_gte: FANTOM_BigDecimal
  liquidity_lte: FANTOM_BigDecimal
  liquidity_in: [FANTOM_BigDecimal!]
  liquidity_not_in: [FANTOM_BigDecimal!]
  sender: FANTOM_Bytes
  sender_not: FANTOM_Bytes
  sender_in: [FANTOM_Bytes!]
  sender_not_in: [FANTOM_Bytes!]
  sender_contains: FANTOM_Bytes
  sender_not_contains: FANTOM_Bytes
  amount0: FANTOM_BigDecimal
  amount0_not: FANTOM_BigDecimal
  amount0_gt: FANTOM_BigDecimal
  amount0_lt: FANTOM_BigDecimal
  amount0_gte: FANTOM_BigDecimal
  amount0_lte: FANTOM_BigDecimal
  amount0_in: [FANTOM_BigDecimal!]
  amount0_not_in: [FANTOM_BigDecimal!]
  amount1: FANTOM_BigDecimal
  amount1_not: FANTOM_BigDecimal
  amount1_gt: FANTOM_BigDecimal
  amount1_lt: FANTOM_BigDecimal
  amount1_gte: FANTOM_BigDecimal
  amount1_lte: FANTOM_BigDecimal
  amount1_in: [FANTOM_BigDecimal!]
  amount1_not_in: [FANTOM_BigDecimal!]
  to: FANTOM_Bytes
  to_not: FANTOM_Bytes
  to_in: [FANTOM_Bytes!]
  to_not_in: [FANTOM_Bytes!]
  to_contains: FANTOM_Bytes
  to_not_contains: FANTOM_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: FANTOM_BigDecimal
  amountUSD_not: FANTOM_BigDecimal
  amountUSD_gt: FANTOM_BigDecimal
  amountUSD_lt: FANTOM_BigDecimal
  amountUSD_gte: FANTOM_BigDecimal
  amountUSD_lte: FANTOM_BigDecimal
  amountUSD_in: [FANTOM_BigDecimal!]
  amountUSD_not_in: [FANTOM_BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: FANTOM_Bytes
  feeTo_not: FANTOM_Bytes
  feeTo_in: [FANTOM_Bytes!]
  feeTo_not_in: [FANTOM_Bytes!]
  feeTo_contains: FANTOM_Bytes
  feeTo_not_contains: FANTOM_Bytes
  feeLiquidity: FANTOM_BigDecimal
  feeLiquidity_not: FANTOM_BigDecimal
  feeLiquidity_gt: FANTOM_BigDecimal
  feeLiquidity_lt: FANTOM_BigDecimal
  feeLiquidity_gte: FANTOM_BigDecimal
  feeLiquidity_lte: FANTOM_BigDecimal
  feeLiquidity_in: [FANTOM_BigDecimal!]
  feeLiquidity_not_in: [FANTOM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_Burn_orderBy {
  id
  transaction
  timestamp
  pair
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

scalar FANTOM_Bytes

type FANTOM_DayData {
  id: ID!
  date: Int!
  factory: FANTOM_Factory!
  volumeETH: FANTOM_BigDecimal!
  volumeUSD: FANTOM_BigDecimal!
  untrackedVolume: FANTOM_BigDecimal!
  liquidityETH: FANTOM_BigDecimal!
  liquidityUSD: FANTOM_BigDecimal!
  txCount: BigInt!
}

input FANTOM_DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: FANTOM_BigDecimal
  volumeETH_not: FANTOM_BigDecimal
  volumeETH_gt: FANTOM_BigDecimal
  volumeETH_lt: FANTOM_BigDecimal
  volumeETH_gte: FANTOM_BigDecimal
  volumeETH_lte: FANTOM_BigDecimal
  volumeETH_in: [FANTOM_BigDecimal!]
  volumeETH_not_in: [FANTOM_BigDecimal!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  untrackedVolume: FANTOM_BigDecimal
  untrackedVolume_not: FANTOM_BigDecimal
  untrackedVolume_gt: FANTOM_BigDecimal
  untrackedVolume_lt: FANTOM_BigDecimal
  untrackedVolume_gte: FANTOM_BigDecimal
  untrackedVolume_lte: FANTOM_BigDecimal
  untrackedVolume_in: [FANTOM_BigDecimal!]
  untrackedVolume_not_in: [FANTOM_BigDecimal!]
  liquidityETH: FANTOM_BigDecimal
  liquidityETH_not: FANTOM_BigDecimal
  liquidityETH_gt: FANTOM_BigDecimal
  liquidityETH_lt: FANTOM_BigDecimal
  liquidityETH_gte: FANTOM_BigDecimal
  liquidityETH_lte: FANTOM_BigDecimal
  liquidityETH_in: [FANTOM_BigDecimal!]
  liquidityETH_not_in: [FANTOM_BigDecimal!]
  liquidityUSD: FANTOM_BigDecimal
  liquidityUSD_not: FANTOM_BigDecimal
  liquidityUSD_gt: FANTOM_BigDecimal
  liquidityUSD_lt: FANTOM_BigDecimal
  liquidityUSD_gte: FANTOM_BigDecimal
  liquidityUSD_lte: FANTOM_BigDecimal
  liquidityUSD_in: [FANTOM_BigDecimal!]
  liquidityUSD_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_DayData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type FANTOM_Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: FANTOM_BigDecimal!
  volumeETH: FANTOM_BigDecimal!
  untrackedVolumeUSD: FANTOM_BigDecimal!
  liquidityUSD: FANTOM_BigDecimal!
  liquidityETH: FANTOM_BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Pair_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Pair_filter): [FANTOM_Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Token_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Token_filter): [FANTOM_Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: FANTOM_HourData_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_HourData_filter): [FANTOM_HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: FANTOM_DayData_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_DayData_filter): [FANTOM_DayData!]!
}

input FANTOM_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  volumeETH: FANTOM_BigDecimal
  volumeETH_not: FANTOM_BigDecimal
  volumeETH_gt: FANTOM_BigDecimal
  volumeETH_lt: FANTOM_BigDecimal
  volumeETH_gte: FANTOM_BigDecimal
  volumeETH_lte: FANTOM_BigDecimal
  volumeETH_in: [FANTOM_BigDecimal!]
  volumeETH_not_in: [FANTOM_BigDecimal!]
  untrackedVolumeUSD: FANTOM_BigDecimal
  untrackedVolumeUSD_not: FANTOM_BigDecimal
  untrackedVolumeUSD_gt: FANTOM_BigDecimal
  untrackedVolumeUSD_lt: FANTOM_BigDecimal
  untrackedVolumeUSD_gte: FANTOM_BigDecimal
  untrackedVolumeUSD_lte: FANTOM_BigDecimal
  untrackedVolumeUSD_in: [FANTOM_BigDecimal!]
  untrackedVolumeUSD_not_in: [FANTOM_BigDecimal!]
  liquidityUSD: FANTOM_BigDecimal
  liquidityUSD_not: FANTOM_BigDecimal
  liquidityUSD_gt: FANTOM_BigDecimal
  liquidityUSD_lt: FANTOM_BigDecimal
  liquidityUSD_gte: FANTOM_BigDecimal
  liquidityUSD_lte: FANTOM_BigDecimal
  liquidityUSD_in: [FANTOM_BigDecimal!]
  liquidityUSD_not_in: [FANTOM_BigDecimal!]
  liquidityETH: FANTOM_BigDecimal
  liquidityETH_not: FANTOM_BigDecimal
  liquidityETH_gt: FANTOM_BigDecimal
  liquidityETH_lt: FANTOM_BigDecimal
  liquidityETH_gte: FANTOM_BigDecimal
  liquidityETH_lte: FANTOM_BigDecimal
  liquidityETH_in: [FANTOM_BigDecimal!]
  liquidityETH_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
}

type FANTOM_HourData {
  id: ID!
  date: Int!
  factory: FANTOM_Factory!
  volumeETH: FANTOM_BigDecimal!
  volumeUSD: FANTOM_BigDecimal!
  untrackedVolume: FANTOM_BigDecimal!
  liquidityETH: FANTOM_BigDecimal!
  liquidityUSD: FANTOM_BigDecimal!
  txCount: BigInt!
}

input FANTOM_HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: FANTOM_BigDecimal
  volumeETH_not: FANTOM_BigDecimal
  volumeETH_gt: FANTOM_BigDecimal
  volumeETH_lt: FANTOM_BigDecimal
  volumeETH_gte: FANTOM_BigDecimal
  volumeETH_lte: FANTOM_BigDecimal
  volumeETH_in: [FANTOM_BigDecimal!]
  volumeETH_not_in: [FANTOM_BigDecimal!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  untrackedVolume: FANTOM_BigDecimal
  untrackedVolume_not: FANTOM_BigDecimal
  untrackedVolume_gt: FANTOM_BigDecimal
  untrackedVolume_lt: FANTOM_BigDecimal
  untrackedVolume_gte: FANTOM_BigDecimal
  untrackedVolume_lte: FANTOM_BigDecimal
  untrackedVolume_in: [FANTOM_BigDecimal!]
  untrackedVolume_not_in: [FANTOM_BigDecimal!]
  liquidityETH: FANTOM_BigDecimal
  liquidityETH_not: FANTOM_BigDecimal
  liquidityETH_gt: FANTOM_BigDecimal
  liquidityETH_lt: FANTOM_BigDecimal
  liquidityETH_gte: FANTOM_BigDecimal
  liquidityETH_lte: FANTOM_BigDecimal
  liquidityETH_in: [FANTOM_BigDecimal!]
  liquidityETH_not_in: [FANTOM_BigDecimal!]
  liquidityUSD: FANTOM_BigDecimal
  liquidityUSD_not: FANTOM_BigDecimal
  liquidityUSD_gt: FANTOM_BigDecimal
  liquidityUSD_lt: FANTOM_BigDecimal
  liquidityUSD_gte: FANTOM_BigDecimal
  liquidityUSD_lte: FANTOM_BigDecimal
  liquidityUSD_in: [FANTOM_BigDecimal!]
  liquidityUSD_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_HourData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type FANTOM_LiquidityPosition {
  id: ID!
  user: FANTOM_User!
  pair: FANTOM_Pair!
  liquidityTokenBalance: FANTOM_BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: FANTOM_LiquidityPositionSnapshot_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_LiquidityPositionSnapshot_filter): [FANTOM_LiquidityPositionSnapshot]!
  block: Int!
  timestamp: Int!
}

type FANTOM_LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: FANTOM_LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: FANTOM_User!
  pair: FANTOM_Pair!
  token0PriceUSD: FANTOM_BigDecimal!
  token1PriceUSD: FANTOM_BigDecimal!
  reserve0: FANTOM_BigDecimal!
  reserve1: FANTOM_BigDecimal!
  reserveUSD: FANTOM_BigDecimal!
  liquidityTokenTotalSupply: FANTOM_BigDecimal!
  liquidityTokenBalance: FANTOM_BigDecimal!
}

input FANTOM_LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0PriceUSD: FANTOM_BigDecimal
  token0PriceUSD_not: FANTOM_BigDecimal
  token0PriceUSD_gt: FANTOM_BigDecimal
  token0PriceUSD_lt: FANTOM_BigDecimal
  token0PriceUSD_gte: FANTOM_BigDecimal
  token0PriceUSD_lte: FANTOM_BigDecimal
  token0PriceUSD_in: [FANTOM_BigDecimal!]
  token0PriceUSD_not_in: [FANTOM_BigDecimal!]
  token1PriceUSD: FANTOM_BigDecimal
  token1PriceUSD_not: FANTOM_BigDecimal
  token1PriceUSD_gt: FANTOM_BigDecimal
  token1PriceUSD_lt: FANTOM_BigDecimal
  token1PriceUSD_gte: FANTOM_BigDecimal
  token1PriceUSD_lte: FANTOM_BigDecimal
  token1PriceUSD_in: [FANTOM_BigDecimal!]
  token1PriceUSD_not_in: [FANTOM_BigDecimal!]
  reserve0: FANTOM_BigDecimal
  reserve0_not: FANTOM_BigDecimal
  reserve0_gt: FANTOM_BigDecimal
  reserve0_lt: FANTOM_BigDecimal
  reserve0_gte: FANTOM_BigDecimal
  reserve0_lte: FANTOM_BigDecimal
  reserve0_in: [FANTOM_BigDecimal!]
  reserve0_not_in: [FANTOM_BigDecimal!]
  reserve1: FANTOM_BigDecimal
  reserve1_not: FANTOM_BigDecimal
  reserve1_gt: FANTOM_BigDecimal
  reserve1_lt: FANTOM_BigDecimal
  reserve1_gte: FANTOM_BigDecimal
  reserve1_lte: FANTOM_BigDecimal
  reserve1_in: [FANTOM_BigDecimal!]
  reserve1_not_in: [FANTOM_BigDecimal!]
  reserveUSD: FANTOM_BigDecimal
  reserveUSD_not: FANTOM_BigDecimal
  reserveUSD_gt: FANTOM_BigDecimal
  reserveUSD_lt: FANTOM_BigDecimal
  reserveUSD_gte: FANTOM_BigDecimal
  reserveUSD_lte: FANTOM_BigDecimal
  reserveUSD_in: [FANTOM_BigDecimal!]
  reserveUSD_not_in: [FANTOM_BigDecimal!]
  liquidityTokenTotalSupply: FANTOM_BigDecimal
  liquidityTokenTotalSupply_not: FANTOM_BigDecimal
  liquidityTokenTotalSupply_gt: FANTOM_BigDecimal
  liquidityTokenTotalSupply_lt: FANTOM_BigDecimal
  liquidityTokenTotalSupply_gte: FANTOM_BigDecimal
  liquidityTokenTotalSupply_lte: FANTOM_BigDecimal
  liquidityTokenTotalSupply_in: [FANTOM_BigDecimal!]
  liquidityTokenTotalSupply_not_in: [FANTOM_BigDecimal!]
  liquidityTokenBalance: FANTOM_BigDecimal
  liquidityTokenBalance_not: FANTOM_BigDecimal
  liquidityTokenBalance_gt: FANTOM_BigDecimal
  liquidityTokenBalance_lt: FANTOM_BigDecimal
  liquidityTokenBalance_gte: FANTOM_BigDecimal
  liquidityTokenBalance_lte: FANTOM_BigDecimal
  liquidityTokenBalance_in: [FANTOM_BigDecimal!]
  liquidityTokenBalance_not_in: [FANTOM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  timestamp
  block
  user
  pair
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input FANTOM_LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidityTokenBalance: FANTOM_BigDecimal
  liquidityTokenBalance_not: FANTOM_BigDecimal
  liquidityTokenBalance_gt: FANTOM_BigDecimal
  liquidityTokenBalance_lt: FANTOM_BigDecimal
  liquidityTokenBalance_gte: FANTOM_BigDecimal
  liquidityTokenBalance_lte: FANTOM_BigDecimal
  liquidityTokenBalance_in: [FANTOM_BigDecimal!]
  liquidityTokenBalance_not_in: [FANTOM_BigDecimal!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_LiquidityPosition_orderBy {
  id
  user
  pair
  liquidityTokenBalance
  snapshots
  block
  timestamp
}

type FANTOM_Mint {
  id: ID!
  transaction: FANTOM_Transaction!
  timestamp: BigInt!
  pair: FANTOM_Pair!
  to: FANTOM_Bytes!
  liquidity: FANTOM_BigDecimal!
  sender: FANTOM_Bytes
  amount0: FANTOM_BigDecimal
  amount1: FANTOM_BigDecimal
  logIndex: BigInt
  amountUSD: FANTOM_BigDecimal
  feeTo: FANTOM_Bytes
  feeLiquidity: FANTOM_BigDecimal
}

input FANTOM_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  to: FANTOM_Bytes
  to_not: FANTOM_Bytes
  to_in: [FANTOM_Bytes!]
  to_not_in: [FANTOM_Bytes!]
  to_contains: FANTOM_Bytes
  to_not_contains: FANTOM_Bytes
  liquidity: FANTOM_BigDecimal
  liquidity_not: FANTOM_BigDecimal
  liquidity_gt: FANTOM_BigDecimal
  liquidity_lt: FANTOM_BigDecimal
  liquidity_gte: FANTOM_BigDecimal
  liquidity_lte: FANTOM_BigDecimal
  liquidity_in: [FANTOM_BigDecimal!]
  liquidity_not_in: [FANTOM_BigDecimal!]
  sender: FANTOM_Bytes
  sender_not: FANTOM_Bytes
  sender_in: [FANTOM_Bytes!]
  sender_not_in: [FANTOM_Bytes!]
  sender_contains: FANTOM_Bytes
  sender_not_contains: FANTOM_Bytes
  amount0: FANTOM_BigDecimal
  amount0_not: FANTOM_BigDecimal
  amount0_gt: FANTOM_BigDecimal
  amount0_lt: FANTOM_BigDecimal
  amount0_gte: FANTOM_BigDecimal
  amount0_lte: FANTOM_BigDecimal
  amount0_in: [FANTOM_BigDecimal!]
  amount0_not_in: [FANTOM_BigDecimal!]
  amount1: FANTOM_BigDecimal
  amount1_not: FANTOM_BigDecimal
  amount1_gt: FANTOM_BigDecimal
  amount1_lt: FANTOM_BigDecimal
  amount1_gte: FANTOM_BigDecimal
  amount1_lte: FANTOM_BigDecimal
  amount1_in: [FANTOM_BigDecimal!]
  amount1_not_in: [FANTOM_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: FANTOM_BigDecimal
  amountUSD_not: FANTOM_BigDecimal
  amountUSD_gt: FANTOM_BigDecimal
  amountUSD_lt: FANTOM_BigDecimal
  amountUSD_gte: FANTOM_BigDecimal
  amountUSD_lte: FANTOM_BigDecimal
  amountUSD_in: [FANTOM_BigDecimal!]
  amountUSD_not_in: [FANTOM_BigDecimal!]
  feeTo: FANTOM_Bytes
  feeTo_not: FANTOM_Bytes
  feeTo_in: [FANTOM_Bytes!]
  feeTo_not_in: [FANTOM_Bytes!]
  feeTo_contains: FANTOM_Bytes
  feeTo_not_contains: FANTOM_Bytes
  feeLiquidity: FANTOM_BigDecimal
  feeLiquidity_not: FANTOM_BigDecimal
  feeLiquidity_gt: FANTOM_BigDecimal
  feeLiquidity_lt: FANTOM_BigDecimal
  feeLiquidity_gte: FANTOM_BigDecimal
  feeLiquidity_lte: FANTOM_BigDecimal
  feeLiquidity_in: [FANTOM_BigDecimal!]
  feeLiquidity_not_in: [FANTOM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_Mint_orderBy {
  id
  transaction
  timestamp
  pair
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

"""Defines the order direction, either ascending or descending"""
enum FANTOM_OrderDirection {
  asc
  desc
}

type FANTOM_Pair {
  id: ID!
  factory: FANTOM_Factory!
  name: String!
  token0: FANTOM_Token!
  token1: FANTOM_Token!
  reserve0: FANTOM_BigDecimal!
  reserve1: FANTOM_BigDecimal!
  totalSupply: FANTOM_BigDecimal!
  reserveETH: FANTOM_BigDecimal!
  reserveUSD: FANTOM_BigDecimal!
  trackedReserveETH: FANTOM_BigDecimal!
  token0Price: FANTOM_BigDecimal!
  token1Price: FANTOM_BigDecimal!
  volumeToken0: FANTOM_BigDecimal!
  volumeToken1: FANTOM_BigDecimal!
  volumeUSD: FANTOM_BigDecimal!
  untrackedVolumeUSD: FANTOM_BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: FANTOM_LiquidityPosition_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_LiquidityPosition_filter): [FANTOM_LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: FANTOM_LiquidityPositionSnapshot_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_LiquidityPositionSnapshot_filter): [FANTOM_LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: FANTOM_PairDayData_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_PairDayData_filter): [FANTOM_PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: FANTOM_PairHourData_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_PairHourData_filter): [FANTOM_PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Mint_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Mint_filter): [FANTOM_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Burn_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Burn_filter): [FANTOM_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Swap_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Swap_filter): [FANTOM_Swap!]!
  timestamp: BigInt!
  block: BigInt!
}

type FANTOM_PairDayData {
  id: ID!
  date: Int!
  pair: FANTOM_Pair!
  token0: FANTOM_Token!
  token1: FANTOM_Token!
  reserve0: FANTOM_BigDecimal!
  reserve1: FANTOM_BigDecimal!
  totalSupply: FANTOM_BigDecimal!
  reserveUSD: FANTOM_BigDecimal!
  volumeToken0: FANTOM_BigDecimal!
  volumeToken1: FANTOM_BigDecimal!
  volumeUSD: FANTOM_BigDecimal!
  txCount: BigInt!
}

input FANTOM_PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: FANTOM_BigDecimal
  reserve0_not: FANTOM_BigDecimal
  reserve0_gt: FANTOM_BigDecimal
  reserve0_lt: FANTOM_BigDecimal
  reserve0_gte: FANTOM_BigDecimal
  reserve0_lte: FANTOM_BigDecimal
  reserve0_in: [FANTOM_BigDecimal!]
  reserve0_not_in: [FANTOM_BigDecimal!]
  reserve1: FANTOM_BigDecimal
  reserve1_not: FANTOM_BigDecimal
  reserve1_gt: FANTOM_BigDecimal
  reserve1_lt: FANTOM_BigDecimal
  reserve1_gte: FANTOM_BigDecimal
  reserve1_lte: FANTOM_BigDecimal
  reserve1_in: [FANTOM_BigDecimal!]
  reserve1_not_in: [FANTOM_BigDecimal!]
  totalSupply: FANTOM_BigDecimal
  totalSupply_not: FANTOM_BigDecimal
  totalSupply_gt: FANTOM_BigDecimal
  totalSupply_lt: FANTOM_BigDecimal
  totalSupply_gte: FANTOM_BigDecimal
  totalSupply_lte: FANTOM_BigDecimal
  totalSupply_in: [FANTOM_BigDecimal!]
  totalSupply_not_in: [FANTOM_BigDecimal!]
  reserveUSD: FANTOM_BigDecimal
  reserveUSD_not: FANTOM_BigDecimal
  reserveUSD_gt: FANTOM_BigDecimal
  reserveUSD_lt: FANTOM_BigDecimal
  reserveUSD_gte: FANTOM_BigDecimal
  reserveUSD_lte: FANTOM_BigDecimal
  reserveUSD_in: [FANTOM_BigDecimal!]
  reserveUSD_not_in: [FANTOM_BigDecimal!]
  volumeToken0: FANTOM_BigDecimal
  volumeToken0_not: FANTOM_BigDecimal
  volumeToken0_gt: FANTOM_BigDecimal
  volumeToken0_lt: FANTOM_BigDecimal
  volumeToken0_gte: FANTOM_BigDecimal
  volumeToken0_lte: FANTOM_BigDecimal
  volumeToken0_in: [FANTOM_BigDecimal!]
  volumeToken0_not_in: [FANTOM_BigDecimal!]
  volumeToken1: FANTOM_BigDecimal
  volumeToken1_not: FANTOM_BigDecimal
  volumeToken1_gt: FANTOM_BigDecimal
  volumeToken1_lt: FANTOM_BigDecimal
  volumeToken1_gte: FANTOM_BigDecimal
  volumeToken1_lte: FANTOM_BigDecimal
  volumeToken1_in: [FANTOM_BigDecimal!]
  volumeToken1_not_in: [FANTOM_BigDecimal!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_PairDayData_orderBy {
  id
  date
  pair
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

type FANTOM_PairHourData {
  id: ID!
  date: Int!
  pair: FANTOM_Pair!
  reserve0: FANTOM_BigDecimal!
  reserve1: FANTOM_BigDecimal!
  reserveUSD: FANTOM_BigDecimal!
  volumeToken0: FANTOM_BigDecimal!
  volumeToken1: FANTOM_BigDecimal!
  volumeUSD: FANTOM_BigDecimal!
  txCount: BigInt!
}

input FANTOM_PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  reserve0: FANTOM_BigDecimal
  reserve0_not: FANTOM_BigDecimal
  reserve0_gt: FANTOM_BigDecimal
  reserve0_lt: FANTOM_BigDecimal
  reserve0_gte: FANTOM_BigDecimal
  reserve0_lte: FANTOM_BigDecimal
  reserve0_in: [FANTOM_BigDecimal!]
  reserve0_not_in: [FANTOM_BigDecimal!]
  reserve1: FANTOM_BigDecimal
  reserve1_not: FANTOM_BigDecimal
  reserve1_gt: FANTOM_BigDecimal
  reserve1_lt: FANTOM_BigDecimal
  reserve1_gte: FANTOM_BigDecimal
  reserve1_lte: FANTOM_BigDecimal
  reserve1_in: [FANTOM_BigDecimal!]
  reserve1_not_in: [FANTOM_BigDecimal!]
  reserveUSD: FANTOM_BigDecimal
  reserveUSD_not: FANTOM_BigDecimal
  reserveUSD_gt: FANTOM_BigDecimal
  reserveUSD_lt: FANTOM_BigDecimal
  reserveUSD_gte: FANTOM_BigDecimal
  reserveUSD_lte: FANTOM_BigDecimal
  reserveUSD_in: [FANTOM_BigDecimal!]
  reserveUSD_not_in: [FANTOM_BigDecimal!]
  volumeToken0: FANTOM_BigDecimal
  volumeToken0_not: FANTOM_BigDecimal
  volumeToken0_gt: FANTOM_BigDecimal
  volumeToken0_lt: FANTOM_BigDecimal
  volumeToken0_gte: FANTOM_BigDecimal
  volumeToken0_lte: FANTOM_BigDecimal
  volumeToken0_in: [FANTOM_BigDecimal!]
  volumeToken0_not_in: [FANTOM_BigDecimal!]
  volumeToken1: FANTOM_BigDecimal
  volumeToken1_not: FANTOM_BigDecimal
  volumeToken1_gt: FANTOM_BigDecimal
  volumeToken1_lt: FANTOM_BigDecimal
  volumeToken1_gte: FANTOM_BigDecimal
  volumeToken1_lte: FANTOM_BigDecimal
  volumeToken1_in: [FANTOM_BigDecimal!]
  volumeToken1_not_in: [FANTOM_BigDecimal!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_PairHourData_orderBy {
  id
  date
  pair
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

input FANTOM_Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: FANTOM_BigDecimal
  reserve0_not: FANTOM_BigDecimal
  reserve0_gt: FANTOM_BigDecimal
  reserve0_lt: FANTOM_BigDecimal
  reserve0_gte: FANTOM_BigDecimal
  reserve0_lte: FANTOM_BigDecimal
  reserve0_in: [FANTOM_BigDecimal!]
  reserve0_not_in: [FANTOM_BigDecimal!]
  reserve1: FANTOM_BigDecimal
  reserve1_not: FANTOM_BigDecimal
  reserve1_gt: FANTOM_BigDecimal
  reserve1_lt: FANTOM_BigDecimal
  reserve1_gte: FANTOM_BigDecimal
  reserve1_lte: FANTOM_BigDecimal
  reserve1_in: [FANTOM_BigDecimal!]
  reserve1_not_in: [FANTOM_BigDecimal!]
  totalSupply: FANTOM_BigDecimal
  totalSupply_not: FANTOM_BigDecimal
  totalSupply_gt: FANTOM_BigDecimal
  totalSupply_lt: FANTOM_BigDecimal
  totalSupply_gte: FANTOM_BigDecimal
  totalSupply_lte: FANTOM_BigDecimal
  totalSupply_in: [FANTOM_BigDecimal!]
  totalSupply_not_in: [FANTOM_BigDecimal!]
  reserveETH: FANTOM_BigDecimal
  reserveETH_not: FANTOM_BigDecimal
  reserveETH_gt: FANTOM_BigDecimal
  reserveETH_lt: FANTOM_BigDecimal
  reserveETH_gte: FANTOM_BigDecimal
  reserveETH_lte: FANTOM_BigDecimal
  reserveETH_in: [FANTOM_BigDecimal!]
  reserveETH_not_in: [FANTOM_BigDecimal!]
  reserveUSD: FANTOM_BigDecimal
  reserveUSD_not: FANTOM_BigDecimal
  reserveUSD_gt: FANTOM_BigDecimal
  reserveUSD_lt: FANTOM_BigDecimal
  reserveUSD_gte: FANTOM_BigDecimal
  reserveUSD_lte: FANTOM_BigDecimal
  reserveUSD_in: [FANTOM_BigDecimal!]
  reserveUSD_not_in: [FANTOM_BigDecimal!]
  trackedReserveETH: FANTOM_BigDecimal
  trackedReserveETH_not: FANTOM_BigDecimal
  trackedReserveETH_gt: FANTOM_BigDecimal
  trackedReserveETH_lt: FANTOM_BigDecimal
  trackedReserveETH_gte: FANTOM_BigDecimal
  trackedReserveETH_lte: FANTOM_BigDecimal
  trackedReserveETH_in: [FANTOM_BigDecimal!]
  trackedReserveETH_not_in: [FANTOM_BigDecimal!]
  token0Price: FANTOM_BigDecimal
  token0Price_not: FANTOM_BigDecimal
  token0Price_gt: FANTOM_BigDecimal
  token0Price_lt: FANTOM_BigDecimal
  token0Price_gte: FANTOM_BigDecimal
  token0Price_lte: FANTOM_BigDecimal
  token0Price_in: [FANTOM_BigDecimal!]
  token0Price_not_in: [FANTOM_BigDecimal!]
  token1Price: FANTOM_BigDecimal
  token1Price_not: FANTOM_BigDecimal
  token1Price_gt: FANTOM_BigDecimal
  token1Price_lt: FANTOM_BigDecimal
  token1Price_gte: FANTOM_BigDecimal
  token1Price_lte: FANTOM_BigDecimal
  token1Price_in: [FANTOM_BigDecimal!]
  token1Price_not_in: [FANTOM_BigDecimal!]
  volumeToken0: FANTOM_BigDecimal
  volumeToken0_not: FANTOM_BigDecimal
  volumeToken0_gt: FANTOM_BigDecimal
  volumeToken0_lt: FANTOM_BigDecimal
  volumeToken0_gte: FANTOM_BigDecimal
  volumeToken0_lte: FANTOM_BigDecimal
  volumeToken0_in: [FANTOM_BigDecimal!]
  volumeToken0_not_in: [FANTOM_BigDecimal!]
  volumeToken1: FANTOM_BigDecimal
  volumeToken1_not: FANTOM_BigDecimal
  volumeToken1_gt: FANTOM_BigDecimal
  volumeToken1_lt: FANTOM_BigDecimal
  volumeToken1_gte: FANTOM_BigDecimal
  volumeToken1_lte: FANTOM_BigDecimal
  volumeToken1_in: [FANTOM_BigDecimal!]
  volumeToken1_not_in: [FANTOM_BigDecimal!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  untrackedVolumeUSD: FANTOM_BigDecimal
  untrackedVolumeUSD_not: FANTOM_BigDecimal
  untrackedVolumeUSD_gt: FANTOM_BigDecimal
  untrackedVolumeUSD_lt: FANTOM_BigDecimal
  untrackedVolumeUSD_gte: FANTOM_BigDecimal
  untrackedVolumeUSD_lte: FANTOM_BigDecimal
  untrackedVolumeUSD_in: [FANTOM_BigDecimal!]
  untrackedVolumeUSD_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_Pair_orderBy {
  id
  factory
  name
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
}

type FANTOM_Swap {
  id: ID!
  transaction: FANTOM_Transaction!
  timestamp: BigInt!
  pair: FANTOM_Pair!
  sender: FANTOM_Bytes!
  amount0In: FANTOM_BigDecimal!
  amount1In: FANTOM_BigDecimal!
  amount0Out: FANTOM_BigDecimal!
  amount1Out: FANTOM_BigDecimal!
  to: FANTOM_Bytes!
  logIndex: BigInt
  amountUSD: FANTOM_BigDecimal!
}

input FANTOM_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  sender: FANTOM_Bytes
  sender_not: FANTOM_Bytes
  sender_in: [FANTOM_Bytes!]
  sender_not_in: [FANTOM_Bytes!]
  sender_contains: FANTOM_Bytes
  sender_not_contains: FANTOM_Bytes
  amount0In: FANTOM_BigDecimal
  amount0In_not: FANTOM_BigDecimal
  amount0In_gt: FANTOM_BigDecimal
  amount0In_lt: FANTOM_BigDecimal
  amount0In_gte: FANTOM_BigDecimal
  amount0In_lte: FANTOM_BigDecimal
  amount0In_in: [FANTOM_BigDecimal!]
  amount0In_not_in: [FANTOM_BigDecimal!]
  amount1In: FANTOM_BigDecimal
  amount1In_not: FANTOM_BigDecimal
  amount1In_gt: FANTOM_BigDecimal
  amount1In_lt: FANTOM_BigDecimal
  amount1In_gte: FANTOM_BigDecimal
  amount1In_lte: FANTOM_BigDecimal
  amount1In_in: [FANTOM_BigDecimal!]
  amount1In_not_in: [FANTOM_BigDecimal!]
  amount0Out: FANTOM_BigDecimal
  amount0Out_not: FANTOM_BigDecimal
  amount0Out_gt: FANTOM_BigDecimal
  amount0Out_lt: FANTOM_BigDecimal
  amount0Out_gte: FANTOM_BigDecimal
  amount0Out_lte: FANTOM_BigDecimal
  amount0Out_in: [FANTOM_BigDecimal!]
  amount0Out_not_in: [FANTOM_BigDecimal!]
  amount1Out: FANTOM_BigDecimal
  amount1Out_not: FANTOM_BigDecimal
  amount1Out_gt: FANTOM_BigDecimal
  amount1Out_lt: FANTOM_BigDecimal
  amount1Out_gte: FANTOM_BigDecimal
  amount1Out_lte: FANTOM_BigDecimal
  amount1Out_in: [FANTOM_BigDecimal!]
  amount1Out_not_in: [FANTOM_BigDecimal!]
  to: FANTOM_Bytes
  to_not: FANTOM_Bytes
  to_in: [FANTOM_Bytes!]
  to_not_in: [FANTOM_Bytes!]
  to_contains: FANTOM_Bytes
  to_not_contains: FANTOM_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: FANTOM_BigDecimal
  amountUSD_not: FANTOM_BigDecimal
  amountUSD_gt: FANTOM_BigDecimal
  amountUSD_lt: FANTOM_BigDecimal
  amountUSD_gte: FANTOM_BigDecimal
  amountUSD_lte: FANTOM_BigDecimal
  amountUSD_in: [FANTOM_BigDecimal!]
  amountUSD_not_in: [FANTOM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_Swap_orderBy {
  id
  transaction
  timestamp
  pair
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
}

type FANTOM_Token {
  id: ID!
  factory: FANTOM_Factory!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: FANTOM_BigDecimal!
  volumeUSD: FANTOM_BigDecimal!
  untrackedVolumeUSD: FANTOM_BigDecimal!
  txCount: BigInt!
  liquidity: FANTOM_BigDecimal!
  derivedETH: FANTOM_BigDecimal!
  hourData(skip: Int = 0, first: Int = 100, orderBy: FANTOM_TokenHourData_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_TokenHourData_filter): [FANTOM_TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: FANTOM_TokenDayData_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_TokenDayData_filter): [FANTOM_TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Pair_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Pair_filter): [FANTOM_Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Pair_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Pair_filter): [FANTOM_Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: FANTOM_PairDayData_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_PairDayData_filter): [FANTOM_PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: FANTOM_PairDayData_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_PairDayData_filter): [FANTOM_PairDayData!]!
}

type FANTOM_TokenDayData {
  id: ID!
  date: Int!
  token: FANTOM_Token!
  volume: FANTOM_BigDecimal!
  volumeETH: FANTOM_BigDecimal!
  volumeUSD: FANTOM_BigDecimal!
  txCount: BigInt!
  liquidity: FANTOM_BigDecimal!
  liquidityETH: FANTOM_BigDecimal!
  liquidityUSD: FANTOM_BigDecimal!
  priceUSD: FANTOM_BigDecimal!
}

input FANTOM_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: FANTOM_BigDecimal
  volume_not: FANTOM_BigDecimal
  volume_gt: FANTOM_BigDecimal
  volume_lt: FANTOM_BigDecimal
  volume_gte: FANTOM_BigDecimal
  volume_lte: FANTOM_BigDecimal
  volume_in: [FANTOM_BigDecimal!]
  volume_not_in: [FANTOM_BigDecimal!]
  volumeETH: FANTOM_BigDecimal
  volumeETH_not: FANTOM_BigDecimal
  volumeETH_gt: FANTOM_BigDecimal
  volumeETH_lt: FANTOM_BigDecimal
  volumeETH_gte: FANTOM_BigDecimal
  volumeETH_lte: FANTOM_BigDecimal
  volumeETH_in: [FANTOM_BigDecimal!]
  volumeETH_not_in: [FANTOM_BigDecimal!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: FANTOM_BigDecimal
  liquidity_not: FANTOM_BigDecimal
  liquidity_gt: FANTOM_BigDecimal
  liquidity_lt: FANTOM_BigDecimal
  liquidity_gte: FANTOM_BigDecimal
  liquidity_lte: FANTOM_BigDecimal
  liquidity_in: [FANTOM_BigDecimal!]
  liquidity_not_in: [FANTOM_BigDecimal!]
  liquidityETH: FANTOM_BigDecimal
  liquidityETH_not: FANTOM_BigDecimal
  liquidityETH_gt: FANTOM_BigDecimal
  liquidityETH_lt: FANTOM_BigDecimal
  liquidityETH_gte: FANTOM_BigDecimal
  liquidityETH_lte: FANTOM_BigDecimal
  liquidityETH_in: [FANTOM_BigDecimal!]
  liquidityETH_not_in: [FANTOM_BigDecimal!]
  liquidityUSD: FANTOM_BigDecimal
  liquidityUSD_not: FANTOM_BigDecimal
  liquidityUSD_gt: FANTOM_BigDecimal
  liquidityUSD_lt: FANTOM_BigDecimal
  liquidityUSD_gte: FANTOM_BigDecimal
  liquidityUSD_lte: FANTOM_BigDecimal
  liquidityUSD_in: [FANTOM_BigDecimal!]
  liquidityUSD_not_in: [FANTOM_BigDecimal!]
  priceUSD: FANTOM_BigDecimal
  priceUSD_not: FANTOM_BigDecimal
  priceUSD_gt: FANTOM_BigDecimal
  priceUSD_lt: FANTOM_BigDecimal
  priceUSD_gte: FANTOM_BigDecimal
  priceUSD_lte: FANTOM_BigDecimal
  priceUSD_in: [FANTOM_BigDecimal!]
  priceUSD_not_in: [FANTOM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_TokenDayData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

type FANTOM_TokenHourData {
  id: ID!
  date: Int!
  token: FANTOM_Token!
  volume: FANTOM_BigDecimal!
  volumeETH: FANTOM_BigDecimal!
  volumeUSD: FANTOM_BigDecimal!
  txCount: BigInt!
  liquidity: FANTOM_BigDecimal!
  liquidityETH: FANTOM_BigDecimal!
  liquidityUSD: FANTOM_BigDecimal!
  priceUSD: FANTOM_BigDecimal!
}

input FANTOM_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: FANTOM_BigDecimal
  volume_not: FANTOM_BigDecimal
  volume_gt: FANTOM_BigDecimal
  volume_lt: FANTOM_BigDecimal
  volume_gte: FANTOM_BigDecimal
  volume_lte: FANTOM_BigDecimal
  volume_in: [FANTOM_BigDecimal!]
  volume_not_in: [FANTOM_BigDecimal!]
  volumeETH: FANTOM_BigDecimal
  volumeETH_not: FANTOM_BigDecimal
  volumeETH_gt: FANTOM_BigDecimal
  volumeETH_lt: FANTOM_BigDecimal
  volumeETH_gte: FANTOM_BigDecimal
  volumeETH_lte: FANTOM_BigDecimal
  volumeETH_in: [FANTOM_BigDecimal!]
  volumeETH_not_in: [FANTOM_BigDecimal!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: FANTOM_BigDecimal
  liquidity_not: FANTOM_BigDecimal
  liquidity_gt: FANTOM_BigDecimal
  liquidity_lt: FANTOM_BigDecimal
  liquidity_gte: FANTOM_BigDecimal
  liquidity_lte: FANTOM_BigDecimal
  liquidity_in: [FANTOM_BigDecimal!]
  liquidity_not_in: [FANTOM_BigDecimal!]
  liquidityETH: FANTOM_BigDecimal
  liquidityETH_not: FANTOM_BigDecimal
  liquidityETH_gt: FANTOM_BigDecimal
  liquidityETH_lt: FANTOM_BigDecimal
  liquidityETH_gte: FANTOM_BigDecimal
  liquidityETH_lte: FANTOM_BigDecimal
  liquidityETH_in: [FANTOM_BigDecimal!]
  liquidityETH_not_in: [FANTOM_BigDecimal!]
  liquidityUSD: FANTOM_BigDecimal
  liquidityUSD_not: FANTOM_BigDecimal
  liquidityUSD_gt: FANTOM_BigDecimal
  liquidityUSD_lt: FANTOM_BigDecimal
  liquidityUSD_gte: FANTOM_BigDecimal
  liquidityUSD_lte: FANTOM_BigDecimal
  liquidityUSD_in: [FANTOM_BigDecimal!]
  liquidityUSD_not_in: [FANTOM_BigDecimal!]
  priceUSD: FANTOM_BigDecimal
  priceUSD_not: FANTOM_BigDecimal
  priceUSD_gt: FANTOM_BigDecimal
  priceUSD_lt: FANTOM_BigDecimal
  priceUSD_gte: FANTOM_BigDecimal
  priceUSD_lte: FANTOM_BigDecimal
  priceUSD_in: [FANTOM_BigDecimal!]
  priceUSD_not_in: [FANTOM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_TokenHourData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

input FANTOM_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: FANTOM_BigDecimal
  volume_not: FANTOM_BigDecimal
  volume_gt: FANTOM_BigDecimal
  volume_lt: FANTOM_BigDecimal
  volume_gte: FANTOM_BigDecimal
  volume_lte: FANTOM_BigDecimal
  volume_in: [FANTOM_BigDecimal!]
  volume_not_in: [FANTOM_BigDecimal!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  untrackedVolumeUSD: FANTOM_BigDecimal
  untrackedVolumeUSD_not: FANTOM_BigDecimal
  untrackedVolumeUSD_gt: FANTOM_BigDecimal
  untrackedVolumeUSD_lt: FANTOM_BigDecimal
  untrackedVolumeUSD_gte: FANTOM_BigDecimal
  untrackedVolumeUSD_lte: FANTOM_BigDecimal
  untrackedVolumeUSD_in: [FANTOM_BigDecimal!]
  untrackedVolumeUSD_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: FANTOM_BigDecimal
  liquidity_not: FANTOM_BigDecimal
  liquidity_gt: FANTOM_BigDecimal
  liquidity_lt: FANTOM_BigDecimal
  liquidity_gte: FANTOM_BigDecimal
  liquidity_lte: FANTOM_BigDecimal
  liquidity_in: [FANTOM_BigDecimal!]
  liquidity_not_in: [FANTOM_BigDecimal!]
  derivedETH: FANTOM_BigDecimal
  derivedETH_not: FANTOM_BigDecimal
  derivedETH_gt: FANTOM_BigDecimal
  derivedETH_lt: FANTOM_BigDecimal
  derivedETH_gte: FANTOM_BigDecimal
  derivedETH_lte: FANTOM_BigDecimal
  derivedETH_in: [FANTOM_BigDecimal!]
  derivedETH_not_in: [FANTOM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_Token_orderBy {
  id
  factory
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
}

type FANTOM_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Mint_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Mint_filter): [FANTOM_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Burn_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Burn_filter): [FANTOM_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Swap_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Swap_filter): [FANTOM_Swap]!
}

input FANTOM_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
}

type FANTOM_User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: FANTOM_LiquidityPosition_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_LiquidityPosition_filter): [FANTOM_LiquidityPosition!]!
}

input FANTOM_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]

  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_User_orderBy {
  id
  liquidityPositions
}

type FANTOM__Block_ {
  """The hash of the block"""
  hash: FANTOM_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type FANTOM__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: FANTOM__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

scalar AVALANCHE_BigDecimal

input AVALANCHE_BlockChangedFilter {
  number_gte: Int!
}

input AVALANCHE_Block_height {
  hash: AVALANCHE_Bytes
  number: Int
  number_gte: Int
}

type AVALANCHE_Bundle {
  id: ID!
  ethPrice: AVALANCHE_BigDecimal!
}

input AVALANCHE_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: AVALANCHE_BigDecimal
  ethPrice_not: AVALANCHE_BigDecimal
  ethPrice_gt: AVALANCHE_BigDecimal
  ethPrice_lt: AVALANCHE_BigDecimal
  ethPrice_gte: AVALANCHE_BigDecimal
  ethPrice_lte: AVALANCHE_BigDecimal
  ethPrice_in: [AVALANCHE_BigDecimal!]
  ethPrice_not_in: [AVALANCHE_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_Bundle_orderBy {
  id
  ethPrice
}

type AVALANCHE_Burn {
  id: ID!
  transaction: AVALANCHE_Transaction!
  timestamp: BigInt!
  pair: AVALANCHE_Pair!
  liquidity: AVALANCHE_BigDecimal!
  sender: AVALANCHE_Bytes
  amount0: AVALANCHE_BigDecimal
  amount1: AVALANCHE_BigDecimal
  to: AVALANCHE_Bytes
  logIndex: BigInt
  amountUSD: AVALANCHE_BigDecimal
  complete: Boolean!
  feeTo: AVALANCHE_Bytes
  feeLiquidity: AVALANCHE_BigDecimal
}

input AVALANCHE_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidity: AVALANCHE_BigDecimal
  liquidity_not: AVALANCHE_BigDecimal
  liquidity_gt: AVALANCHE_BigDecimal
  liquidity_lt: AVALANCHE_BigDecimal
  liquidity_gte: AVALANCHE_BigDecimal
  liquidity_lte: AVALANCHE_BigDecimal
  liquidity_in: [AVALANCHE_BigDecimal!]
  liquidity_not_in: [AVALANCHE_BigDecimal!]
  sender: AVALANCHE_Bytes
  sender_not: AVALANCHE_Bytes
  sender_in: [AVALANCHE_Bytes!]
  sender_not_in: [AVALANCHE_Bytes!]
  sender_contains: AVALANCHE_Bytes
  sender_not_contains: AVALANCHE_Bytes
  amount0: AVALANCHE_BigDecimal
  amount0_not: AVALANCHE_BigDecimal
  amount0_gt: AVALANCHE_BigDecimal
  amount0_lt: AVALANCHE_BigDecimal
  amount0_gte: AVALANCHE_BigDecimal
  amount0_lte: AVALANCHE_BigDecimal
  amount0_in: [AVALANCHE_BigDecimal!]
  amount0_not_in: [AVALANCHE_BigDecimal!]
  amount1: AVALANCHE_BigDecimal
  amount1_not: AVALANCHE_BigDecimal
  amount1_gt: AVALANCHE_BigDecimal
  amount1_lt: AVALANCHE_BigDecimal
  amount1_gte: AVALANCHE_BigDecimal
  amount1_lte: AVALANCHE_BigDecimal
  amount1_in: [AVALANCHE_BigDecimal!]
  amount1_not_in: [AVALANCHE_BigDecimal!]
  to: AVALANCHE_Bytes
  to_not: AVALANCHE_Bytes
  to_in: [AVALANCHE_Bytes!]
  to_not_in: [AVALANCHE_Bytes!]
  to_contains: AVALANCHE_Bytes
  to_not_contains: AVALANCHE_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: AVALANCHE_BigDecimal
  amountUSD_not: AVALANCHE_BigDecimal
  amountUSD_gt: AVALANCHE_BigDecimal
  amountUSD_lt: AVALANCHE_BigDecimal
  amountUSD_gte: AVALANCHE_BigDecimal
  amountUSD_lte: AVALANCHE_BigDecimal
  amountUSD_in: [AVALANCHE_BigDecimal!]
  amountUSD_not_in: [AVALANCHE_BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: AVALANCHE_Bytes
  feeTo_not: AVALANCHE_Bytes
  feeTo_in: [AVALANCHE_Bytes!]
  feeTo_not_in: [AVALANCHE_Bytes!]
  feeTo_contains: AVALANCHE_Bytes
  feeTo_not_contains: AVALANCHE_Bytes
  feeLiquidity: AVALANCHE_BigDecimal
  feeLiquidity_not: AVALANCHE_BigDecimal
  feeLiquidity_gt: AVALANCHE_BigDecimal
  feeLiquidity_lt: AVALANCHE_BigDecimal
  feeLiquidity_gte: AVALANCHE_BigDecimal
  feeLiquidity_lte: AVALANCHE_BigDecimal
  feeLiquidity_in: [AVALANCHE_BigDecimal!]
  feeLiquidity_not_in: [AVALANCHE_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_Burn_orderBy {
  id
  transaction
  timestamp
  pair
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

scalar AVALANCHE_Bytes

type AVALANCHE_DayData {
  id: ID!
  date: Int!
  factory: AVALANCHE_Factory!
  volumeETH: AVALANCHE_BigDecimal!
  volumeUSD: AVALANCHE_BigDecimal!
  untrackedVolume: AVALANCHE_BigDecimal!
  liquidityETH: AVALANCHE_BigDecimal!
  liquidityUSD: AVALANCHE_BigDecimal!
  txCount: BigInt!
}

input AVALANCHE_DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: AVALANCHE_BigDecimal
  volumeETH_not: AVALANCHE_BigDecimal
  volumeETH_gt: AVALANCHE_BigDecimal
  volumeETH_lt: AVALANCHE_BigDecimal
  volumeETH_gte: AVALANCHE_BigDecimal
  volumeETH_lte: AVALANCHE_BigDecimal
  volumeETH_in: [AVALANCHE_BigDecimal!]
  volumeETH_not_in: [AVALANCHE_BigDecimal!]
  volumeUSD: AVALANCHE_BigDecimal
  volumeUSD_not: AVALANCHE_BigDecimal
  volumeUSD_gt: AVALANCHE_BigDecimal
  volumeUSD_lt: AVALANCHE_BigDecimal
  volumeUSD_gte: AVALANCHE_BigDecimal
  volumeUSD_lte: AVALANCHE_BigDecimal
  volumeUSD_in: [AVALANCHE_BigDecimal!]
  volumeUSD_not_in: [AVALANCHE_BigDecimal!]
  untrackedVolume: AVALANCHE_BigDecimal
  untrackedVolume_not: AVALANCHE_BigDecimal
  untrackedVolume_gt: AVALANCHE_BigDecimal
  untrackedVolume_lt: AVALANCHE_BigDecimal
  untrackedVolume_gte: AVALANCHE_BigDecimal
  untrackedVolume_lte: AVALANCHE_BigDecimal
  untrackedVolume_in: [AVALANCHE_BigDecimal!]
  untrackedVolume_not_in: [AVALANCHE_BigDecimal!]
  liquidityETH: AVALANCHE_BigDecimal
  liquidityETH_not: AVALANCHE_BigDecimal
  liquidityETH_gt: AVALANCHE_BigDecimal
  liquidityETH_lt: AVALANCHE_BigDecimal
  liquidityETH_gte: AVALANCHE_BigDecimal
  liquidityETH_lte: AVALANCHE_BigDecimal
  liquidityETH_in: [AVALANCHE_BigDecimal!]
  liquidityETH_not_in: [AVALANCHE_BigDecimal!]
  liquidityUSD: AVALANCHE_BigDecimal
  liquidityUSD_not: AVALANCHE_BigDecimal
  liquidityUSD_gt: AVALANCHE_BigDecimal
  liquidityUSD_lt: AVALANCHE_BigDecimal
  liquidityUSD_gte: AVALANCHE_BigDecimal
  liquidityUSD_lte: AVALANCHE_BigDecimal
  liquidityUSD_in: [AVALANCHE_BigDecimal!]
  liquidityUSD_not_in: [AVALANCHE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_DayData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type AVALANCHE_Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: AVALANCHE_BigDecimal!
  volumeETH: AVALANCHE_BigDecimal!
  untrackedVolumeUSD: AVALANCHE_BigDecimal!
  liquidityUSD: AVALANCHE_BigDecimal!
  liquidityETH: AVALANCHE_BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_Pair_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_Pair_filter): [AVALANCHE_Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_Token_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_Token_filter): [AVALANCHE_Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_HourData_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_HourData_filter): [AVALANCHE_HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_DayData_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_DayData_filter): [AVALANCHE_DayData!]!
}

input AVALANCHE_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: AVALANCHE_BigDecimal
  volumeUSD_not: AVALANCHE_BigDecimal
  volumeUSD_gt: AVALANCHE_BigDecimal
  volumeUSD_lt: AVALANCHE_BigDecimal
  volumeUSD_gte: AVALANCHE_BigDecimal
  volumeUSD_lte: AVALANCHE_BigDecimal
  volumeUSD_in: [AVALANCHE_BigDecimal!]
  volumeUSD_not_in: [AVALANCHE_BigDecimal!]
  volumeETH: AVALANCHE_BigDecimal
  volumeETH_not: AVALANCHE_BigDecimal
  volumeETH_gt: AVALANCHE_BigDecimal
  volumeETH_lt: AVALANCHE_BigDecimal
  volumeETH_gte: AVALANCHE_BigDecimal
  volumeETH_lte: AVALANCHE_BigDecimal
  volumeETH_in: [AVALANCHE_BigDecimal!]
  volumeETH_not_in: [AVALANCHE_BigDecimal!]
  untrackedVolumeUSD: AVALANCHE_BigDecimal
  untrackedVolumeUSD_not: AVALANCHE_BigDecimal
  untrackedVolumeUSD_gt: AVALANCHE_BigDecimal
  untrackedVolumeUSD_lt: AVALANCHE_BigDecimal
  untrackedVolumeUSD_gte: AVALANCHE_BigDecimal
  untrackedVolumeUSD_lte: AVALANCHE_BigDecimal
  untrackedVolumeUSD_in: [AVALANCHE_BigDecimal!]
  untrackedVolumeUSD_not_in: [AVALANCHE_BigDecimal!]
  liquidityUSD: AVALANCHE_BigDecimal
  liquidityUSD_not: AVALANCHE_BigDecimal
  liquidityUSD_gt: AVALANCHE_BigDecimal
  liquidityUSD_lt: AVALANCHE_BigDecimal
  liquidityUSD_gte: AVALANCHE_BigDecimal
  liquidityUSD_lte: AVALANCHE_BigDecimal
  liquidityUSD_in: [AVALANCHE_BigDecimal!]
  liquidityUSD_not_in: [AVALANCHE_BigDecimal!]
  liquidityETH: AVALANCHE_BigDecimal
  liquidityETH_not: AVALANCHE_BigDecimal
  liquidityETH_gt: AVALANCHE_BigDecimal
  liquidityETH_lt: AVALANCHE_BigDecimal
  liquidityETH_gte: AVALANCHE_BigDecimal
  liquidityETH_lte: AVALANCHE_BigDecimal
  liquidityETH_in: [AVALANCHE_BigDecimal!]
  liquidityETH_not_in: [AVALANCHE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
}

type AVALANCHE_HourData {
  id: ID!
  date: Int!
  factory: AVALANCHE_Factory!
  volumeETH: AVALANCHE_BigDecimal!
  volumeUSD: AVALANCHE_BigDecimal!
  untrackedVolume: AVALANCHE_BigDecimal!
  liquidityETH: AVALANCHE_BigDecimal!
  liquidityUSD: AVALANCHE_BigDecimal!
  txCount: BigInt!
}

input AVALANCHE_HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: AVALANCHE_BigDecimal
  volumeETH_not: AVALANCHE_BigDecimal
  volumeETH_gt: AVALANCHE_BigDecimal
  volumeETH_lt: AVALANCHE_BigDecimal
  volumeETH_gte: AVALANCHE_BigDecimal
  volumeETH_lte: AVALANCHE_BigDecimal
  volumeETH_in: [AVALANCHE_BigDecimal!]
  volumeETH_not_in: [AVALANCHE_BigDecimal!]
  volumeUSD: AVALANCHE_BigDecimal
  volumeUSD_not: AVALANCHE_BigDecimal
  volumeUSD_gt: AVALANCHE_BigDecimal
  volumeUSD_lt: AVALANCHE_BigDecimal
  volumeUSD_gte: AVALANCHE_BigDecimal
  volumeUSD_lte: AVALANCHE_BigDecimal
  volumeUSD_in: [AVALANCHE_BigDecimal!]
  volumeUSD_not_in: [AVALANCHE_BigDecimal!]
  untrackedVolume: AVALANCHE_BigDecimal
  untrackedVolume_not: AVALANCHE_BigDecimal
  untrackedVolume_gt: AVALANCHE_BigDecimal
  untrackedVolume_lt: AVALANCHE_BigDecimal
  untrackedVolume_gte: AVALANCHE_BigDecimal
  untrackedVolume_lte: AVALANCHE_BigDecimal
  untrackedVolume_in: [AVALANCHE_BigDecimal!]
  untrackedVolume_not_in: [AVALANCHE_BigDecimal!]
  liquidityETH: AVALANCHE_BigDecimal
  liquidityETH_not: AVALANCHE_BigDecimal
  liquidityETH_gt: AVALANCHE_BigDecimal
  liquidityETH_lt: AVALANCHE_BigDecimal
  liquidityETH_gte: AVALANCHE_BigDecimal
  liquidityETH_lte: AVALANCHE_BigDecimal
  liquidityETH_in: [AVALANCHE_BigDecimal!]
  liquidityETH_not_in: [AVALANCHE_BigDecimal!]
  liquidityUSD: AVALANCHE_BigDecimal
  liquidityUSD_not: AVALANCHE_BigDecimal
  liquidityUSD_gt: AVALANCHE_BigDecimal
  liquidityUSD_lt: AVALANCHE_BigDecimal
  liquidityUSD_gte: AVALANCHE_BigDecimal
  liquidityUSD_lte: AVALANCHE_BigDecimal
  liquidityUSD_in: [AVALANCHE_BigDecimal!]
  liquidityUSD_not_in: [AVALANCHE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_HourData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type AVALANCHE_LiquidityPosition {
  id: ID!
  user: AVALANCHE_User!
  pair: AVALANCHE_Pair!
  liquidityTokenBalance: AVALANCHE_BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_LiquidityPositionSnapshot_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_LiquidityPositionSnapshot_filter): [AVALANCHE_LiquidityPositionSnapshot]!
  block: Int!
  timestamp: Int!
}

type AVALANCHE_LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: AVALANCHE_LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: AVALANCHE_User!
  pair: AVALANCHE_Pair!
  token0PriceUSD: AVALANCHE_BigDecimal!
  token1PriceUSD: AVALANCHE_BigDecimal!
  reserve0: AVALANCHE_BigDecimal!
  reserve1: AVALANCHE_BigDecimal!
  reserveUSD: AVALANCHE_BigDecimal!
  liquidityTokenTotalSupply: AVALANCHE_BigDecimal!
  liquidityTokenBalance: AVALANCHE_BigDecimal!
}

input AVALANCHE_LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0PriceUSD: AVALANCHE_BigDecimal
  token0PriceUSD_not: AVALANCHE_BigDecimal
  token0PriceUSD_gt: AVALANCHE_BigDecimal
  token0PriceUSD_lt: AVALANCHE_BigDecimal
  token0PriceUSD_gte: AVALANCHE_BigDecimal
  token0PriceUSD_lte: AVALANCHE_BigDecimal
  token0PriceUSD_in: [AVALANCHE_BigDecimal!]
  token0PriceUSD_not_in: [AVALANCHE_BigDecimal!]
  token1PriceUSD: AVALANCHE_BigDecimal
  token1PriceUSD_not: AVALANCHE_BigDecimal
  token1PriceUSD_gt: AVALANCHE_BigDecimal
  token1PriceUSD_lt: AVALANCHE_BigDecimal
  token1PriceUSD_gte: AVALANCHE_BigDecimal
  token1PriceUSD_lte: AVALANCHE_BigDecimal
  token1PriceUSD_in: [AVALANCHE_BigDecimal!]
  token1PriceUSD_not_in: [AVALANCHE_BigDecimal!]
  reserve0: AVALANCHE_BigDecimal
  reserve0_not: AVALANCHE_BigDecimal
  reserve0_gt: AVALANCHE_BigDecimal
  reserve0_lt: AVALANCHE_BigDecimal
  reserve0_gte: AVALANCHE_BigDecimal
  reserve0_lte: AVALANCHE_BigDecimal
  reserve0_in: [AVALANCHE_BigDecimal!]
  reserve0_not_in: [AVALANCHE_BigDecimal!]
  reserve1: AVALANCHE_BigDecimal
  reserve1_not: AVALANCHE_BigDecimal
  reserve1_gt: AVALANCHE_BigDecimal
  reserve1_lt: AVALANCHE_BigDecimal
  reserve1_gte: AVALANCHE_BigDecimal
  reserve1_lte: AVALANCHE_BigDecimal
  reserve1_in: [AVALANCHE_BigDecimal!]
  reserve1_not_in: [AVALANCHE_BigDecimal!]
  reserveUSD: AVALANCHE_BigDecimal
  reserveUSD_not: AVALANCHE_BigDecimal
  reserveUSD_gt: AVALANCHE_BigDecimal
  reserveUSD_lt: AVALANCHE_BigDecimal
  reserveUSD_gte: AVALANCHE_BigDecimal
  reserveUSD_lte: AVALANCHE_BigDecimal
  reserveUSD_in: [AVALANCHE_BigDecimal!]
  reserveUSD_not_in: [AVALANCHE_BigDecimal!]
  liquidityTokenTotalSupply: AVALANCHE_BigDecimal
  liquidityTokenTotalSupply_not: AVALANCHE_BigDecimal
  liquidityTokenTotalSupply_gt: AVALANCHE_BigDecimal
  liquidityTokenTotalSupply_lt: AVALANCHE_BigDecimal
  liquidityTokenTotalSupply_gte: AVALANCHE_BigDecimal
  liquidityTokenTotalSupply_lte: AVALANCHE_BigDecimal
  liquidityTokenTotalSupply_in: [AVALANCHE_BigDecimal!]
  liquidityTokenTotalSupply_not_in: [AVALANCHE_BigDecimal!]
  liquidityTokenBalance: AVALANCHE_BigDecimal
  liquidityTokenBalance_not: AVALANCHE_BigDecimal
  liquidityTokenBalance_gt: AVALANCHE_BigDecimal
  liquidityTokenBalance_lt: AVALANCHE_BigDecimal
  liquidityTokenBalance_gte: AVALANCHE_BigDecimal
  liquidityTokenBalance_lte: AVALANCHE_BigDecimal
  liquidityTokenBalance_in: [AVALANCHE_BigDecimal!]
  liquidityTokenBalance_not_in: [AVALANCHE_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  timestamp
  block
  user
  pair
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input AVALANCHE_LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidityTokenBalance: AVALANCHE_BigDecimal
  liquidityTokenBalance_not: AVALANCHE_BigDecimal
  liquidityTokenBalance_gt: AVALANCHE_BigDecimal
  liquidityTokenBalance_lt: AVALANCHE_BigDecimal
  liquidityTokenBalance_gte: AVALANCHE_BigDecimal
  liquidityTokenBalance_lte: AVALANCHE_BigDecimal
  liquidityTokenBalance_in: [AVALANCHE_BigDecimal!]
  liquidityTokenBalance_not_in: [AVALANCHE_BigDecimal!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_LiquidityPosition_orderBy {
  id
  user
  pair
  liquidityTokenBalance
  snapshots
  block
  timestamp
}

type AVALANCHE_Mint {
  id: ID!
  transaction: AVALANCHE_Transaction!
  timestamp: BigInt!
  pair: AVALANCHE_Pair!
  to: AVALANCHE_Bytes!
  liquidity: AVALANCHE_BigDecimal!
  sender: AVALANCHE_Bytes
  amount0: AVALANCHE_BigDecimal
  amount1: AVALANCHE_BigDecimal
  logIndex: BigInt
  amountUSD: AVALANCHE_BigDecimal
  feeTo: AVALANCHE_Bytes
  feeLiquidity: AVALANCHE_BigDecimal
}

input AVALANCHE_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  to: AVALANCHE_Bytes
  to_not: AVALANCHE_Bytes
  to_in: [AVALANCHE_Bytes!]
  to_not_in: [AVALANCHE_Bytes!]
  to_contains: AVALANCHE_Bytes
  to_not_contains: AVALANCHE_Bytes
  liquidity: AVALANCHE_BigDecimal
  liquidity_not: AVALANCHE_BigDecimal
  liquidity_gt: AVALANCHE_BigDecimal
  liquidity_lt: AVALANCHE_BigDecimal
  liquidity_gte: AVALANCHE_BigDecimal
  liquidity_lte: AVALANCHE_BigDecimal
  liquidity_in: [AVALANCHE_BigDecimal!]
  liquidity_not_in: [AVALANCHE_BigDecimal!]
  sender: AVALANCHE_Bytes
  sender_not: AVALANCHE_Bytes
  sender_in: [AVALANCHE_Bytes!]
  sender_not_in: [AVALANCHE_Bytes!]
  sender_contains: AVALANCHE_Bytes
  sender_not_contains: AVALANCHE_Bytes
  amount0: AVALANCHE_BigDecimal
  amount0_not: AVALANCHE_BigDecimal
  amount0_gt: AVALANCHE_BigDecimal
  amount0_lt: AVALANCHE_BigDecimal
  amount0_gte: AVALANCHE_BigDecimal
  amount0_lte: AVALANCHE_BigDecimal
  amount0_in: [AVALANCHE_BigDecimal!]
  amount0_not_in: [AVALANCHE_BigDecimal!]
  amount1: AVALANCHE_BigDecimal
  amount1_not: AVALANCHE_BigDecimal
  amount1_gt: AVALANCHE_BigDecimal
  amount1_lt: AVALANCHE_BigDecimal
  amount1_gte: AVALANCHE_BigDecimal
  amount1_lte: AVALANCHE_BigDecimal
  amount1_in: [AVALANCHE_BigDecimal!]
  amount1_not_in: [AVALANCHE_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: AVALANCHE_BigDecimal
  amountUSD_not: AVALANCHE_BigDecimal
  amountUSD_gt: AVALANCHE_BigDecimal
  amountUSD_lt: AVALANCHE_BigDecimal
  amountUSD_gte: AVALANCHE_BigDecimal
  amountUSD_lte: AVALANCHE_BigDecimal
  amountUSD_in: [AVALANCHE_BigDecimal!]
  amountUSD_not_in: [AVALANCHE_BigDecimal!]
  feeTo: AVALANCHE_Bytes
  feeTo_not: AVALANCHE_Bytes
  feeTo_in: [AVALANCHE_Bytes!]
  feeTo_not_in: [AVALANCHE_Bytes!]
  feeTo_contains: AVALANCHE_Bytes
  feeTo_not_contains: AVALANCHE_Bytes
  feeLiquidity: AVALANCHE_BigDecimal
  feeLiquidity_not: AVALANCHE_BigDecimal
  feeLiquidity_gt: AVALANCHE_BigDecimal
  feeLiquidity_lt: AVALANCHE_BigDecimal
  feeLiquidity_gte: AVALANCHE_BigDecimal
  feeLiquidity_lte: AVALANCHE_BigDecimal
  feeLiquidity_in: [AVALANCHE_BigDecimal!]
  feeLiquidity_not_in: [AVALANCHE_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_Mint_orderBy {
  id
  transaction
  timestamp
  pair
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

"""Defines the order direction, either ascending or descending"""
enum AVALANCHE_OrderDirection {
  asc
  desc
}

type AVALANCHE_Pair {
  id: ID!
  factory: AVALANCHE_Factory!
  name: String!
  token0: AVALANCHE_Token!
  token1: AVALANCHE_Token!
  reserve0: AVALANCHE_BigDecimal!
  reserve1: AVALANCHE_BigDecimal!
  totalSupply: AVALANCHE_BigDecimal!
  reserveETH: AVALANCHE_BigDecimal!
  reserveUSD: AVALANCHE_BigDecimal!
  trackedReserveETH: AVALANCHE_BigDecimal!
  token0Price: AVALANCHE_BigDecimal!
  token1Price: AVALANCHE_BigDecimal!
  volumeToken0: AVALANCHE_BigDecimal!
  volumeToken1: AVALANCHE_BigDecimal!
  volumeUSD: AVALANCHE_BigDecimal!
  untrackedVolumeUSD: AVALANCHE_BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_LiquidityPosition_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_LiquidityPosition_filter): [AVALANCHE_LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_LiquidityPositionSnapshot_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_LiquidityPositionSnapshot_filter): [AVALANCHE_LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_PairDayData_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_PairDayData_filter): [AVALANCHE_PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_PairHourData_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_PairHourData_filter): [AVALANCHE_PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_Mint_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_Mint_filter): [AVALANCHE_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_Burn_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_Burn_filter): [AVALANCHE_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_Swap_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_Swap_filter): [AVALANCHE_Swap!]!
  timestamp: BigInt!
  block: BigInt!
}

type AVALANCHE_PairDayData {
  id: ID!
  date: Int!
  pair: AVALANCHE_Pair!
  token0: AVALANCHE_Token!
  token1: AVALANCHE_Token!
  reserve0: AVALANCHE_BigDecimal!
  reserve1: AVALANCHE_BigDecimal!
  totalSupply: AVALANCHE_BigDecimal!
  reserveUSD: AVALANCHE_BigDecimal!
  volumeToken0: AVALANCHE_BigDecimal!
  volumeToken1: AVALANCHE_BigDecimal!
  volumeUSD: AVALANCHE_BigDecimal!
  txCount: BigInt!
}

input AVALANCHE_PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: AVALANCHE_BigDecimal
  reserve0_not: AVALANCHE_BigDecimal
  reserve0_gt: AVALANCHE_BigDecimal
  reserve0_lt: AVALANCHE_BigDecimal
  reserve0_gte: AVALANCHE_BigDecimal
  reserve0_lte: AVALANCHE_BigDecimal
  reserve0_in: [AVALANCHE_BigDecimal!]
  reserve0_not_in: [AVALANCHE_BigDecimal!]
  reserve1: AVALANCHE_BigDecimal
  reserve1_not: AVALANCHE_BigDecimal
  reserve1_gt: AVALANCHE_BigDecimal
  reserve1_lt: AVALANCHE_BigDecimal
  reserve1_gte: AVALANCHE_BigDecimal
  reserve1_lte: AVALANCHE_BigDecimal
  reserve1_in: [AVALANCHE_BigDecimal!]
  reserve1_not_in: [AVALANCHE_BigDecimal!]
  totalSupply: AVALANCHE_BigDecimal
  totalSupply_not: AVALANCHE_BigDecimal
  totalSupply_gt: AVALANCHE_BigDecimal
  totalSupply_lt: AVALANCHE_BigDecimal
  totalSupply_gte: AVALANCHE_BigDecimal
  totalSupply_lte: AVALANCHE_BigDecimal
  totalSupply_in: [AVALANCHE_BigDecimal!]
  totalSupply_not_in: [AVALANCHE_BigDecimal!]
  reserveUSD: AVALANCHE_BigDecimal
  reserveUSD_not: AVALANCHE_BigDecimal
  reserveUSD_gt: AVALANCHE_BigDecimal
  reserveUSD_lt: AVALANCHE_BigDecimal
  reserveUSD_gte: AVALANCHE_BigDecimal
  reserveUSD_lte: AVALANCHE_BigDecimal
  reserveUSD_in: [AVALANCHE_BigDecimal!]
  reserveUSD_not_in: [AVALANCHE_BigDecimal!]
  volumeToken0: AVALANCHE_BigDecimal
  volumeToken0_not: AVALANCHE_BigDecimal
  volumeToken0_gt: AVALANCHE_BigDecimal
  volumeToken0_lt: AVALANCHE_BigDecimal
  volumeToken0_gte: AVALANCHE_BigDecimal
  volumeToken0_lte: AVALANCHE_BigDecimal
  volumeToken0_in: [AVALANCHE_BigDecimal!]
  volumeToken0_not_in: [AVALANCHE_BigDecimal!]
  volumeToken1: AVALANCHE_BigDecimal
  volumeToken1_not: AVALANCHE_BigDecimal
  volumeToken1_gt: AVALANCHE_BigDecimal
  volumeToken1_lt: AVALANCHE_BigDecimal
  volumeToken1_gte: AVALANCHE_BigDecimal
  volumeToken1_lte: AVALANCHE_BigDecimal
  volumeToken1_in: [AVALANCHE_BigDecimal!]
  volumeToken1_not_in: [AVALANCHE_BigDecimal!]
  volumeUSD: AVALANCHE_BigDecimal
  volumeUSD_not: AVALANCHE_BigDecimal
  volumeUSD_gt: AVALANCHE_BigDecimal
  volumeUSD_lt: AVALANCHE_BigDecimal
  volumeUSD_gte: AVALANCHE_BigDecimal
  volumeUSD_lte: AVALANCHE_BigDecimal
  volumeUSD_in: [AVALANCHE_BigDecimal!]
  volumeUSD_not_in: [AVALANCHE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_PairDayData_orderBy {
  id
  date
  pair
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

type AVALANCHE_PairHourData {
  id: ID!
  date: Int!
  pair: AVALANCHE_Pair!
  reserve0: AVALANCHE_BigDecimal!
  reserve1: AVALANCHE_BigDecimal!
  reserveUSD: AVALANCHE_BigDecimal!
  volumeToken0: AVALANCHE_BigDecimal!
  volumeToken1: AVALANCHE_BigDecimal!
  volumeUSD: AVALANCHE_BigDecimal!
  txCount: BigInt!
}

input AVALANCHE_PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  reserve0: AVALANCHE_BigDecimal
  reserve0_not: AVALANCHE_BigDecimal
  reserve0_gt: AVALANCHE_BigDecimal
  reserve0_lt: AVALANCHE_BigDecimal
  reserve0_gte: AVALANCHE_BigDecimal
  reserve0_lte: AVALANCHE_BigDecimal
  reserve0_in: [AVALANCHE_BigDecimal!]
  reserve0_not_in: [AVALANCHE_BigDecimal!]
  reserve1: AVALANCHE_BigDecimal
  reserve1_not: AVALANCHE_BigDecimal
  reserve1_gt: AVALANCHE_BigDecimal
  reserve1_lt: AVALANCHE_BigDecimal
  reserve1_gte: AVALANCHE_BigDecimal
  reserve1_lte: AVALANCHE_BigDecimal
  reserve1_in: [AVALANCHE_BigDecimal!]
  reserve1_not_in: [AVALANCHE_BigDecimal!]
  reserveUSD: AVALANCHE_BigDecimal
  reserveUSD_not: AVALANCHE_BigDecimal
  reserveUSD_gt: AVALANCHE_BigDecimal
  reserveUSD_lt: AVALANCHE_BigDecimal
  reserveUSD_gte: AVALANCHE_BigDecimal
  reserveUSD_lte: AVALANCHE_BigDecimal
  reserveUSD_in: [AVALANCHE_BigDecimal!]
  reserveUSD_not_in: [AVALANCHE_BigDecimal!]
  volumeToken0: AVALANCHE_BigDecimal
  volumeToken0_not: AVALANCHE_BigDecimal
  volumeToken0_gt: AVALANCHE_BigDecimal
  volumeToken0_lt: AVALANCHE_BigDecimal
  volumeToken0_gte: AVALANCHE_BigDecimal
  volumeToken0_lte: AVALANCHE_BigDecimal
  volumeToken0_in: [AVALANCHE_BigDecimal!]
  volumeToken0_not_in: [AVALANCHE_BigDecimal!]
  volumeToken1: AVALANCHE_BigDecimal
  volumeToken1_not: AVALANCHE_BigDecimal
  volumeToken1_gt: AVALANCHE_BigDecimal
  volumeToken1_lt: AVALANCHE_BigDecimal
  volumeToken1_gte: AVALANCHE_BigDecimal
  volumeToken1_lte: AVALANCHE_BigDecimal
  volumeToken1_in: [AVALANCHE_BigDecimal!]
  volumeToken1_not_in: [AVALANCHE_BigDecimal!]
  volumeUSD: AVALANCHE_BigDecimal
  volumeUSD_not: AVALANCHE_BigDecimal
  volumeUSD_gt: AVALANCHE_BigDecimal
  volumeUSD_lt: AVALANCHE_BigDecimal
  volumeUSD_gte: AVALANCHE_BigDecimal
  volumeUSD_lte: AVALANCHE_BigDecimal
  volumeUSD_in: [AVALANCHE_BigDecimal!]
  volumeUSD_not_in: [AVALANCHE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_PairHourData_orderBy {
  id
  date
  pair
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

input AVALANCHE_Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: AVALANCHE_BigDecimal
  reserve0_not: AVALANCHE_BigDecimal
  reserve0_gt: AVALANCHE_BigDecimal
  reserve0_lt: AVALANCHE_BigDecimal
  reserve0_gte: AVALANCHE_BigDecimal
  reserve0_lte: AVALANCHE_BigDecimal
  reserve0_in: [AVALANCHE_BigDecimal!]
  reserve0_not_in: [AVALANCHE_BigDecimal!]
  reserve1: AVALANCHE_BigDecimal
  reserve1_not: AVALANCHE_BigDecimal
  reserve1_gt: AVALANCHE_BigDecimal
  reserve1_lt: AVALANCHE_BigDecimal
  reserve1_gte: AVALANCHE_BigDecimal
  reserve1_lte: AVALANCHE_BigDecimal
  reserve1_in: [AVALANCHE_BigDecimal!]
  reserve1_not_in: [AVALANCHE_BigDecimal!]
  totalSupply: AVALANCHE_BigDecimal
  totalSupply_not: AVALANCHE_BigDecimal
  totalSupply_gt: AVALANCHE_BigDecimal
  totalSupply_lt: AVALANCHE_BigDecimal
  totalSupply_gte: AVALANCHE_BigDecimal
  totalSupply_lte: AVALANCHE_BigDecimal
  totalSupply_in: [AVALANCHE_BigDecimal!]
  totalSupply_not_in: [AVALANCHE_BigDecimal!]
  reserveETH: AVALANCHE_BigDecimal
  reserveETH_not: AVALANCHE_BigDecimal
  reserveETH_gt: AVALANCHE_BigDecimal
  reserveETH_lt: AVALANCHE_BigDecimal
  reserveETH_gte: AVALANCHE_BigDecimal
  reserveETH_lte: AVALANCHE_BigDecimal
  reserveETH_in: [AVALANCHE_BigDecimal!]
  reserveETH_not_in: [AVALANCHE_BigDecimal!]
  reserveUSD: AVALANCHE_BigDecimal
  reserveUSD_not: AVALANCHE_BigDecimal
  reserveUSD_gt: AVALANCHE_BigDecimal
  reserveUSD_lt: AVALANCHE_BigDecimal
  reserveUSD_gte: AVALANCHE_BigDecimal
  reserveUSD_lte: AVALANCHE_BigDecimal
  reserveUSD_in: [AVALANCHE_BigDecimal!]
  reserveUSD_not_in: [AVALANCHE_BigDecimal!]
  trackedReserveETH: AVALANCHE_BigDecimal
  trackedReserveETH_not: AVALANCHE_BigDecimal
  trackedReserveETH_gt: AVALANCHE_BigDecimal
  trackedReserveETH_lt: AVALANCHE_BigDecimal
  trackedReserveETH_gte: AVALANCHE_BigDecimal
  trackedReserveETH_lte: AVALANCHE_BigDecimal
  trackedReserveETH_in: [AVALANCHE_BigDecimal!]
  trackedReserveETH_not_in: [AVALANCHE_BigDecimal!]
  token0Price: AVALANCHE_BigDecimal
  token0Price_not: AVALANCHE_BigDecimal
  token0Price_gt: AVALANCHE_BigDecimal
  token0Price_lt: AVALANCHE_BigDecimal
  token0Price_gte: AVALANCHE_BigDecimal
  token0Price_lte: AVALANCHE_BigDecimal
  token0Price_in: [AVALANCHE_BigDecimal!]
  token0Price_not_in: [AVALANCHE_BigDecimal!]
  token1Price: AVALANCHE_BigDecimal
  token1Price_not: AVALANCHE_BigDecimal
  token1Price_gt: AVALANCHE_BigDecimal
  token1Price_lt: AVALANCHE_BigDecimal
  token1Price_gte: AVALANCHE_BigDecimal
  token1Price_lte: AVALANCHE_BigDecimal
  token1Price_in: [AVALANCHE_BigDecimal!]
  token1Price_not_in: [AVALANCHE_BigDecimal!]
  volumeToken0: AVALANCHE_BigDecimal
  volumeToken0_not: AVALANCHE_BigDecimal
  volumeToken0_gt: AVALANCHE_BigDecimal
  volumeToken0_lt: AVALANCHE_BigDecimal
  volumeToken0_gte: AVALANCHE_BigDecimal
  volumeToken0_lte: AVALANCHE_BigDecimal
  volumeToken0_in: [AVALANCHE_BigDecimal!]
  volumeToken0_not_in: [AVALANCHE_BigDecimal!]
  volumeToken1: AVALANCHE_BigDecimal
  volumeToken1_not: AVALANCHE_BigDecimal
  volumeToken1_gt: AVALANCHE_BigDecimal
  volumeToken1_lt: AVALANCHE_BigDecimal
  volumeToken1_gte: AVALANCHE_BigDecimal
  volumeToken1_lte: AVALANCHE_BigDecimal
  volumeToken1_in: [AVALANCHE_BigDecimal!]
  volumeToken1_not_in: [AVALANCHE_BigDecimal!]
  volumeUSD: AVALANCHE_BigDecimal
  volumeUSD_not: AVALANCHE_BigDecimal
  volumeUSD_gt: AVALANCHE_BigDecimal
  volumeUSD_lt: AVALANCHE_BigDecimal
  volumeUSD_gte: AVALANCHE_BigDecimal
  volumeUSD_lte: AVALANCHE_BigDecimal
  volumeUSD_in: [AVALANCHE_BigDecimal!]
  volumeUSD_not_in: [AVALANCHE_BigDecimal!]
  untrackedVolumeUSD: AVALANCHE_BigDecimal
  untrackedVolumeUSD_not: AVALANCHE_BigDecimal
  untrackedVolumeUSD_gt: AVALANCHE_BigDecimal
  untrackedVolumeUSD_lt: AVALANCHE_BigDecimal
  untrackedVolumeUSD_gte: AVALANCHE_BigDecimal
  untrackedVolumeUSD_lte: AVALANCHE_BigDecimal
  untrackedVolumeUSD_in: [AVALANCHE_BigDecimal!]
  untrackedVolumeUSD_not_in: [AVALANCHE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_Pair_orderBy {
  id
  factory
  name
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
}

type AVALANCHE_Swap {
  id: ID!
  transaction: AVALANCHE_Transaction!
  timestamp: BigInt!
  pair: AVALANCHE_Pair!
  sender: AVALANCHE_Bytes!
  amount0In: AVALANCHE_BigDecimal!
  amount1In: AVALANCHE_BigDecimal!
  amount0Out: AVALANCHE_BigDecimal!
  amount1Out: AVALANCHE_BigDecimal!
  to: AVALANCHE_Bytes!
  logIndex: BigInt
  amountUSD: AVALANCHE_BigDecimal!
}

input AVALANCHE_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  sender: AVALANCHE_Bytes
  sender_not: AVALANCHE_Bytes
  sender_in: [AVALANCHE_Bytes!]
  sender_not_in: [AVALANCHE_Bytes!]
  sender_contains: AVALANCHE_Bytes
  sender_not_contains: AVALANCHE_Bytes
  amount0In: AVALANCHE_BigDecimal
  amount0In_not: AVALANCHE_BigDecimal
  amount0In_gt: AVALANCHE_BigDecimal
  amount0In_lt: AVALANCHE_BigDecimal
  amount0In_gte: AVALANCHE_BigDecimal
  amount0In_lte: AVALANCHE_BigDecimal
  amount0In_in: [AVALANCHE_BigDecimal!]
  amount0In_not_in: [AVALANCHE_BigDecimal!]
  amount1In: AVALANCHE_BigDecimal
  amount1In_not: AVALANCHE_BigDecimal
  amount1In_gt: AVALANCHE_BigDecimal
  amount1In_lt: AVALANCHE_BigDecimal
  amount1In_gte: AVALANCHE_BigDecimal
  amount1In_lte: AVALANCHE_BigDecimal
  amount1In_in: [AVALANCHE_BigDecimal!]
  amount1In_not_in: [AVALANCHE_BigDecimal!]
  amount0Out: AVALANCHE_BigDecimal
  amount0Out_not: AVALANCHE_BigDecimal
  amount0Out_gt: AVALANCHE_BigDecimal
  amount0Out_lt: AVALANCHE_BigDecimal
  amount0Out_gte: AVALANCHE_BigDecimal
  amount0Out_lte: AVALANCHE_BigDecimal
  amount0Out_in: [AVALANCHE_BigDecimal!]
  amount0Out_not_in: [AVALANCHE_BigDecimal!]
  amount1Out: AVALANCHE_BigDecimal
  amount1Out_not: AVALANCHE_BigDecimal
  amount1Out_gt: AVALANCHE_BigDecimal
  amount1Out_lt: AVALANCHE_BigDecimal
  amount1Out_gte: AVALANCHE_BigDecimal
  amount1Out_lte: AVALANCHE_BigDecimal
  amount1Out_in: [AVALANCHE_BigDecimal!]
  amount1Out_not_in: [AVALANCHE_BigDecimal!]
  to: AVALANCHE_Bytes
  to_not: AVALANCHE_Bytes
  to_in: [AVALANCHE_Bytes!]
  to_not_in: [AVALANCHE_Bytes!]
  to_contains: AVALANCHE_Bytes
  to_not_contains: AVALANCHE_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: AVALANCHE_BigDecimal
  amountUSD_not: AVALANCHE_BigDecimal
  amountUSD_gt: AVALANCHE_BigDecimal
  amountUSD_lt: AVALANCHE_BigDecimal
  amountUSD_gte: AVALANCHE_BigDecimal
  amountUSD_lte: AVALANCHE_BigDecimal
  amountUSD_in: [AVALANCHE_BigDecimal!]
  amountUSD_not_in: [AVALANCHE_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_Swap_orderBy {
  id
  transaction
  timestamp
  pair
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
}

type AVALANCHE_Token {
  id: ID!
  factory: AVALANCHE_Factory!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: AVALANCHE_BigDecimal!
  volumeUSD: AVALANCHE_BigDecimal!
  untrackedVolumeUSD: AVALANCHE_BigDecimal!
  txCount: BigInt!
  liquidity: AVALANCHE_BigDecimal!
  derivedETH: AVALANCHE_BigDecimal!
  whitelistPairs(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_Pair_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_Pair_filter): [AVALANCHE_Pair!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_TokenHourData_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_TokenHourData_filter): [AVALANCHE_TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_TokenDayData_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_TokenDayData_filter): [AVALANCHE_TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_Pair_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_Pair_filter): [AVALANCHE_Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_Pair_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_Pair_filter): [AVALANCHE_Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_PairDayData_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_PairDayData_filter): [AVALANCHE_PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_PairDayData_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_PairDayData_filter): [AVALANCHE_PairDayData!]!
}

type AVALANCHE_TokenDayData {
  id: ID!
  date: Int!
  token: AVALANCHE_Token!
  volume: AVALANCHE_BigDecimal!
  volumeETH: AVALANCHE_BigDecimal!
  volumeUSD: AVALANCHE_BigDecimal!
  txCount: BigInt!
  liquidity: AVALANCHE_BigDecimal!
  liquidityETH: AVALANCHE_BigDecimal!
  liquidityUSD: AVALANCHE_BigDecimal!
  priceUSD: AVALANCHE_BigDecimal!
}

input AVALANCHE_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: AVALANCHE_BigDecimal
  volume_not: AVALANCHE_BigDecimal
  volume_gt: AVALANCHE_BigDecimal
  volume_lt: AVALANCHE_BigDecimal
  volume_gte: AVALANCHE_BigDecimal
  volume_lte: AVALANCHE_BigDecimal
  volume_in: [AVALANCHE_BigDecimal!]
  volume_not_in: [AVALANCHE_BigDecimal!]
  volumeETH: AVALANCHE_BigDecimal
  volumeETH_not: AVALANCHE_BigDecimal
  volumeETH_gt: AVALANCHE_BigDecimal
  volumeETH_lt: AVALANCHE_BigDecimal
  volumeETH_gte: AVALANCHE_BigDecimal
  volumeETH_lte: AVALANCHE_BigDecimal
  volumeETH_in: [AVALANCHE_BigDecimal!]
  volumeETH_not_in: [AVALANCHE_BigDecimal!]
  volumeUSD: AVALANCHE_BigDecimal
  volumeUSD_not: AVALANCHE_BigDecimal
  volumeUSD_gt: AVALANCHE_BigDecimal
  volumeUSD_lt: AVALANCHE_BigDecimal
  volumeUSD_gte: AVALANCHE_BigDecimal
  volumeUSD_lte: AVALANCHE_BigDecimal
  volumeUSD_in: [AVALANCHE_BigDecimal!]
  volumeUSD_not_in: [AVALANCHE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: AVALANCHE_BigDecimal
  liquidity_not: AVALANCHE_BigDecimal
  liquidity_gt: AVALANCHE_BigDecimal
  liquidity_lt: AVALANCHE_BigDecimal
  liquidity_gte: AVALANCHE_BigDecimal
  liquidity_lte: AVALANCHE_BigDecimal
  liquidity_in: [AVALANCHE_BigDecimal!]
  liquidity_not_in: [AVALANCHE_BigDecimal!]
  liquidityETH: AVALANCHE_BigDecimal
  liquidityETH_not: AVALANCHE_BigDecimal
  liquidityETH_gt: AVALANCHE_BigDecimal
  liquidityETH_lt: AVALANCHE_BigDecimal
  liquidityETH_gte: AVALANCHE_BigDecimal
  liquidityETH_lte: AVALANCHE_BigDecimal
  liquidityETH_in: [AVALANCHE_BigDecimal!]
  liquidityETH_not_in: [AVALANCHE_BigDecimal!]
  liquidityUSD: AVALANCHE_BigDecimal
  liquidityUSD_not: AVALANCHE_BigDecimal
  liquidityUSD_gt: AVALANCHE_BigDecimal
  liquidityUSD_lt: AVALANCHE_BigDecimal
  liquidityUSD_gte: AVALANCHE_BigDecimal
  liquidityUSD_lte: AVALANCHE_BigDecimal
  liquidityUSD_in: [AVALANCHE_BigDecimal!]
  liquidityUSD_not_in: [AVALANCHE_BigDecimal!]
  priceUSD: AVALANCHE_BigDecimal
  priceUSD_not: AVALANCHE_BigDecimal
  priceUSD_gt: AVALANCHE_BigDecimal
  priceUSD_lt: AVALANCHE_BigDecimal
  priceUSD_gte: AVALANCHE_BigDecimal
  priceUSD_lte: AVALANCHE_BigDecimal
  priceUSD_in: [AVALANCHE_BigDecimal!]
  priceUSD_not_in: [AVALANCHE_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_TokenDayData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

type AVALANCHE_TokenHourData {
  id: ID!
  date: Int!
  token: AVALANCHE_Token!
  volume: AVALANCHE_BigDecimal!
  volumeETH: AVALANCHE_BigDecimal!
  volumeUSD: AVALANCHE_BigDecimal!
  txCount: BigInt!
  liquidity: AVALANCHE_BigDecimal!
  liquidityETH: AVALANCHE_BigDecimal!
  liquidityUSD: AVALANCHE_BigDecimal!
  priceUSD: AVALANCHE_BigDecimal!
}

input AVALANCHE_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: AVALANCHE_BigDecimal
  volume_not: AVALANCHE_BigDecimal
  volume_gt: AVALANCHE_BigDecimal
  volume_lt: AVALANCHE_BigDecimal
  volume_gte: AVALANCHE_BigDecimal
  volume_lte: AVALANCHE_BigDecimal
  volume_in: [AVALANCHE_BigDecimal!]
  volume_not_in: [AVALANCHE_BigDecimal!]
  volumeETH: AVALANCHE_BigDecimal
  volumeETH_not: AVALANCHE_BigDecimal
  volumeETH_gt: AVALANCHE_BigDecimal
  volumeETH_lt: AVALANCHE_BigDecimal
  volumeETH_gte: AVALANCHE_BigDecimal
  volumeETH_lte: AVALANCHE_BigDecimal
  volumeETH_in: [AVALANCHE_BigDecimal!]
  volumeETH_not_in: [AVALANCHE_BigDecimal!]
  volumeUSD: AVALANCHE_BigDecimal
  volumeUSD_not: AVALANCHE_BigDecimal
  volumeUSD_gt: AVALANCHE_BigDecimal
  volumeUSD_lt: AVALANCHE_BigDecimal
  volumeUSD_gte: AVALANCHE_BigDecimal
  volumeUSD_lte: AVALANCHE_BigDecimal
  volumeUSD_in: [AVALANCHE_BigDecimal!]
  volumeUSD_not_in: [AVALANCHE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: AVALANCHE_BigDecimal
  liquidity_not: AVALANCHE_BigDecimal
  liquidity_gt: AVALANCHE_BigDecimal
  liquidity_lt: AVALANCHE_BigDecimal
  liquidity_gte: AVALANCHE_BigDecimal
  liquidity_lte: AVALANCHE_BigDecimal
  liquidity_in: [AVALANCHE_BigDecimal!]
  liquidity_not_in: [AVALANCHE_BigDecimal!]
  liquidityETH: AVALANCHE_BigDecimal
  liquidityETH_not: AVALANCHE_BigDecimal
  liquidityETH_gt: AVALANCHE_BigDecimal
  liquidityETH_lt: AVALANCHE_BigDecimal
  liquidityETH_gte: AVALANCHE_BigDecimal
  liquidityETH_lte: AVALANCHE_BigDecimal
  liquidityETH_in: [AVALANCHE_BigDecimal!]
  liquidityETH_not_in: [AVALANCHE_BigDecimal!]
  liquidityUSD: AVALANCHE_BigDecimal
  liquidityUSD_not: AVALANCHE_BigDecimal
  liquidityUSD_gt: AVALANCHE_BigDecimal
  liquidityUSD_lt: AVALANCHE_BigDecimal
  liquidityUSD_gte: AVALANCHE_BigDecimal
  liquidityUSD_lte: AVALANCHE_BigDecimal
  liquidityUSD_in: [AVALANCHE_BigDecimal!]
  liquidityUSD_not_in: [AVALANCHE_BigDecimal!]
  priceUSD: AVALANCHE_BigDecimal
  priceUSD_not: AVALANCHE_BigDecimal
  priceUSD_gt: AVALANCHE_BigDecimal
  priceUSD_lt: AVALANCHE_BigDecimal
  priceUSD_gte: AVALANCHE_BigDecimal
  priceUSD_lte: AVALANCHE_BigDecimal
  priceUSD_in: [AVALANCHE_BigDecimal!]
  priceUSD_not_in: [AVALANCHE_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_TokenHourData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

input AVALANCHE_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: AVALANCHE_BigDecimal
  volume_not: AVALANCHE_BigDecimal
  volume_gt: AVALANCHE_BigDecimal
  volume_lt: AVALANCHE_BigDecimal
  volume_gte: AVALANCHE_BigDecimal
  volume_lte: AVALANCHE_BigDecimal
  volume_in: [AVALANCHE_BigDecimal!]
  volume_not_in: [AVALANCHE_BigDecimal!]
  volumeUSD: AVALANCHE_BigDecimal
  volumeUSD_not: AVALANCHE_BigDecimal
  volumeUSD_gt: AVALANCHE_BigDecimal
  volumeUSD_lt: AVALANCHE_BigDecimal
  volumeUSD_gte: AVALANCHE_BigDecimal
  volumeUSD_lte: AVALANCHE_BigDecimal
  volumeUSD_in: [AVALANCHE_BigDecimal!]
  volumeUSD_not_in: [AVALANCHE_BigDecimal!]
  untrackedVolumeUSD: AVALANCHE_BigDecimal
  untrackedVolumeUSD_not: AVALANCHE_BigDecimal
  untrackedVolumeUSD_gt: AVALANCHE_BigDecimal
  untrackedVolumeUSD_lt: AVALANCHE_BigDecimal
  untrackedVolumeUSD_gte: AVALANCHE_BigDecimal
  untrackedVolumeUSD_lte: AVALANCHE_BigDecimal
  untrackedVolumeUSD_in: [AVALANCHE_BigDecimal!]
  untrackedVolumeUSD_not_in: [AVALANCHE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: AVALANCHE_BigDecimal
  liquidity_not: AVALANCHE_BigDecimal
  liquidity_gt: AVALANCHE_BigDecimal
  liquidity_lt: AVALANCHE_BigDecimal
  liquidity_gte: AVALANCHE_BigDecimal
  liquidity_lte: AVALANCHE_BigDecimal
  liquidity_in: [AVALANCHE_BigDecimal!]
  liquidity_not_in: [AVALANCHE_BigDecimal!]
  derivedETH: AVALANCHE_BigDecimal
  derivedETH_not: AVALANCHE_BigDecimal
  derivedETH_gt: AVALANCHE_BigDecimal
  derivedETH_lt: AVALANCHE_BigDecimal
  derivedETH_gte: AVALANCHE_BigDecimal
  derivedETH_lte: AVALANCHE_BigDecimal
  derivedETH_in: [AVALANCHE_BigDecimal!]
  derivedETH_not_in: [AVALANCHE_BigDecimal!]
  whitelistPairs: [String!]
  whitelistPairs_not: [String!]
  whitelistPairs_contains: [String!]
  whitelistPairs_contains_nocase: [String!]
  whitelistPairs_not_contains: [String!]
  whitelistPairs_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_Token_orderBy {
  id
  factory
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  whitelistPairs
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
}

type AVALANCHE_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_Mint_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_Mint_filter): [AVALANCHE_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_Burn_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_Burn_filter): [AVALANCHE_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_Swap_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_Swap_filter): [AVALANCHE_Swap]!
}

input AVALANCHE_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
}

type AVALANCHE_User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: AVALANCHE_LiquidityPosition_orderBy, orderDirection: AVALANCHE_OrderDirection, where: AVALANCHE_LiquidityPosition_filter): [AVALANCHE_LiquidityPosition!]!
}

input AVALANCHE_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]

  """Filter for the block changed event."""
  _change_block: AVALANCHE_BlockChangedFilter
}

enum AVALANCHE_User_orderBy {
  id
  liquidityPositions
}

type AVALANCHE__Block_ {
  """The hash of the block"""
  hash: AVALANCHE_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type AVALANCHE__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: AVALANCHE__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar FUSE_BigDecimal

input FUSE_BlockChangedFilter {
  number_gte: Int!
}

input FUSE_Block_height {
  hash: FUSE_Bytes
  number: Int
  number_gte: Int
}

type FUSE_Bundle {
  id: ID!
  ethPrice: FUSE_BigDecimal!
}

input FUSE_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: FUSE_BigDecimal
  ethPrice_not: FUSE_BigDecimal
  ethPrice_gt: FUSE_BigDecimal
  ethPrice_lt: FUSE_BigDecimal
  ethPrice_gte: FUSE_BigDecimal
  ethPrice_lte: FUSE_BigDecimal
  ethPrice_in: [FUSE_BigDecimal!]
  ethPrice_not_in: [FUSE_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_Bundle_orderBy {
  id
  ethPrice
}

type FUSE_Burn {
  id: ID!
  transaction: FUSE_Transaction!
  timestamp: BigInt!
  pair: FUSE_Pair!
  liquidity: FUSE_BigDecimal!
  sender: FUSE_Bytes
  amount0: FUSE_BigDecimal
  amount1: FUSE_BigDecimal
  to: FUSE_Bytes
  logIndex: BigInt
  amountUSD: FUSE_BigDecimal
  complete: Boolean!
  feeTo: FUSE_Bytes
  feeLiquidity: FUSE_BigDecimal
}

input FUSE_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidity: FUSE_BigDecimal
  liquidity_not: FUSE_BigDecimal
  liquidity_gt: FUSE_BigDecimal
  liquidity_lt: FUSE_BigDecimal
  liquidity_gte: FUSE_BigDecimal
  liquidity_lte: FUSE_BigDecimal
  liquidity_in: [FUSE_BigDecimal!]
  liquidity_not_in: [FUSE_BigDecimal!]
  sender: FUSE_Bytes
  sender_not: FUSE_Bytes
  sender_in: [FUSE_Bytes!]
  sender_not_in: [FUSE_Bytes!]
  sender_contains: FUSE_Bytes
  sender_not_contains: FUSE_Bytes
  amount0: FUSE_BigDecimal
  amount0_not: FUSE_BigDecimal
  amount0_gt: FUSE_BigDecimal
  amount0_lt: FUSE_BigDecimal
  amount0_gte: FUSE_BigDecimal
  amount0_lte: FUSE_BigDecimal
  amount0_in: [FUSE_BigDecimal!]
  amount0_not_in: [FUSE_BigDecimal!]
  amount1: FUSE_BigDecimal
  amount1_not: FUSE_BigDecimal
  amount1_gt: FUSE_BigDecimal
  amount1_lt: FUSE_BigDecimal
  amount1_gte: FUSE_BigDecimal
  amount1_lte: FUSE_BigDecimal
  amount1_in: [FUSE_BigDecimal!]
  amount1_not_in: [FUSE_BigDecimal!]
  to: FUSE_Bytes
  to_not: FUSE_Bytes
  to_in: [FUSE_Bytes!]
  to_not_in: [FUSE_Bytes!]
  to_contains: FUSE_Bytes
  to_not_contains: FUSE_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: FUSE_BigDecimal
  amountUSD_not: FUSE_BigDecimal
  amountUSD_gt: FUSE_BigDecimal
  amountUSD_lt: FUSE_BigDecimal
  amountUSD_gte: FUSE_BigDecimal
  amountUSD_lte: FUSE_BigDecimal
  amountUSD_in: [FUSE_BigDecimal!]
  amountUSD_not_in: [FUSE_BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: FUSE_Bytes
  feeTo_not: FUSE_Bytes
  feeTo_in: [FUSE_Bytes!]
  feeTo_not_in: [FUSE_Bytes!]
  feeTo_contains: FUSE_Bytes
  feeTo_not_contains: FUSE_Bytes
  feeLiquidity: FUSE_BigDecimal
  feeLiquidity_not: FUSE_BigDecimal
  feeLiquidity_gt: FUSE_BigDecimal
  feeLiquidity_lt: FUSE_BigDecimal
  feeLiquidity_gte: FUSE_BigDecimal
  feeLiquidity_lte: FUSE_BigDecimal
  feeLiquidity_in: [FUSE_BigDecimal!]
  feeLiquidity_not_in: [FUSE_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_Burn_orderBy {
  id
  transaction
  timestamp
  pair
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

scalar FUSE_Bytes

type FUSE_DayData {
  id: ID!
  date: Int!
  factory: FUSE_Factory!
  volumeETH: FUSE_BigDecimal!
  volumeUSD: FUSE_BigDecimal!
  untrackedVolume: FUSE_BigDecimal!
  liquidityETH: FUSE_BigDecimal!
  liquidityUSD: FUSE_BigDecimal!
  txCount: BigInt!
}

input FUSE_DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: FUSE_BigDecimal
  volumeETH_not: FUSE_BigDecimal
  volumeETH_gt: FUSE_BigDecimal
  volumeETH_lt: FUSE_BigDecimal
  volumeETH_gte: FUSE_BigDecimal
  volumeETH_lte: FUSE_BigDecimal
  volumeETH_in: [FUSE_BigDecimal!]
  volumeETH_not_in: [FUSE_BigDecimal!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  untrackedVolume: FUSE_BigDecimal
  untrackedVolume_not: FUSE_BigDecimal
  untrackedVolume_gt: FUSE_BigDecimal
  untrackedVolume_lt: FUSE_BigDecimal
  untrackedVolume_gte: FUSE_BigDecimal
  untrackedVolume_lte: FUSE_BigDecimal
  untrackedVolume_in: [FUSE_BigDecimal!]
  untrackedVolume_not_in: [FUSE_BigDecimal!]
  liquidityETH: FUSE_BigDecimal
  liquidityETH_not: FUSE_BigDecimal
  liquidityETH_gt: FUSE_BigDecimal
  liquidityETH_lt: FUSE_BigDecimal
  liquidityETH_gte: FUSE_BigDecimal
  liquidityETH_lte: FUSE_BigDecimal
  liquidityETH_in: [FUSE_BigDecimal!]
  liquidityETH_not_in: [FUSE_BigDecimal!]
  liquidityUSD: FUSE_BigDecimal
  liquidityUSD_not: FUSE_BigDecimal
  liquidityUSD_gt: FUSE_BigDecimal
  liquidityUSD_lt: FUSE_BigDecimal
  liquidityUSD_gte: FUSE_BigDecimal
  liquidityUSD_lte: FUSE_BigDecimal
  liquidityUSD_in: [FUSE_BigDecimal!]
  liquidityUSD_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_DayData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type FUSE_Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: FUSE_BigDecimal!
  volumeETH: FUSE_BigDecimal!
  untrackedVolumeUSD: FUSE_BigDecimal!
  liquidityUSD: FUSE_BigDecimal!
  liquidityETH: FUSE_BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: FUSE_Pair_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Pair_filter): [FUSE_Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: FUSE_Token_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Token_filter): [FUSE_Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: FUSE_HourData_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_HourData_filter): [FUSE_HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: FUSE_DayData_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_DayData_filter): [FUSE_DayData!]!
}

input FUSE_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  volumeETH: FUSE_BigDecimal
  volumeETH_not: FUSE_BigDecimal
  volumeETH_gt: FUSE_BigDecimal
  volumeETH_lt: FUSE_BigDecimal
  volumeETH_gte: FUSE_BigDecimal
  volumeETH_lte: FUSE_BigDecimal
  volumeETH_in: [FUSE_BigDecimal!]
  volumeETH_not_in: [FUSE_BigDecimal!]
  untrackedVolumeUSD: FUSE_BigDecimal
  untrackedVolumeUSD_not: FUSE_BigDecimal
  untrackedVolumeUSD_gt: FUSE_BigDecimal
  untrackedVolumeUSD_lt: FUSE_BigDecimal
  untrackedVolumeUSD_gte: FUSE_BigDecimal
  untrackedVolumeUSD_lte: FUSE_BigDecimal
  untrackedVolumeUSD_in: [FUSE_BigDecimal!]
  untrackedVolumeUSD_not_in: [FUSE_BigDecimal!]
  liquidityUSD: FUSE_BigDecimal
  liquidityUSD_not: FUSE_BigDecimal
  liquidityUSD_gt: FUSE_BigDecimal
  liquidityUSD_lt: FUSE_BigDecimal
  liquidityUSD_gte: FUSE_BigDecimal
  liquidityUSD_lte: FUSE_BigDecimal
  liquidityUSD_in: [FUSE_BigDecimal!]
  liquidityUSD_not_in: [FUSE_BigDecimal!]
  liquidityETH: FUSE_BigDecimal
  liquidityETH_not: FUSE_BigDecimal
  liquidityETH_gt: FUSE_BigDecimal
  liquidityETH_lt: FUSE_BigDecimal
  liquidityETH_gte: FUSE_BigDecimal
  liquidityETH_lte: FUSE_BigDecimal
  liquidityETH_in: [FUSE_BigDecimal!]
  liquidityETH_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
}

type FUSE_HourData {
  id: ID!
  date: Int!
  factory: FUSE_Factory!
  volumeETH: FUSE_BigDecimal!
  volumeUSD: FUSE_BigDecimal!
  untrackedVolume: FUSE_BigDecimal!
  liquidityETH: FUSE_BigDecimal!
  liquidityUSD: FUSE_BigDecimal!
  txCount: BigInt!
}

input FUSE_HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: FUSE_BigDecimal
  volumeETH_not: FUSE_BigDecimal
  volumeETH_gt: FUSE_BigDecimal
  volumeETH_lt: FUSE_BigDecimal
  volumeETH_gte: FUSE_BigDecimal
  volumeETH_lte: FUSE_BigDecimal
  volumeETH_in: [FUSE_BigDecimal!]
  volumeETH_not_in: [FUSE_BigDecimal!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  untrackedVolume: FUSE_BigDecimal
  untrackedVolume_not: FUSE_BigDecimal
  untrackedVolume_gt: FUSE_BigDecimal
  untrackedVolume_lt: FUSE_BigDecimal
  untrackedVolume_gte: FUSE_BigDecimal
  untrackedVolume_lte: FUSE_BigDecimal
  untrackedVolume_in: [FUSE_BigDecimal!]
  untrackedVolume_not_in: [FUSE_BigDecimal!]
  liquidityETH: FUSE_BigDecimal
  liquidityETH_not: FUSE_BigDecimal
  liquidityETH_gt: FUSE_BigDecimal
  liquidityETH_lt: FUSE_BigDecimal
  liquidityETH_gte: FUSE_BigDecimal
  liquidityETH_lte: FUSE_BigDecimal
  liquidityETH_in: [FUSE_BigDecimal!]
  liquidityETH_not_in: [FUSE_BigDecimal!]
  liquidityUSD: FUSE_BigDecimal
  liquidityUSD_not: FUSE_BigDecimal
  liquidityUSD_gt: FUSE_BigDecimal
  liquidityUSD_lt: FUSE_BigDecimal
  liquidityUSD_gte: FUSE_BigDecimal
  liquidityUSD_lte: FUSE_BigDecimal
  liquidityUSD_in: [FUSE_BigDecimal!]
  liquidityUSD_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_HourData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type FUSE_LiquidityPosition {
  id: ID!
  user: FUSE_User!
  pair: FUSE_Pair!
  liquidityTokenBalance: FUSE_BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: FUSE_LiquidityPositionSnapshot_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_LiquidityPositionSnapshot_filter): [FUSE_LiquidityPositionSnapshot]!
  block: Int!
  timestamp: Int!
}

type FUSE_LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: FUSE_LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: FUSE_User!
  pair: FUSE_Pair!
  token0PriceUSD: FUSE_BigDecimal!
  token1PriceUSD: FUSE_BigDecimal!
  reserve0: FUSE_BigDecimal!
  reserve1: FUSE_BigDecimal!
  reserveUSD: FUSE_BigDecimal!
  liquidityTokenTotalSupply: FUSE_BigDecimal!
  liquidityTokenBalance: FUSE_BigDecimal!
}

input FUSE_LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0PriceUSD: FUSE_BigDecimal
  token0PriceUSD_not: FUSE_BigDecimal
  token0PriceUSD_gt: FUSE_BigDecimal
  token0PriceUSD_lt: FUSE_BigDecimal
  token0PriceUSD_gte: FUSE_BigDecimal
  token0PriceUSD_lte: FUSE_BigDecimal
  token0PriceUSD_in: [FUSE_BigDecimal!]
  token0PriceUSD_not_in: [FUSE_BigDecimal!]
  token1PriceUSD: FUSE_BigDecimal
  token1PriceUSD_not: FUSE_BigDecimal
  token1PriceUSD_gt: FUSE_BigDecimal
  token1PriceUSD_lt: FUSE_BigDecimal
  token1PriceUSD_gte: FUSE_BigDecimal
  token1PriceUSD_lte: FUSE_BigDecimal
  token1PriceUSD_in: [FUSE_BigDecimal!]
  token1PriceUSD_not_in: [FUSE_BigDecimal!]
  reserve0: FUSE_BigDecimal
  reserve0_not: FUSE_BigDecimal
  reserve0_gt: FUSE_BigDecimal
  reserve0_lt: FUSE_BigDecimal
  reserve0_gte: FUSE_BigDecimal
  reserve0_lte: FUSE_BigDecimal
  reserve0_in: [FUSE_BigDecimal!]
  reserve0_not_in: [FUSE_BigDecimal!]
  reserve1: FUSE_BigDecimal
  reserve1_not: FUSE_BigDecimal
  reserve1_gt: FUSE_BigDecimal
  reserve1_lt: FUSE_BigDecimal
  reserve1_gte: FUSE_BigDecimal
  reserve1_lte: FUSE_BigDecimal
  reserve1_in: [FUSE_BigDecimal!]
  reserve1_not_in: [FUSE_BigDecimal!]
  reserveUSD: FUSE_BigDecimal
  reserveUSD_not: FUSE_BigDecimal
  reserveUSD_gt: FUSE_BigDecimal
  reserveUSD_lt: FUSE_BigDecimal
  reserveUSD_gte: FUSE_BigDecimal
  reserveUSD_lte: FUSE_BigDecimal
  reserveUSD_in: [FUSE_BigDecimal!]
  reserveUSD_not_in: [FUSE_BigDecimal!]
  liquidityTokenTotalSupply: FUSE_BigDecimal
  liquidityTokenTotalSupply_not: FUSE_BigDecimal
  liquidityTokenTotalSupply_gt: FUSE_BigDecimal
  liquidityTokenTotalSupply_lt: FUSE_BigDecimal
  liquidityTokenTotalSupply_gte: FUSE_BigDecimal
  liquidityTokenTotalSupply_lte: FUSE_BigDecimal
  liquidityTokenTotalSupply_in: [FUSE_BigDecimal!]
  liquidityTokenTotalSupply_not_in: [FUSE_BigDecimal!]
  liquidityTokenBalance: FUSE_BigDecimal
  liquidityTokenBalance_not: FUSE_BigDecimal
  liquidityTokenBalance_gt: FUSE_BigDecimal
  liquidityTokenBalance_lt: FUSE_BigDecimal
  liquidityTokenBalance_gte: FUSE_BigDecimal
  liquidityTokenBalance_lte: FUSE_BigDecimal
  liquidityTokenBalance_in: [FUSE_BigDecimal!]
  liquidityTokenBalance_not_in: [FUSE_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  timestamp
  block
  user
  pair
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input FUSE_LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidityTokenBalance: FUSE_BigDecimal
  liquidityTokenBalance_not: FUSE_BigDecimal
  liquidityTokenBalance_gt: FUSE_BigDecimal
  liquidityTokenBalance_lt: FUSE_BigDecimal
  liquidityTokenBalance_gte: FUSE_BigDecimal
  liquidityTokenBalance_lte: FUSE_BigDecimal
  liquidityTokenBalance_in: [FUSE_BigDecimal!]
  liquidityTokenBalance_not_in: [FUSE_BigDecimal!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_LiquidityPosition_orderBy {
  id
  user
  pair
  liquidityTokenBalance
  snapshots
  block
  timestamp
}

type FUSE_Mint {
  id: ID!
  transaction: FUSE_Transaction!
  timestamp: BigInt!
  pair: FUSE_Pair!
  to: FUSE_Bytes!
  liquidity: FUSE_BigDecimal!
  sender: FUSE_Bytes
  amount0: FUSE_BigDecimal
  amount1: FUSE_BigDecimal
  logIndex: BigInt
  amountUSD: FUSE_BigDecimal
  feeTo: FUSE_Bytes
  feeLiquidity: FUSE_BigDecimal
}

input FUSE_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  to: FUSE_Bytes
  to_not: FUSE_Bytes
  to_in: [FUSE_Bytes!]
  to_not_in: [FUSE_Bytes!]
  to_contains: FUSE_Bytes
  to_not_contains: FUSE_Bytes
  liquidity: FUSE_BigDecimal
  liquidity_not: FUSE_BigDecimal
  liquidity_gt: FUSE_BigDecimal
  liquidity_lt: FUSE_BigDecimal
  liquidity_gte: FUSE_BigDecimal
  liquidity_lte: FUSE_BigDecimal
  liquidity_in: [FUSE_BigDecimal!]
  liquidity_not_in: [FUSE_BigDecimal!]
  sender: FUSE_Bytes
  sender_not: FUSE_Bytes
  sender_in: [FUSE_Bytes!]
  sender_not_in: [FUSE_Bytes!]
  sender_contains: FUSE_Bytes
  sender_not_contains: FUSE_Bytes
  amount0: FUSE_BigDecimal
  amount0_not: FUSE_BigDecimal
  amount0_gt: FUSE_BigDecimal
  amount0_lt: FUSE_BigDecimal
  amount0_gte: FUSE_BigDecimal
  amount0_lte: FUSE_BigDecimal
  amount0_in: [FUSE_BigDecimal!]
  amount0_not_in: [FUSE_BigDecimal!]
  amount1: FUSE_BigDecimal
  amount1_not: FUSE_BigDecimal
  amount1_gt: FUSE_BigDecimal
  amount1_lt: FUSE_BigDecimal
  amount1_gte: FUSE_BigDecimal
  amount1_lte: FUSE_BigDecimal
  amount1_in: [FUSE_BigDecimal!]
  amount1_not_in: [FUSE_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: FUSE_BigDecimal
  amountUSD_not: FUSE_BigDecimal
  amountUSD_gt: FUSE_BigDecimal
  amountUSD_lt: FUSE_BigDecimal
  amountUSD_gte: FUSE_BigDecimal
  amountUSD_lte: FUSE_BigDecimal
  amountUSD_in: [FUSE_BigDecimal!]
  amountUSD_not_in: [FUSE_BigDecimal!]
  feeTo: FUSE_Bytes
  feeTo_not: FUSE_Bytes
  feeTo_in: [FUSE_Bytes!]
  feeTo_not_in: [FUSE_Bytes!]
  feeTo_contains: FUSE_Bytes
  feeTo_not_contains: FUSE_Bytes
  feeLiquidity: FUSE_BigDecimal
  feeLiquidity_not: FUSE_BigDecimal
  feeLiquidity_gt: FUSE_BigDecimal
  feeLiquidity_lt: FUSE_BigDecimal
  feeLiquidity_gte: FUSE_BigDecimal
  feeLiquidity_lte: FUSE_BigDecimal
  feeLiquidity_in: [FUSE_BigDecimal!]
  feeLiquidity_not_in: [FUSE_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_Mint_orderBy {
  id
  transaction
  timestamp
  pair
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

"""Defines the order direction, either ascending or descending"""
enum FUSE_OrderDirection {
  asc
  desc
}

type FUSE_Pair {
  id: ID!
  factory: FUSE_Factory!
  name: String!
  token0: FUSE_Token!
  token1: FUSE_Token!
  reserve0: FUSE_BigDecimal!
  reserve1: FUSE_BigDecimal!
  totalSupply: FUSE_BigDecimal!
  reserveETH: FUSE_BigDecimal!
  reserveUSD: FUSE_BigDecimal!
  trackedReserveETH: FUSE_BigDecimal!
  token0Price: FUSE_BigDecimal!
  token1Price: FUSE_BigDecimal!
  volumeToken0: FUSE_BigDecimal!
  volumeToken1: FUSE_BigDecimal!
  volumeUSD: FUSE_BigDecimal!
  untrackedVolumeUSD: FUSE_BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: FUSE_LiquidityPosition_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_LiquidityPosition_filter): [FUSE_LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: FUSE_LiquidityPositionSnapshot_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_LiquidityPositionSnapshot_filter): [FUSE_LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: FUSE_PairDayData_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_PairDayData_filter): [FUSE_PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: FUSE_PairHourData_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_PairHourData_filter): [FUSE_PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: FUSE_Mint_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Mint_filter): [FUSE_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: FUSE_Burn_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Burn_filter): [FUSE_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: FUSE_Swap_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Swap_filter): [FUSE_Swap!]!
  timestamp: BigInt!
  block: BigInt!
}

type FUSE_PairDayData {
  id: ID!
  date: Int!
  pair: FUSE_Pair!
  token0: FUSE_Token!
  token1: FUSE_Token!
  reserve0: FUSE_BigDecimal!
  reserve1: FUSE_BigDecimal!
  totalSupply: FUSE_BigDecimal!
  reserveUSD: FUSE_BigDecimal!
  volumeToken0: FUSE_BigDecimal!
  volumeToken1: FUSE_BigDecimal!
  volumeUSD: FUSE_BigDecimal!
  txCount: BigInt!
}

input FUSE_PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: FUSE_BigDecimal
  reserve0_not: FUSE_BigDecimal
  reserve0_gt: FUSE_BigDecimal
  reserve0_lt: FUSE_BigDecimal
  reserve0_gte: FUSE_BigDecimal
  reserve0_lte: FUSE_BigDecimal
  reserve0_in: [FUSE_BigDecimal!]
  reserve0_not_in: [FUSE_BigDecimal!]
  reserve1: FUSE_BigDecimal
  reserve1_not: FUSE_BigDecimal
  reserve1_gt: FUSE_BigDecimal
  reserve1_lt: FUSE_BigDecimal
  reserve1_gte: FUSE_BigDecimal
  reserve1_lte: FUSE_BigDecimal
  reserve1_in: [FUSE_BigDecimal!]
  reserve1_not_in: [FUSE_BigDecimal!]
  totalSupply: FUSE_BigDecimal
  totalSupply_not: FUSE_BigDecimal
  totalSupply_gt: FUSE_BigDecimal
  totalSupply_lt: FUSE_BigDecimal
  totalSupply_gte: FUSE_BigDecimal
  totalSupply_lte: FUSE_BigDecimal
  totalSupply_in: [FUSE_BigDecimal!]
  totalSupply_not_in: [FUSE_BigDecimal!]
  reserveUSD: FUSE_BigDecimal
  reserveUSD_not: FUSE_BigDecimal
  reserveUSD_gt: FUSE_BigDecimal
  reserveUSD_lt: FUSE_BigDecimal
  reserveUSD_gte: FUSE_BigDecimal
  reserveUSD_lte: FUSE_BigDecimal
  reserveUSD_in: [FUSE_BigDecimal!]
  reserveUSD_not_in: [FUSE_BigDecimal!]
  volumeToken0: FUSE_BigDecimal
  volumeToken0_not: FUSE_BigDecimal
  volumeToken0_gt: FUSE_BigDecimal
  volumeToken0_lt: FUSE_BigDecimal
  volumeToken0_gte: FUSE_BigDecimal
  volumeToken0_lte: FUSE_BigDecimal
  volumeToken0_in: [FUSE_BigDecimal!]
  volumeToken0_not_in: [FUSE_BigDecimal!]
  volumeToken1: FUSE_BigDecimal
  volumeToken1_not: FUSE_BigDecimal
  volumeToken1_gt: FUSE_BigDecimal
  volumeToken1_lt: FUSE_BigDecimal
  volumeToken1_gte: FUSE_BigDecimal
  volumeToken1_lte: FUSE_BigDecimal
  volumeToken1_in: [FUSE_BigDecimal!]
  volumeToken1_not_in: [FUSE_BigDecimal!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_PairDayData_orderBy {
  id
  date
  pair
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

type FUSE_PairHourData {
  id: ID!
  date: Int!
  pair: FUSE_Pair!
  reserve0: FUSE_BigDecimal!
  reserve1: FUSE_BigDecimal!
  reserveUSD: FUSE_BigDecimal!
  volumeToken0: FUSE_BigDecimal!
  volumeToken1: FUSE_BigDecimal!
  volumeUSD: FUSE_BigDecimal!
  txCount: BigInt!
}

input FUSE_PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  reserve0: FUSE_BigDecimal
  reserve0_not: FUSE_BigDecimal
  reserve0_gt: FUSE_BigDecimal
  reserve0_lt: FUSE_BigDecimal
  reserve0_gte: FUSE_BigDecimal
  reserve0_lte: FUSE_BigDecimal
  reserve0_in: [FUSE_BigDecimal!]
  reserve0_not_in: [FUSE_BigDecimal!]
  reserve1: FUSE_BigDecimal
  reserve1_not: FUSE_BigDecimal
  reserve1_gt: FUSE_BigDecimal
  reserve1_lt: FUSE_BigDecimal
  reserve1_gte: FUSE_BigDecimal
  reserve1_lte: FUSE_BigDecimal
  reserve1_in: [FUSE_BigDecimal!]
  reserve1_not_in: [FUSE_BigDecimal!]
  reserveUSD: FUSE_BigDecimal
  reserveUSD_not: FUSE_BigDecimal
  reserveUSD_gt: FUSE_BigDecimal
  reserveUSD_lt: FUSE_BigDecimal
  reserveUSD_gte: FUSE_BigDecimal
  reserveUSD_lte: FUSE_BigDecimal
  reserveUSD_in: [FUSE_BigDecimal!]
  reserveUSD_not_in: [FUSE_BigDecimal!]
  volumeToken0: FUSE_BigDecimal
  volumeToken0_not: FUSE_BigDecimal
  volumeToken0_gt: FUSE_BigDecimal
  volumeToken0_lt: FUSE_BigDecimal
  volumeToken0_gte: FUSE_BigDecimal
  volumeToken0_lte: FUSE_BigDecimal
  volumeToken0_in: [FUSE_BigDecimal!]
  volumeToken0_not_in: [FUSE_BigDecimal!]
  volumeToken1: FUSE_BigDecimal
  volumeToken1_not: FUSE_BigDecimal
  volumeToken1_gt: FUSE_BigDecimal
  volumeToken1_lt: FUSE_BigDecimal
  volumeToken1_gte: FUSE_BigDecimal
  volumeToken1_lte: FUSE_BigDecimal
  volumeToken1_in: [FUSE_BigDecimal!]
  volumeToken1_not_in: [FUSE_BigDecimal!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_PairHourData_orderBy {
  id
  date
  pair
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

input FUSE_Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: FUSE_BigDecimal
  reserve0_not: FUSE_BigDecimal
  reserve0_gt: FUSE_BigDecimal
  reserve0_lt: FUSE_BigDecimal
  reserve0_gte: FUSE_BigDecimal
  reserve0_lte: FUSE_BigDecimal
  reserve0_in: [FUSE_BigDecimal!]
  reserve0_not_in: [FUSE_BigDecimal!]
  reserve1: FUSE_BigDecimal
  reserve1_not: FUSE_BigDecimal
  reserve1_gt: FUSE_BigDecimal
  reserve1_lt: FUSE_BigDecimal
  reserve1_gte: FUSE_BigDecimal
  reserve1_lte: FUSE_BigDecimal
  reserve1_in: [FUSE_BigDecimal!]
  reserve1_not_in: [FUSE_BigDecimal!]
  totalSupply: FUSE_BigDecimal
  totalSupply_not: FUSE_BigDecimal
  totalSupply_gt: FUSE_BigDecimal
  totalSupply_lt: FUSE_BigDecimal
  totalSupply_gte: FUSE_BigDecimal
  totalSupply_lte: FUSE_BigDecimal
  totalSupply_in: [FUSE_BigDecimal!]
  totalSupply_not_in: [FUSE_BigDecimal!]
  reserveETH: FUSE_BigDecimal
  reserveETH_not: FUSE_BigDecimal
  reserveETH_gt: FUSE_BigDecimal
  reserveETH_lt: FUSE_BigDecimal
  reserveETH_gte: FUSE_BigDecimal
  reserveETH_lte: FUSE_BigDecimal
  reserveETH_in: [FUSE_BigDecimal!]
  reserveETH_not_in: [FUSE_BigDecimal!]
  reserveUSD: FUSE_BigDecimal
  reserveUSD_not: FUSE_BigDecimal
  reserveUSD_gt: FUSE_BigDecimal
  reserveUSD_lt: FUSE_BigDecimal
  reserveUSD_gte: FUSE_BigDecimal
  reserveUSD_lte: FUSE_BigDecimal
  reserveUSD_in: [FUSE_BigDecimal!]
  reserveUSD_not_in: [FUSE_BigDecimal!]
  trackedReserveETH: FUSE_BigDecimal
  trackedReserveETH_not: FUSE_BigDecimal
  trackedReserveETH_gt: FUSE_BigDecimal
  trackedReserveETH_lt: FUSE_BigDecimal
  trackedReserveETH_gte: FUSE_BigDecimal
  trackedReserveETH_lte: FUSE_BigDecimal
  trackedReserveETH_in: [FUSE_BigDecimal!]
  trackedReserveETH_not_in: [FUSE_BigDecimal!]
  token0Price: FUSE_BigDecimal
  token0Price_not: FUSE_BigDecimal
  token0Price_gt: FUSE_BigDecimal
  token0Price_lt: FUSE_BigDecimal
  token0Price_gte: FUSE_BigDecimal
  token0Price_lte: FUSE_BigDecimal
  token0Price_in: [FUSE_BigDecimal!]
  token0Price_not_in: [FUSE_BigDecimal!]
  token1Price: FUSE_BigDecimal
  token1Price_not: FUSE_BigDecimal
  token1Price_gt: FUSE_BigDecimal
  token1Price_lt: FUSE_BigDecimal
  token1Price_gte: FUSE_BigDecimal
  token1Price_lte: FUSE_BigDecimal
  token1Price_in: [FUSE_BigDecimal!]
  token1Price_not_in: [FUSE_BigDecimal!]
  volumeToken0: FUSE_BigDecimal
  volumeToken0_not: FUSE_BigDecimal
  volumeToken0_gt: FUSE_BigDecimal
  volumeToken0_lt: FUSE_BigDecimal
  volumeToken0_gte: FUSE_BigDecimal
  volumeToken0_lte: FUSE_BigDecimal
  volumeToken0_in: [FUSE_BigDecimal!]
  volumeToken0_not_in: [FUSE_BigDecimal!]
  volumeToken1: FUSE_BigDecimal
  volumeToken1_not: FUSE_BigDecimal
  volumeToken1_gt: FUSE_BigDecimal
  volumeToken1_lt: FUSE_BigDecimal
  volumeToken1_gte: FUSE_BigDecimal
  volumeToken1_lte: FUSE_BigDecimal
  volumeToken1_in: [FUSE_BigDecimal!]
  volumeToken1_not_in: [FUSE_BigDecimal!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  untrackedVolumeUSD: FUSE_BigDecimal
  untrackedVolumeUSD_not: FUSE_BigDecimal
  untrackedVolumeUSD_gt: FUSE_BigDecimal
  untrackedVolumeUSD_lt: FUSE_BigDecimal
  untrackedVolumeUSD_gte: FUSE_BigDecimal
  untrackedVolumeUSD_lte: FUSE_BigDecimal
  untrackedVolumeUSD_in: [FUSE_BigDecimal!]
  untrackedVolumeUSD_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_Pair_orderBy {
  id
  factory
  name
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
}

type FUSE_Swap {
  id: ID!
  transaction: FUSE_Transaction!
  timestamp: BigInt!
  pair: FUSE_Pair!
  sender: FUSE_Bytes!
  amount0In: FUSE_BigDecimal!
  amount1In: FUSE_BigDecimal!
  amount0Out: FUSE_BigDecimal!
  amount1Out: FUSE_BigDecimal!
  to: FUSE_Bytes!
  logIndex: BigInt
  amountUSD: FUSE_BigDecimal!
}

input FUSE_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  sender: FUSE_Bytes
  sender_not: FUSE_Bytes
  sender_in: [FUSE_Bytes!]
  sender_not_in: [FUSE_Bytes!]
  sender_contains: FUSE_Bytes
  sender_not_contains: FUSE_Bytes
  amount0In: FUSE_BigDecimal
  amount0In_not: FUSE_BigDecimal
  amount0In_gt: FUSE_BigDecimal
  amount0In_lt: FUSE_BigDecimal
  amount0In_gte: FUSE_BigDecimal
  amount0In_lte: FUSE_BigDecimal
  amount0In_in: [FUSE_BigDecimal!]
  amount0In_not_in: [FUSE_BigDecimal!]
  amount1In: FUSE_BigDecimal
  amount1In_not: FUSE_BigDecimal
  amount1In_gt: FUSE_BigDecimal
  amount1In_lt: FUSE_BigDecimal
  amount1In_gte: FUSE_BigDecimal
  amount1In_lte: FUSE_BigDecimal
  amount1In_in: [FUSE_BigDecimal!]
  amount1In_not_in: [FUSE_BigDecimal!]
  amount0Out: FUSE_BigDecimal
  amount0Out_not: FUSE_BigDecimal
  amount0Out_gt: FUSE_BigDecimal
  amount0Out_lt: FUSE_BigDecimal
  amount0Out_gte: FUSE_BigDecimal
  amount0Out_lte: FUSE_BigDecimal
  amount0Out_in: [FUSE_BigDecimal!]
  amount0Out_not_in: [FUSE_BigDecimal!]
  amount1Out: FUSE_BigDecimal
  amount1Out_not: FUSE_BigDecimal
  amount1Out_gt: FUSE_BigDecimal
  amount1Out_lt: FUSE_BigDecimal
  amount1Out_gte: FUSE_BigDecimal
  amount1Out_lte: FUSE_BigDecimal
  amount1Out_in: [FUSE_BigDecimal!]
  amount1Out_not_in: [FUSE_BigDecimal!]
  to: FUSE_Bytes
  to_not: FUSE_Bytes
  to_in: [FUSE_Bytes!]
  to_not_in: [FUSE_Bytes!]
  to_contains: FUSE_Bytes
  to_not_contains: FUSE_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: FUSE_BigDecimal
  amountUSD_not: FUSE_BigDecimal
  amountUSD_gt: FUSE_BigDecimal
  amountUSD_lt: FUSE_BigDecimal
  amountUSD_gte: FUSE_BigDecimal
  amountUSD_lte: FUSE_BigDecimal
  amountUSD_in: [FUSE_BigDecimal!]
  amountUSD_not_in: [FUSE_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_Swap_orderBy {
  id
  transaction
  timestamp
  pair
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
}

type FUSE_Token {
  id: ID!
  factory: FUSE_Factory!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: FUSE_BigDecimal!
  volumeUSD: FUSE_BigDecimal!
  untrackedVolumeUSD: FUSE_BigDecimal!
  txCount: BigInt!
  liquidity: FUSE_BigDecimal!
  derivedETH: FUSE_BigDecimal!
  whitelistPairs(skip: Int = 0, first: Int = 100, orderBy: FUSE_Pair_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Pair_filter): [FUSE_Pair!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: FUSE_TokenHourData_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_TokenHourData_filter): [FUSE_TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: FUSE_TokenDayData_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_TokenDayData_filter): [FUSE_TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: FUSE_Pair_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Pair_filter): [FUSE_Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: FUSE_Pair_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Pair_filter): [FUSE_Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: FUSE_PairDayData_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_PairDayData_filter): [FUSE_PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: FUSE_PairDayData_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_PairDayData_filter): [FUSE_PairDayData!]!
}

type FUSE_TokenDayData {
  id: ID!
  date: Int!
  token: FUSE_Token!
  volume: FUSE_BigDecimal!
  volumeETH: FUSE_BigDecimal!
  volumeUSD: FUSE_BigDecimal!
  txCount: BigInt!
  liquidity: FUSE_BigDecimal!
  liquidityETH: FUSE_BigDecimal!
  liquidityUSD: FUSE_BigDecimal!
  priceUSD: FUSE_BigDecimal!
}

input FUSE_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: FUSE_BigDecimal
  volume_not: FUSE_BigDecimal
  volume_gt: FUSE_BigDecimal
  volume_lt: FUSE_BigDecimal
  volume_gte: FUSE_BigDecimal
  volume_lte: FUSE_BigDecimal
  volume_in: [FUSE_BigDecimal!]
  volume_not_in: [FUSE_BigDecimal!]
  volumeETH: FUSE_BigDecimal
  volumeETH_not: FUSE_BigDecimal
  volumeETH_gt: FUSE_BigDecimal
  volumeETH_lt: FUSE_BigDecimal
  volumeETH_gte: FUSE_BigDecimal
  volumeETH_lte: FUSE_BigDecimal
  volumeETH_in: [FUSE_BigDecimal!]
  volumeETH_not_in: [FUSE_BigDecimal!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: FUSE_BigDecimal
  liquidity_not: FUSE_BigDecimal
  liquidity_gt: FUSE_BigDecimal
  liquidity_lt: FUSE_BigDecimal
  liquidity_gte: FUSE_BigDecimal
  liquidity_lte: FUSE_BigDecimal
  liquidity_in: [FUSE_BigDecimal!]
  liquidity_not_in: [FUSE_BigDecimal!]
  liquidityETH: FUSE_BigDecimal
  liquidityETH_not: FUSE_BigDecimal
  liquidityETH_gt: FUSE_BigDecimal
  liquidityETH_lt: FUSE_BigDecimal
  liquidityETH_gte: FUSE_BigDecimal
  liquidityETH_lte: FUSE_BigDecimal
  liquidityETH_in: [FUSE_BigDecimal!]
  liquidityETH_not_in: [FUSE_BigDecimal!]
  liquidityUSD: FUSE_BigDecimal
  liquidityUSD_not: FUSE_BigDecimal
  liquidityUSD_gt: FUSE_BigDecimal
  liquidityUSD_lt: FUSE_BigDecimal
  liquidityUSD_gte: FUSE_BigDecimal
  liquidityUSD_lte: FUSE_BigDecimal
  liquidityUSD_in: [FUSE_BigDecimal!]
  liquidityUSD_not_in: [FUSE_BigDecimal!]
  priceUSD: FUSE_BigDecimal
  priceUSD_not: FUSE_BigDecimal
  priceUSD_gt: FUSE_BigDecimal
  priceUSD_lt: FUSE_BigDecimal
  priceUSD_gte: FUSE_BigDecimal
  priceUSD_lte: FUSE_BigDecimal
  priceUSD_in: [FUSE_BigDecimal!]
  priceUSD_not_in: [FUSE_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_TokenDayData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

type FUSE_TokenHourData {
  id: ID!
  date: Int!
  token: FUSE_Token!
  volume: FUSE_BigDecimal!
  volumeETH: FUSE_BigDecimal!
  volumeUSD: FUSE_BigDecimal!
  txCount: BigInt!
  liquidity: FUSE_BigDecimal!
  liquidityETH: FUSE_BigDecimal!
  liquidityUSD: FUSE_BigDecimal!
  priceUSD: FUSE_BigDecimal!
}

input FUSE_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: FUSE_BigDecimal
  volume_not: FUSE_BigDecimal
  volume_gt: FUSE_BigDecimal
  volume_lt: FUSE_BigDecimal
  volume_gte: FUSE_BigDecimal
  volume_lte: FUSE_BigDecimal
  volume_in: [FUSE_BigDecimal!]
  volume_not_in: [FUSE_BigDecimal!]
  volumeETH: FUSE_BigDecimal
  volumeETH_not: FUSE_BigDecimal
  volumeETH_gt: FUSE_BigDecimal
  volumeETH_lt: FUSE_BigDecimal
  volumeETH_gte: FUSE_BigDecimal
  volumeETH_lte: FUSE_BigDecimal
  volumeETH_in: [FUSE_BigDecimal!]
  volumeETH_not_in: [FUSE_BigDecimal!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: FUSE_BigDecimal
  liquidity_not: FUSE_BigDecimal
  liquidity_gt: FUSE_BigDecimal
  liquidity_lt: FUSE_BigDecimal
  liquidity_gte: FUSE_BigDecimal
  liquidity_lte: FUSE_BigDecimal
  liquidity_in: [FUSE_BigDecimal!]
  liquidity_not_in: [FUSE_BigDecimal!]
  liquidityETH: FUSE_BigDecimal
  liquidityETH_not: FUSE_BigDecimal
  liquidityETH_gt: FUSE_BigDecimal
  liquidityETH_lt: FUSE_BigDecimal
  liquidityETH_gte: FUSE_BigDecimal
  liquidityETH_lte: FUSE_BigDecimal
  liquidityETH_in: [FUSE_BigDecimal!]
  liquidityETH_not_in: [FUSE_BigDecimal!]
  liquidityUSD: FUSE_BigDecimal
  liquidityUSD_not: FUSE_BigDecimal
  liquidityUSD_gt: FUSE_BigDecimal
  liquidityUSD_lt: FUSE_BigDecimal
  liquidityUSD_gte: FUSE_BigDecimal
  liquidityUSD_lte: FUSE_BigDecimal
  liquidityUSD_in: [FUSE_BigDecimal!]
  liquidityUSD_not_in: [FUSE_BigDecimal!]
  priceUSD: FUSE_BigDecimal
  priceUSD_not: FUSE_BigDecimal
  priceUSD_gt: FUSE_BigDecimal
  priceUSD_lt: FUSE_BigDecimal
  priceUSD_gte: FUSE_BigDecimal
  priceUSD_lte: FUSE_BigDecimal
  priceUSD_in: [FUSE_BigDecimal!]
  priceUSD_not_in: [FUSE_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_TokenHourData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

input FUSE_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: FUSE_BigDecimal
  volume_not: FUSE_BigDecimal
  volume_gt: FUSE_BigDecimal
  volume_lt: FUSE_BigDecimal
  volume_gte: FUSE_BigDecimal
  volume_lte: FUSE_BigDecimal
  volume_in: [FUSE_BigDecimal!]
  volume_not_in: [FUSE_BigDecimal!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  untrackedVolumeUSD: FUSE_BigDecimal
  untrackedVolumeUSD_not: FUSE_BigDecimal
  untrackedVolumeUSD_gt: FUSE_BigDecimal
  untrackedVolumeUSD_lt: FUSE_BigDecimal
  untrackedVolumeUSD_gte: FUSE_BigDecimal
  untrackedVolumeUSD_lte: FUSE_BigDecimal
  untrackedVolumeUSD_in: [FUSE_BigDecimal!]
  untrackedVolumeUSD_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: FUSE_BigDecimal
  liquidity_not: FUSE_BigDecimal
  liquidity_gt: FUSE_BigDecimal
  liquidity_lt: FUSE_BigDecimal
  liquidity_gte: FUSE_BigDecimal
  liquidity_lte: FUSE_BigDecimal
  liquidity_in: [FUSE_BigDecimal!]
  liquidity_not_in: [FUSE_BigDecimal!]
  derivedETH: FUSE_BigDecimal
  derivedETH_not: FUSE_BigDecimal
  derivedETH_gt: FUSE_BigDecimal
  derivedETH_lt: FUSE_BigDecimal
  derivedETH_gte: FUSE_BigDecimal
  derivedETH_lte: FUSE_BigDecimal
  derivedETH_in: [FUSE_BigDecimal!]
  derivedETH_not_in: [FUSE_BigDecimal!]
  whitelistPairs: [String!]
  whitelistPairs_not: [String!]
  whitelistPairs_contains: [String!]
  whitelistPairs_contains_nocase: [String!]
  whitelistPairs_not_contains: [String!]
  whitelistPairs_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_Token_orderBy {
  id
  factory
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  whitelistPairs
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
}

type FUSE_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: FUSE_Mint_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Mint_filter): [FUSE_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: FUSE_Burn_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Burn_filter): [FUSE_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: FUSE_Swap_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Swap_filter): [FUSE_Swap]!
}

input FUSE_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
}

type FUSE_User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: FUSE_LiquidityPosition_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_LiquidityPosition_filter): [FUSE_LiquidityPosition!]!
}

input FUSE_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]

  """Filter for the block changed event."""
  _change_block: FUSE_BlockChangedFilter
}

enum FUSE_User_orderBy {
  id
  liquidityPositions
}

type FUSE__Block_ {
  """The hash of the block"""
  hash: FUSE_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type FUSE__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: FUSE__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar ETHEREUM_BigDecimal

input ETHEREUM_BlockChangedFilter {
  number_gte: Int!
}

input ETHEREUM_Block_height {
  hash: ETHEREUM_Bytes
  number: Int
  number_gte: Int
}

type ETHEREUM_Bundle {
  id: ID!
  ethPrice: ETHEREUM_BigDecimal!
}

input ETHEREUM_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: ETHEREUM_BigDecimal
  ethPrice_not: ETHEREUM_BigDecimal
  ethPrice_gt: ETHEREUM_BigDecimal
  ethPrice_lt: ETHEREUM_BigDecimal
  ethPrice_gte: ETHEREUM_BigDecimal
  ethPrice_lte: ETHEREUM_BigDecimal
  ethPrice_in: [ETHEREUM_BigDecimal!]
  ethPrice_not_in: [ETHEREUM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_Bundle_orderBy {
  id
  ethPrice
}

type ETHEREUM_Burn {
  id: ID!
  transaction: ETHEREUM_Transaction!
  timestamp: BigInt!
  pair: ETHEREUM_Pair!
  liquidity: ETHEREUM_BigDecimal!
  sender: ETHEREUM_Bytes
  amount0: ETHEREUM_BigDecimal
  amount1: ETHEREUM_BigDecimal
  to: ETHEREUM_Bytes
  logIndex: BigInt
  amountUSD: ETHEREUM_BigDecimal
  complete: Boolean!
  feeTo: ETHEREUM_Bytes
  feeLiquidity: ETHEREUM_BigDecimal
}

input ETHEREUM_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidity: ETHEREUM_BigDecimal
  liquidity_not: ETHEREUM_BigDecimal
  liquidity_gt: ETHEREUM_BigDecimal
  liquidity_lt: ETHEREUM_BigDecimal
  liquidity_gte: ETHEREUM_BigDecimal
  liquidity_lte: ETHEREUM_BigDecimal
  liquidity_in: [ETHEREUM_BigDecimal!]
  liquidity_not_in: [ETHEREUM_BigDecimal!]
  sender: ETHEREUM_Bytes
  sender_not: ETHEREUM_Bytes
  sender_in: [ETHEREUM_Bytes!]
  sender_not_in: [ETHEREUM_Bytes!]
  sender_contains: ETHEREUM_Bytes
  sender_not_contains: ETHEREUM_Bytes
  amount0: ETHEREUM_BigDecimal
  amount0_not: ETHEREUM_BigDecimal
  amount0_gt: ETHEREUM_BigDecimal
  amount0_lt: ETHEREUM_BigDecimal
  amount0_gte: ETHEREUM_BigDecimal
  amount0_lte: ETHEREUM_BigDecimal
  amount0_in: [ETHEREUM_BigDecimal!]
  amount0_not_in: [ETHEREUM_BigDecimal!]
  amount1: ETHEREUM_BigDecimal
  amount1_not: ETHEREUM_BigDecimal
  amount1_gt: ETHEREUM_BigDecimal
  amount1_lt: ETHEREUM_BigDecimal
  amount1_gte: ETHEREUM_BigDecimal
  amount1_lte: ETHEREUM_BigDecimal
  amount1_in: [ETHEREUM_BigDecimal!]
  amount1_not_in: [ETHEREUM_BigDecimal!]
  to: ETHEREUM_Bytes
  to_not: ETHEREUM_Bytes
  to_in: [ETHEREUM_Bytes!]
  to_not_in: [ETHEREUM_Bytes!]
  to_contains: ETHEREUM_Bytes
  to_not_contains: ETHEREUM_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: ETHEREUM_BigDecimal
  amountUSD_not: ETHEREUM_BigDecimal
  amountUSD_gt: ETHEREUM_BigDecimal
  amountUSD_lt: ETHEREUM_BigDecimal
  amountUSD_gte: ETHEREUM_BigDecimal
  amountUSD_lte: ETHEREUM_BigDecimal
  amountUSD_in: [ETHEREUM_BigDecimal!]
  amountUSD_not_in: [ETHEREUM_BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: ETHEREUM_Bytes
  feeTo_not: ETHEREUM_Bytes
  feeTo_in: [ETHEREUM_Bytes!]
  feeTo_not_in: [ETHEREUM_Bytes!]
  feeTo_contains: ETHEREUM_Bytes
  feeTo_not_contains: ETHEREUM_Bytes
  feeLiquidity: ETHEREUM_BigDecimal
  feeLiquidity_not: ETHEREUM_BigDecimal
  feeLiquidity_gt: ETHEREUM_BigDecimal
  feeLiquidity_lt: ETHEREUM_BigDecimal
  feeLiquidity_gte: ETHEREUM_BigDecimal
  feeLiquidity_lte: ETHEREUM_BigDecimal
  feeLiquidity_in: [ETHEREUM_BigDecimal!]
  feeLiquidity_not_in: [ETHEREUM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_Burn_orderBy {
  id
  transaction
  timestamp
  pair
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

scalar ETHEREUM_Bytes

type ETHEREUM_DayData {
  id: ID!
  date: Int!
  factory: ETHEREUM_Factory!
  volumeETH: ETHEREUM_BigDecimal!
  volumeUSD: ETHEREUM_BigDecimal!
  untrackedVolume: ETHEREUM_BigDecimal!
  liquidityETH: ETHEREUM_BigDecimal!
  liquidityUSD: ETHEREUM_BigDecimal!
  txCount: BigInt!
}

input ETHEREUM_DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: ETHEREUM_BigDecimal
  volumeETH_not: ETHEREUM_BigDecimal
  volumeETH_gt: ETHEREUM_BigDecimal
  volumeETH_lt: ETHEREUM_BigDecimal
  volumeETH_gte: ETHEREUM_BigDecimal
  volumeETH_lte: ETHEREUM_BigDecimal
  volumeETH_in: [ETHEREUM_BigDecimal!]
  volumeETH_not_in: [ETHEREUM_BigDecimal!]
  volumeUSD: ETHEREUM_BigDecimal
  volumeUSD_not: ETHEREUM_BigDecimal
  volumeUSD_gt: ETHEREUM_BigDecimal
  volumeUSD_lt: ETHEREUM_BigDecimal
  volumeUSD_gte: ETHEREUM_BigDecimal
  volumeUSD_lte: ETHEREUM_BigDecimal
  volumeUSD_in: [ETHEREUM_BigDecimal!]
  volumeUSD_not_in: [ETHEREUM_BigDecimal!]
  untrackedVolume: ETHEREUM_BigDecimal
  untrackedVolume_not: ETHEREUM_BigDecimal
  untrackedVolume_gt: ETHEREUM_BigDecimal
  untrackedVolume_lt: ETHEREUM_BigDecimal
  untrackedVolume_gte: ETHEREUM_BigDecimal
  untrackedVolume_lte: ETHEREUM_BigDecimal
  untrackedVolume_in: [ETHEREUM_BigDecimal!]
  untrackedVolume_not_in: [ETHEREUM_BigDecimal!]
  liquidityETH: ETHEREUM_BigDecimal
  liquidityETH_not: ETHEREUM_BigDecimal
  liquidityETH_gt: ETHEREUM_BigDecimal
  liquidityETH_lt: ETHEREUM_BigDecimal
  liquidityETH_gte: ETHEREUM_BigDecimal
  liquidityETH_lte: ETHEREUM_BigDecimal
  liquidityETH_in: [ETHEREUM_BigDecimal!]
  liquidityETH_not_in: [ETHEREUM_BigDecimal!]
  liquidityUSD: ETHEREUM_BigDecimal
  liquidityUSD_not: ETHEREUM_BigDecimal
  liquidityUSD_gt: ETHEREUM_BigDecimal
  liquidityUSD_lt: ETHEREUM_BigDecimal
  liquidityUSD_gte: ETHEREUM_BigDecimal
  liquidityUSD_lte: ETHEREUM_BigDecimal
  liquidityUSD_in: [ETHEREUM_BigDecimal!]
  liquidityUSD_not_in: [ETHEREUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_DayData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type ETHEREUM_Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: ETHEREUM_BigDecimal!
  volumeETH: ETHEREUM_BigDecimal!
  untrackedVolumeUSD: ETHEREUM_BigDecimal!
  liquidityUSD: ETHEREUM_BigDecimal!
  liquidityETH: ETHEREUM_BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_Pair_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_Pair_filter): [ETHEREUM_Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_Token_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_Token_filter): [ETHEREUM_Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_HourData_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_HourData_filter): [ETHEREUM_HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_DayData_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_DayData_filter): [ETHEREUM_DayData!]!
}

input ETHEREUM_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: ETHEREUM_BigDecimal
  volumeUSD_not: ETHEREUM_BigDecimal
  volumeUSD_gt: ETHEREUM_BigDecimal
  volumeUSD_lt: ETHEREUM_BigDecimal
  volumeUSD_gte: ETHEREUM_BigDecimal
  volumeUSD_lte: ETHEREUM_BigDecimal
  volumeUSD_in: [ETHEREUM_BigDecimal!]
  volumeUSD_not_in: [ETHEREUM_BigDecimal!]
  volumeETH: ETHEREUM_BigDecimal
  volumeETH_not: ETHEREUM_BigDecimal
  volumeETH_gt: ETHEREUM_BigDecimal
  volumeETH_lt: ETHEREUM_BigDecimal
  volumeETH_gte: ETHEREUM_BigDecimal
  volumeETH_lte: ETHEREUM_BigDecimal
  volumeETH_in: [ETHEREUM_BigDecimal!]
  volumeETH_not_in: [ETHEREUM_BigDecimal!]
  untrackedVolumeUSD: ETHEREUM_BigDecimal
  untrackedVolumeUSD_not: ETHEREUM_BigDecimal
  untrackedVolumeUSD_gt: ETHEREUM_BigDecimal
  untrackedVolumeUSD_lt: ETHEREUM_BigDecimal
  untrackedVolumeUSD_gte: ETHEREUM_BigDecimal
  untrackedVolumeUSD_lte: ETHEREUM_BigDecimal
  untrackedVolumeUSD_in: [ETHEREUM_BigDecimal!]
  untrackedVolumeUSD_not_in: [ETHEREUM_BigDecimal!]
  liquidityUSD: ETHEREUM_BigDecimal
  liquidityUSD_not: ETHEREUM_BigDecimal
  liquidityUSD_gt: ETHEREUM_BigDecimal
  liquidityUSD_lt: ETHEREUM_BigDecimal
  liquidityUSD_gte: ETHEREUM_BigDecimal
  liquidityUSD_lte: ETHEREUM_BigDecimal
  liquidityUSD_in: [ETHEREUM_BigDecimal!]
  liquidityUSD_not_in: [ETHEREUM_BigDecimal!]
  liquidityETH: ETHEREUM_BigDecimal
  liquidityETH_not: ETHEREUM_BigDecimal
  liquidityETH_gt: ETHEREUM_BigDecimal
  liquidityETH_lt: ETHEREUM_BigDecimal
  liquidityETH_gte: ETHEREUM_BigDecimal
  liquidityETH_lte: ETHEREUM_BigDecimal
  liquidityETH_in: [ETHEREUM_BigDecimal!]
  liquidityETH_not_in: [ETHEREUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
}

type ETHEREUM_HourData {
  id: ID!
  date: Int!
  factory: ETHEREUM_Factory!
  volumeETH: ETHEREUM_BigDecimal!
  volumeUSD: ETHEREUM_BigDecimal!
  untrackedVolume: ETHEREUM_BigDecimal!
  liquidityETH: ETHEREUM_BigDecimal!
  liquidityUSD: ETHEREUM_BigDecimal!
  txCount: BigInt!
}

input ETHEREUM_HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: ETHEREUM_BigDecimal
  volumeETH_not: ETHEREUM_BigDecimal
  volumeETH_gt: ETHEREUM_BigDecimal
  volumeETH_lt: ETHEREUM_BigDecimal
  volumeETH_gte: ETHEREUM_BigDecimal
  volumeETH_lte: ETHEREUM_BigDecimal
  volumeETH_in: [ETHEREUM_BigDecimal!]
  volumeETH_not_in: [ETHEREUM_BigDecimal!]
  volumeUSD: ETHEREUM_BigDecimal
  volumeUSD_not: ETHEREUM_BigDecimal
  volumeUSD_gt: ETHEREUM_BigDecimal
  volumeUSD_lt: ETHEREUM_BigDecimal
  volumeUSD_gte: ETHEREUM_BigDecimal
  volumeUSD_lte: ETHEREUM_BigDecimal
  volumeUSD_in: [ETHEREUM_BigDecimal!]
  volumeUSD_not_in: [ETHEREUM_BigDecimal!]
  untrackedVolume: ETHEREUM_BigDecimal
  untrackedVolume_not: ETHEREUM_BigDecimal
  untrackedVolume_gt: ETHEREUM_BigDecimal
  untrackedVolume_lt: ETHEREUM_BigDecimal
  untrackedVolume_gte: ETHEREUM_BigDecimal
  untrackedVolume_lte: ETHEREUM_BigDecimal
  untrackedVolume_in: [ETHEREUM_BigDecimal!]
  untrackedVolume_not_in: [ETHEREUM_BigDecimal!]
  liquidityETH: ETHEREUM_BigDecimal
  liquidityETH_not: ETHEREUM_BigDecimal
  liquidityETH_gt: ETHEREUM_BigDecimal
  liquidityETH_lt: ETHEREUM_BigDecimal
  liquidityETH_gte: ETHEREUM_BigDecimal
  liquidityETH_lte: ETHEREUM_BigDecimal
  liquidityETH_in: [ETHEREUM_BigDecimal!]
  liquidityETH_not_in: [ETHEREUM_BigDecimal!]
  liquidityUSD: ETHEREUM_BigDecimal
  liquidityUSD_not: ETHEREUM_BigDecimal
  liquidityUSD_gt: ETHEREUM_BigDecimal
  liquidityUSD_lt: ETHEREUM_BigDecimal
  liquidityUSD_gte: ETHEREUM_BigDecimal
  liquidityUSD_lte: ETHEREUM_BigDecimal
  liquidityUSD_in: [ETHEREUM_BigDecimal!]
  liquidityUSD_not_in: [ETHEREUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_HourData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type ETHEREUM_LiquidityPosition {
  id: ID!
  user: ETHEREUM_User!
  pair: ETHEREUM_Pair!
  liquidityTokenBalance: ETHEREUM_BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_LiquidityPositionSnapshot_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_LiquidityPositionSnapshot_filter): [ETHEREUM_LiquidityPositionSnapshot]!
  block: Int!
  timestamp: Int!
}

type ETHEREUM_LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: ETHEREUM_LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: ETHEREUM_User!
  pair: ETHEREUM_Pair!
  token0PriceUSD: ETHEREUM_BigDecimal!
  token1PriceUSD: ETHEREUM_BigDecimal!
  reserve0: ETHEREUM_BigDecimal!
  reserve1: ETHEREUM_BigDecimal!
  reserveUSD: ETHEREUM_BigDecimal!
  liquidityTokenTotalSupply: ETHEREUM_BigDecimal!
  liquidityTokenBalance: ETHEREUM_BigDecimal!
}

input ETHEREUM_LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0PriceUSD: ETHEREUM_BigDecimal
  token0PriceUSD_not: ETHEREUM_BigDecimal
  token0PriceUSD_gt: ETHEREUM_BigDecimal
  token0PriceUSD_lt: ETHEREUM_BigDecimal
  token0PriceUSD_gte: ETHEREUM_BigDecimal
  token0PriceUSD_lte: ETHEREUM_BigDecimal
  token0PriceUSD_in: [ETHEREUM_BigDecimal!]
  token0PriceUSD_not_in: [ETHEREUM_BigDecimal!]
  token1PriceUSD: ETHEREUM_BigDecimal
  token1PriceUSD_not: ETHEREUM_BigDecimal
  token1PriceUSD_gt: ETHEREUM_BigDecimal
  token1PriceUSD_lt: ETHEREUM_BigDecimal
  token1PriceUSD_gte: ETHEREUM_BigDecimal
  token1PriceUSD_lte: ETHEREUM_BigDecimal
  token1PriceUSD_in: [ETHEREUM_BigDecimal!]
  token1PriceUSD_not_in: [ETHEREUM_BigDecimal!]
  reserve0: ETHEREUM_BigDecimal
  reserve0_not: ETHEREUM_BigDecimal
  reserve0_gt: ETHEREUM_BigDecimal
  reserve0_lt: ETHEREUM_BigDecimal
  reserve0_gte: ETHEREUM_BigDecimal
  reserve0_lte: ETHEREUM_BigDecimal
  reserve0_in: [ETHEREUM_BigDecimal!]
  reserve0_not_in: [ETHEREUM_BigDecimal!]
  reserve1: ETHEREUM_BigDecimal
  reserve1_not: ETHEREUM_BigDecimal
  reserve1_gt: ETHEREUM_BigDecimal
  reserve1_lt: ETHEREUM_BigDecimal
  reserve1_gte: ETHEREUM_BigDecimal
  reserve1_lte: ETHEREUM_BigDecimal
  reserve1_in: [ETHEREUM_BigDecimal!]
  reserve1_not_in: [ETHEREUM_BigDecimal!]
  reserveUSD: ETHEREUM_BigDecimal
  reserveUSD_not: ETHEREUM_BigDecimal
  reserveUSD_gt: ETHEREUM_BigDecimal
  reserveUSD_lt: ETHEREUM_BigDecimal
  reserveUSD_gte: ETHEREUM_BigDecimal
  reserveUSD_lte: ETHEREUM_BigDecimal
  reserveUSD_in: [ETHEREUM_BigDecimal!]
  reserveUSD_not_in: [ETHEREUM_BigDecimal!]
  liquidityTokenTotalSupply: ETHEREUM_BigDecimal
  liquidityTokenTotalSupply_not: ETHEREUM_BigDecimal
  liquidityTokenTotalSupply_gt: ETHEREUM_BigDecimal
  liquidityTokenTotalSupply_lt: ETHEREUM_BigDecimal
  liquidityTokenTotalSupply_gte: ETHEREUM_BigDecimal
  liquidityTokenTotalSupply_lte: ETHEREUM_BigDecimal
  liquidityTokenTotalSupply_in: [ETHEREUM_BigDecimal!]
  liquidityTokenTotalSupply_not_in: [ETHEREUM_BigDecimal!]
  liquidityTokenBalance: ETHEREUM_BigDecimal
  liquidityTokenBalance_not: ETHEREUM_BigDecimal
  liquidityTokenBalance_gt: ETHEREUM_BigDecimal
  liquidityTokenBalance_lt: ETHEREUM_BigDecimal
  liquidityTokenBalance_gte: ETHEREUM_BigDecimal
  liquidityTokenBalance_lte: ETHEREUM_BigDecimal
  liquidityTokenBalance_in: [ETHEREUM_BigDecimal!]
  liquidityTokenBalance_not_in: [ETHEREUM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  timestamp
  block
  user
  pair
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input ETHEREUM_LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidityTokenBalance: ETHEREUM_BigDecimal
  liquidityTokenBalance_not: ETHEREUM_BigDecimal
  liquidityTokenBalance_gt: ETHEREUM_BigDecimal
  liquidityTokenBalance_lt: ETHEREUM_BigDecimal
  liquidityTokenBalance_gte: ETHEREUM_BigDecimal
  liquidityTokenBalance_lte: ETHEREUM_BigDecimal
  liquidityTokenBalance_in: [ETHEREUM_BigDecimal!]
  liquidityTokenBalance_not_in: [ETHEREUM_BigDecimal!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_LiquidityPosition_orderBy {
  id
  user
  pair
  liquidityTokenBalance
  snapshots
  block
  timestamp
}

type ETHEREUM_Mint {
  id: ID!
  transaction: ETHEREUM_Transaction!
  timestamp: BigInt!
  pair: ETHEREUM_Pair!
  to: ETHEREUM_Bytes!
  liquidity: ETHEREUM_BigDecimal!
  sender: ETHEREUM_Bytes
  amount0: ETHEREUM_BigDecimal
  amount1: ETHEREUM_BigDecimal
  logIndex: BigInt
  amountUSD: ETHEREUM_BigDecimal
  feeTo: ETHEREUM_Bytes
  feeLiquidity: ETHEREUM_BigDecimal
}

input ETHEREUM_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  to: ETHEREUM_Bytes
  to_not: ETHEREUM_Bytes
  to_in: [ETHEREUM_Bytes!]
  to_not_in: [ETHEREUM_Bytes!]
  to_contains: ETHEREUM_Bytes
  to_not_contains: ETHEREUM_Bytes
  liquidity: ETHEREUM_BigDecimal
  liquidity_not: ETHEREUM_BigDecimal
  liquidity_gt: ETHEREUM_BigDecimal
  liquidity_lt: ETHEREUM_BigDecimal
  liquidity_gte: ETHEREUM_BigDecimal
  liquidity_lte: ETHEREUM_BigDecimal
  liquidity_in: [ETHEREUM_BigDecimal!]
  liquidity_not_in: [ETHEREUM_BigDecimal!]
  sender: ETHEREUM_Bytes
  sender_not: ETHEREUM_Bytes
  sender_in: [ETHEREUM_Bytes!]
  sender_not_in: [ETHEREUM_Bytes!]
  sender_contains: ETHEREUM_Bytes
  sender_not_contains: ETHEREUM_Bytes
  amount0: ETHEREUM_BigDecimal
  amount0_not: ETHEREUM_BigDecimal
  amount0_gt: ETHEREUM_BigDecimal
  amount0_lt: ETHEREUM_BigDecimal
  amount0_gte: ETHEREUM_BigDecimal
  amount0_lte: ETHEREUM_BigDecimal
  amount0_in: [ETHEREUM_BigDecimal!]
  amount0_not_in: [ETHEREUM_BigDecimal!]
  amount1: ETHEREUM_BigDecimal
  amount1_not: ETHEREUM_BigDecimal
  amount1_gt: ETHEREUM_BigDecimal
  amount1_lt: ETHEREUM_BigDecimal
  amount1_gte: ETHEREUM_BigDecimal
  amount1_lte: ETHEREUM_BigDecimal
  amount1_in: [ETHEREUM_BigDecimal!]
  amount1_not_in: [ETHEREUM_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: ETHEREUM_BigDecimal
  amountUSD_not: ETHEREUM_BigDecimal
  amountUSD_gt: ETHEREUM_BigDecimal
  amountUSD_lt: ETHEREUM_BigDecimal
  amountUSD_gte: ETHEREUM_BigDecimal
  amountUSD_lte: ETHEREUM_BigDecimal
  amountUSD_in: [ETHEREUM_BigDecimal!]
  amountUSD_not_in: [ETHEREUM_BigDecimal!]
  feeTo: ETHEREUM_Bytes
  feeTo_not: ETHEREUM_Bytes
  feeTo_in: [ETHEREUM_Bytes!]
  feeTo_not_in: [ETHEREUM_Bytes!]
  feeTo_contains: ETHEREUM_Bytes
  feeTo_not_contains: ETHEREUM_Bytes
  feeLiquidity: ETHEREUM_BigDecimal
  feeLiquidity_not: ETHEREUM_BigDecimal
  feeLiquidity_gt: ETHEREUM_BigDecimal
  feeLiquidity_lt: ETHEREUM_BigDecimal
  feeLiquidity_gte: ETHEREUM_BigDecimal
  feeLiquidity_lte: ETHEREUM_BigDecimal
  feeLiquidity_in: [ETHEREUM_BigDecimal!]
  feeLiquidity_not_in: [ETHEREUM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_Mint_orderBy {
  id
  transaction
  timestamp
  pair
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

"""Defines the order direction, either ascending or descending"""
enum ETHEREUM_OrderDirection {
  asc
  desc
}

type ETHEREUM_Pair {
  id: ID!
  factory: ETHEREUM_Factory!
  name: String!
  token0: ETHEREUM_Token!
  token1: ETHEREUM_Token!
  reserve0: ETHEREUM_BigDecimal!
  reserve1: ETHEREUM_BigDecimal!
  totalSupply: ETHEREUM_BigDecimal!
  reserveETH: ETHEREUM_BigDecimal!
  reserveUSD: ETHEREUM_BigDecimal!
  trackedReserveETH: ETHEREUM_BigDecimal!
  token0Price: ETHEREUM_BigDecimal!
  token1Price: ETHEREUM_BigDecimal!
  volumeToken0: ETHEREUM_BigDecimal!
  volumeToken1: ETHEREUM_BigDecimal!
  volumeUSD: ETHEREUM_BigDecimal!
  untrackedVolumeUSD: ETHEREUM_BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_LiquidityPosition_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_LiquidityPosition_filter): [ETHEREUM_LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_LiquidityPositionSnapshot_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_LiquidityPositionSnapshot_filter): [ETHEREUM_LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_PairDayData_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_PairDayData_filter): [ETHEREUM_PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_PairHourData_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_PairHourData_filter): [ETHEREUM_PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_Mint_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_Mint_filter): [ETHEREUM_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_Burn_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_Burn_filter): [ETHEREUM_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_Swap_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_Swap_filter): [ETHEREUM_Swap!]!
  timestamp: BigInt!
  block: BigInt!
}

type ETHEREUM_PairDayData {
  id: ID!
  date: Int!
  pair: ETHEREUM_Pair!
  token0: ETHEREUM_Token!
  token1: ETHEREUM_Token!
  reserve0: ETHEREUM_BigDecimal!
  reserve1: ETHEREUM_BigDecimal!
  totalSupply: ETHEREUM_BigDecimal!
  reserveUSD: ETHEREUM_BigDecimal!
  volumeToken0: ETHEREUM_BigDecimal!
  volumeToken1: ETHEREUM_BigDecimal!
  volumeUSD: ETHEREUM_BigDecimal!
  txCount: BigInt!
}

input ETHEREUM_PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: ETHEREUM_BigDecimal
  reserve0_not: ETHEREUM_BigDecimal
  reserve0_gt: ETHEREUM_BigDecimal
  reserve0_lt: ETHEREUM_BigDecimal
  reserve0_gte: ETHEREUM_BigDecimal
  reserve0_lte: ETHEREUM_BigDecimal
  reserve0_in: [ETHEREUM_BigDecimal!]
  reserve0_not_in: [ETHEREUM_BigDecimal!]
  reserve1: ETHEREUM_BigDecimal
  reserve1_not: ETHEREUM_BigDecimal
  reserve1_gt: ETHEREUM_BigDecimal
  reserve1_lt: ETHEREUM_BigDecimal
  reserve1_gte: ETHEREUM_BigDecimal
  reserve1_lte: ETHEREUM_BigDecimal
  reserve1_in: [ETHEREUM_BigDecimal!]
  reserve1_not_in: [ETHEREUM_BigDecimal!]
  totalSupply: ETHEREUM_BigDecimal
  totalSupply_not: ETHEREUM_BigDecimal
  totalSupply_gt: ETHEREUM_BigDecimal
  totalSupply_lt: ETHEREUM_BigDecimal
  totalSupply_gte: ETHEREUM_BigDecimal
  totalSupply_lte: ETHEREUM_BigDecimal
  totalSupply_in: [ETHEREUM_BigDecimal!]
  totalSupply_not_in: [ETHEREUM_BigDecimal!]
  reserveUSD: ETHEREUM_BigDecimal
  reserveUSD_not: ETHEREUM_BigDecimal
  reserveUSD_gt: ETHEREUM_BigDecimal
  reserveUSD_lt: ETHEREUM_BigDecimal
  reserveUSD_gte: ETHEREUM_BigDecimal
  reserveUSD_lte: ETHEREUM_BigDecimal
  reserveUSD_in: [ETHEREUM_BigDecimal!]
  reserveUSD_not_in: [ETHEREUM_BigDecimal!]
  volumeToken0: ETHEREUM_BigDecimal
  volumeToken0_not: ETHEREUM_BigDecimal
  volumeToken0_gt: ETHEREUM_BigDecimal
  volumeToken0_lt: ETHEREUM_BigDecimal
  volumeToken0_gte: ETHEREUM_BigDecimal
  volumeToken0_lte: ETHEREUM_BigDecimal
  volumeToken0_in: [ETHEREUM_BigDecimal!]
  volumeToken0_not_in: [ETHEREUM_BigDecimal!]
  volumeToken1: ETHEREUM_BigDecimal
  volumeToken1_not: ETHEREUM_BigDecimal
  volumeToken1_gt: ETHEREUM_BigDecimal
  volumeToken1_lt: ETHEREUM_BigDecimal
  volumeToken1_gte: ETHEREUM_BigDecimal
  volumeToken1_lte: ETHEREUM_BigDecimal
  volumeToken1_in: [ETHEREUM_BigDecimal!]
  volumeToken1_not_in: [ETHEREUM_BigDecimal!]
  volumeUSD: ETHEREUM_BigDecimal
  volumeUSD_not: ETHEREUM_BigDecimal
  volumeUSD_gt: ETHEREUM_BigDecimal
  volumeUSD_lt: ETHEREUM_BigDecimal
  volumeUSD_gte: ETHEREUM_BigDecimal
  volumeUSD_lte: ETHEREUM_BigDecimal
  volumeUSD_in: [ETHEREUM_BigDecimal!]
  volumeUSD_not_in: [ETHEREUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_PairDayData_orderBy {
  id
  date
  pair
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

type ETHEREUM_PairHourData {
  id: ID!
  date: Int!
  pair: ETHEREUM_Pair!
  reserve0: ETHEREUM_BigDecimal!
  reserve1: ETHEREUM_BigDecimal!
  reserveUSD: ETHEREUM_BigDecimal!
  volumeToken0: ETHEREUM_BigDecimal!
  volumeToken1: ETHEREUM_BigDecimal!
  volumeUSD: ETHEREUM_BigDecimal!
  txCount: BigInt!
}

input ETHEREUM_PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  reserve0: ETHEREUM_BigDecimal
  reserve0_not: ETHEREUM_BigDecimal
  reserve0_gt: ETHEREUM_BigDecimal
  reserve0_lt: ETHEREUM_BigDecimal
  reserve0_gte: ETHEREUM_BigDecimal
  reserve0_lte: ETHEREUM_BigDecimal
  reserve0_in: [ETHEREUM_BigDecimal!]
  reserve0_not_in: [ETHEREUM_BigDecimal!]
  reserve1: ETHEREUM_BigDecimal
  reserve1_not: ETHEREUM_BigDecimal
  reserve1_gt: ETHEREUM_BigDecimal
  reserve1_lt: ETHEREUM_BigDecimal
  reserve1_gte: ETHEREUM_BigDecimal
  reserve1_lte: ETHEREUM_BigDecimal
  reserve1_in: [ETHEREUM_BigDecimal!]
  reserve1_not_in: [ETHEREUM_BigDecimal!]
  reserveUSD: ETHEREUM_BigDecimal
  reserveUSD_not: ETHEREUM_BigDecimal
  reserveUSD_gt: ETHEREUM_BigDecimal
  reserveUSD_lt: ETHEREUM_BigDecimal
  reserveUSD_gte: ETHEREUM_BigDecimal
  reserveUSD_lte: ETHEREUM_BigDecimal
  reserveUSD_in: [ETHEREUM_BigDecimal!]
  reserveUSD_not_in: [ETHEREUM_BigDecimal!]
  volumeToken0: ETHEREUM_BigDecimal
  volumeToken0_not: ETHEREUM_BigDecimal
  volumeToken0_gt: ETHEREUM_BigDecimal
  volumeToken0_lt: ETHEREUM_BigDecimal
  volumeToken0_gte: ETHEREUM_BigDecimal
  volumeToken0_lte: ETHEREUM_BigDecimal
  volumeToken0_in: [ETHEREUM_BigDecimal!]
  volumeToken0_not_in: [ETHEREUM_BigDecimal!]
  volumeToken1: ETHEREUM_BigDecimal
  volumeToken1_not: ETHEREUM_BigDecimal
  volumeToken1_gt: ETHEREUM_BigDecimal
  volumeToken1_lt: ETHEREUM_BigDecimal
  volumeToken1_gte: ETHEREUM_BigDecimal
  volumeToken1_lte: ETHEREUM_BigDecimal
  volumeToken1_in: [ETHEREUM_BigDecimal!]
  volumeToken1_not_in: [ETHEREUM_BigDecimal!]
  volumeUSD: ETHEREUM_BigDecimal
  volumeUSD_not: ETHEREUM_BigDecimal
  volumeUSD_gt: ETHEREUM_BigDecimal
  volumeUSD_lt: ETHEREUM_BigDecimal
  volumeUSD_gte: ETHEREUM_BigDecimal
  volumeUSD_lte: ETHEREUM_BigDecimal
  volumeUSD_in: [ETHEREUM_BigDecimal!]
  volumeUSD_not_in: [ETHEREUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_PairHourData_orderBy {
  id
  date
  pair
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

input ETHEREUM_Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: ETHEREUM_BigDecimal
  reserve0_not: ETHEREUM_BigDecimal
  reserve0_gt: ETHEREUM_BigDecimal
  reserve0_lt: ETHEREUM_BigDecimal
  reserve0_gte: ETHEREUM_BigDecimal
  reserve0_lte: ETHEREUM_BigDecimal
  reserve0_in: [ETHEREUM_BigDecimal!]
  reserve0_not_in: [ETHEREUM_BigDecimal!]
  reserve1: ETHEREUM_BigDecimal
  reserve1_not: ETHEREUM_BigDecimal
  reserve1_gt: ETHEREUM_BigDecimal
  reserve1_lt: ETHEREUM_BigDecimal
  reserve1_gte: ETHEREUM_BigDecimal
  reserve1_lte: ETHEREUM_BigDecimal
  reserve1_in: [ETHEREUM_BigDecimal!]
  reserve1_not_in: [ETHEREUM_BigDecimal!]
  totalSupply: ETHEREUM_BigDecimal
  totalSupply_not: ETHEREUM_BigDecimal
  totalSupply_gt: ETHEREUM_BigDecimal
  totalSupply_lt: ETHEREUM_BigDecimal
  totalSupply_gte: ETHEREUM_BigDecimal
  totalSupply_lte: ETHEREUM_BigDecimal
  totalSupply_in: [ETHEREUM_BigDecimal!]
  totalSupply_not_in: [ETHEREUM_BigDecimal!]
  reserveETH: ETHEREUM_BigDecimal
  reserveETH_not: ETHEREUM_BigDecimal
  reserveETH_gt: ETHEREUM_BigDecimal
  reserveETH_lt: ETHEREUM_BigDecimal
  reserveETH_gte: ETHEREUM_BigDecimal
  reserveETH_lte: ETHEREUM_BigDecimal
  reserveETH_in: [ETHEREUM_BigDecimal!]
  reserveETH_not_in: [ETHEREUM_BigDecimal!]
  reserveUSD: ETHEREUM_BigDecimal
  reserveUSD_not: ETHEREUM_BigDecimal
  reserveUSD_gt: ETHEREUM_BigDecimal
  reserveUSD_lt: ETHEREUM_BigDecimal
  reserveUSD_gte: ETHEREUM_BigDecimal
  reserveUSD_lte: ETHEREUM_BigDecimal
  reserveUSD_in: [ETHEREUM_BigDecimal!]
  reserveUSD_not_in: [ETHEREUM_BigDecimal!]
  trackedReserveETH: ETHEREUM_BigDecimal
  trackedReserveETH_not: ETHEREUM_BigDecimal
  trackedReserveETH_gt: ETHEREUM_BigDecimal
  trackedReserveETH_lt: ETHEREUM_BigDecimal
  trackedReserveETH_gte: ETHEREUM_BigDecimal
  trackedReserveETH_lte: ETHEREUM_BigDecimal
  trackedReserveETH_in: [ETHEREUM_BigDecimal!]
  trackedReserveETH_not_in: [ETHEREUM_BigDecimal!]
  token0Price: ETHEREUM_BigDecimal
  token0Price_not: ETHEREUM_BigDecimal
  token0Price_gt: ETHEREUM_BigDecimal
  token0Price_lt: ETHEREUM_BigDecimal
  token0Price_gte: ETHEREUM_BigDecimal
  token0Price_lte: ETHEREUM_BigDecimal
  token0Price_in: [ETHEREUM_BigDecimal!]
  token0Price_not_in: [ETHEREUM_BigDecimal!]
  token1Price: ETHEREUM_BigDecimal
  token1Price_not: ETHEREUM_BigDecimal
  token1Price_gt: ETHEREUM_BigDecimal
  token1Price_lt: ETHEREUM_BigDecimal
  token1Price_gte: ETHEREUM_BigDecimal
  token1Price_lte: ETHEREUM_BigDecimal
  token1Price_in: [ETHEREUM_BigDecimal!]
  token1Price_not_in: [ETHEREUM_BigDecimal!]
  volumeToken0: ETHEREUM_BigDecimal
  volumeToken0_not: ETHEREUM_BigDecimal
  volumeToken0_gt: ETHEREUM_BigDecimal
  volumeToken0_lt: ETHEREUM_BigDecimal
  volumeToken0_gte: ETHEREUM_BigDecimal
  volumeToken0_lte: ETHEREUM_BigDecimal
  volumeToken0_in: [ETHEREUM_BigDecimal!]
  volumeToken0_not_in: [ETHEREUM_BigDecimal!]
  volumeToken1: ETHEREUM_BigDecimal
  volumeToken1_not: ETHEREUM_BigDecimal
  volumeToken1_gt: ETHEREUM_BigDecimal
  volumeToken1_lt: ETHEREUM_BigDecimal
  volumeToken1_gte: ETHEREUM_BigDecimal
  volumeToken1_lte: ETHEREUM_BigDecimal
  volumeToken1_in: [ETHEREUM_BigDecimal!]
  volumeToken1_not_in: [ETHEREUM_BigDecimal!]
  volumeUSD: ETHEREUM_BigDecimal
  volumeUSD_not: ETHEREUM_BigDecimal
  volumeUSD_gt: ETHEREUM_BigDecimal
  volumeUSD_lt: ETHEREUM_BigDecimal
  volumeUSD_gte: ETHEREUM_BigDecimal
  volumeUSD_lte: ETHEREUM_BigDecimal
  volumeUSD_in: [ETHEREUM_BigDecimal!]
  volumeUSD_not_in: [ETHEREUM_BigDecimal!]
  untrackedVolumeUSD: ETHEREUM_BigDecimal
  untrackedVolumeUSD_not: ETHEREUM_BigDecimal
  untrackedVolumeUSD_gt: ETHEREUM_BigDecimal
  untrackedVolumeUSD_lt: ETHEREUM_BigDecimal
  untrackedVolumeUSD_gte: ETHEREUM_BigDecimal
  untrackedVolumeUSD_lte: ETHEREUM_BigDecimal
  untrackedVolumeUSD_in: [ETHEREUM_BigDecimal!]
  untrackedVolumeUSD_not_in: [ETHEREUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_Pair_orderBy {
  id
  factory
  name
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
}

type ETHEREUM_Swap {
  id: ID!
  transaction: ETHEREUM_Transaction!
  timestamp: BigInt!
  pair: ETHEREUM_Pair!
  sender: ETHEREUM_Bytes!
  amount0In: ETHEREUM_BigDecimal!
  amount1In: ETHEREUM_BigDecimal!
  amount0Out: ETHEREUM_BigDecimal!
  amount1Out: ETHEREUM_BigDecimal!
  to: ETHEREUM_Bytes!
  logIndex: BigInt
  amountUSD: ETHEREUM_BigDecimal!
}

input ETHEREUM_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  sender: ETHEREUM_Bytes
  sender_not: ETHEREUM_Bytes
  sender_in: [ETHEREUM_Bytes!]
  sender_not_in: [ETHEREUM_Bytes!]
  sender_contains: ETHEREUM_Bytes
  sender_not_contains: ETHEREUM_Bytes
  amount0In: ETHEREUM_BigDecimal
  amount0In_not: ETHEREUM_BigDecimal
  amount0In_gt: ETHEREUM_BigDecimal
  amount0In_lt: ETHEREUM_BigDecimal
  amount0In_gte: ETHEREUM_BigDecimal
  amount0In_lte: ETHEREUM_BigDecimal
  amount0In_in: [ETHEREUM_BigDecimal!]
  amount0In_not_in: [ETHEREUM_BigDecimal!]
  amount1In: ETHEREUM_BigDecimal
  amount1In_not: ETHEREUM_BigDecimal
  amount1In_gt: ETHEREUM_BigDecimal
  amount1In_lt: ETHEREUM_BigDecimal
  amount1In_gte: ETHEREUM_BigDecimal
  amount1In_lte: ETHEREUM_BigDecimal
  amount1In_in: [ETHEREUM_BigDecimal!]
  amount1In_not_in: [ETHEREUM_BigDecimal!]
  amount0Out: ETHEREUM_BigDecimal
  amount0Out_not: ETHEREUM_BigDecimal
  amount0Out_gt: ETHEREUM_BigDecimal
  amount0Out_lt: ETHEREUM_BigDecimal
  amount0Out_gte: ETHEREUM_BigDecimal
  amount0Out_lte: ETHEREUM_BigDecimal
  amount0Out_in: [ETHEREUM_BigDecimal!]
  amount0Out_not_in: [ETHEREUM_BigDecimal!]
  amount1Out: ETHEREUM_BigDecimal
  amount1Out_not: ETHEREUM_BigDecimal
  amount1Out_gt: ETHEREUM_BigDecimal
  amount1Out_lt: ETHEREUM_BigDecimal
  amount1Out_gte: ETHEREUM_BigDecimal
  amount1Out_lte: ETHEREUM_BigDecimal
  amount1Out_in: [ETHEREUM_BigDecimal!]
  amount1Out_not_in: [ETHEREUM_BigDecimal!]
  to: ETHEREUM_Bytes
  to_not: ETHEREUM_Bytes
  to_in: [ETHEREUM_Bytes!]
  to_not_in: [ETHEREUM_Bytes!]
  to_contains: ETHEREUM_Bytes
  to_not_contains: ETHEREUM_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: ETHEREUM_BigDecimal
  amountUSD_not: ETHEREUM_BigDecimal
  amountUSD_gt: ETHEREUM_BigDecimal
  amountUSD_lt: ETHEREUM_BigDecimal
  amountUSD_gte: ETHEREUM_BigDecimal
  amountUSD_lte: ETHEREUM_BigDecimal
  amountUSD_in: [ETHEREUM_BigDecimal!]
  amountUSD_not_in: [ETHEREUM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_Swap_orderBy {
  id
  transaction
  timestamp
  pair
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
}

type ETHEREUM_Token {
  id: ID!
  factory: ETHEREUM_Factory!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: ETHEREUM_BigDecimal!
  volumeUSD: ETHEREUM_BigDecimal!
  untrackedVolumeUSD: ETHEREUM_BigDecimal!
  txCount: BigInt!
  liquidity: ETHEREUM_BigDecimal!
  derivedETH: ETHEREUM_BigDecimal!
  hourData(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_TokenHourData_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_TokenHourData_filter): [ETHEREUM_TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_TokenDayData_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_TokenDayData_filter): [ETHEREUM_TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_Pair_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_Pair_filter): [ETHEREUM_Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_Pair_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_Pair_filter): [ETHEREUM_Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_PairDayData_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_PairDayData_filter): [ETHEREUM_PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_PairDayData_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_PairDayData_filter): [ETHEREUM_PairDayData!]!
}

type ETHEREUM_TokenDayData {
  id: ID!
  date: Int!
  token: ETHEREUM_Token!
  volume: ETHEREUM_BigDecimal!
  volumeETH: ETHEREUM_BigDecimal!
  volumeUSD: ETHEREUM_BigDecimal!
  txCount: BigInt!
  liquidity: ETHEREUM_BigDecimal!
  liquidityETH: ETHEREUM_BigDecimal!
  liquidityUSD: ETHEREUM_BigDecimal!
  priceUSD: ETHEREUM_BigDecimal!
}

input ETHEREUM_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: ETHEREUM_BigDecimal
  volume_not: ETHEREUM_BigDecimal
  volume_gt: ETHEREUM_BigDecimal
  volume_lt: ETHEREUM_BigDecimal
  volume_gte: ETHEREUM_BigDecimal
  volume_lte: ETHEREUM_BigDecimal
  volume_in: [ETHEREUM_BigDecimal!]
  volume_not_in: [ETHEREUM_BigDecimal!]
  volumeETH: ETHEREUM_BigDecimal
  volumeETH_not: ETHEREUM_BigDecimal
  volumeETH_gt: ETHEREUM_BigDecimal
  volumeETH_lt: ETHEREUM_BigDecimal
  volumeETH_gte: ETHEREUM_BigDecimal
  volumeETH_lte: ETHEREUM_BigDecimal
  volumeETH_in: [ETHEREUM_BigDecimal!]
  volumeETH_not_in: [ETHEREUM_BigDecimal!]
  volumeUSD: ETHEREUM_BigDecimal
  volumeUSD_not: ETHEREUM_BigDecimal
  volumeUSD_gt: ETHEREUM_BigDecimal
  volumeUSD_lt: ETHEREUM_BigDecimal
  volumeUSD_gte: ETHEREUM_BigDecimal
  volumeUSD_lte: ETHEREUM_BigDecimal
  volumeUSD_in: [ETHEREUM_BigDecimal!]
  volumeUSD_not_in: [ETHEREUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: ETHEREUM_BigDecimal
  liquidity_not: ETHEREUM_BigDecimal
  liquidity_gt: ETHEREUM_BigDecimal
  liquidity_lt: ETHEREUM_BigDecimal
  liquidity_gte: ETHEREUM_BigDecimal
  liquidity_lte: ETHEREUM_BigDecimal
  liquidity_in: [ETHEREUM_BigDecimal!]
  liquidity_not_in: [ETHEREUM_BigDecimal!]
  liquidityETH: ETHEREUM_BigDecimal
  liquidityETH_not: ETHEREUM_BigDecimal
  liquidityETH_gt: ETHEREUM_BigDecimal
  liquidityETH_lt: ETHEREUM_BigDecimal
  liquidityETH_gte: ETHEREUM_BigDecimal
  liquidityETH_lte: ETHEREUM_BigDecimal
  liquidityETH_in: [ETHEREUM_BigDecimal!]
  liquidityETH_not_in: [ETHEREUM_BigDecimal!]
  liquidityUSD: ETHEREUM_BigDecimal
  liquidityUSD_not: ETHEREUM_BigDecimal
  liquidityUSD_gt: ETHEREUM_BigDecimal
  liquidityUSD_lt: ETHEREUM_BigDecimal
  liquidityUSD_gte: ETHEREUM_BigDecimal
  liquidityUSD_lte: ETHEREUM_BigDecimal
  liquidityUSD_in: [ETHEREUM_BigDecimal!]
  liquidityUSD_not_in: [ETHEREUM_BigDecimal!]
  priceUSD: ETHEREUM_BigDecimal
  priceUSD_not: ETHEREUM_BigDecimal
  priceUSD_gt: ETHEREUM_BigDecimal
  priceUSD_lt: ETHEREUM_BigDecimal
  priceUSD_gte: ETHEREUM_BigDecimal
  priceUSD_lte: ETHEREUM_BigDecimal
  priceUSD_in: [ETHEREUM_BigDecimal!]
  priceUSD_not_in: [ETHEREUM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_TokenDayData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

type ETHEREUM_TokenHourData {
  id: ID!
  date: Int!
  token: ETHEREUM_Token!
  volume: ETHEREUM_BigDecimal!
  volumeETH: ETHEREUM_BigDecimal!
  volumeUSD: ETHEREUM_BigDecimal!
  txCount: BigInt!
  liquidity: ETHEREUM_BigDecimal!
  liquidityETH: ETHEREUM_BigDecimal!
  liquidityUSD: ETHEREUM_BigDecimal!
  priceUSD: ETHEREUM_BigDecimal!
}

input ETHEREUM_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: ETHEREUM_BigDecimal
  volume_not: ETHEREUM_BigDecimal
  volume_gt: ETHEREUM_BigDecimal
  volume_lt: ETHEREUM_BigDecimal
  volume_gte: ETHEREUM_BigDecimal
  volume_lte: ETHEREUM_BigDecimal
  volume_in: [ETHEREUM_BigDecimal!]
  volume_not_in: [ETHEREUM_BigDecimal!]
  volumeETH: ETHEREUM_BigDecimal
  volumeETH_not: ETHEREUM_BigDecimal
  volumeETH_gt: ETHEREUM_BigDecimal
  volumeETH_lt: ETHEREUM_BigDecimal
  volumeETH_gte: ETHEREUM_BigDecimal
  volumeETH_lte: ETHEREUM_BigDecimal
  volumeETH_in: [ETHEREUM_BigDecimal!]
  volumeETH_not_in: [ETHEREUM_BigDecimal!]
  volumeUSD: ETHEREUM_BigDecimal
  volumeUSD_not: ETHEREUM_BigDecimal
  volumeUSD_gt: ETHEREUM_BigDecimal
  volumeUSD_lt: ETHEREUM_BigDecimal
  volumeUSD_gte: ETHEREUM_BigDecimal
  volumeUSD_lte: ETHEREUM_BigDecimal
  volumeUSD_in: [ETHEREUM_BigDecimal!]
  volumeUSD_not_in: [ETHEREUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: ETHEREUM_BigDecimal
  liquidity_not: ETHEREUM_BigDecimal
  liquidity_gt: ETHEREUM_BigDecimal
  liquidity_lt: ETHEREUM_BigDecimal
  liquidity_gte: ETHEREUM_BigDecimal
  liquidity_lte: ETHEREUM_BigDecimal
  liquidity_in: [ETHEREUM_BigDecimal!]
  liquidity_not_in: [ETHEREUM_BigDecimal!]
  liquidityETH: ETHEREUM_BigDecimal
  liquidityETH_not: ETHEREUM_BigDecimal
  liquidityETH_gt: ETHEREUM_BigDecimal
  liquidityETH_lt: ETHEREUM_BigDecimal
  liquidityETH_gte: ETHEREUM_BigDecimal
  liquidityETH_lte: ETHEREUM_BigDecimal
  liquidityETH_in: [ETHEREUM_BigDecimal!]
  liquidityETH_not_in: [ETHEREUM_BigDecimal!]
  liquidityUSD: ETHEREUM_BigDecimal
  liquidityUSD_not: ETHEREUM_BigDecimal
  liquidityUSD_gt: ETHEREUM_BigDecimal
  liquidityUSD_lt: ETHEREUM_BigDecimal
  liquidityUSD_gte: ETHEREUM_BigDecimal
  liquidityUSD_lte: ETHEREUM_BigDecimal
  liquidityUSD_in: [ETHEREUM_BigDecimal!]
  liquidityUSD_not_in: [ETHEREUM_BigDecimal!]
  priceUSD: ETHEREUM_BigDecimal
  priceUSD_not: ETHEREUM_BigDecimal
  priceUSD_gt: ETHEREUM_BigDecimal
  priceUSD_lt: ETHEREUM_BigDecimal
  priceUSD_gte: ETHEREUM_BigDecimal
  priceUSD_lte: ETHEREUM_BigDecimal
  priceUSD_in: [ETHEREUM_BigDecimal!]
  priceUSD_not_in: [ETHEREUM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_TokenHourData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

input ETHEREUM_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: ETHEREUM_BigDecimal
  volume_not: ETHEREUM_BigDecimal
  volume_gt: ETHEREUM_BigDecimal
  volume_lt: ETHEREUM_BigDecimal
  volume_gte: ETHEREUM_BigDecimal
  volume_lte: ETHEREUM_BigDecimal
  volume_in: [ETHEREUM_BigDecimal!]
  volume_not_in: [ETHEREUM_BigDecimal!]
  volumeUSD: ETHEREUM_BigDecimal
  volumeUSD_not: ETHEREUM_BigDecimal
  volumeUSD_gt: ETHEREUM_BigDecimal
  volumeUSD_lt: ETHEREUM_BigDecimal
  volumeUSD_gte: ETHEREUM_BigDecimal
  volumeUSD_lte: ETHEREUM_BigDecimal
  volumeUSD_in: [ETHEREUM_BigDecimal!]
  volumeUSD_not_in: [ETHEREUM_BigDecimal!]
  untrackedVolumeUSD: ETHEREUM_BigDecimal
  untrackedVolumeUSD_not: ETHEREUM_BigDecimal
  untrackedVolumeUSD_gt: ETHEREUM_BigDecimal
  untrackedVolumeUSD_lt: ETHEREUM_BigDecimal
  untrackedVolumeUSD_gte: ETHEREUM_BigDecimal
  untrackedVolumeUSD_lte: ETHEREUM_BigDecimal
  untrackedVolumeUSD_in: [ETHEREUM_BigDecimal!]
  untrackedVolumeUSD_not_in: [ETHEREUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: ETHEREUM_BigDecimal
  liquidity_not: ETHEREUM_BigDecimal
  liquidity_gt: ETHEREUM_BigDecimal
  liquidity_lt: ETHEREUM_BigDecimal
  liquidity_gte: ETHEREUM_BigDecimal
  liquidity_lte: ETHEREUM_BigDecimal
  liquidity_in: [ETHEREUM_BigDecimal!]
  liquidity_not_in: [ETHEREUM_BigDecimal!]
  derivedETH: ETHEREUM_BigDecimal
  derivedETH_not: ETHEREUM_BigDecimal
  derivedETH_gt: ETHEREUM_BigDecimal
  derivedETH_lt: ETHEREUM_BigDecimal
  derivedETH_gte: ETHEREUM_BigDecimal
  derivedETH_lte: ETHEREUM_BigDecimal
  derivedETH_in: [ETHEREUM_BigDecimal!]
  derivedETH_not_in: [ETHEREUM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_Token_orderBy {
  id
  factory
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
}

type ETHEREUM_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_Mint_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_Mint_filter): [ETHEREUM_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_Burn_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_Burn_filter): [ETHEREUM_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_Swap_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_Swap_filter): [ETHEREUM_Swap]!
}

input ETHEREUM_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
}

type ETHEREUM_User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: ETHEREUM_LiquidityPosition_orderBy, orderDirection: ETHEREUM_OrderDirection, where: ETHEREUM_LiquidityPosition_filter): [ETHEREUM_LiquidityPosition!]!
}

input ETHEREUM_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]

  """Filter for the block changed event."""
  _change_block: ETHEREUM_BlockChangedFilter
}

enum ETHEREUM_User_orderBy {
  id
  liquidityPositions
}

type ETHEREUM__Block_ {
  """The hash of the block"""
  hash: ETHEREUM_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type ETHEREUM__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: ETHEREUM__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar BSC_BigDecimal

input BSC_BlockChangedFilter {
  number_gte: Int!
}

input BSC_Block_height {
  hash: BSC_Bytes
  number: Int
  number_gte: Int
}

type BSC_Bundle {
  id: ID!
  ethPrice: BSC_BigDecimal!
}

input BSC_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: BSC_BigDecimal
  ethPrice_not: BSC_BigDecimal
  ethPrice_gt: BSC_BigDecimal
  ethPrice_lt: BSC_BigDecimal
  ethPrice_gte: BSC_BigDecimal
  ethPrice_lte: BSC_BigDecimal
  ethPrice_in: [BSC_BigDecimal!]
  ethPrice_not_in: [BSC_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_Bundle_orderBy {
  id
  ethPrice
}

type BSC_Burn {
  id: ID!
  transaction: BSC_Transaction!
  timestamp: BigInt!
  pair: BSC_Pair!
  liquidity: BSC_BigDecimal!
  sender: BSC_Bytes
  amount0: BSC_BigDecimal
  amount1: BSC_BigDecimal
  to: BSC_Bytes
  logIndex: BigInt
  amountUSD: BSC_BigDecimal
  complete: Boolean!
  feeTo: BSC_Bytes
  feeLiquidity: BSC_BigDecimal
}

input BSC_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidity: BSC_BigDecimal
  liquidity_not: BSC_BigDecimal
  liquidity_gt: BSC_BigDecimal
  liquidity_lt: BSC_BigDecimal
  liquidity_gte: BSC_BigDecimal
  liquidity_lte: BSC_BigDecimal
  liquidity_in: [BSC_BigDecimal!]
  liquidity_not_in: [BSC_BigDecimal!]
  sender: BSC_Bytes
  sender_not: BSC_Bytes
  sender_in: [BSC_Bytes!]
  sender_not_in: [BSC_Bytes!]
  sender_contains: BSC_Bytes
  sender_not_contains: BSC_Bytes
  amount0: BSC_BigDecimal
  amount0_not: BSC_BigDecimal
  amount0_gt: BSC_BigDecimal
  amount0_lt: BSC_BigDecimal
  amount0_gte: BSC_BigDecimal
  amount0_lte: BSC_BigDecimal
  amount0_in: [BSC_BigDecimal!]
  amount0_not_in: [BSC_BigDecimal!]
  amount1: BSC_BigDecimal
  amount1_not: BSC_BigDecimal
  amount1_gt: BSC_BigDecimal
  amount1_lt: BSC_BigDecimal
  amount1_gte: BSC_BigDecimal
  amount1_lte: BSC_BigDecimal
  amount1_in: [BSC_BigDecimal!]
  amount1_not_in: [BSC_BigDecimal!]
  to: BSC_Bytes
  to_not: BSC_Bytes
  to_in: [BSC_Bytes!]
  to_not_in: [BSC_Bytes!]
  to_contains: BSC_Bytes
  to_not_contains: BSC_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: BSC_BigDecimal
  amountUSD_not: BSC_BigDecimal
  amountUSD_gt: BSC_BigDecimal
  amountUSD_lt: BSC_BigDecimal
  amountUSD_gte: BSC_BigDecimal
  amountUSD_lte: BSC_BigDecimal
  amountUSD_in: [BSC_BigDecimal!]
  amountUSD_not_in: [BSC_BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: BSC_Bytes
  feeTo_not: BSC_Bytes
  feeTo_in: [BSC_Bytes!]
  feeTo_not_in: [BSC_Bytes!]
  feeTo_contains: BSC_Bytes
  feeTo_not_contains: BSC_Bytes
  feeLiquidity: BSC_BigDecimal
  feeLiquidity_not: BSC_BigDecimal
  feeLiquidity_gt: BSC_BigDecimal
  feeLiquidity_lt: BSC_BigDecimal
  feeLiquidity_gte: BSC_BigDecimal
  feeLiquidity_lte: BSC_BigDecimal
  feeLiquidity_in: [BSC_BigDecimal!]
  feeLiquidity_not_in: [BSC_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_Burn_orderBy {
  id
  transaction
  timestamp
  pair
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

scalar BSC_Bytes

type BSC_DayData {
  id: ID!
  date: Int!
  factory: BSC_Factory!
  volumeETH: BSC_BigDecimal!
  volumeUSD: BSC_BigDecimal!
  untrackedVolume: BSC_BigDecimal!
  liquidityETH: BSC_BigDecimal!
  liquidityUSD: BSC_BigDecimal!
  txCount: BigInt!
}

input BSC_DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: BSC_BigDecimal
  volumeETH_not: BSC_BigDecimal
  volumeETH_gt: BSC_BigDecimal
  volumeETH_lt: BSC_BigDecimal
  volumeETH_gte: BSC_BigDecimal
  volumeETH_lte: BSC_BigDecimal
  volumeETH_in: [BSC_BigDecimal!]
  volumeETH_not_in: [BSC_BigDecimal!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  untrackedVolume: BSC_BigDecimal
  untrackedVolume_not: BSC_BigDecimal
  untrackedVolume_gt: BSC_BigDecimal
  untrackedVolume_lt: BSC_BigDecimal
  untrackedVolume_gte: BSC_BigDecimal
  untrackedVolume_lte: BSC_BigDecimal
  untrackedVolume_in: [BSC_BigDecimal!]
  untrackedVolume_not_in: [BSC_BigDecimal!]
  liquidityETH: BSC_BigDecimal
  liquidityETH_not: BSC_BigDecimal
  liquidityETH_gt: BSC_BigDecimal
  liquidityETH_lt: BSC_BigDecimal
  liquidityETH_gte: BSC_BigDecimal
  liquidityETH_lte: BSC_BigDecimal
  liquidityETH_in: [BSC_BigDecimal!]
  liquidityETH_not_in: [BSC_BigDecimal!]
  liquidityUSD: BSC_BigDecimal
  liquidityUSD_not: BSC_BigDecimal
  liquidityUSD_gt: BSC_BigDecimal
  liquidityUSD_lt: BSC_BigDecimal
  liquidityUSD_gte: BSC_BigDecimal
  liquidityUSD_lte: BSC_BigDecimal
  liquidityUSD_in: [BSC_BigDecimal!]
  liquidityUSD_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_DayData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type BSC_Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: BSC_BigDecimal!
  volumeETH: BSC_BigDecimal!
  untrackedVolumeUSD: BSC_BigDecimal!
  liquidityUSD: BSC_BigDecimal!
  liquidityETH: BSC_BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: BSC_Pair_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Pair_filter): [BSC_Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: BSC_Token_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Token_filter): [BSC_Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: BSC_HourData_orderBy, orderDirection: BSC_OrderDirection, where: BSC_HourData_filter): [BSC_HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: BSC_DayData_orderBy, orderDirection: BSC_OrderDirection, where: BSC_DayData_filter): [BSC_DayData!]!
}

input BSC_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  volumeETH: BSC_BigDecimal
  volumeETH_not: BSC_BigDecimal
  volumeETH_gt: BSC_BigDecimal
  volumeETH_lt: BSC_BigDecimal
  volumeETH_gte: BSC_BigDecimal
  volumeETH_lte: BSC_BigDecimal
  volumeETH_in: [BSC_BigDecimal!]
  volumeETH_not_in: [BSC_BigDecimal!]
  untrackedVolumeUSD: BSC_BigDecimal
  untrackedVolumeUSD_not: BSC_BigDecimal
  untrackedVolumeUSD_gt: BSC_BigDecimal
  untrackedVolumeUSD_lt: BSC_BigDecimal
  untrackedVolumeUSD_gte: BSC_BigDecimal
  untrackedVolumeUSD_lte: BSC_BigDecimal
  untrackedVolumeUSD_in: [BSC_BigDecimal!]
  untrackedVolumeUSD_not_in: [BSC_BigDecimal!]
  liquidityUSD: BSC_BigDecimal
  liquidityUSD_not: BSC_BigDecimal
  liquidityUSD_gt: BSC_BigDecimal
  liquidityUSD_lt: BSC_BigDecimal
  liquidityUSD_gte: BSC_BigDecimal
  liquidityUSD_lte: BSC_BigDecimal
  liquidityUSD_in: [BSC_BigDecimal!]
  liquidityUSD_not_in: [BSC_BigDecimal!]
  liquidityETH: BSC_BigDecimal
  liquidityETH_not: BSC_BigDecimal
  liquidityETH_gt: BSC_BigDecimal
  liquidityETH_lt: BSC_BigDecimal
  liquidityETH_gte: BSC_BigDecimal
  liquidityETH_lte: BSC_BigDecimal
  liquidityETH_in: [BSC_BigDecimal!]
  liquidityETH_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
}

type BSC_HourData {
  id: ID!
  date: Int!
  factory: BSC_Factory!
  volumeETH: BSC_BigDecimal!
  volumeUSD: BSC_BigDecimal!
  untrackedVolume: BSC_BigDecimal!
  liquidityETH: BSC_BigDecimal!
  liquidityUSD: BSC_BigDecimal!
  txCount: BigInt!
}

input BSC_HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: BSC_BigDecimal
  volumeETH_not: BSC_BigDecimal
  volumeETH_gt: BSC_BigDecimal
  volumeETH_lt: BSC_BigDecimal
  volumeETH_gte: BSC_BigDecimal
  volumeETH_lte: BSC_BigDecimal
  volumeETH_in: [BSC_BigDecimal!]
  volumeETH_not_in: [BSC_BigDecimal!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  untrackedVolume: BSC_BigDecimal
  untrackedVolume_not: BSC_BigDecimal
  untrackedVolume_gt: BSC_BigDecimal
  untrackedVolume_lt: BSC_BigDecimal
  untrackedVolume_gte: BSC_BigDecimal
  untrackedVolume_lte: BSC_BigDecimal
  untrackedVolume_in: [BSC_BigDecimal!]
  untrackedVolume_not_in: [BSC_BigDecimal!]
  liquidityETH: BSC_BigDecimal
  liquidityETH_not: BSC_BigDecimal
  liquidityETH_gt: BSC_BigDecimal
  liquidityETH_lt: BSC_BigDecimal
  liquidityETH_gte: BSC_BigDecimal
  liquidityETH_lte: BSC_BigDecimal
  liquidityETH_in: [BSC_BigDecimal!]
  liquidityETH_not_in: [BSC_BigDecimal!]
  liquidityUSD: BSC_BigDecimal
  liquidityUSD_not: BSC_BigDecimal
  liquidityUSD_gt: BSC_BigDecimal
  liquidityUSD_lt: BSC_BigDecimal
  liquidityUSD_gte: BSC_BigDecimal
  liquidityUSD_lte: BSC_BigDecimal
  liquidityUSD_in: [BSC_BigDecimal!]
  liquidityUSD_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_HourData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type BSC_LiquidityPosition {
  id: ID!
  user: BSC_User!
  pair: BSC_Pair!
  liquidityTokenBalance: BSC_BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: BSC_LiquidityPositionSnapshot_orderBy, orderDirection: BSC_OrderDirection, where: BSC_LiquidityPositionSnapshot_filter): [BSC_LiquidityPositionSnapshot]!
  block: Int!
  timestamp: Int!
}

type BSC_LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: BSC_LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: BSC_User!
  pair: BSC_Pair!
  token0PriceUSD: BSC_BigDecimal!
  token1PriceUSD: BSC_BigDecimal!
  reserve0: BSC_BigDecimal!
  reserve1: BSC_BigDecimal!
  reserveUSD: BSC_BigDecimal!
  liquidityTokenTotalSupply: BSC_BigDecimal!
  liquidityTokenBalance: BSC_BigDecimal!
}

input BSC_LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0PriceUSD: BSC_BigDecimal
  token0PriceUSD_not: BSC_BigDecimal
  token0PriceUSD_gt: BSC_BigDecimal
  token0PriceUSD_lt: BSC_BigDecimal
  token0PriceUSD_gte: BSC_BigDecimal
  token0PriceUSD_lte: BSC_BigDecimal
  token0PriceUSD_in: [BSC_BigDecimal!]
  token0PriceUSD_not_in: [BSC_BigDecimal!]
  token1PriceUSD: BSC_BigDecimal
  token1PriceUSD_not: BSC_BigDecimal
  token1PriceUSD_gt: BSC_BigDecimal
  token1PriceUSD_lt: BSC_BigDecimal
  token1PriceUSD_gte: BSC_BigDecimal
  token1PriceUSD_lte: BSC_BigDecimal
  token1PriceUSD_in: [BSC_BigDecimal!]
  token1PriceUSD_not_in: [BSC_BigDecimal!]
  reserve0: BSC_BigDecimal
  reserve0_not: BSC_BigDecimal
  reserve0_gt: BSC_BigDecimal
  reserve0_lt: BSC_BigDecimal
  reserve0_gte: BSC_BigDecimal
  reserve0_lte: BSC_BigDecimal
  reserve0_in: [BSC_BigDecimal!]
  reserve0_not_in: [BSC_BigDecimal!]
  reserve1: BSC_BigDecimal
  reserve1_not: BSC_BigDecimal
  reserve1_gt: BSC_BigDecimal
  reserve1_lt: BSC_BigDecimal
  reserve1_gte: BSC_BigDecimal
  reserve1_lte: BSC_BigDecimal
  reserve1_in: [BSC_BigDecimal!]
  reserve1_not_in: [BSC_BigDecimal!]
  reserveUSD: BSC_BigDecimal
  reserveUSD_not: BSC_BigDecimal
  reserveUSD_gt: BSC_BigDecimal
  reserveUSD_lt: BSC_BigDecimal
  reserveUSD_gte: BSC_BigDecimal
  reserveUSD_lte: BSC_BigDecimal
  reserveUSD_in: [BSC_BigDecimal!]
  reserveUSD_not_in: [BSC_BigDecimal!]
  liquidityTokenTotalSupply: BSC_BigDecimal
  liquidityTokenTotalSupply_not: BSC_BigDecimal
  liquidityTokenTotalSupply_gt: BSC_BigDecimal
  liquidityTokenTotalSupply_lt: BSC_BigDecimal
  liquidityTokenTotalSupply_gte: BSC_BigDecimal
  liquidityTokenTotalSupply_lte: BSC_BigDecimal
  liquidityTokenTotalSupply_in: [BSC_BigDecimal!]
  liquidityTokenTotalSupply_not_in: [BSC_BigDecimal!]
  liquidityTokenBalance: BSC_BigDecimal
  liquidityTokenBalance_not: BSC_BigDecimal
  liquidityTokenBalance_gt: BSC_BigDecimal
  liquidityTokenBalance_lt: BSC_BigDecimal
  liquidityTokenBalance_gte: BSC_BigDecimal
  liquidityTokenBalance_lte: BSC_BigDecimal
  liquidityTokenBalance_in: [BSC_BigDecimal!]
  liquidityTokenBalance_not_in: [BSC_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  timestamp
  block
  user
  pair
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input BSC_LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidityTokenBalance: BSC_BigDecimal
  liquidityTokenBalance_not: BSC_BigDecimal
  liquidityTokenBalance_gt: BSC_BigDecimal
  liquidityTokenBalance_lt: BSC_BigDecimal
  liquidityTokenBalance_gte: BSC_BigDecimal
  liquidityTokenBalance_lte: BSC_BigDecimal
  liquidityTokenBalance_in: [BSC_BigDecimal!]
  liquidityTokenBalance_not_in: [BSC_BigDecimal!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_LiquidityPosition_orderBy {
  id
  user
  pair
  liquidityTokenBalance
  snapshots
  block
  timestamp
}

type BSC_Mint {
  id: ID!
  transaction: BSC_Transaction!
  timestamp: BigInt!
  pair: BSC_Pair!
  to: BSC_Bytes!
  liquidity: BSC_BigDecimal!
  sender: BSC_Bytes
  amount0: BSC_BigDecimal
  amount1: BSC_BigDecimal
  logIndex: BigInt
  amountUSD: BSC_BigDecimal
  feeTo: BSC_Bytes
  feeLiquidity: BSC_BigDecimal
}

input BSC_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  to: BSC_Bytes
  to_not: BSC_Bytes
  to_in: [BSC_Bytes!]
  to_not_in: [BSC_Bytes!]
  to_contains: BSC_Bytes
  to_not_contains: BSC_Bytes
  liquidity: BSC_BigDecimal
  liquidity_not: BSC_BigDecimal
  liquidity_gt: BSC_BigDecimal
  liquidity_lt: BSC_BigDecimal
  liquidity_gte: BSC_BigDecimal
  liquidity_lte: BSC_BigDecimal
  liquidity_in: [BSC_BigDecimal!]
  liquidity_not_in: [BSC_BigDecimal!]
  sender: BSC_Bytes
  sender_not: BSC_Bytes
  sender_in: [BSC_Bytes!]
  sender_not_in: [BSC_Bytes!]
  sender_contains: BSC_Bytes
  sender_not_contains: BSC_Bytes
  amount0: BSC_BigDecimal
  amount0_not: BSC_BigDecimal
  amount0_gt: BSC_BigDecimal
  amount0_lt: BSC_BigDecimal
  amount0_gte: BSC_BigDecimal
  amount0_lte: BSC_BigDecimal
  amount0_in: [BSC_BigDecimal!]
  amount0_not_in: [BSC_BigDecimal!]
  amount1: BSC_BigDecimal
  amount1_not: BSC_BigDecimal
  amount1_gt: BSC_BigDecimal
  amount1_lt: BSC_BigDecimal
  amount1_gte: BSC_BigDecimal
  amount1_lte: BSC_BigDecimal
  amount1_in: [BSC_BigDecimal!]
  amount1_not_in: [BSC_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: BSC_BigDecimal
  amountUSD_not: BSC_BigDecimal
  amountUSD_gt: BSC_BigDecimal
  amountUSD_lt: BSC_BigDecimal
  amountUSD_gte: BSC_BigDecimal
  amountUSD_lte: BSC_BigDecimal
  amountUSD_in: [BSC_BigDecimal!]
  amountUSD_not_in: [BSC_BigDecimal!]
  feeTo: BSC_Bytes
  feeTo_not: BSC_Bytes
  feeTo_in: [BSC_Bytes!]
  feeTo_not_in: [BSC_Bytes!]
  feeTo_contains: BSC_Bytes
  feeTo_not_contains: BSC_Bytes
  feeLiquidity: BSC_BigDecimal
  feeLiquidity_not: BSC_BigDecimal
  feeLiquidity_gt: BSC_BigDecimal
  feeLiquidity_lt: BSC_BigDecimal
  feeLiquidity_gte: BSC_BigDecimal
  feeLiquidity_lte: BSC_BigDecimal
  feeLiquidity_in: [BSC_BigDecimal!]
  feeLiquidity_not_in: [BSC_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_Mint_orderBy {
  id
  transaction
  timestamp
  pair
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

"""Defines the order direction, either ascending or descending"""
enum BSC_OrderDirection {
  asc
  desc
}

type BSC_Pair {
  id: ID!
  factory: BSC_Factory!
  name: String!
  token0: BSC_Token!
  token1: BSC_Token!
  reserve0: BSC_BigDecimal!
  reserve1: BSC_BigDecimal!
  totalSupply: BSC_BigDecimal!
  reserveETH: BSC_BigDecimal!
  reserveUSD: BSC_BigDecimal!
  trackedReserveETH: BSC_BigDecimal!
  token0Price: BSC_BigDecimal!
  token1Price: BSC_BigDecimal!
  volumeToken0: BSC_BigDecimal!
  volumeToken1: BSC_BigDecimal!
  volumeUSD: BSC_BigDecimal!
  untrackedVolumeUSD: BSC_BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: BSC_LiquidityPosition_orderBy, orderDirection: BSC_OrderDirection, where: BSC_LiquidityPosition_filter): [BSC_LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: BSC_LiquidityPositionSnapshot_orderBy, orderDirection: BSC_OrderDirection, where: BSC_LiquidityPositionSnapshot_filter): [BSC_LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: BSC_PairDayData_orderBy, orderDirection: BSC_OrderDirection, where: BSC_PairDayData_filter): [BSC_PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: BSC_PairHourData_orderBy, orderDirection: BSC_OrderDirection, where: BSC_PairHourData_filter): [BSC_PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: BSC_Mint_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Mint_filter): [BSC_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: BSC_Burn_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Burn_filter): [BSC_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: BSC_Swap_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Swap_filter): [BSC_Swap!]!
  timestamp: BigInt!
  block: BigInt!
}

type BSC_PairDayData {
  id: ID!
  date: Int!
  pair: BSC_Pair!
  token0: BSC_Token!
  token1: BSC_Token!
  reserve0: BSC_BigDecimal!
  reserve1: BSC_BigDecimal!
  totalSupply: BSC_BigDecimal!
  reserveUSD: BSC_BigDecimal!
  volumeToken0: BSC_BigDecimal!
  volumeToken1: BSC_BigDecimal!
  volumeUSD: BSC_BigDecimal!
  txCount: BigInt!
}

input BSC_PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: BSC_BigDecimal
  reserve0_not: BSC_BigDecimal
  reserve0_gt: BSC_BigDecimal
  reserve0_lt: BSC_BigDecimal
  reserve0_gte: BSC_BigDecimal
  reserve0_lte: BSC_BigDecimal
  reserve0_in: [BSC_BigDecimal!]
  reserve0_not_in: [BSC_BigDecimal!]
  reserve1: BSC_BigDecimal
  reserve1_not: BSC_BigDecimal
  reserve1_gt: BSC_BigDecimal
  reserve1_lt: BSC_BigDecimal
  reserve1_gte: BSC_BigDecimal
  reserve1_lte: BSC_BigDecimal
  reserve1_in: [BSC_BigDecimal!]
  reserve1_not_in: [BSC_BigDecimal!]
  totalSupply: BSC_BigDecimal
  totalSupply_not: BSC_BigDecimal
  totalSupply_gt: BSC_BigDecimal
  totalSupply_lt: BSC_BigDecimal
  totalSupply_gte: BSC_BigDecimal
  totalSupply_lte: BSC_BigDecimal
  totalSupply_in: [BSC_BigDecimal!]
  totalSupply_not_in: [BSC_BigDecimal!]
  reserveUSD: BSC_BigDecimal
  reserveUSD_not: BSC_BigDecimal
  reserveUSD_gt: BSC_BigDecimal
  reserveUSD_lt: BSC_BigDecimal
  reserveUSD_gte: BSC_BigDecimal
  reserveUSD_lte: BSC_BigDecimal
  reserveUSD_in: [BSC_BigDecimal!]
  reserveUSD_not_in: [BSC_BigDecimal!]
  volumeToken0: BSC_BigDecimal
  volumeToken0_not: BSC_BigDecimal
  volumeToken0_gt: BSC_BigDecimal
  volumeToken0_lt: BSC_BigDecimal
  volumeToken0_gte: BSC_BigDecimal
  volumeToken0_lte: BSC_BigDecimal
  volumeToken0_in: [BSC_BigDecimal!]
  volumeToken0_not_in: [BSC_BigDecimal!]
  volumeToken1: BSC_BigDecimal
  volumeToken1_not: BSC_BigDecimal
  volumeToken1_gt: BSC_BigDecimal
  volumeToken1_lt: BSC_BigDecimal
  volumeToken1_gte: BSC_BigDecimal
  volumeToken1_lte: BSC_BigDecimal
  volumeToken1_in: [BSC_BigDecimal!]
  volumeToken1_not_in: [BSC_BigDecimal!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_PairDayData_orderBy {
  id
  date
  pair
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

type BSC_PairHourData {
  id: ID!
  date: Int!
  pair: BSC_Pair!
  reserve0: BSC_BigDecimal!
  reserve1: BSC_BigDecimal!
  reserveUSD: BSC_BigDecimal!
  volumeToken0: BSC_BigDecimal!
  volumeToken1: BSC_BigDecimal!
  volumeUSD: BSC_BigDecimal!
  txCount: BigInt!
}

input BSC_PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  reserve0: BSC_BigDecimal
  reserve0_not: BSC_BigDecimal
  reserve0_gt: BSC_BigDecimal
  reserve0_lt: BSC_BigDecimal
  reserve0_gte: BSC_BigDecimal
  reserve0_lte: BSC_BigDecimal
  reserve0_in: [BSC_BigDecimal!]
  reserve0_not_in: [BSC_BigDecimal!]
  reserve1: BSC_BigDecimal
  reserve1_not: BSC_BigDecimal
  reserve1_gt: BSC_BigDecimal
  reserve1_lt: BSC_BigDecimal
  reserve1_gte: BSC_BigDecimal
  reserve1_lte: BSC_BigDecimal
  reserve1_in: [BSC_BigDecimal!]
  reserve1_not_in: [BSC_BigDecimal!]
  reserveUSD: BSC_BigDecimal
  reserveUSD_not: BSC_BigDecimal
  reserveUSD_gt: BSC_BigDecimal
  reserveUSD_lt: BSC_BigDecimal
  reserveUSD_gte: BSC_BigDecimal
  reserveUSD_lte: BSC_BigDecimal
  reserveUSD_in: [BSC_BigDecimal!]
  reserveUSD_not_in: [BSC_BigDecimal!]
  volumeToken0: BSC_BigDecimal
  volumeToken0_not: BSC_BigDecimal
  volumeToken0_gt: BSC_BigDecimal
  volumeToken0_lt: BSC_BigDecimal
  volumeToken0_gte: BSC_BigDecimal
  volumeToken0_lte: BSC_BigDecimal
  volumeToken0_in: [BSC_BigDecimal!]
  volumeToken0_not_in: [BSC_BigDecimal!]
  volumeToken1: BSC_BigDecimal
  volumeToken1_not: BSC_BigDecimal
  volumeToken1_gt: BSC_BigDecimal
  volumeToken1_lt: BSC_BigDecimal
  volumeToken1_gte: BSC_BigDecimal
  volumeToken1_lte: BSC_BigDecimal
  volumeToken1_in: [BSC_BigDecimal!]
  volumeToken1_not_in: [BSC_BigDecimal!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_PairHourData_orderBy {
  id
  date
  pair
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

input BSC_Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: BSC_BigDecimal
  reserve0_not: BSC_BigDecimal
  reserve0_gt: BSC_BigDecimal
  reserve0_lt: BSC_BigDecimal
  reserve0_gte: BSC_BigDecimal
  reserve0_lte: BSC_BigDecimal
  reserve0_in: [BSC_BigDecimal!]
  reserve0_not_in: [BSC_BigDecimal!]
  reserve1: BSC_BigDecimal
  reserve1_not: BSC_BigDecimal
  reserve1_gt: BSC_BigDecimal
  reserve1_lt: BSC_BigDecimal
  reserve1_gte: BSC_BigDecimal
  reserve1_lte: BSC_BigDecimal
  reserve1_in: [BSC_BigDecimal!]
  reserve1_not_in: [BSC_BigDecimal!]
  totalSupply: BSC_BigDecimal
  totalSupply_not: BSC_BigDecimal
  totalSupply_gt: BSC_BigDecimal
  totalSupply_lt: BSC_BigDecimal
  totalSupply_gte: BSC_BigDecimal
  totalSupply_lte: BSC_BigDecimal
  totalSupply_in: [BSC_BigDecimal!]
  totalSupply_not_in: [BSC_BigDecimal!]
  reserveETH: BSC_BigDecimal
  reserveETH_not: BSC_BigDecimal
  reserveETH_gt: BSC_BigDecimal
  reserveETH_lt: BSC_BigDecimal
  reserveETH_gte: BSC_BigDecimal
  reserveETH_lte: BSC_BigDecimal
  reserveETH_in: [BSC_BigDecimal!]
  reserveETH_not_in: [BSC_BigDecimal!]
  reserveUSD: BSC_BigDecimal
  reserveUSD_not: BSC_BigDecimal
  reserveUSD_gt: BSC_BigDecimal
  reserveUSD_lt: BSC_BigDecimal
  reserveUSD_gte: BSC_BigDecimal
  reserveUSD_lte: BSC_BigDecimal
  reserveUSD_in: [BSC_BigDecimal!]
  reserveUSD_not_in: [BSC_BigDecimal!]
  trackedReserveETH: BSC_BigDecimal
  trackedReserveETH_not: BSC_BigDecimal
  trackedReserveETH_gt: BSC_BigDecimal
  trackedReserveETH_lt: BSC_BigDecimal
  trackedReserveETH_gte: BSC_BigDecimal
  trackedReserveETH_lte: BSC_BigDecimal
  trackedReserveETH_in: [BSC_BigDecimal!]
  trackedReserveETH_not_in: [BSC_BigDecimal!]
  token0Price: BSC_BigDecimal
  token0Price_not: BSC_BigDecimal
  token0Price_gt: BSC_BigDecimal
  token0Price_lt: BSC_BigDecimal
  token0Price_gte: BSC_BigDecimal
  token0Price_lte: BSC_BigDecimal
  token0Price_in: [BSC_BigDecimal!]
  token0Price_not_in: [BSC_BigDecimal!]
  token1Price: BSC_BigDecimal
  token1Price_not: BSC_BigDecimal
  token1Price_gt: BSC_BigDecimal
  token1Price_lt: BSC_BigDecimal
  token1Price_gte: BSC_BigDecimal
  token1Price_lte: BSC_BigDecimal
  token1Price_in: [BSC_BigDecimal!]
  token1Price_not_in: [BSC_BigDecimal!]
  volumeToken0: BSC_BigDecimal
  volumeToken0_not: BSC_BigDecimal
  volumeToken0_gt: BSC_BigDecimal
  volumeToken0_lt: BSC_BigDecimal
  volumeToken0_gte: BSC_BigDecimal
  volumeToken0_lte: BSC_BigDecimal
  volumeToken0_in: [BSC_BigDecimal!]
  volumeToken0_not_in: [BSC_BigDecimal!]
  volumeToken1: BSC_BigDecimal
  volumeToken1_not: BSC_BigDecimal
  volumeToken1_gt: BSC_BigDecimal
  volumeToken1_lt: BSC_BigDecimal
  volumeToken1_gte: BSC_BigDecimal
  volumeToken1_lte: BSC_BigDecimal
  volumeToken1_in: [BSC_BigDecimal!]
  volumeToken1_not_in: [BSC_BigDecimal!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  untrackedVolumeUSD: BSC_BigDecimal
  untrackedVolumeUSD_not: BSC_BigDecimal
  untrackedVolumeUSD_gt: BSC_BigDecimal
  untrackedVolumeUSD_lt: BSC_BigDecimal
  untrackedVolumeUSD_gte: BSC_BigDecimal
  untrackedVolumeUSD_lte: BSC_BigDecimal
  untrackedVolumeUSD_in: [BSC_BigDecimal!]
  untrackedVolumeUSD_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_Pair_orderBy {
  id
  factory
  name
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
}

type BSC_Swap {
  id: ID!
  transaction: BSC_Transaction!
  timestamp: BigInt!
  pair: BSC_Pair!
  sender: BSC_Bytes!
  amount0In: BSC_BigDecimal!
  amount1In: BSC_BigDecimal!
  amount0Out: BSC_BigDecimal!
  amount1Out: BSC_BigDecimal!
  to: BSC_Bytes!
  logIndex: BigInt
  amountUSD: BSC_BigDecimal!
}

input BSC_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  sender: BSC_Bytes
  sender_not: BSC_Bytes
  sender_in: [BSC_Bytes!]
  sender_not_in: [BSC_Bytes!]
  sender_contains: BSC_Bytes
  sender_not_contains: BSC_Bytes
  amount0In: BSC_BigDecimal
  amount0In_not: BSC_BigDecimal
  amount0In_gt: BSC_BigDecimal
  amount0In_lt: BSC_BigDecimal
  amount0In_gte: BSC_BigDecimal
  amount0In_lte: BSC_BigDecimal
  amount0In_in: [BSC_BigDecimal!]
  amount0In_not_in: [BSC_BigDecimal!]
  amount1In: BSC_BigDecimal
  amount1In_not: BSC_BigDecimal
  amount1In_gt: BSC_BigDecimal
  amount1In_lt: BSC_BigDecimal
  amount1In_gte: BSC_BigDecimal
  amount1In_lte: BSC_BigDecimal
  amount1In_in: [BSC_BigDecimal!]
  amount1In_not_in: [BSC_BigDecimal!]
  amount0Out: BSC_BigDecimal
  amount0Out_not: BSC_BigDecimal
  amount0Out_gt: BSC_BigDecimal
  amount0Out_lt: BSC_BigDecimal
  amount0Out_gte: BSC_BigDecimal
  amount0Out_lte: BSC_BigDecimal
  amount0Out_in: [BSC_BigDecimal!]
  amount0Out_not_in: [BSC_BigDecimal!]
  amount1Out: BSC_BigDecimal
  amount1Out_not: BSC_BigDecimal
  amount1Out_gt: BSC_BigDecimal
  amount1Out_lt: BSC_BigDecimal
  amount1Out_gte: BSC_BigDecimal
  amount1Out_lte: BSC_BigDecimal
  amount1Out_in: [BSC_BigDecimal!]
  amount1Out_not_in: [BSC_BigDecimal!]
  to: BSC_Bytes
  to_not: BSC_Bytes
  to_in: [BSC_Bytes!]
  to_not_in: [BSC_Bytes!]
  to_contains: BSC_Bytes
  to_not_contains: BSC_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: BSC_BigDecimal
  amountUSD_not: BSC_BigDecimal
  amountUSD_gt: BSC_BigDecimal
  amountUSD_lt: BSC_BigDecimal
  amountUSD_gte: BSC_BigDecimal
  amountUSD_lte: BSC_BigDecimal
  amountUSD_in: [BSC_BigDecimal!]
  amountUSD_not_in: [BSC_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_Swap_orderBy {
  id
  transaction
  timestamp
  pair
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
}

type BSC_Token {
  id: ID!
  factory: BSC_Factory!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: BSC_BigDecimal!
  volumeUSD: BSC_BigDecimal!
  untrackedVolumeUSD: BSC_BigDecimal!
  txCount: BigInt!
  liquidity: BSC_BigDecimal!
  derivedETH: BSC_BigDecimal!
  whitelistPairs(skip: Int = 0, first: Int = 100, orderBy: BSC_Pair_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Pair_filter): [BSC_Pair!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: BSC_TokenHourData_orderBy, orderDirection: BSC_OrderDirection, where: BSC_TokenHourData_filter): [BSC_TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: BSC_TokenDayData_orderBy, orderDirection: BSC_OrderDirection, where: BSC_TokenDayData_filter): [BSC_TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: BSC_Pair_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Pair_filter): [BSC_Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: BSC_Pair_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Pair_filter): [BSC_Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: BSC_PairDayData_orderBy, orderDirection: BSC_OrderDirection, where: BSC_PairDayData_filter): [BSC_PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: BSC_PairDayData_orderBy, orderDirection: BSC_OrderDirection, where: BSC_PairDayData_filter): [BSC_PairDayData!]!
}

type BSC_TokenDayData {
  id: ID!
  date: Int!
  token: BSC_Token!
  volume: BSC_BigDecimal!
  volumeETH: BSC_BigDecimal!
  volumeUSD: BSC_BigDecimal!
  txCount: BigInt!
  liquidity: BSC_BigDecimal!
  liquidityETH: BSC_BigDecimal!
  liquidityUSD: BSC_BigDecimal!
  priceUSD: BSC_BigDecimal!
}

input BSC_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: BSC_BigDecimal
  volume_not: BSC_BigDecimal
  volume_gt: BSC_BigDecimal
  volume_lt: BSC_BigDecimal
  volume_gte: BSC_BigDecimal
  volume_lte: BSC_BigDecimal
  volume_in: [BSC_BigDecimal!]
  volume_not_in: [BSC_BigDecimal!]
  volumeETH: BSC_BigDecimal
  volumeETH_not: BSC_BigDecimal
  volumeETH_gt: BSC_BigDecimal
  volumeETH_lt: BSC_BigDecimal
  volumeETH_gte: BSC_BigDecimal
  volumeETH_lte: BSC_BigDecimal
  volumeETH_in: [BSC_BigDecimal!]
  volumeETH_not_in: [BSC_BigDecimal!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: BSC_BigDecimal
  liquidity_not: BSC_BigDecimal
  liquidity_gt: BSC_BigDecimal
  liquidity_lt: BSC_BigDecimal
  liquidity_gte: BSC_BigDecimal
  liquidity_lte: BSC_BigDecimal
  liquidity_in: [BSC_BigDecimal!]
  liquidity_not_in: [BSC_BigDecimal!]
  liquidityETH: BSC_BigDecimal
  liquidityETH_not: BSC_BigDecimal
  liquidityETH_gt: BSC_BigDecimal
  liquidityETH_lt: BSC_BigDecimal
  liquidityETH_gte: BSC_BigDecimal
  liquidityETH_lte: BSC_BigDecimal
  liquidityETH_in: [BSC_BigDecimal!]
  liquidityETH_not_in: [BSC_BigDecimal!]
  liquidityUSD: BSC_BigDecimal
  liquidityUSD_not: BSC_BigDecimal
  liquidityUSD_gt: BSC_BigDecimal
  liquidityUSD_lt: BSC_BigDecimal
  liquidityUSD_gte: BSC_BigDecimal
  liquidityUSD_lte: BSC_BigDecimal
  liquidityUSD_in: [BSC_BigDecimal!]
  liquidityUSD_not_in: [BSC_BigDecimal!]
  priceUSD: BSC_BigDecimal
  priceUSD_not: BSC_BigDecimal
  priceUSD_gt: BSC_BigDecimal
  priceUSD_lt: BSC_BigDecimal
  priceUSD_gte: BSC_BigDecimal
  priceUSD_lte: BSC_BigDecimal
  priceUSD_in: [BSC_BigDecimal!]
  priceUSD_not_in: [BSC_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_TokenDayData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

type BSC_TokenHourData {
  id: ID!
  date: Int!
  token: BSC_Token!
  volume: BSC_BigDecimal!
  volumeETH: BSC_BigDecimal!
  volumeUSD: BSC_BigDecimal!
  txCount: BigInt!
  liquidity: BSC_BigDecimal!
  liquidityETH: BSC_BigDecimal!
  liquidityUSD: BSC_BigDecimal!
  priceUSD: BSC_BigDecimal!
}

input BSC_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: BSC_BigDecimal
  volume_not: BSC_BigDecimal
  volume_gt: BSC_BigDecimal
  volume_lt: BSC_BigDecimal
  volume_gte: BSC_BigDecimal
  volume_lte: BSC_BigDecimal
  volume_in: [BSC_BigDecimal!]
  volume_not_in: [BSC_BigDecimal!]
  volumeETH: BSC_BigDecimal
  volumeETH_not: BSC_BigDecimal
  volumeETH_gt: BSC_BigDecimal
  volumeETH_lt: BSC_BigDecimal
  volumeETH_gte: BSC_BigDecimal
  volumeETH_lte: BSC_BigDecimal
  volumeETH_in: [BSC_BigDecimal!]
  volumeETH_not_in: [BSC_BigDecimal!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: BSC_BigDecimal
  liquidity_not: BSC_BigDecimal
  liquidity_gt: BSC_BigDecimal
  liquidity_lt: BSC_BigDecimal
  liquidity_gte: BSC_BigDecimal
  liquidity_lte: BSC_BigDecimal
  liquidity_in: [BSC_BigDecimal!]
  liquidity_not_in: [BSC_BigDecimal!]
  liquidityETH: BSC_BigDecimal
  liquidityETH_not: BSC_BigDecimal
  liquidityETH_gt: BSC_BigDecimal
  liquidityETH_lt: BSC_BigDecimal
  liquidityETH_gte: BSC_BigDecimal
  liquidityETH_lte: BSC_BigDecimal
  liquidityETH_in: [BSC_BigDecimal!]
  liquidityETH_not_in: [BSC_BigDecimal!]
  liquidityUSD: BSC_BigDecimal
  liquidityUSD_not: BSC_BigDecimal
  liquidityUSD_gt: BSC_BigDecimal
  liquidityUSD_lt: BSC_BigDecimal
  liquidityUSD_gte: BSC_BigDecimal
  liquidityUSD_lte: BSC_BigDecimal
  liquidityUSD_in: [BSC_BigDecimal!]
  liquidityUSD_not_in: [BSC_BigDecimal!]
  priceUSD: BSC_BigDecimal
  priceUSD_not: BSC_BigDecimal
  priceUSD_gt: BSC_BigDecimal
  priceUSD_lt: BSC_BigDecimal
  priceUSD_gte: BSC_BigDecimal
  priceUSD_lte: BSC_BigDecimal
  priceUSD_in: [BSC_BigDecimal!]
  priceUSD_not_in: [BSC_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_TokenHourData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

input BSC_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: BSC_BigDecimal
  volume_not: BSC_BigDecimal
  volume_gt: BSC_BigDecimal
  volume_lt: BSC_BigDecimal
  volume_gte: BSC_BigDecimal
  volume_lte: BSC_BigDecimal
  volume_in: [BSC_BigDecimal!]
  volume_not_in: [BSC_BigDecimal!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  untrackedVolumeUSD: BSC_BigDecimal
  untrackedVolumeUSD_not: BSC_BigDecimal
  untrackedVolumeUSD_gt: BSC_BigDecimal
  untrackedVolumeUSD_lt: BSC_BigDecimal
  untrackedVolumeUSD_gte: BSC_BigDecimal
  untrackedVolumeUSD_lte: BSC_BigDecimal
  untrackedVolumeUSD_in: [BSC_BigDecimal!]
  untrackedVolumeUSD_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: BSC_BigDecimal
  liquidity_not: BSC_BigDecimal
  liquidity_gt: BSC_BigDecimal
  liquidity_lt: BSC_BigDecimal
  liquidity_gte: BSC_BigDecimal
  liquidity_lte: BSC_BigDecimal
  liquidity_in: [BSC_BigDecimal!]
  liquidity_not_in: [BSC_BigDecimal!]
  derivedETH: BSC_BigDecimal
  derivedETH_not: BSC_BigDecimal
  derivedETH_gt: BSC_BigDecimal
  derivedETH_lt: BSC_BigDecimal
  derivedETH_gte: BSC_BigDecimal
  derivedETH_lte: BSC_BigDecimal
  derivedETH_in: [BSC_BigDecimal!]
  derivedETH_not_in: [BSC_BigDecimal!]
  whitelistPairs: [String!]
  whitelistPairs_not: [String!]
  whitelistPairs_contains: [String!]
  whitelistPairs_contains_nocase: [String!]
  whitelistPairs_not_contains: [String!]
  whitelistPairs_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_Token_orderBy {
  id
  factory
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  whitelistPairs
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
}

type BSC_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: BSC_Mint_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Mint_filter): [BSC_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: BSC_Burn_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Burn_filter): [BSC_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: BSC_Swap_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Swap_filter): [BSC_Swap]!
}

input BSC_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
}

type BSC_User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: BSC_LiquidityPosition_orderBy, orderDirection: BSC_OrderDirection, where: BSC_LiquidityPosition_filter): [BSC_LiquidityPosition!]!
}

input BSC_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]

  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_User_orderBy {
  id
  liquidityPositions
}

type BSC__Block_ {
  """The hash of the block"""
  hash: BSC_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type BSC__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: BSC__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar XDAI_BigDecimal

input XDAI_BlockChangedFilter {
  number_gte: Int!
}

input XDAI_Block_height {
  hash: XDAI_Bytes
  number: Int
  number_gte: Int
}

type XDAI_Bundle {
  id: ID!
  ethPrice: XDAI_BigDecimal!
}

input XDAI_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: XDAI_BigDecimal
  ethPrice_not: XDAI_BigDecimal
  ethPrice_gt: XDAI_BigDecimal
  ethPrice_lt: XDAI_BigDecimal
  ethPrice_gte: XDAI_BigDecimal
  ethPrice_lte: XDAI_BigDecimal
  ethPrice_in: [XDAI_BigDecimal!]
  ethPrice_not_in: [XDAI_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_Bundle_orderBy {
  id
  ethPrice
}

type XDAI_Burn {
  id: ID!
  transaction: XDAI_Transaction!
  timestamp: BigInt!
  pair: XDAI_Pair!
  liquidity: XDAI_BigDecimal!
  sender: XDAI_Bytes
  amount0: XDAI_BigDecimal
  amount1: XDAI_BigDecimal
  to: XDAI_Bytes
  logIndex: BigInt
  amountUSD: XDAI_BigDecimal
  complete: Boolean!
  feeTo: XDAI_Bytes
  feeLiquidity: XDAI_BigDecimal
}

input XDAI_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidity: XDAI_BigDecimal
  liquidity_not: XDAI_BigDecimal
  liquidity_gt: XDAI_BigDecimal
  liquidity_lt: XDAI_BigDecimal
  liquidity_gte: XDAI_BigDecimal
  liquidity_lte: XDAI_BigDecimal
  liquidity_in: [XDAI_BigDecimal!]
  liquidity_not_in: [XDAI_BigDecimal!]
  sender: XDAI_Bytes
  sender_not: XDAI_Bytes
  sender_in: [XDAI_Bytes!]
  sender_not_in: [XDAI_Bytes!]
  sender_contains: XDAI_Bytes
  sender_not_contains: XDAI_Bytes
  amount0: XDAI_BigDecimal
  amount0_not: XDAI_BigDecimal
  amount0_gt: XDAI_BigDecimal
  amount0_lt: XDAI_BigDecimal
  amount0_gte: XDAI_BigDecimal
  amount0_lte: XDAI_BigDecimal
  amount0_in: [XDAI_BigDecimal!]
  amount0_not_in: [XDAI_BigDecimal!]
  amount1: XDAI_BigDecimal
  amount1_not: XDAI_BigDecimal
  amount1_gt: XDAI_BigDecimal
  amount1_lt: XDAI_BigDecimal
  amount1_gte: XDAI_BigDecimal
  amount1_lte: XDAI_BigDecimal
  amount1_in: [XDAI_BigDecimal!]
  amount1_not_in: [XDAI_BigDecimal!]
  to: XDAI_Bytes
  to_not: XDAI_Bytes
  to_in: [XDAI_Bytes!]
  to_not_in: [XDAI_Bytes!]
  to_contains: XDAI_Bytes
  to_not_contains: XDAI_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: XDAI_BigDecimal
  amountUSD_not: XDAI_BigDecimal
  amountUSD_gt: XDAI_BigDecimal
  amountUSD_lt: XDAI_BigDecimal
  amountUSD_gte: XDAI_BigDecimal
  amountUSD_lte: XDAI_BigDecimal
  amountUSD_in: [XDAI_BigDecimal!]
  amountUSD_not_in: [XDAI_BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: XDAI_Bytes
  feeTo_not: XDAI_Bytes
  feeTo_in: [XDAI_Bytes!]
  feeTo_not_in: [XDAI_Bytes!]
  feeTo_contains: XDAI_Bytes
  feeTo_not_contains: XDAI_Bytes
  feeLiquidity: XDAI_BigDecimal
  feeLiquidity_not: XDAI_BigDecimal
  feeLiquidity_gt: XDAI_BigDecimal
  feeLiquidity_lt: XDAI_BigDecimal
  feeLiquidity_gte: XDAI_BigDecimal
  feeLiquidity_lte: XDAI_BigDecimal
  feeLiquidity_in: [XDAI_BigDecimal!]
  feeLiquidity_not_in: [XDAI_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_Burn_orderBy {
  id
  transaction
  timestamp
  pair
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

scalar XDAI_Bytes

type XDAI_DayData {
  id: ID!
  date: Int!
  factory: XDAI_Factory!
  volumeETH: XDAI_BigDecimal!
  volumeUSD: XDAI_BigDecimal!
  untrackedVolume: XDAI_BigDecimal!
  liquidityETH: XDAI_BigDecimal!
  liquidityUSD: XDAI_BigDecimal!
  txCount: BigInt!
}

input XDAI_DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: XDAI_BigDecimal
  volumeETH_not: XDAI_BigDecimal
  volumeETH_gt: XDAI_BigDecimal
  volumeETH_lt: XDAI_BigDecimal
  volumeETH_gte: XDAI_BigDecimal
  volumeETH_lte: XDAI_BigDecimal
  volumeETH_in: [XDAI_BigDecimal!]
  volumeETH_not_in: [XDAI_BigDecimal!]
  volumeUSD: XDAI_BigDecimal
  volumeUSD_not: XDAI_BigDecimal
  volumeUSD_gt: XDAI_BigDecimal
  volumeUSD_lt: XDAI_BigDecimal
  volumeUSD_gte: XDAI_BigDecimal
  volumeUSD_lte: XDAI_BigDecimal
  volumeUSD_in: [XDAI_BigDecimal!]
  volumeUSD_not_in: [XDAI_BigDecimal!]
  untrackedVolume: XDAI_BigDecimal
  untrackedVolume_not: XDAI_BigDecimal
  untrackedVolume_gt: XDAI_BigDecimal
  untrackedVolume_lt: XDAI_BigDecimal
  untrackedVolume_gte: XDAI_BigDecimal
  untrackedVolume_lte: XDAI_BigDecimal
  untrackedVolume_in: [XDAI_BigDecimal!]
  untrackedVolume_not_in: [XDAI_BigDecimal!]
  liquidityETH: XDAI_BigDecimal
  liquidityETH_not: XDAI_BigDecimal
  liquidityETH_gt: XDAI_BigDecimal
  liquidityETH_lt: XDAI_BigDecimal
  liquidityETH_gte: XDAI_BigDecimal
  liquidityETH_lte: XDAI_BigDecimal
  liquidityETH_in: [XDAI_BigDecimal!]
  liquidityETH_not_in: [XDAI_BigDecimal!]
  liquidityUSD: XDAI_BigDecimal
  liquidityUSD_not: XDAI_BigDecimal
  liquidityUSD_gt: XDAI_BigDecimal
  liquidityUSD_lt: XDAI_BigDecimal
  liquidityUSD_gte: XDAI_BigDecimal
  liquidityUSD_lte: XDAI_BigDecimal
  liquidityUSD_in: [XDAI_BigDecimal!]
  liquidityUSD_not_in: [XDAI_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_DayData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type XDAI_Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: XDAI_BigDecimal!
  volumeETH: XDAI_BigDecimal!
  untrackedVolumeUSD: XDAI_BigDecimal!
  liquidityUSD: XDAI_BigDecimal!
  liquidityETH: XDAI_BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: XDAI_Pair_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_Pair_filter): [XDAI_Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: XDAI_Token_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_Token_filter): [XDAI_Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: XDAI_HourData_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_HourData_filter): [XDAI_HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: XDAI_DayData_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_DayData_filter): [XDAI_DayData!]!
}

input XDAI_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: XDAI_BigDecimal
  volumeUSD_not: XDAI_BigDecimal
  volumeUSD_gt: XDAI_BigDecimal
  volumeUSD_lt: XDAI_BigDecimal
  volumeUSD_gte: XDAI_BigDecimal
  volumeUSD_lte: XDAI_BigDecimal
  volumeUSD_in: [XDAI_BigDecimal!]
  volumeUSD_not_in: [XDAI_BigDecimal!]
  volumeETH: XDAI_BigDecimal
  volumeETH_not: XDAI_BigDecimal
  volumeETH_gt: XDAI_BigDecimal
  volumeETH_lt: XDAI_BigDecimal
  volumeETH_gte: XDAI_BigDecimal
  volumeETH_lte: XDAI_BigDecimal
  volumeETH_in: [XDAI_BigDecimal!]
  volumeETH_not_in: [XDAI_BigDecimal!]
  untrackedVolumeUSD: XDAI_BigDecimal
  untrackedVolumeUSD_not: XDAI_BigDecimal
  untrackedVolumeUSD_gt: XDAI_BigDecimal
  untrackedVolumeUSD_lt: XDAI_BigDecimal
  untrackedVolumeUSD_gte: XDAI_BigDecimal
  untrackedVolumeUSD_lte: XDAI_BigDecimal
  untrackedVolumeUSD_in: [XDAI_BigDecimal!]
  untrackedVolumeUSD_not_in: [XDAI_BigDecimal!]
  liquidityUSD: XDAI_BigDecimal
  liquidityUSD_not: XDAI_BigDecimal
  liquidityUSD_gt: XDAI_BigDecimal
  liquidityUSD_lt: XDAI_BigDecimal
  liquidityUSD_gte: XDAI_BigDecimal
  liquidityUSD_lte: XDAI_BigDecimal
  liquidityUSD_in: [XDAI_BigDecimal!]
  liquidityUSD_not_in: [XDAI_BigDecimal!]
  liquidityETH: XDAI_BigDecimal
  liquidityETH_not: XDAI_BigDecimal
  liquidityETH_gt: XDAI_BigDecimal
  liquidityETH_lt: XDAI_BigDecimal
  liquidityETH_gte: XDAI_BigDecimal
  liquidityETH_lte: XDAI_BigDecimal
  liquidityETH_in: [XDAI_BigDecimal!]
  liquidityETH_not_in: [XDAI_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
}

type XDAI_HourData {
  id: ID!
  date: Int!
  factory: XDAI_Factory!
  volumeETH: XDAI_BigDecimal!
  volumeUSD: XDAI_BigDecimal!
  untrackedVolume: XDAI_BigDecimal!
  liquidityETH: XDAI_BigDecimal!
  liquidityUSD: XDAI_BigDecimal!
  txCount: BigInt!
}

input XDAI_HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: XDAI_BigDecimal
  volumeETH_not: XDAI_BigDecimal
  volumeETH_gt: XDAI_BigDecimal
  volumeETH_lt: XDAI_BigDecimal
  volumeETH_gte: XDAI_BigDecimal
  volumeETH_lte: XDAI_BigDecimal
  volumeETH_in: [XDAI_BigDecimal!]
  volumeETH_not_in: [XDAI_BigDecimal!]
  volumeUSD: XDAI_BigDecimal
  volumeUSD_not: XDAI_BigDecimal
  volumeUSD_gt: XDAI_BigDecimal
  volumeUSD_lt: XDAI_BigDecimal
  volumeUSD_gte: XDAI_BigDecimal
  volumeUSD_lte: XDAI_BigDecimal
  volumeUSD_in: [XDAI_BigDecimal!]
  volumeUSD_not_in: [XDAI_BigDecimal!]
  untrackedVolume: XDAI_BigDecimal
  untrackedVolume_not: XDAI_BigDecimal
  untrackedVolume_gt: XDAI_BigDecimal
  untrackedVolume_lt: XDAI_BigDecimal
  untrackedVolume_gte: XDAI_BigDecimal
  untrackedVolume_lte: XDAI_BigDecimal
  untrackedVolume_in: [XDAI_BigDecimal!]
  untrackedVolume_not_in: [XDAI_BigDecimal!]
  liquidityETH: XDAI_BigDecimal
  liquidityETH_not: XDAI_BigDecimal
  liquidityETH_gt: XDAI_BigDecimal
  liquidityETH_lt: XDAI_BigDecimal
  liquidityETH_gte: XDAI_BigDecimal
  liquidityETH_lte: XDAI_BigDecimal
  liquidityETH_in: [XDAI_BigDecimal!]
  liquidityETH_not_in: [XDAI_BigDecimal!]
  liquidityUSD: XDAI_BigDecimal
  liquidityUSD_not: XDAI_BigDecimal
  liquidityUSD_gt: XDAI_BigDecimal
  liquidityUSD_lt: XDAI_BigDecimal
  liquidityUSD_gte: XDAI_BigDecimal
  liquidityUSD_lte: XDAI_BigDecimal
  liquidityUSD_in: [XDAI_BigDecimal!]
  liquidityUSD_not_in: [XDAI_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_HourData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type XDAI_LiquidityPosition {
  id: ID!
  user: XDAI_User!
  pair: XDAI_Pair!
  liquidityTokenBalance: XDAI_BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: XDAI_LiquidityPositionSnapshot_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_LiquidityPositionSnapshot_filter): [XDAI_LiquidityPositionSnapshot]!
  block: Int!
  timestamp: Int!
}

type XDAI_LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: XDAI_LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: XDAI_User!
  pair: XDAI_Pair!
  token0PriceUSD: XDAI_BigDecimal!
  token1PriceUSD: XDAI_BigDecimal!
  reserve0: XDAI_BigDecimal!
  reserve1: XDAI_BigDecimal!
  reserveUSD: XDAI_BigDecimal!
  liquidityTokenTotalSupply: XDAI_BigDecimal!
  liquidityTokenBalance: XDAI_BigDecimal!
}

input XDAI_LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0PriceUSD: XDAI_BigDecimal
  token0PriceUSD_not: XDAI_BigDecimal
  token0PriceUSD_gt: XDAI_BigDecimal
  token0PriceUSD_lt: XDAI_BigDecimal
  token0PriceUSD_gte: XDAI_BigDecimal
  token0PriceUSD_lte: XDAI_BigDecimal
  token0PriceUSD_in: [XDAI_BigDecimal!]
  token0PriceUSD_not_in: [XDAI_BigDecimal!]
  token1PriceUSD: XDAI_BigDecimal
  token1PriceUSD_not: XDAI_BigDecimal
  token1PriceUSD_gt: XDAI_BigDecimal
  token1PriceUSD_lt: XDAI_BigDecimal
  token1PriceUSD_gte: XDAI_BigDecimal
  token1PriceUSD_lte: XDAI_BigDecimal
  token1PriceUSD_in: [XDAI_BigDecimal!]
  token1PriceUSD_not_in: [XDAI_BigDecimal!]
  reserve0: XDAI_BigDecimal
  reserve0_not: XDAI_BigDecimal
  reserve0_gt: XDAI_BigDecimal
  reserve0_lt: XDAI_BigDecimal
  reserve0_gte: XDAI_BigDecimal
  reserve0_lte: XDAI_BigDecimal
  reserve0_in: [XDAI_BigDecimal!]
  reserve0_not_in: [XDAI_BigDecimal!]
  reserve1: XDAI_BigDecimal
  reserve1_not: XDAI_BigDecimal
  reserve1_gt: XDAI_BigDecimal
  reserve1_lt: XDAI_BigDecimal
  reserve1_gte: XDAI_BigDecimal
  reserve1_lte: XDAI_BigDecimal
  reserve1_in: [XDAI_BigDecimal!]
  reserve1_not_in: [XDAI_BigDecimal!]
  reserveUSD: XDAI_BigDecimal
  reserveUSD_not: XDAI_BigDecimal
  reserveUSD_gt: XDAI_BigDecimal
  reserveUSD_lt: XDAI_BigDecimal
  reserveUSD_gte: XDAI_BigDecimal
  reserveUSD_lte: XDAI_BigDecimal
  reserveUSD_in: [XDAI_BigDecimal!]
  reserveUSD_not_in: [XDAI_BigDecimal!]
  liquidityTokenTotalSupply: XDAI_BigDecimal
  liquidityTokenTotalSupply_not: XDAI_BigDecimal
  liquidityTokenTotalSupply_gt: XDAI_BigDecimal
  liquidityTokenTotalSupply_lt: XDAI_BigDecimal
  liquidityTokenTotalSupply_gte: XDAI_BigDecimal
  liquidityTokenTotalSupply_lte: XDAI_BigDecimal
  liquidityTokenTotalSupply_in: [XDAI_BigDecimal!]
  liquidityTokenTotalSupply_not_in: [XDAI_BigDecimal!]
  liquidityTokenBalance: XDAI_BigDecimal
  liquidityTokenBalance_not: XDAI_BigDecimal
  liquidityTokenBalance_gt: XDAI_BigDecimal
  liquidityTokenBalance_lt: XDAI_BigDecimal
  liquidityTokenBalance_gte: XDAI_BigDecimal
  liquidityTokenBalance_lte: XDAI_BigDecimal
  liquidityTokenBalance_in: [XDAI_BigDecimal!]
  liquidityTokenBalance_not_in: [XDAI_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  timestamp
  block
  user
  pair
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input XDAI_LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidityTokenBalance: XDAI_BigDecimal
  liquidityTokenBalance_not: XDAI_BigDecimal
  liquidityTokenBalance_gt: XDAI_BigDecimal
  liquidityTokenBalance_lt: XDAI_BigDecimal
  liquidityTokenBalance_gte: XDAI_BigDecimal
  liquidityTokenBalance_lte: XDAI_BigDecimal
  liquidityTokenBalance_in: [XDAI_BigDecimal!]
  liquidityTokenBalance_not_in: [XDAI_BigDecimal!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_LiquidityPosition_orderBy {
  id
  user
  pair
  liquidityTokenBalance
  snapshots
  block
  timestamp
}

type XDAI_Mint {
  id: ID!
  transaction: XDAI_Transaction!
  timestamp: BigInt!
  pair: XDAI_Pair!
  to: XDAI_Bytes!
  liquidity: XDAI_BigDecimal!
  sender: XDAI_Bytes
  amount0: XDAI_BigDecimal
  amount1: XDAI_BigDecimal
  logIndex: BigInt
  amountUSD: XDAI_BigDecimal
  feeTo: XDAI_Bytes
  feeLiquidity: XDAI_BigDecimal
}

input XDAI_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  to: XDAI_Bytes
  to_not: XDAI_Bytes
  to_in: [XDAI_Bytes!]
  to_not_in: [XDAI_Bytes!]
  to_contains: XDAI_Bytes
  to_not_contains: XDAI_Bytes
  liquidity: XDAI_BigDecimal
  liquidity_not: XDAI_BigDecimal
  liquidity_gt: XDAI_BigDecimal
  liquidity_lt: XDAI_BigDecimal
  liquidity_gte: XDAI_BigDecimal
  liquidity_lte: XDAI_BigDecimal
  liquidity_in: [XDAI_BigDecimal!]
  liquidity_not_in: [XDAI_BigDecimal!]
  sender: XDAI_Bytes
  sender_not: XDAI_Bytes
  sender_in: [XDAI_Bytes!]
  sender_not_in: [XDAI_Bytes!]
  sender_contains: XDAI_Bytes
  sender_not_contains: XDAI_Bytes
  amount0: XDAI_BigDecimal
  amount0_not: XDAI_BigDecimal
  amount0_gt: XDAI_BigDecimal
  amount0_lt: XDAI_BigDecimal
  amount0_gte: XDAI_BigDecimal
  amount0_lte: XDAI_BigDecimal
  amount0_in: [XDAI_BigDecimal!]
  amount0_not_in: [XDAI_BigDecimal!]
  amount1: XDAI_BigDecimal
  amount1_not: XDAI_BigDecimal
  amount1_gt: XDAI_BigDecimal
  amount1_lt: XDAI_BigDecimal
  amount1_gte: XDAI_BigDecimal
  amount1_lte: XDAI_BigDecimal
  amount1_in: [XDAI_BigDecimal!]
  amount1_not_in: [XDAI_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: XDAI_BigDecimal
  amountUSD_not: XDAI_BigDecimal
  amountUSD_gt: XDAI_BigDecimal
  amountUSD_lt: XDAI_BigDecimal
  amountUSD_gte: XDAI_BigDecimal
  amountUSD_lte: XDAI_BigDecimal
  amountUSD_in: [XDAI_BigDecimal!]
  amountUSD_not_in: [XDAI_BigDecimal!]
  feeTo: XDAI_Bytes
  feeTo_not: XDAI_Bytes
  feeTo_in: [XDAI_Bytes!]
  feeTo_not_in: [XDAI_Bytes!]
  feeTo_contains: XDAI_Bytes
  feeTo_not_contains: XDAI_Bytes
  feeLiquidity: XDAI_BigDecimal
  feeLiquidity_not: XDAI_BigDecimal
  feeLiquidity_gt: XDAI_BigDecimal
  feeLiquidity_lt: XDAI_BigDecimal
  feeLiquidity_gte: XDAI_BigDecimal
  feeLiquidity_lte: XDAI_BigDecimal
  feeLiquidity_in: [XDAI_BigDecimal!]
  feeLiquidity_not_in: [XDAI_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_Mint_orderBy {
  id
  transaction
  timestamp
  pair
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

"""Defines the order direction, either ascending or descending"""
enum XDAI_OrderDirection {
  asc
  desc
}

type XDAI_Pair {
  id: ID!
  factory: XDAI_Factory!
  name: String!
  token0: XDAI_Token!
  token1: XDAI_Token!
  reserve0: XDAI_BigDecimal!
  reserve1: XDAI_BigDecimal!
  totalSupply: XDAI_BigDecimal!
  reserveETH: XDAI_BigDecimal!
  reserveUSD: XDAI_BigDecimal!
  trackedReserveETH: XDAI_BigDecimal!
  token0Price: XDAI_BigDecimal!
  token1Price: XDAI_BigDecimal!
  volumeToken0: XDAI_BigDecimal!
  volumeToken1: XDAI_BigDecimal!
  volumeUSD: XDAI_BigDecimal!
  untrackedVolumeUSD: XDAI_BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: XDAI_LiquidityPosition_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_LiquidityPosition_filter): [XDAI_LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: XDAI_LiquidityPositionSnapshot_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_LiquidityPositionSnapshot_filter): [XDAI_LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: XDAI_PairDayData_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_PairDayData_filter): [XDAI_PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: XDAI_PairHourData_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_PairHourData_filter): [XDAI_PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: XDAI_Mint_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_Mint_filter): [XDAI_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: XDAI_Burn_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_Burn_filter): [XDAI_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: XDAI_Swap_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_Swap_filter): [XDAI_Swap!]!
  timestamp: BigInt!
  block: BigInt!
}

type XDAI_PairDayData {
  id: ID!
  date: Int!
  pair: XDAI_Pair!
  token0: XDAI_Token!
  token1: XDAI_Token!
  reserve0: XDAI_BigDecimal!
  reserve1: XDAI_BigDecimal!
  totalSupply: XDAI_BigDecimal!
  reserveUSD: XDAI_BigDecimal!
  volumeToken0: XDAI_BigDecimal!
  volumeToken1: XDAI_BigDecimal!
  volumeUSD: XDAI_BigDecimal!
  txCount: BigInt!
}

input XDAI_PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: XDAI_BigDecimal
  reserve0_not: XDAI_BigDecimal
  reserve0_gt: XDAI_BigDecimal
  reserve0_lt: XDAI_BigDecimal
  reserve0_gte: XDAI_BigDecimal
  reserve0_lte: XDAI_BigDecimal
  reserve0_in: [XDAI_BigDecimal!]
  reserve0_not_in: [XDAI_BigDecimal!]
  reserve1: XDAI_BigDecimal
  reserve1_not: XDAI_BigDecimal
  reserve1_gt: XDAI_BigDecimal
  reserve1_lt: XDAI_BigDecimal
  reserve1_gte: XDAI_BigDecimal
  reserve1_lte: XDAI_BigDecimal
  reserve1_in: [XDAI_BigDecimal!]
  reserve1_not_in: [XDAI_BigDecimal!]
  totalSupply: XDAI_BigDecimal
  totalSupply_not: XDAI_BigDecimal
  totalSupply_gt: XDAI_BigDecimal
  totalSupply_lt: XDAI_BigDecimal
  totalSupply_gte: XDAI_BigDecimal
  totalSupply_lte: XDAI_BigDecimal
  totalSupply_in: [XDAI_BigDecimal!]
  totalSupply_not_in: [XDAI_BigDecimal!]
  reserveUSD: XDAI_BigDecimal
  reserveUSD_not: XDAI_BigDecimal
  reserveUSD_gt: XDAI_BigDecimal
  reserveUSD_lt: XDAI_BigDecimal
  reserveUSD_gte: XDAI_BigDecimal
  reserveUSD_lte: XDAI_BigDecimal
  reserveUSD_in: [XDAI_BigDecimal!]
  reserveUSD_not_in: [XDAI_BigDecimal!]
  volumeToken0: XDAI_BigDecimal
  volumeToken0_not: XDAI_BigDecimal
  volumeToken0_gt: XDAI_BigDecimal
  volumeToken0_lt: XDAI_BigDecimal
  volumeToken0_gte: XDAI_BigDecimal
  volumeToken0_lte: XDAI_BigDecimal
  volumeToken0_in: [XDAI_BigDecimal!]
  volumeToken0_not_in: [XDAI_BigDecimal!]
  volumeToken1: XDAI_BigDecimal
  volumeToken1_not: XDAI_BigDecimal
  volumeToken1_gt: XDAI_BigDecimal
  volumeToken1_lt: XDAI_BigDecimal
  volumeToken1_gte: XDAI_BigDecimal
  volumeToken1_lte: XDAI_BigDecimal
  volumeToken1_in: [XDAI_BigDecimal!]
  volumeToken1_not_in: [XDAI_BigDecimal!]
  volumeUSD: XDAI_BigDecimal
  volumeUSD_not: XDAI_BigDecimal
  volumeUSD_gt: XDAI_BigDecimal
  volumeUSD_lt: XDAI_BigDecimal
  volumeUSD_gte: XDAI_BigDecimal
  volumeUSD_lte: XDAI_BigDecimal
  volumeUSD_in: [XDAI_BigDecimal!]
  volumeUSD_not_in: [XDAI_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_PairDayData_orderBy {
  id
  date
  pair
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

type XDAI_PairHourData {
  id: ID!
  date: Int!
  pair: XDAI_Pair!
  reserve0: XDAI_BigDecimal!
  reserve1: XDAI_BigDecimal!
  reserveUSD: XDAI_BigDecimal!
  volumeToken0: XDAI_BigDecimal!
  volumeToken1: XDAI_BigDecimal!
  volumeUSD: XDAI_BigDecimal!
  txCount: BigInt!
}

input XDAI_PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  reserve0: XDAI_BigDecimal
  reserve0_not: XDAI_BigDecimal
  reserve0_gt: XDAI_BigDecimal
  reserve0_lt: XDAI_BigDecimal
  reserve0_gte: XDAI_BigDecimal
  reserve0_lte: XDAI_BigDecimal
  reserve0_in: [XDAI_BigDecimal!]
  reserve0_not_in: [XDAI_BigDecimal!]
  reserve1: XDAI_BigDecimal
  reserve1_not: XDAI_BigDecimal
  reserve1_gt: XDAI_BigDecimal
  reserve1_lt: XDAI_BigDecimal
  reserve1_gte: XDAI_BigDecimal
  reserve1_lte: XDAI_BigDecimal
  reserve1_in: [XDAI_BigDecimal!]
  reserve1_not_in: [XDAI_BigDecimal!]
  reserveUSD: XDAI_BigDecimal
  reserveUSD_not: XDAI_BigDecimal
  reserveUSD_gt: XDAI_BigDecimal
  reserveUSD_lt: XDAI_BigDecimal
  reserveUSD_gte: XDAI_BigDecimal
  reserveUSD_lte: XDAI_BigDecimal
  reserveUSD_in: [XDAI_BigDecimal!]
  reserveUSD_not_in: [XDAI_BigDecimal!]
  volumeToken0: XDAI_BigDecimal
  volumeToken0_not: XDAI_BigDecimal
  volumeToken0_gt: XDAI_BigDecimal
  volumeToken0_lt: XDAI_BigDecimal
  volumeToken0_gte: XDAI_BigDecimal
  volumeToken0_lte: XDAI_BigDecimal
  volumeToken0_in: [XDAI_BigDecimal!]
  volumeToken0_not_in: [XDAI_BigDecimal!]
  volumeToken1: XDAI_BigDecimal
  volumeToken1_not: XDAI_BigDecimal
  volumeToken1_gt: XDAI_BigDecimal
  volumeToken1_lt: XDAI_BigDecimal
  volumeToken1_gte: XDAI_BigDecimal
  volumeToken1_lte: XDAI_BigDecimal
  volumeToken1_in: [XDAI_BigDecimal!]
  volumeToken1_not_in: [XDAI_BigDecimal!]
  volumeUSD: XDAI_BigDecimal
  volumeUSD_not: XDAI_BigDecimal
  volumeUSD_gt: XDAI_BigDecimal
  volumeUSD_lt: XDAI_BigDecimal
  volumeUSD_gte: XDAI_BigDecimal
  volumeUSD_lte: XDAI_BigDecimal
  volumeUSD_in: [XDAI_BigDecimal!]
  volumeUSD_not_in: [XDAI_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_PairHourData_orderBy {
  id
  date
  pair
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

input XDAI_Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: XDAI_BigDecimal
  reserve0_not: XDAI_BigDecimal
  reserve0_gt: XDAI_BigDecimal
  reserve0_lt: XDAI_BigDecimal
  reserve0_gte: XDAI_BigDecimal
  reserve0_lte: XDAI_BigDecimal
  reserve0_in: [XDAI_BigDecimal!]
  reserve0_not_in: [XDAI_BigDecimal!]
  reserve1: XDAI_BigDecimal
  reserve1_not: XDAI_BigDecimal
  reserve1_gt: XDAI_BigDecimal
  reserve1_lt: XDAI_BigDecimal
  reserve1_gte: XDAI_BigDecimal
  reserve1_lte: XDAI_BigDecimal
  reserve1_in: [XDAI_BigDecimal!]
  reserve1_not_in: [XDAI_BigDecimal!]
  totalSupply: XDAI_BigDecimal
  totalSupply_not: XDAI_BigDecimal
  totalSupply_gt: XDAI_BigDecimal
  totalSupply_lt: XDAI_BigDecimal
  totalSupply_gte: XDAI_BigDecimal
  totalSupply_lte: XDAI_BigDecimal
  totalSupply_in: [XDAI_BigDecimal!]
  totalSupply_not_in: [XDAI_BigDecimal!]
  reserveETH: XDAI_BigDecimal
  reserveETH_not: XDAI_BigDecimal
  reserveETH_gt: XDAI_BigDecimal
  reserveETH_lt: XDAI_BigDecimal
  reserveETH_gte: XDAI_BigDecimal
  reserveETH_lte: XDAI_BigDecimal
  reserveETH_in: [XDAI_BigDecimal!]
  reserveETH_not_in: [XDAI_BigDecimal!]
  reserveUSD: XDAI_BigDecimal
  reserveUSD_not: XDAI_BigDecimal
  reserveUSD_gt: XDAI_BigDecimal
  reserveUSD_lt: XDAI_BigDecimal
  reserveUSD_gte: XDAI_BigDecimal
  reserveUSD_lte: XDAI_BigDecimal
  reserveUSD_in: [XDAI_BigDecimal!]
  reserveUSD_not_in: [XDAI_BigDecimal!]
  trackedReserveETH: XDAI_BigDecimal
  trackedReserveETH_not: XDAI_BigDecimal
  trackedReserveETH_gt: XDAI_BigDecimal
  trackedReserveETH_lt: XDAI_BigDecimal
  trackedReserveETH_gte: XDAI_BigDecimal
  trackedReserveETH_lte: XDAI_BigDecimal
  trackedReserveETH_in: [XDAI_BigDecimal!]
  trackedReserveETH_not_in: [XDAI_BigDecimal!]
  token0Price: XDAI_BigDecimal
  token0Price_not: XDAI_BigDecimal
  token0Price_gt: XDAI_BigDecimal
  token0Price_lt: XDAI_BigDecimal
  token0Price_gte: XDAI_BigDecimal
  token0Price_lte: XDAI_BigDecimal
  token0Price_in: [XDAI_BigDecimal!]
  token0Price_not_in: [XDAI_BigDecimal!]
  token1Price: XDAI_BigDecimal
  token1Price_not: XDAI_BigDecimal
  token1Price_gt: XDAI_BigDecimal
  token1Price_lt: XDAI_BigDecimal
  token1Price_gte: XDAI_BigDecimal
  token1Price_lte: XDAI_BigDecimal
  token1Price_in: [XDAI_BigDecimal!]
  token1Price_not_in: [XDAI_BigDecimal!]
  volumeToken0: XDAI_BigDecimal
  volumeToken0_not: XDAI_BigDecimal
  volumeToken0_gt: XDAI_BigDecimal
  volumeToken0_lt: XDAI_BigDecimal
  volumeToken0_gte: XDAI_BigDecimal
  volumeToken0_lte: XDAI_BigDecimal
  volumeToken0_in: [XDAI_BigDecimal!]
  volumeToken0_not_in: [XDAI_BigDecimal!]
  volumeToken1: XDAI_BigDecimal
  volumeToken1_not: XDAI_BigDecimal
  volumeToken1_gt: XDAI_BigDecimal
  volumeToken1_lt: XDAI_BigDecimal
  volumeToken1_gte: XDAI_BigDecimal
  volumeToken1_lte: XDAI_BigDecimal
  volumeToken1_in: [XDAI_BigDecimal!]
  volumeToken1_not_in: [XDAI_BigDecimal!]
  volumeUSD: XDAI_BigDecimal
  volumeUSD_not: XDAI_BigDecimal
  volumeUSD_gt: XDAI_BigDecimal
  volumeUSD_lt: XDAI_BigDecimal
  volumeUSD_gte: XDAI_BigDecimal
  volumeUSD_lte: XDAI_BigDecimal
  volumeUSD_in: [XDAI_BigDecimal!]
  volumeUSD_not_in: [XDAI_BigDecimal!]
  untrackedVolumeUSD: XDAI_BigDecimal
  untrackedVolumeUSD_not: XDAI_BigDecimal
  untrackedVolumeUSD_gt: XDAI_BigDecimal
  untrackedVolumeUSD_lt: XDAI_BigDecimal
  untrackedVolumeUSD_gte: XDAI_BigDecimal
  untrackedVolumeUSD_lte: XDAI_BigDecimal
  untrackedVolumeUSD_in: [XDAI_BigDecimal!]
  untrackedVolumeUSD_not_in: [XDAI_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_Pair_orderBy {
  id
  factory
  name
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
}

type XDAI_Swap {
  id: ID!
  transaction: XDAI_Transaction!
  timestamp: BigInt!
  pair: XDAI_Pair!
  sender: XDAI_Bytes!
  amount0In: XDAI_BigDecimal!
  amount1In: XDAI_BigDecimal!
  amount0Out: XDAI_BigDecimal!
  amount1Out: XDAI_BigDecimal!
  to: XDAI_Bytes!
  logIndex: BigInt
  amountUSD: XDAI_BigDecimal!
}

input XDAI_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  sender: XDAI_Bytes
  sender_not: XDAI_Bytes
  sender_in: [XDAI_Bytes!]
  sender_not_in: [XDAI_Bytes!]
  sender_contains: XDAI_Bytes
  sender_not_contains: XDAI_Bytes
  amount0In: XDAI_BigDecimal
  amount0In_not: XDAI_BigDecimal
  amount0In_gt: XDAI_BigDecimal
  amount0In_lt: XDAI_BigDecimal
  amount0In_gte: XDAI_BigDecimal
  amount0In_lte: XDAI_BigDecimal
  amount0In_in: [XDAI_BigDecimal!]
  amount0In_not_in: [XDAI_BigDecimal!]
  amount1In: XDAI_BigDecimal
  amount1In_not: XDAI_BigDecimal
  amount1In_gt: XDAI_BigDecimal
  amount1In_lt: XDAI_BigDecimal
  amount1In_gte: XDAI_BigDecimal
  amount1In_lte: XDAI_BigDecimal
  amount1In_in: [XDAI_BigDecimal!]
  amount1In_not_in: [XDAI_BigDecimal!]
  amount0Out: XDAI_BigDecimal
  amount0Out_not: XDAI_BigDecimal
  amount0Out_gt: XDAI_BigDecimal
  amount0Out_lt: XDAI_BigDecimal
  amount0Out_gte: XDAI_BigDecimal
  amount0Out_lte: XDAI_BigDecimal
  amount0Out_in: [XDAI_BigDecimal!]
  amount0Out_not_in: [XDAI_BigDecimal!]
  amount1Out: XDAI_BigDecimal
  amount1Out_not: XDAI_BigDecimal
  amount1Out_gt: XDAI_BigDecimal
  amount1Out_lt: XDAI_BigDecimal
  amount1Out_gte: XDAI_BigDecimal
  amount1Out_lte: XDAI_BigDecimal
  amount1Out_in: [XDAI_BigDecimal!]
  amount1Out_not_in: [XDAI_BigDecimal!]
  to: XDAI_Bytes
  to_not: XDAI_Bytes
  to_in: [XDAI_Bytes!]
  to_not_in: [XDAI_Bytes!]
  to_contains: XDAI_Bytes
  to_not_contains: XDAI_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: XDAI_BigDecimal
  amountUSD_not: XDAI_BigDecimal
  amountUSD_gt: XDAI_BigDecimal
  amountUSD_lt: XDAI_BigDecimal
  amountUSD_gte: XDAI_BigDecimal
  amountUSD_lte: XDAI_BigDecimal
  amountUSD_in: [XDAI_BigDecimal!]
  amountUSD_not_in: [XDAI_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_Swap_orderBy {
  id
  transaction
  timestamp
  pair
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
}

type XDAI_Token {
  id: ID!
  factory: XDAI_Factory!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: XDAI_BigDecimal!
  volumeUSD: XDAI_BigDecimal!
  untrackedVolumeUSD: XDAI_BigDecimal!
  txCount: BigInt!
  liquidity: XDAI_BigDecimal!
  derivedETH: XDAI_BigDecimal!
  whitelistPairs(skip: Int = 0, first: Int = 100, orderBy: XDAI_Pair_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_Pair_filter): [XDAI_Pair!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: XDAI_TokenHourData_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_TokenHourData_filter): [XDAI_TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: XDAI_TokenDayData_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_TokenDayData_filter): [XDAI_TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: XDAI_Pair_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_Pair_filter): [XDAI_Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: XDAI_Pair_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_Pair_filter): [XDAI_Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: XDAI_PairDayData_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_PairDayData_filter): [XDAI_PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: XDAI_PairDayData_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_PairDayData_filter): [XDAI_PairDayData!]!
}

type XDAI_TokenDayData {
  id: ID!
  date: Int!
  token: XDAI_Token!
  volume: XDAI_BigDecimal!
  volumeETH: XDAI_BigDecimal!
  volumeUSD: XDAI_BigDecimal!
  txCount: BigInt!
  liquidity: XDAI_BigDecimal!
  liquidityETH: XDAI_BigDecimal!
  liquidityUSD: XDAI_BigDecimal!
  priceUSD: XDAI_BigDecimal!
}

input XDAI_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: XDAI_BigDecimal
  volume_not: XDAI_BigDecimal
  volume_gt: XDAI_BigDecimal
  volume_lt: XDAI_BigDecimal
  volume_gte: XDAI_BigDecimal
  volume_lte: XDAI_BigDecimal
  volume_in: [XDAI_BigDecimal!]
  volume_not_in: [XDAI_BigDecimal!]
  volumeETH: XDAI_BigDecimal
  volumeETH_not: XDAI_BigDecimal
  volumeETH_gt: XDAI_BigDecimal
  volumeETH_lt: XDAI_BigDecimal
  volumeETH_gte: XDAI_BigDecimal
  volumeETH_lte: XDAI_BigDecimal
  volumeETH_in: [XDAI_BigDecimal!]
  volumeETH_not_in: [XDAI_BigDecimal!]
  volumeUSD: XDAI_BigDecimal
  volumeUSD_not: XDAI_BigDecimal
  volumeUSD_gt: XDAI_BigDecimal
  volumeUSD_lt: XDAI_BigDecimal
  volumeUSD_gte: XDAI_BigDecimal
  volumeUSD_lte: XDAI_BigDecimal
  volumeUSD_in: [XDAI_BigDecimal!]
  volumeUSD_not_in: [XDAI_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: XDAI_BigDecimal
  liquidity_not: XDAI_BigDecimal
  liquidity_gt: XDAI_BigDecimal
  liquidity_lt: XDAI_BigDecimal
  liquidity_gte: XDAI_BigDecimal
  liquidity_lte: XDAI_BigDecimal
  liquidity_in: [XDAI_BigDecimal!]
  liquidity_not_in: [XDAI_BigDecimal!]
  liquidityETH: XDAI_BigDecimal
  liquidityETH_not: XDAI_BigDecimal
  liquidityETH_gt: XDAI_BigDecimal
  liquidityETH_lt: XDAI_BigDecimal
  liquidityETH_gte: XDAI_BigDecimal
  liquidityETH_lte: XDAI_BigDecimal
  liquidityETH_in: [XDAI_BigDecimal!]
  liquidityETH_not_in: [XDAI_BigDecimal!]
  liquidityUSD: XDAI_BigDecimal
  liquidityUSD_not: XDAI_BigDecimal
  liquidityUSD_gt: XDAI_BigDecimal
  liquidityUSD_lt: XDAI_BigDecimal
  liquidityUSD_gte: XDAI_BigDecimal
  liquidityUSD_lte: XDAI_BigDecimal
  liquidityUSD_in: [XDAI_BigDecimal!]
  liquidityUSD_not_in: [XDAI_BigDecimal!]
  priceUSD: XDAI_BigDecimal
  priceUSD_not: XDAI_BigDecimal
  priceUSD_gt: XDAI_BigDecimal
  priceUSD_lt: XDAI_BigDecimal
  priceUSD_gte: XDAI_BigDecimal
  priceUSD_lte: XDAI_BigDecimal
  priceUSD_in: [XDAI_BigDecimal!]
  priceUSD_not_in: [XDAI_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_TokenDayData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

type XDAI_TokenHourData {
  id: ID!
  date: Int!
  token: XDAI_Token!
  volume: XDAI_BigDecimal!
  volumeETH: XDAI_BigDecimal!
  volumeUSD: XDAI_BigDecimal!
  txCount: BigInt!
  liquidity: XDAI_BigDecimal!
  liquidityETH: XDAI_BigDecimal!
  liquidityUSD: XDAI_BigDecimal!
  priceUSD: XDAI_BigDecimal!
}

input XDAI_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: XDAI_BigDecimal
  volume_not: XDAI_BigDecimal
  volume_gt: XDAI_BigDecimal
  volume_lt: XDAI_BigDecimal
  volume_gte: XDAI_BigDecimal
  volume_lte: XDAI_BigDecimal
  volume_in: [XDAI_BigDecimal!]
  volume_not_in: [XDAI_BigDecimal!]
  volumeETH: XDAI_BigDecimal
  volumeETH_not: XDAI_BigDecimal
  volumeETH_gt: XDAI_BigDecimal
  volumeETH_lt: XDAI_BigDecimal
  volumeETH_gte: XDAI_BigDecimal
  volumeETH_lte: XDAI_BigDecimal
  volumeETH_in: [XDAI_BigDecimal!]
  volumeETH_not_in: [XDAI_BigDecimal!]
  volumeUSD: XDAI_BigDecimal
  volumeUSD_not: XDAI_BigDecimal
  volumeUSD_gt: XDAI_BigDecimal
  volumeUSD_lt: XDAI_BigDecimal
  volumeUSD_gte: XDAI_BigDecimal
  volumeUSD_lte: XDAI_BigDecimal
  volumeUSD_in: [XDAI_BigDecimal!]
  volumeUSD_not_in: [XDAI_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: XDAI_BigDecimal
  liquidity_not: XDAI_BigDecimal
  liquidity_gt: XDAI_BigDecimal
  liquidity_lt: XDAI_BigDecimal
  liquidity_gte: XDAI_BigDecimal
  liquidity_lte: XDAI_BigDecimal
  liquidity_in: [XDAI_BigDecimal!]
  liquidity_not_in: [XDAI_BigDecimal!]
  liquidityETH: XDAI_BigDecimal
  liquidityETH_not: XDAI_BigDecimal
  liquidityETH_gt: XDAI_BigDecimal
  liquidityETH_lt: XDAI_BigDecimal
  liquidityETH_gte: XDAI_BigDecimal
  liquidityETH_lte: XDAI_BigDecimal
  liquidityETH_in: [XDAI_BigDecimal!]
  liquidityETH_not_in: [XDAI_BigDecimal!]
  liquidityUSD: XDAI_BigDecimal
  liquidityUSD_not: XDAI_BigDecimal
  liquidityUSD_gt: XDAI_BigDecimal
  liquidityUSD_lt: XDAI_BigDecimal
  liquidityUSD_gte: XDAI_BigDecimal
  liquidityUSD_lte: XDAI_BigDecimal
  liquidityUSD_in: [XDAI_BigDecimal!]
  liquidityUSD_not_in: [XDAI_BigDecimal!]
  priceUSD: XDAI_BigDecimal
  priceUSD_not: XDAI_BigDecimal
  priceUSD_gt: XDAI_BigDecimal
  priceUSD_lt: XDAI_BigDecimal
  priceUSD_gte: XDAI_BigDecimal
  priceUSD_lte: XDAI_BigDecimal
  priceUSD_in: [XDAI_BigDecimal!]
  priceUSD_not_in: [XDAI_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_TokenHourData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

input XDAI_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: XDAI_BigDecimal
  volume_not: XDAI_BigDecimal
  volume_gt: XDAI_BigDecimal
  volume_lt: XDAI_BigDecimal
  volume_gte: XDAI_BigDecimal
  volume_lte: XDAI_BigDecimal
  volume_in: [XDAI_BigDecimal!]
  volume_not_in: [XDAI_BigDecimal!]
  volumeUSD: XDAI_BigDecimal
  volumeUSD_not: XDAI_BigDecimal
  volumeUSD_gt: XDAI_BigDecimal
  volumeUSD_lt: XDAI_BigDecimal
  volumeUSD_gte: XDAI_BigDecimal
  volumeUSD_lte: XDAI_BigDecimal
  volumeUSD_in: [XDAI_BigDecimal!]
  volumeUSD_not_in: [XDAI_BigDecimal!]
  untrackedVolumeUSD: XDAI_BigDecimal
  untrackedVolumeUSD_not: XDAI_BigDecimal
  untrackedVolumeUSD_gt: XDAI_BigDecimal
  untrackedVolumeUSD_lt: XDAI_BigDecimal
  untrackedVolumeUSD_gte: XDAI_BigDecimal
  untrackedVolumeUSD_lte: XDAI_BigDecimal
  untrackedVolumeUSD_in: [XDAI_BigDecimal!]
  untrackedVolumeUSD_not_in: [XDAI_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: XDAI_BigDecimal
  liquidity_not: XDAI_BigDecimal
  liquidity_gt: XDAI_BigDecimal
  liquidity_lt: XDAI_BigDecimal
  liquidity_gte: XDAI_BigDecimal
  liquidity_lte: XDAI_BigDecimal
  liquidity_in: [XDAI_BigDecimal!]
  liquidity_not_in: [XDAI_BigDecimal!]
  derivedETH: XDAI_BigDecimal
  derivedETH_not: XDAI_BigDecimal
  derivedETH_gt: XDAI_BigDecimal
  derivedETH_lt: XDAI_BigDecimal
  derivedETH_gte: XDAI_BigDecimal
  derivedETH_lte: XDAI_BigDecimal
  derivedETH_in: [XDAI_BigDecimal!]
  derivedETH_not_in: [XDAI_BigDecimal!]
  whitelistPairs: [String!]
  whitelistPairs_not: [String!]
  whitelistPairs_contains: [String!]
  whitelistPairs_contains_nocase: [String!]
  whitelistPairs_not_contains: [String!]
  whitelistPairs_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_Token_orderBy {
  id
  factory
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  whitelistPairs
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
}

type XDAI_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: XDAI_Mint_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_Mint_filter): [XDAI_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: XDAI_Burn_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_Burn_filter): [XDAI_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: XDAI_Swap_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_Swap_filter): [XDAI_Swap]!
}

input XDAI_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
}

type XDAI_User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: XDAI_LiquidityPosition_orderBy, orderDirection: XDAI_OrderDirection, where: XDAI_LiquidityPosition_filter): [XDAI_LiquidityPosition!]!
}

input XDAI_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]

  """Filter for the block changed event."""
  _change_block: XDAI_BlockChangedFilter
}

enum XDAI_User_orderBy {
  id
  liquidityPositions
}

type XDAI__Block_ {
  """The hash of the block"""
  hash: XDAI_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type XDAI__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: XDAI__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar MOONBEAM_BigDecimal

input MOONBEAM_BlockChangedFilter {
  number_gte: Int!
}

input MOONBEAM_Block_height {
  hash: MOONBEAM_Bytes
  number: Int
  number_gte: Int
}

type MOONBEAM_Bundle {
  id: ID!
  ethPrice: MOONBEAM_BigDecimal!
}

input MOONBEAM_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: MOONBEAM_BigDecimal
  ethPrice_not: MOONBEAM_BigDecimal
  ethPrice_gt: MOONBEAM_BigDecimal
  ethPrice_lt: MOONBEAM_BigDecimal
  ethPrice_gte: MOONBEAM_BigDecimal
  ethPrice_lte: MOONBEAM_BigDecimal
  ethPrice_in: [MOONBEAM_BigDecimal!]
  ethPrice_not_in: [MOONBEAM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_Bundle_orderBy {
  id
  ethPrice
}

type MOONBEAM_Burn {
  id: ID!
  transaction: MOONBEAM_Transaction!
  timestamp: BigInt!
  pair: MOONBEAM_Pair!
  liquidity: MOONBEAM_BigDecimal!
  sender: MOONBEAM_Bytes
  amount0: MOONBEAM_BigDecimal
  amount1: MOONBEAM_BigDecimal
  to: MOONBEAM_Bytes
  logIndex: BigInt
  amountUSD: MOONBEAM_BigDecimal
  complete: Boolean!
  feeTo: MOONBEAM_Bytes
  feeLiquidity: MOONBEAM_BigDecimal
}

input MOONBEAM_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidity: MOONBEAM_BigDecimal
  liquidity_not: MOONBEAM_BigDecimal
  liquidity_gt: MOONBEAM_BigDecimal
  liquidity_lt: MOONBEAM_BigDecimal
  liquidity_gte: MOONBEAM_BigDecimal
  liquidity_lte: MOONBEAM_BigDecimal
  liquidity_in: [MOONBEAM_BigDecimal!]
  liquidity_not_in: [MOONBEAM_BigDecimal!]
  sender: MOONBEAM_Bytes
  sender_not: MOONBEAM_Bytes
  sender_in: [MOONBEAM_Bytes!]
  sender_not_in: [MOONBEAM_Bytes!]
  sender_contains: MOONBEAM_Bytes
  sender_not_contains: MOONBEAM_Bytes
  amount0: MOONBEAM_BigDecimal
  amount0_not: MOONBEAM_BigDecimal
  amount0_gt: MOONBEAM_BigDecimal
  amount0_lt: MOONBEAM_BigDecimal
  amount0_gte: MOONBEAM_BigDecimal
  amount0_lte: MOONBEAM_BigDecimal
  amount0_in: [MOONBEAM_BigDecimal!]
  amount0_not_in: [MOONBEAM_BigDecimal!]
  amount1: MOONBEAM_BigDecimal
  amount1_not: MOONBEAM_BigDecimal
  amount1_gt: MOONBEAM_BigDecimal
  amount1_lt: MOONBEAM_BigDecimal
  amount1_gte: MOONBEAM_BigDecimal
  amount1_lte: MOONBEAM_BigDecimal
  amount1_in: [MOONBEAM_BigDecimal!]
  amount1_not_in: [MOONBEAM_BigDecimal!]
  to: MOONBEAM_Bytes
  to_not: MOONBEAM_Bytes
  to_in: [MOONBEAM_Bytes!]
  to_not_in: [MOONBEAM_Bytes!]
  to_contains: MOONBEAM_Bytes
  to_not_contains: MOONBEAM_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: MOONBEAM_BigDecimal
  amountUSD_not: MOONBEAM_BigDecimal
  amountUSD_gt: MOONBEAM_BigDecimal
  amountUSD_lt: MOONBEAM_BigDecimal
  amountUSD_gte: MOONBEAM_BigDecimal
  amountUSD_lte: MOONBEAM_BigDecimal
  amountUSD_in: [MOONBEAM_BigDecimal!]
  amountUSD_not_in: [MOONBEAM_BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: MOONBEAM_Bytes
  feeTo_not: MOONBEAM_Bytes
  feeTo_in: [MOONBEAM_Bytes!]
  feeTo_not_in: [MOONBEAM_Bytes!]
  feeTo_contains: MOONBEAM_Bytes
  feeTo_not_contains: MOONBEAM_Bytes
  feeLiquidity: MOONBEAM_BigDecimal
  feeLiquidity_not: MOONBEAM_BigDecimal
  feeLiquidity_gt: MOONBEAM_BigDecimal
  feeLiquidity_lt: MOONBEAM_BigDecimal
  feeLiquidity_gte: MOONBEAM_BigDecimal
  feeLiquidity_lte: MOONBEAM_BigDecimal
  feeLiquidity_in: [MOONBEAM_BigDecimal!]
  feeLiquidity_not_in: [MOONBEAM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_Burn_orderBy {
  id
  transaction
  timestamp
  pair
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

scalar MOONBEAM_Bytes

type MOONBEAM_DayData {
  id: ID!
  date: Int!
  factory: MOONBEAM_Factory!
  volumeETH: MOONBEAM_BigDecimal!
  volumeUSD: MOONBEAM_BigDecimal!
  untrackedVolume: MOONBEAM_BigDecimal!
  liquidityETH: MOONBEAM_BigDecimal!
  liquidityUSD: MOONBEAM_BigDecimal!
  txCount: BigInt!
}

input MOONBEAM_DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: MOONBEAM_BigDecimal
  volumeETH_not: MOONBEAM_BigDecimal
  volumeETH_gt: MOONBEAM_BigDecimal
  volumeETH_lt: MOONBEAM_BigDecimal
  volumeETH_gte: MOONBEAM_BigDecimal
  volumeETH_lte: MOONBEAM_BigDecimal
  volumeETH_in: [MOONBEAM_BigDecimal!]
  volumeETH_not_in: [MOONBEAM_BigDecimal!]
  volumeUSD: MOONBEAM_BigDecimal
  volumeUSD_not: MOONBEAM_BigDecimal
  volumeUSD_gt: MOONBEAM_BigDecimal
  volumeUSD_lt: MOONBEAM_BigDecimal
  volumeUSD_gte: MOONBEAM_BigDecimal
  volumeUSD_lte: MOONBEAM_BigDecimal
  volumeUSD_in: [MOONBEAM_BigDecimal!]
  volumeUSD_not_in: [MOONBEAM_BigDecimal!]
  untrackedVolume: MOONBEAM_BigDecimal
  untrackedVolume_not: MOONBEAM_BigDecimal
  untrackedVolume_gt: MOONBEAM_BigDecimal
  untrackedVolume_lt: MOONBEAM_BigDecimal
  untrackedVolume_gte: MOONBEAM_BigDecimal
  untrackedVolume_lte: MOONBEAM_BigDecimal
  untrackedVolume_in: [MOONBEAM_BigDecimal!]
  untrackedVolume_not_in: [MOONBEAM_BigDecimal!]
  liquidityETH: MOONBEAM_BigDecimal
  liquidityETH_not: MOONBEAM_BigDecimal
  liquidityETH_gt: MOONBEAM_BigDecimal
  liquidityETH_lt: MOONBEAM_BigDecimal
  liquidityETH_gte: MOONBEAM_BigDecimal
  liquidityETH_lte: MOONBEAM_BigDecimal
  liquidityETH_in: [MOONBEAM_BigDecimal!]
  liquidityETH_not_in: [MOONBEAM_BigDecimal!]
  liquidityUSD: MOONBEAM_BigDecimal
  liquidityUSD_not: MOONBEAM_BigDecimal
  liquidityUSD_gt: MOONBEAM_BigDecimal
  liquidityUSD_lt: MOONBEAM_BigDecimal
  liquidityUSD_gte: MOONBEAM_BigDecimal
  liquidityUSD_lte: MOONBEAM_BigDecimal
  liquidityUSD_in: [MOONBEAM_BigDecimal!]
  liquidityUSD_not_in: [MOONBEAM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_DayData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type MOONBEAM_Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: MOONBEAM_BigDecimal!
  volumeETH: MOONBEAM_BigDecimal!
  untrackedVolumeUSD: MOONBEAM_BigDecimal!
  liquidityUSD: MOONBEAM_BigDecimal!
  liquidityETH: MOONBEAM_BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_Pair_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_Pair_filter): [MOONBEAM_Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_Token_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_Token_filter): [MOONBEAM_Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_HourData_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_HourData_filter): [MOONBEAM_HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_DayData_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_DayData_filter): [MOONBEAM_DayData!]!
}

input MOONBEAM_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: MOONBEAM_BigDecimal
  volumeUSD_not: MOONBEAM_BigDecimal
  volumeUSD_gt: MOONBEAM_BigDecimal
  volumeUSD_lt: MOONBEAM_BigDecimal
  volumeUSD_gte: MOONBEAM_BigDecimal
  volumeUSD_lte: MOONBEAM_BigDecimal
  volumeUSD_in: [MOONBEAM_BigDecimal!]
  volumeUSD_not_in: [MOONBEAM_BigDecimal!]
  volumeETH: MOONBEAM_BigDecimal
  volumeETH_not: MOONBEAM_BigDecimal
  volumeETH_gt: MOONBEAM_BigDecimal
  volumeETH_lt: MOONBEAM_BigDecimal
  volumeETH_gte: MOONBEAM_BigDecimal
  volumeETH_lte: MOONBEAM_BigDecimal
  volumeETH_in: [MOONBEAM_BigDecimal!]
  volumeETH_not_in: [MOONBEAM_BigDecimal!]
  untrackedVolumeUSD: MOONBEAM_BigDecimal
  untrackedVolumeUSD_not: MOONBEAM_BigDecimal
  untrackedVolumeUSD_gt: MOONBEAM_BigDecimal
  untrackedVolumeUSD_lt: MOONBEAM_BigDecimal
  untrackedVolumeUSD_gte: MOONBEAM_BigDecimal
  untrackedVolumeUSD_lte: MOONBEAM_BigDecimal
  untrackedVolumeUSD_in: [MOONBEAM_BigDecimal!]
  untrackedVolumeUSD_not_in: [MOONBEAM_BigDecimal!]
  liquidityUSD: MOONBEAM_BigDecimal
  liquidityUSD_not: MOONBEAM_BigDecimal
  liquidityUSD_gt: MOONBEAM_BigDecimal
  liquidityUSD_lt: MOONBEAM_BigDecimal
  liquidityUSD_gte: MOONBEAM_BigDecimal
  liquidityUSD_lte: MOONBEAM_BigDecimal
  liquidityUSD_in: [MOONBEAM_BigDecimal!]
  liquidityUSD_not_in: [MOONBEAM_BigDecimal!]
  liquidityETH: MOONBEAM_BigDecimal
  liquidityETH_not: MOONBEAM_BigDecimal
  liquidityETH_gt: MOONBEAM_BigDecimal
  liquidityETH_lt: MOONBEAM_BigDecimal
  liquidityETH_gte: MOONBEAM_BigDecimal
  liquidityETH_lte: MOONBEAM_BigDecimal
  liquidityETH_in: [MOONBEAM_BigDecimal!]
  liquidityETH_not_in: [MOONBEAM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
}

type MOONBEAM_HourData {
  id: ID!
  date: Int!
  factory: MOONBEAM_Factory!
  volumeETH: MOONBEAM_BigDecimal!
  volumeUSD: MOONBEAM_BigDecimal!
  untrackedVolume: MOONBEAM_BigDecimal!
  liquidityETH: MOONBEAM_BigDecimal!
  liquidityUSD: MOONBEAM_BigDecimal!
  txCount: BigInt!
}

input MOONBEAM_HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: MOONBEAM_BigDecimal
  volumeETH_not: MOONBEAM_BigDecimal
  volumeETH_gt: MOONBEAM_BigDecimal
  volumeETH_lt: MOONBEAM_BigDecimal
  volumeETH_gte: MOONBEAM_BigDecimal
  volumeETH_lte: MOONBEAM_BigDecimal
  volumeETH_in: [MOONBEAM_BigDecimal!]
  volumeETH_not_in: [MOONBEAM_BigDecimal!]
  volumeUSD: MOONBEAM_BigDecimal
  volumeUSD_not: MOONBEAM_BigDecimal
  volumeUSD_gt: MOONBEAM_BigDecimal
  volumeUSD_lt: MOONBEAM_BigDecimal
  volumeUSD_gte: MOONBEAM_BigDecimal
  volumeUSD_lte: MOONBEAM_BigDecimal
  volumeUSD_in: [MOONBEAM_BigDecimal!]
  volumeUSD_not_in: [MOONBEAM_BigDecimal!]
  untrackedVolume: MOONBEAM_BigDecimal
  untrackedVolume_not: MOONBEAM_BigDecimal
  untrackedVolume_gt: MOONBEAM_BigDecimal
  untrackedVolume_lt: MOONBEAM_BigDecimal
  untrackedVolume_gte: MOONBEAM_BigDecimal
  untrackedVolume_lte: MOONBEAM_BigDecimal
  untrackedVolume_in: [MOONBEAM_BigDecimal!]
  untrackedVolume_not_in: [MOONBEAM_BigDecimal!]
  liquidityETH: MOONBEAM_BigDecimal
  liquidityETH_not: MOONBEAM_BigDecimal
  liquidityETH_gt: MOONBEAM_BigDecimal
  liquidityETH_lt: MOONBEAM_BigDecimal
  liquidityETH_gte: MOONBEAM_BigDecimal
  liquidityETH_lte: MOONBEAM_BigDecimal
  liquidityETH_in: [MOONBEAM_BigDecimal!]
  liquidityETH_not_in: [MOONBEAM_BigDecimal!]
  liquidityUSD: MOONBEAM_BigDecimal
  liquidityUSD_not: MOONBEAM_BigDecimal
  liquidityUSD_gt: MOONBEAM_BigDecimal
  liquidityUSD_lt: MOONBEAM_BigDecimal
  liquidityUSD_gte: MOONBEAM_BigDecimal
  liquidityUSD_lte: MOONBEAM_BigDecimal
  liquidityUSD_in: [MOONBEAM_BigDecimal!]
  liquidityUSD_not_in: [MOONBEAM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_HourData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type MOONBEAM_LiquidityPosition {
  id: ID!
  user: MOONBEAM_User!
  pair: MOONBEAM_Pair!
  liquidityTokenBalance: MOONBEAM_BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_LiquidityPositionSnapshot_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_LiquidityPositionSnapshot_filter): [MOONBEAM_LiquidityPositionSnapshot]!
  block: Int!
  timestamp: Int!
}

type MOONBEAM_LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: MOONBEAM_LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: MOONBEAM_User!
  pair: MOONBEAM_Pair!
  token0PriceUSD: MOONBEAM_BigDecimal!
  token1PriceUSD: MOONBEAM_BigDecimal!
  reserve0: MOONBEAM_BigDecimal!
  reserve1: MOONBEAM_BigDecimal!
  reserveUSD: MOONBEAM_BigDecimal!
  liquidityTokenTotalSupply: MOONBEAM_BigDecimal!
  liquidityTokenBalance: MOONBEAM_BigDecimal!
}

input MOONBEAM_LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0PriceUSD: MOONBEAM_BigDecimal
  token0PriceUSD_not: MOONBEAM_BigDecimal
  token0PriceUSD_gt: MOONBEAM_BigDecimal
  token0PriceUSD_lt: MOONBEAM_BigDecimal
  token0PriceUSD_gte: MOONBEAM_BigDecimal
  token0PriceUSD_lte: MOONBEAM_BigDecimal
  token0PriceUSD_in: [MOONBEAM_BigDecimal!]
  token0PriceUSD_not_in: [MOONBEAM_BigDecimal!]
  token1PriceUSD: MOONBEAM_BigDecimal
  token1PriceUSD_not: MOONBEAM_BigDecimal
  token1PriceUSD_gt: MOONBEAM_BigDecimal
  token1PriceUSD_lt: MOONBEAM_BigDecimal
  token1PriceUSD_gte: MOONBEAM_BigDecimal
  token1PriceUSD_lte: MOONBEAM_BigDecimal
  token1PriceUSD_in: [MOONBEAM_BigDecimal!]
  token1PriceUSD_not_in: [MOONBEAM_BigDecimal!]
  reserve0: MOONBEAM_BigDecimal
  reserve0_not: MOONBEAM_BigDecimal
  reserve0_gt: MOONBEAM_BigDecimal
  reserve0_lt: MOONBEAM_BigDecimal
  reserve0_gte: MOONBEAM_BigDecimal
  reserve0_lte: MOONBEAM_BigDecimal
  reserve0_in: [MOONBEAM_BigDecimal!]
  reserve0_not_in: [MOONBEAM_BigDecimal!]
  reserve1: MOONBEAM_BigDecimal
  reserve1_not: MOONBEAM_BigDecimal
  reserve1_gt: MOONBEAM_BigDecimal
  reserve1_lt: MOONBEAM_BigDecimal
  reserve1_gte: MOONBEAM_BigDecimal
  reserve1_lte: MOONBEAM_BigDecimal
  reserve1_in: [MOONBEAM_BigDecimal!]
  reserve1_not_in: [MOONBEAM_BigDecimal!]
  reserveUSD: MOONBEAM_BigDecimal
  reserveUSD_not: MOONBEAM_BigDecimal
  reserveUSD_gt: MOONBEAM_BigDecimal
  reserveUSD_lt: MOONBEAM_BigDecimal
  reserveUSD_gte: MOONBEAM_BigDecimal
  reserveUSD_lte: MOONBEAM_BigDecimal
  reserveUSD_in: [MOONBEAM_BigDecimal!]
  reserveUSD_not_in: [MOONBEAM_BigDecimal!]
  liquidityTokenTotalSupply: MOONBEAM_BigDecimal
  liquidityTokenTotalSupply_not: MOONBEAM_BigDecimal
  liquidityTokenTotalSupply_gt: MOONBEAM_BigDecimal
  liquidityTokenTotalSupply_lt: MOONBEAM_BigDecimal
  liquidityTokenTotalSupply_gte: MOONBEAM_BigDecimal
  liquidityTokenTotalSupply_lte: MOONBEAM_BigDecimal
  liquidityTokenTotalSupply_in: [MOONBEAM_BigDecimal!]
  liquidityTokenTotalSupply_not_in: [MOONBEAM_BigDecimal!]
  liquidityTokenBalance: MOONBEAM_BigDecimal
  liquidityTokenBalance_not: MOONBEAM_BigDecimal
  liquidityTokenBalance_gt: MOONBEAM_BigDecimal
  liquidityTokenBalance_lt: MOONBEAM_BigDecimal
  liquidityTokenBalance_gte: MOONBEAM_BigDecimal
  liquidityTokenBalance_lte: MOONBEAM_BigDecimal
  liquidityTokenBalance_in: [MOONBEAM_BigDecimal!]
  liquidityTokenBalance_not_in: [MOONBEAM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  timestamp
  block
  user
  pair
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input MOONBEAM_LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidityTokenBalance: MOONBEAM_BigDecimal
  liquidityTokenBalance_not: MOONBEAM_BigDecimal
  liquidityTokenBalance_gt: MOONBEAM_BigDecimal
  liquidityTokenBalance_lt: MOONBEAM_BigDecimal
  liquidityTokenBalance_gte: MOONBEAM_BigDecimal
  liquidityTokenBalance_lte: MOONBEAM_BigDecimal
  liquidityTokenBalance_in: [MOONBEAM_BigDecimal!]
  liquidityTokenBalance_not_in: [MOONBEAM_BigDecimal!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_LiquidityPosition_orderBy {
  id
  user
  pair
  liquidityTokenBalance
  snapshots
  block
  timestamp
}

type MOONBEAM_Mint {
  id: ID!
  transaction: MOONBEAM_Transaction!
  timestamp: BigInt!
  pair: MOONBEAM_Pair!
  to: MOONBEAM_Bytes!
  liquidity: MOONBEAM_BigDecimal!
  sender: MOONBEAM_Bytes
  amount0: MOONBEAM_BigDecimal
  amount1: MOONBEAM_BigDecimal
  logIndex: BigInt
  amountUSD: MOONBEAM_BigDecimal
  feeTo: MOONBEAM_Bytes
  feeLiquidity: MOONBEAM_BigDecimal
}

input MOONBEAM_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  to: MOONBEAM_Bytes
  to_not: MOONBEAM_Bytes
  to_in: [MOONBEAM_Bytes!]
  to_not_in: [MOONBEAM_Bytes!]
  to_contains: MOONBEAM_Bytes
  to_not_contains: MOONBEAM_Bytes
  liquidity: MOONBEAM_BigDecimal
  liquidity_not: MOONBEAM_BigDecimal
  liquidity_gt: MOONBEAM_BigDecimal
  liquidity_lt: MOONBEAM_BigDecimal
  liquidity_gte: MOONBEAM_BigDecimal
  liquidity_lte: MOONBEAM_BigDecimal
  liquidity_in: [MOONBEAM_BigDecimal!]
  liquidity_not_in: [MOONBEAM_BigDecimal!]
  sender: MOONBEAM_Bytes
  sender_not: MOONBEAM_Bytes
  sender_in: [MOONBEAM_Bytes!]
  sender_not_in: [MOONBEAM_Bytes!]
  sender_contains: MOONBEAM_Bytes
  sender_not_contains: MOONBEAM_Bytes
  amount0: MOONBEAM_BigDecimal
  amount0_not: MOONBEAM_BigDecimal
  amount0_gt: MOONBEAM_BigDecimal
  amount0_lt: MOONBEAM_BigDecimal
  amount0_gte: MOONBEAM_BigDecimal
  amount0_lte: MOONBEAM_BigDecimal
  amount0_in: [MOONBEAM_BigDecimal!]
  amount0_not_in: [MOONBEAM_BigDecimal!]
  amount1: MOONBEAM_BigDecimal
  amount1_not: MOONBEAM_BigDecimal
  amount1_gt: MOONBEAM_BigDecimal
  amount1_lt: MOONBEAM_BigDecimal
  amount1_gte: MOONBEAM_BigDecimal
  amount1_lte: MOONBEAM_BigDecimal
  amount1_in: [MOONBEAM_BigDecimal!]
  amount1_not_in: [MOONBEAM_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: MOONBEAM_BigDecimal
  amountUSD_not: MOONBEAM_BigDecimal
  amountUSD_gt: MOONBEAM_BigDecimal
  amountUSD_lt: MOONBEAM_BigDecimal
  amountUSD_gte: MOONBEAM_BigDecimal
  amountUSD_lte: MOONBEAM_BigDecimal
  amountUSD_in: [MOONBEAM_BigDecimal!]
  amountUSD_not_in: [MOONBEAM_BigDecimal!]
  feeTo: MOONBEAM_Bytes
  feeTo_not: MOONBEAM_Bytes
  feeTo_in: [MOONBEAM_Bytes!]
  feeTo_not_in: [MOONBEAM_Bytes!]
  feeTo_contains: MOONBEAM_Bytes
  feeTo_not_contains: MOONBEAM_Bytes
  feeLiquidity: MOONBEAM_BigDecimal
  feeLiquidity_not: MOONBEAM_BigDecimal
  feeLiquidity_gt: MOONBEAM_BigDecimal
  feeLiquidity_lt: MOONBEAM_BigDecimal
  feeLiquidity_gte: MOONBEAM_BigDecimal
  feeLiquidity_lte: MOONBEAM_BigDecimal
  feeLiquidity_in: [MOONBEAM_BigDecimal!]
  feeLiquidity_not_in: [MOONBEAM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_Mint_orderBy {
  id
  transaction
  timestamp
  pair
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

"""Defines the order direction, either ascending or descending"""
enum MOONBEAM_OrderDirection {
  asc
  desc
}

type MOONBEAM_Pair {
  id: ID!
  factory: MOONBEAM_Factory!
  name: String!
  token0: MOONBEAM_Token!
  token1: MOONBEAM_Token!
  reserve0: MOONBEAM_BigDecimal!
  reserve1: MOONBEAM_BigDecimal!
  totalSupply: MOONBEAM_BigDecimal!
  reserveETH: MOONBEAM_BigDecimal!
  reserveUSD: MOONBEAM_BigDecimal!
  trackedReserveETH: MOONBEAM_BigDecimal!
  token0Price: MOONBEAM_BigDecimal!
  token1Price: MOONBEAM_BigDecimal!
  volumeToken0: MOONBEAM_BigDecimal!
  volumeToken1: MOONBEAM_BigDecimal!
  volumeUSD: MOONBEAM_BigDecimal!
  untrackedVolumeUSD: MOONBEAM_BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_LiquidityPosition_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_LiquidityPosition_filter): [MOONBEAM_LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_LiquidityPositionSnapshot_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_LiquidityPositionSnapshot_filter): [MOONBEAM_LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_PairDayData_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_PairDayData_filter): [MOONBEAM_PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_PairHourData_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_PairHourData_filter): [MOONBEAM_PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_Mint_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_Mint_filter): [MOONBEAM_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_Burn_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_Burn_filter): [MOONBEAM_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_Swap_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_Swap_filter): [MOONBEAM_Swap!]!
  timestamp: BigInt!
  block: BigInt!
}

type MOONBEAM_PairDayData {
  id: ID!
  date: Int!
  pair: MOONBEAM_Pair!
  token0: MOONBEAM_Token!
  token1: MOONBEAM_Token!
  reserve0: MOONBEAM_BigDecimal!
  reserve1: MOONBEAM_BigDecimal!
  totalSupply: MOONBEAM_BigDecimal!
  reserveUSD: MOONBEAM_BigDecimal!
  volumeToken0: MOONBEAM_BigDecimal!
  volumeToken1: MOONBEAM_BigDecimal!
  volumeUSD: MOONBEAM_BigDecimal!
  txCount: BigInt!
}

input MOONBEAM_PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: MOONBEAM_BigDecimal
  reserve0_not: MOONBEAM_BigDecimal
  reserve0_gt: MOONBEAM_BigDecimal
  reserve0_lt: MOONBEAM_BigDecimal
  reserve0_gte: MOONBEAM_BigDecimal
  reserve0_lte: MOONBEAM_BigDecimal
  reserve0_in: [MOONBEAM_BigDecimal!]
  reserve0_not_in: [MOONBEAM_BigDecimal!]
  reserve1: MOONBEAM_BigDecimal
  reserve1_not: MOONBEAM_BigDecimal
  reserve1_gt: MOONBEAM_BigDecimal
  reserve1_lt: MOONBEAM_BigDecimal
  reserve1_gte: MOONBEAM_BigDecimal
  reserve1_lte: MOONBEAM_BigDecimal
  reserve1_in: [MOONBEAM_BigDecimal!]
  reserve1_not_in: [MOONBEAM_BigDecimal!]
  totalSupply: MOONBEAM_BigDecimal
  totalSupply_not: MOONBEAM_BigDecimal
  totalSupply_gt: MOONBEAM_BigDecimal
  totalSupply_lt: MOONBEAM_BigDecimal
  totalSupply_gte: MOONBEAM_BigDecimal
  totalSupply_lte: MOONBEAM_BigDecimal
  totalSupply_in: [MOONBEAM_BigDecimal!]
  totalSupply_not_in: [MOONBEAM_BigDecimal!]
  reserveUSD: MOONBEAM_BigDecimal
  reserveUSD_not: MOONBEAM_BigDecimal
  reserveUSD_gt: MOONBEAM_BigDecimal
  reserveUSD_lt: MOONBEAM_BigDecimal
  reserveUSD_gte: MOONBEAM_BigDecimal
  reserveUSD_lte: MOONBEAM_BigDecimal
  reserveUSD_in: [MOONBEAM_BigDecimal!]
  reserveUSD_not_in: [MOONBEAM_BigDecimal!]
  volumeToken0: MOONBEAM_BigDecimal
  volumeToken0_not: MOONBEAM_BigDecimal
  volumeToken0_gt: MOONBEAM_BigDecimal
  volumeToken0_lt: MOONBEAM_BigDecimal
  volumeToken0_gte: MOONBEAM_BigDecimal
  volumeToken0_lte: MOONBEAM_BigDecimal
  volumeToken0_in: [MOONBEAM_BigDecimal!]
  volumeToken0_not_in: [MOONBEAM_BigDecimal!]
  volumeToken1: MOONBEAM_BigDecimal
  volumeToken1_not: MOONBEAM_BigDecimal
  volumeToken1_gt: MOONBEAM_BigDecimal
  volumeToken1_lt: MOONBEAM_BigDecimal
  volumeToken1_gte: MOONBEAM_BigDecimal
  volumeToken1_lte: MOONBEAM_BigDecimal
  volumeToken1_in: [MOONBEAM_BigDecimal!]
  volumeToken1_not_in: [MOONBEAM_BigDecimal!]
  volumeUSD: MOONBEAM_BigDecimal
  volumeUSD_not: MOONBEAM_BigDecimal
  volumeUSD_gt: MOONBEAM_BigDecimal
  volumeUSD_lt: MOONBEAM_BigDecimal
  volumeUSD_gte: MOONBEAM_BigDecimal
  volumeUSD_lte: MOONBEAM_BigDecimal
  volumeUSD_in: [MOONBEAM_BigDecimal!]
  volumeUSD_not_in: [MOONBEAM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_PairDayData_orderBy {
  id
  date
  pair
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

type MOONBEAM_PairHourData {
  id: ID!
  date: Int!
  pair: MOONBEAM_Pair!
  reserve0: MOONBEAM_BigDecimal!
  reserve1: MOONBEAM_BigDecimal!
  reserveUSD: MOONBEAM_BigDecimal!
  volumeToken0: MOONBEAM_BigDecimal!
  volumeToken1: MOONBEAM_BigDecimal!
  volumeUSD: MOONBEAM_BigDecimal!
  txCount: BigInt!
}

input MOONBEAM_PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  reserve0: MOONBEAM_BigDecimal
  reserve0_not: MOONBEAM_BigDecimal
  reserve0_gt: MOONBEAM_BigDecimal
  reserve0_lt: MOONBEAM_BigDecimal
  reserve0_gte: MOONBEAM_BigDecimal
  reserve0_lte: MOONBEAM_BigDecimal
  reserve0_in: [MOONBEAM_BigDecimal!]
  reserve0_not_in: [MOONBEAM_BigDecimal!]
  reserve1: MOONBEAM_BigDecimal
  reserve1_not: MOONBEAM_BigDecimal
  reserve1_gt: MOONBEAM_BigDecimal
  reserve1_lt: MOONBEAM_BigDecimal
  reserve1_gte: MOONBEAM_BigDecimal
  reserve1_lte: MOONBEAM_BigDecimal
  reserve1_in: [MOONBEAM_BigDecimal!]
  reserve1_not_in: [MOONBEAM_BigDecimal!]
  reserveUSD: MOONBEAM_BigDecimal
  reserveUSD_not: MOONBEAM_BigDecimal
  reserveUSD_gt: MOONBEAM_BigDecimal
  reserveUSD_lt: MOONBEAM_BigDecimal
  reserveUSD_gte: MOONBEAM_BigDecimal
  reserveUSD_lte: MOONBEAM_BigDecimal
  reserveUSD_in: [MOONBEAM_BigDecimal!]
  reserveUSD_not_in: [MOONBEAM_BigDecimal!]
  volumeToken0: MOONBEAM_BigDecimal
  volumeToken0_not: MOONBEAM_BigDecimal
  volumeToken0_gt: MOONBEAM_BigDecimal
  volumeToken0_lt: MOONBEAM_BigDecimal
  volumeToken0_gte: MOONBEAM_BigDecimal
  volumeToken0_lte: MOONBEAM_BigDecimal
  volumeToken0_in: [MOONBEAM_BigDecimal!]
  volumeToken0_not_in: [MOONBEAM_BigDecimal!]
  volumeToken1: MOONBEAM_BigDecimal
  volumeToken1_not: MOONBEAM_BigDecimal
  volumeToken1_gt: MOONBEAM_BigDecimal
  volumeToken1_lt: MOONBEAM_BigDecimal
  volumeToken1_gte: MOONBEAM_BigDecimal
  volumeToken1_lte: MOONBEAM_BigDecimal
  volumeToken1_in: [MOONBEAM_BigDecimal!]
  volumeToken1_not_in: [MOONBEAM_BigDecimal!]
  volumeUSD: MOONBEAM_BigDecimal
  volumeUSD_not: MOONBEAM_BigDecimal
  volumeUSD_gt: MOONBEAM_BigDecimal
  volumeUSD_lt: MOONBEAM_BigDecimal
  volumeUSD_gte: MOONBEAM_BigDecimal
  volumeUSD_lte: MOONBEAM_BigDecimal
  volumeUSD_in: [MOONBEAM_BigDecimal!]
  volumeUSD_not_in: [MOONBEAM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_PairHourData_orderBy {
  id
  date
  pair
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

input MOONBEAM_Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: MOONBEAM_BigDecimal
  reserve0_not: MOONBEAM_BigDecimal
  reserve0_gt: MOONBEAM_BigDecimal
  reserve0_lt: MOONBEAM_BigDecimal
  reserve0_gte: MOONBEAM_BigDecimal
  reserve0_lte: MOONBEAM_BigDecimal
  reserve0_in: [MOONBEAM_BigDecimal!]
  reserve0_not_in: [MOONBEAM_BigDecimal!]
  reserve1: MOONBEAM_BigDecimal
  reserve1_not: MOONBEAM_BigDecimal
  reserve1_gt: MOONBEAM_BigDecimal
  reserve1_lt: MOONBEAM_BigDecimal
  reserve1_gte: MOONBEAM_BigDecimal
  reserve1_lte: MOONBEAM_BigDecimal
  reserve1_in: [MOONBEAM_BigDecimal!]
  reserve1_not_in: [MOONBEAM_BigDecimal!]
  totalSupply: MOONBEAM_BigDecimal
  totalSupply_not: MOONBEAM_BigDecimal
  totalSupply_gt: MOONBEAM_BigDecimal
  totalSupply_lt: MOONBEAM_BigDecimal
  totalSupply_gte: MOONBEAM_BigDecimal
  totalSupply_lte: MOONBEAM_BigDecimal
  totalSupply_in: [MOONBEAM_BigDecimal!]
  totalSupply_not_in: [MOONBEAM_BigDecimal!]
  reserveETH: MOONBEAM_BigDecimal
  reserveETH_not: MOONBEAM_BigDecimal
  reserveETH_gt: MOONBEAM_BigDecimal
  reserveETH_lt: MOONBEAM_BigDecimal
  reserveETH_gte: MOONBEAM_BigDecimal
  reserveETH_lte: MOONBEAM_BigDecimal
  reserveETH_in: [MOONBEAM_BigDecimal!]
  reserveETH_not_in: [MOONBEAM_BigDecimal!]
  reserveUSD: MOONBEAM_BigDecimal
  reserveUSD_not: MOONBEAM_BigDecimal
  reserveUSD_gt: MOONBEAM_BigDecimal
  reserveUSD_lt: MOONBEAM_BigDecimal
  reserveUSD_gte: MOONBEAM_BigDecimal
  reserveUSD_lte: MOONBEAM_BigDecimal
  reserveUSD_in: [MOONBEAM_BigDecimal!]
  reserveUSD_not_in: [MOONBEAM_BigDecimal!]
  trackedReserveETH: MOONBEAM_BigDecimal
  trackedReserveETH_not: MOONBEAM_BigDecimal
  trackedReserveETH_gt: MOONBEAM_BigDecimal
  trackedReserveETH_lt: MOONBEAM_BigDecimal
  trackedReserveETH_gte: MOONBEAM_BigDecimal
  trackedReserveETH_lte: MOONBEAM_BigDecimal
  trackedReserveETH_in: [MOONBEAM_BigDecimal!]
  trackedReserveETH_not_in: [MOONBEAM_BigDecimal!]
  token0Price: MOONBEAM_BigDecimal
  token0Price_not: MOONBEAM_BigDecimal
  token0Price_gt: MOONBEAM_BigDecimal
  token0Price_lt: MOONBEAM_BigDecimal
  token0Price_gte: MOONBEAM_BigDecimal
  token0Price_lte: MOONBEAM_BigDecimal
  token0Price_in: [MOONBEAM_BigDecimal!]
  token0Price_not_in: [MOONBEAM_BigDecimal!]
  token1Price: MOONBEAM_BigDecimal
  token1Price_not: MOONBEAM_BigDecimal
  token1Price_gt: MOONBEAM_BigDecimal
  token1Price_lt: MOONBEAM_BigDecimal
  token1Price_gte: MOONBEAM_BigDecimal
  token1Price_lte: MOONBEAM_BigDecimal
  token1Price_in: [MOONBEAM_BigDecimal!]
  token1Price_not_in: [MOONBEAM_BigDecimal!]
  volumeToken0: MOONBEAM_BigDecimal
  volumeToken0_not: MOONBEAM_BigDecimal
  volumeToken0_gt: MOONBEAM_BigDecimal
  volumeToken0_lt: MOONBEAM_BigDecimal
  volumeToken0_gte: MOONBEAM_BigDecimal
  volumeToken0_lte: MOONBEAM_BigDecimal
  volumeToken0_in: [MOONBEAM_BigDecimal!]
  volumeToken0_not_in: [MOONBEAM_BigDecimal!]
  volumeToken1: MOONBEAM_BigDecimal
  volumeToken1_not: MOONBEAM_BigDecimal
  volumeToken1_gt: MOONBEAM_BigDecimal
  volumeToken1_lt: MOONBEAM_BigDecimal
  volumeToken1_gte: MOONBEAM_BigDecimal
  volumeToken1_lte: MOONBEAM_BigDecimal
  volumeToken1_in: [MOONBEAM_BigDecimal!]
  volumeToken1_not_in: [MOONBEAM_BigDecimal!]
  volumeUSD: MOONBEAM_BigDecimal
  volumeUSD_not: MOONBEAM_BigDecimal
  volumeUSD_gt: MOONBEAM_BigDecimal
  volumeUSD_lt: MOONBEAM_BigDecimal
  volumeUSD_gte: MOONBEAM_BigDecimal
  volumeUSD_lte: MOONBEAM_BigDecimal
  volumeUSD_in: [MOONBEAM_BigDecimal!]
  volumeUSD_not_in: [MOONBEAM_BigDecimal!]
  untrackedVolumeUSD: MOONBEAM_BigDecimal
  untrackedVolumeUSD_not: MOONBEAM_BigDecimal
  untrackedVolumeUSD_gt: MOONBEAM_BigDecimal
  untrackedVolumeUSD_lt: MOONBEAM_BigDecimal
  untrackedVolumeUSD_gte: MOONBEAM_BigDecimal
  untrackedVolumeUSD_lte: MOONBEAM_BigDecimal
  untrackedVolumeUSD_in: [MOONBEAM_BigDecimal!]
  untrackedVolumeUSD_not_in: [MOONBEAM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_Pair_orderBy {
  id
  factory
  name
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
}

type MOONBEAM_Swap {
  id: ID!
  transaction: MOONBEAM_Transaction!
  timestamp: BigInt!
  pair: MOONBEAM_Pair!
  sender: MOONBEAM_Bytes!
  amount0In: MOONBEAM_BigDecimal!
  amount1In: MOONBEAM_BigDecimal!
  amount0Out: MOONBEAM_BigDecimal!
  amount1Out: MOONBEAM_BigDecimal!
  to: MOONBEAM_Bytes!
  logIndex: BigInt
  amountUSD: MOONBEAM_BigDecimal!
}

input MOONBEAM_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  sender: MOONBEAM_Bytes
  sender_not: MOONBEAM_Bytes
  sender_in: [MOONBEAM_Bytes!]
  sender_not_in: [MOONBEAM_Bytes!]
  sender_contains: MOONBEAM_Bytes
  sender_not_contains: MOONBEAM_Bytes
  amount0In: MOONBEAM_BigDecimal
  amount0In_not: MOONBEAM_BigDecimal
  amount0In_gt: MOONBEAM_BigDecimal
  amount0In_lt: MOONBEAM_BigDecimal
  amount0In_gte: MOONBEAM_BigDecimal
  amount0In_lte: MOONBEAM_BigDecimal
  amount0In_in: [MOONBEAM_BigDecimal!]
  amount0In_not_in: [MOONBEAM_BigDecimal!]
  amount1In: MOONBEAM_BigDecimal
  amount1In_not: MOONBEAM_BigDecimal
  amount1In_gt: MOONBEAM_BigDecimal
  amount1In_lt: MOONBEAM_BigDecimal
  amount1In_gte: MOONBEAM_BigDecimal
  amount1In_lte: MOONBEAM_BigDecimal
  amount1In_in: [MOONBEAM_BigDecimal!]
  amount1In_not_in: [MOONBEAM_BigDecimal!]
  amount0Out: MOONBEAM_BigDecimal
  amount0Out_not: MOONBEAM_BigDecimal
  amount0Out_gt: MOONBEAM_BigDecimal
  amount0Out_lt: MOONBEAM_BigDecimal
  amount0Out_gte: MOONBEAM_BigDecimal
  amount0Out_lte: MOONBEAM_BigDecimal
  amount0Out_in: [MOONBEAM_BigDecimal!]
  amount0Out_not_in: [MOONBEAM_BigDecimal!]
  amount1Out: MOONBEAM_BigDecimal
  amount1Out_not: MOONBEAM_BigDecimal
  amount1Out_gt: MOONBEAM_BigDecimal
  amount1Out_lt: MOONBEAM_BigDecimal
  amount1Out_gte: MOONBEAM_BigDecimal
  amount1Out_lte: MOONBEAM_BigDecimal
  amount1Out_in: [MOONBEAM_BigDecimal!]
  amount1Out_not_in: [MOONBEAM_BigDecimal!]
  to: MOONBEAM_Bytes
  to_not: MOONBEAM_Bytes
  to_in: [MOONBEAM_Bytes!]
  to_not_in: [MOONBEAM_Bytes!]
  to_contains: MOONBEAM_Bytes
  to_not_contains: MOONBEAM_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: MOONBEAM_BigDecimal
  amountUSD_not: MOONBEAM_BigDecimal
  amountUSD_gt: MOONBEAM_BigDecimal
  amountUSD_lt: MOONBEAM_BigDecimal
  amountUSD_gte: MOONBEAM_BigDecimal
  amountUSD_lte: MOONBEAM_BigDecimal
  amountUSD_in: [MOONBEAM_BigDecimal!]
  amountUSD_not_in: [MOONBEAM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_Swap_orderBy {
  id
  transaction
  timestamp
  pair
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
}

type MOONBEAM_Token {
  id: ID!
  factory: MOONBEAM_Factory!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: MOONBEAM_BigDecimal!
  volumeUSD: MOONBEAM_BigDecimal!
  untrackedVolumeUSD: MOONBEAM_BigDecimal!
  txCount: BigInt!
  liquidity: MOONBEAM_BigDecimal!
  derivedETH: MOONBEAM_BigDecimal!
  whitelistPairs(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_Pair_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_Pair_filter): [MOONBEAM_Pair!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_TokenHourData_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_TokenHourData_filter): [MOONBEAM_TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_TokenDayData_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_TokenDayData_filter): [MOONBEAM_TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_Pair_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_Pair_filter): [MOONBEAM_Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_Pair_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_Pair_filter): [MOONBEAM_Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_PairDayData_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_PairDayData_filter): [MOONBEAM_PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_PairDayData_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_PairDayData_filter): [MOONBEAM_PairDayData!]!
}

type MOONBEAM_TokenDayData {
  id: ID!
  date: Int!
  token: MOONBEAM_Token!
  volume: MOONBEAM_BigDecimal!
  volumeETH: MOONBEAM_BigDecimal!
  volumeUSD: MOONBEAM_BigDecimal!
  txCount: BigInt!
  liquidity: MOONBEAM_BigDecimal!
  liquidityETH: MOONBEAM_BigDecimal!
  liquidityUSD: MOONBEAM_BigDecimal!
  priceUSD: MOONBEAM_BigDecimal!
}

input MOONBEAM_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: MOONBEAM_BigDecimal
  volume_not: MOONBEAM_BigDecimal
  volume_gt: MOONBEAM_BigDecimal
  volume_lt: MOONBEAM_BigDecimal
  volume_gte: MOONBEAM_BigDecimal
  volume_lte: MOONBEAM_BigDecimal
  volume_in: [MOONBEAM_BigDecimal!]
  volume_not_in: [MOONBEAM_BigDecimal!]
  volumeETH: MOONBEAM_BigDecimal
  volumeETH_not: MOONBEAM_BigDecimal
  volumeETH_gt: MOONBEAM_BigDecimal
  volumeETH_lt: MOONBEAM_BigDecimal
  volumeETH_gte: MOONBEAM_BigDecimal
  volumeETH_lte: MOONBEAM_BigDecimal
  volumeETH_in: [MOONBEAM_BigDecimal!]
  volumeETH_not_in: [MOONBEAM_BigDecimal!]
  volumeUSD: MOONBEAM_BigDecimal
  volumeUSD_not: MOONBEAM_BigDecimal
  volumeUSD_gt: MOONBEAM_BigDecimal
  volumeUSD_lt: MOONBEAM_BigDecimal
  volumeUSD_gte: MOONBEAM_BigDecimal
  volumeUSD_lte: MOONBEAM_BigDecimal
  volumeUSD_in: [MOONBEAM_BigDecimal!]
  volumeUSD_not_in: [MOONBEAM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: MOONBEAM_BigDecimal
  liquidity_not: MOONBEAM_BigDecimal
  liquidity_gt: MOONBEAM_BigDecimal
  liquidity_lt: MOONBEAM_BigDecimal
  liquidity_gte: MOONBEAM_BigDecimal
  liquidity_lte: MOONBEAM_BigDecimal
  liquidity_in: [MOONBEAM_BigDecimal!]
  liquidity_not_in: [MOONBEAM_BigDecimal!]
  liquidityETH: MOONBEAM_BigDecimal
  liquidityETH_not: MOONBEAM_BigDecimal
  liquidityETH_gt: MOONBEAM_BigDecimal
  liquidityETH_lt: MOONBEAM_BigDecimal
  liquidityETH_gte: MOONBEAM_BigDecimal
  liquidityETH_lte: MOONBEAM_BigDecimal
  liquidityETH_in: [MOONBEAM_BigDecimal!]
  liquidityETH_not_in: [MOONBEAM_BigDecimal!]
  liquidityUSD: MOONBEAM_BigDecimal
  liquidityUSD_not: MOONBEAM_BigDecimal
  liquidityUSD_gt: MOONBEAM_BigDecimal
  liquidityUSD_lt: MOONBEAM_BigDecimal
  liquidityUSD_gte: MOONBEAM_BigDecimal
  liquidityUSD_lte: MOONBEAM_BigDecimal
  liquidityUSD_in: [MOONBEAM_BigDecimal!]
  liquidityUSD_not_in: [MOONBEAM_BigDecimal!]
  priceUSD: MOONBEAM_BigDecimal
  priceUSD_not: MOONBEAM_BigDecimal
  priceUSD_gt: MOONBEAM_BigDecimal
  priceUSD_lt: MOONBEAM_BigDecimal
  priceUSD_gte: MOONBEAM_BigDecimal
  priceUSD_lte: MOONBEAM_BigDecimal
  priceUSD_in: [MOONBEAM_BigDecimal!]
  priceUSD_not_in: [MOONBEAM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_TokenDayData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

type MOONBEAM_TokenHourData {
  id: ID!
  date: Int!
  token: MOONBEAM_Token!
  volume: MOONBEAM_BigDecimal!
  volumeETH: MOONBEAM_BigDecimal!
  volumeUSD: MOONBEAM_BigDecimal!
  txCount: BigInt!
  liquidity: MOONBEAM_BigDecimal!
  liquidityETH: MOONBEAM_BigDecimal!
  liquidityUSD: MOONBEAM_BigDecimal!
  priceUSD: MOONBEAM_BigDecimal!
}

input MOONBEAM_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: MOONBEAM_BigDecimal
  volume_not: MOONBEAM_BigDecimal
  volume_gt: MOONBEAM_BigDecimal
  volume_lt: MOONBEAM_BigDecimal
  volume_gte: MOONBEAM_BigDecimal
  volume_lte: MOONBEAM_BigDecimal
  volume_in: [MOONBEAM_BigDecimal!]
  volume_not_in: [MOONBEAM_BigDecimal!]
  volumeETH: MOONBEAM_BigDecimal
  volumeETH_not: MOONBEAM_BigDecimal
  volumeETH_gt: MOONBEAM_BigDecimal
  volumeETH_lt: MOONBEAM_BigDecimal
  volumeETH_gte: MOONBEAM_BigDecimal
  volumeETH_lte: MOONBEAM_BigDecimal
  volumeETH_in: [MOONBEAM_BigDecimal!]
  volumeETH_not_in: [MOONBEAM_BigDecimal!]
  volumeUSD: MOONBEAM_BigDecimal
  volumeUSD_not: MOONBEAM_BigDecimal
  volumeUSD_gt: MOONBEAM_BigDecimal
  volumeUSD_lt: MOONBEAM_BigDecimal
  volumeUSD_gte: MOONBEAM_BigDecimal
  volumeUSD_lte: MOONBEAM_BigDecimal
  volumeUSD_in: [MOONBEAM_BigDecimal!]
  volumeUSD_not_in: [MOONBEAM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: MOONBEAM_BigDecimal
  liquidity_not: MOONBEAM_BigDecimal
  liquidity_gt: MOONBEAM_BigDecimal
  liquidity_lt: MOONBEAM_BigDecimal
  liquidity_gte: MOONBEAM_BigDecimal
  liquidity_lte: MOONBEAM_BigDecimal
  liquidity_in: [MOONBEAM_BigDecimal!]
  liquidity_not_in: [MOONBEAM_BigDecimal!]
  liquidityETH: MOONBEAM_BigDecimal
  liquidityETH_not: MOONBEAM_BigDecimal
  liquidityETH_gt: MOONBEAM_BigDecimal
  liquidityETH_lt: MOONBEAM_BigDecimal
  liquidityETH_gte: MOONBEAM_BigDecimal
  liquidityETH_lte: MOONBEAM_BigDecimal
  liquidityETH_in: [MOONBEAM_BigDecimal!]
  liquidityETH_not_in: [MOONBEAM_BigDecimal!]
  liquidityUSD: MOONBEAM_BigDecimal
  liquidityUSD_not: MOONBEAM_BigDecimal
  liquidityUSD_gt: MOONBEAM_BigDecimal
  liquidityUSD_lt: MOONBEAM_BigDecimal
  liquidityUSD_gte: MOONBEAM_BigDecimal
  liquidityUSD_lte: MOONBEAM_BigDecimal
  liquidityUSD_in: [MOONBEAM_BigDecimal!]
  liquidityUSD_not_in: [MOONBEAM_BigDecimal!]
  priceUSD: MOONBEAM_BigDecimal
  priceUSD_not: MOONBEAM_BigDecimal
  priceUSD_gt: MOONBEAM_BigDecimal
  priceUSD_lt: MOONBEAM_BigDecimal
  priceUSD_gte: MOONBEAM_BigDecimal
  priceUSD_lte: MOONBEAM_BigDecimal
  priceUSD_in: [MOONBEAM_BigDecimal!]
  priceUSD_not_in: [MOONBEAM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_TokenHourData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

input MOONBEAM_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: MOONBEAM_BigDecimal
  volume_not: MOONBEAM_BigDecimal
  volume_gt: MOONBEAM_BigDecimal
  volume_lt: MOONBEAM_BigDecimal
  volume_gte: MOONBEAM_BigDecimal
  volume_lte: MOONBEAM_BigDecimal
  volume_in: [MOONBEAM_BigDecimal!]
  volume_not_in: [MOONBEAM_BigDecimal!]
  volumeUSD: MOONBEAM_BigDecimal
  volumeUSD_not: MOONBEAM_BigDecimal
  volumeUSD_gt: MOONBEAM_BigDecimal
  volumeUSD_lt: MOONBEAM_BigDecimal
  volumeUSD_gte: MOONBEAM_BigDecimal
  volumeUSD_lte: MOONBEAM_BigDecimal
  volumeUSD_in: [MOONBEAM_BigDecimal!]
  volumeUSD_not_in: [MOONBEAM_BigDecimal!]
  untrackedVolumeUSD: MOONBEAM_BigDecimal
  untrackedVolumeUSD_not: MOONBEAM_BigDecimal
  untrackedVolumeUSD_gt: MOONBEAM_BigDecimal
  untrackedVolumeUSD_lt: MOONBEAM_BigDecimal
  untrackedVolumeUSD_gte: MOONBEAM_BigDecimal
  untrackedVolumeUSD_lte: MOONBEAM_BigDecimal
  untrackedVolumeUSD_in: [MOONBEAM_BigDecimal!]
  untrackedVolumeUSD_not_in: [MOONBEAM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: MOONBEAM_BigDecimal
  liquidity_not: MOONBEAM_BigDecimal
  liquidity_gt: MOONBEAM_BigDecimal
  liquidity_lt: MOONBEAM_BigDecimal
  liquidity_gte: MOONBEAM_BigDecimal
  liquidity_lte: MOONBEAM_BigDecimal
  liquidity_in: [MOONBEAM_BigDecimal!]
  liquidity_not_in: [MOONBEAM_BigDecimal!]
  derivedETH: MOONBEAM_BigDecimal
  derivedETH_not: MOONBEAM_BigDecimal
  derivedETH_gt: MOONBEAM_BigDecimal
  derivedETH_lt: MOONBEAM_BigDecimal
  derivedETH_gte: MOONBEAM_BigDecimal
  derivedETH_lte: MOONBEAM_BigDecimal
  derivedETH_in: [MOONBEAM_BigDecimal!]
  derivedETH_not_in: [MOONBEAM_BigDecimal!]
  whitelistPairs: [String!]
  whitelistPairs_not: [String!]
  whitelistPairs_contains: [String!]
  whitelistPairs_contains_nocase: [String!]
  whitelistPairs_not_contains: [String!]
  whitelistPairs_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_Token_orderBy {
  id
  factory
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  whitelistPairs
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
}

type MOONBEAM_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_Mint_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_Mint_filter): [MOONBEAM_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_Burn_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_Burn_filter): [MOONBEAM_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_Swap_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_Swap_filter): [MOONBEAM_Swap]!
}

input MOONBEAM_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
}

type MOONBEAM_User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: MOONBEAM_LiquidityPosition_orderBy, orderDirection: MOONBEAM_OrderDirection, where: MOONBEAM_LiquidityPosition_filter): [MOONBEAM_LiquidityPosition!]!
}

input MOONBEAM_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]

  """Filter for the block changed event."""
  _change_block: MOONBEAM_BlockChangedFilter
}

enum MOONBEAM_User_orderBy {
  id
  liquidityPositions
}

type MOONBEAM__Block_ {
  """The hash of the block"""
  hash: MOONBEAM_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type MOONBEAM__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: MOONBEAM__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar CELO_BigDecimal

input CELO_BlockChangedFilter {
  number_gte: Int!
}

input CELO_Block_height {
  hash: CELO_Bytes
  number: Int
  number_gte: Int
}

type CELO_Bundle {
  id: ID!
  ethPrice: CELO_BigDecimal!
}

input CELO_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: CELO_BigDecimal
  ethPrice_not: CELO_BigDecimal
  ethPrice_gt: CELO_BigDecimal
  ethPrice_lt: CELO_BigDecimal
  ethPrice_gte: CELO_BigDecimal
  ethPrice_lte: CELO_BigDecimal
  ethPrice_in: [CELO_BigDecimal!]
  ethPrice_not_in: [CELO_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_Bundle_orderBy {
  id
  ethPrice
}

type CELO_Burn {
  id: ID!
  transaction: CELO_Transaction!
  timestamp: BigInt!
  pair: CELO_Pair!
  liquidity: CELO_BigDecimal!
  sender: CELO_Bytes
  amount0: CELO_BigDecimal
  amount1: CELO_BigDecimal
  to: CELO_Bytes
  logIndex: BigInt
  amountUSD: CELO_BigDecimal
  complete: Boolean!
  feeTo: CELO_Bytes
  feeLiquidity: CELO_BigDecimal
}

input CELO_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidity: CELO_BigDecimal
  liquidity_not: CELO_BigDecimal
  liquidity_gt: CELO_BigDecimal
  liquidity_lt: CELO_BigDecimal
  liquidity_gte: CELO_BigDecimal
  liquidity_lte: CELO_BigDecimal
  liquidity_in: [CELO_BigDecimal!]
  liquidity_not_in: [CELO_BigDecimal!]
  sender: CELO_Bytes
  sender_not: CELO_Bytes
  sender_in: [CELO_Bytes!]
  sender_not_in: [CELO_Bytes!]
  sender_contains: CELO_Bytes
  sender_not_contains: CELO_Bytes
  amount0: CELO_BigDecimal
  amount0_not: CELO_BigDecimal
  amount0_gt: CELO_BigDecimal
  amount0_lt: CELO_BigDecimal
  amount0_gte: CELO_BigDecimal
  amount0_lte: CELO_BigDecimal
  amount0_in: [CELO_BigDecimal!]
  amount0_not_in: [CELO_BigDecimal!]
  amount1: CELO_BigDecimal
  amount1_not: CELO_BigDecimal
  amount1_gt: CELO_BigDecimal
  amount1_lt: CELO_BigDecimal
  amount1_gte: CELO_BigDecimal
  amount1_lte: CELO_BigDecimal
  amount1_in: [CELO_BigDecimal!]
  amount1_not_in: [CELO_BigDecimal!]
  to: CELO_Bytes
  to_not: CELO_Bytes
  to_in: [CELO_Bytes!]
  to_not_in: [CELO_Bytes!]
  to_contains: CELO_Bytes
  to_not_contains: CELO_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: CELO_BigDecimal
  amountUSD_not: CELO_BigDecimal
  amountUSD_gt: CELO_BigDecimal
  amountUSD_lt: CELO_BigDecimal
  amountUSD_gte: CELO_BigDecimal
  amountUSD_lte: CELO_BigDecimal
  amountUSD_in: [CELO_BigDecimal!]
  amountUSD_not_in: [CELO_BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: CELO_Bytes
  feeTo_not: CELO_Bytes
  feeTo_in: [CELO_Bytes!]
  feeTo_not_in: [CELO_Bytes!]
  feeTo_contains: CELO_Bytes
  feeTo_not_contains: CELO_Bytes
  feeLiquidity: CELO_BigDecimal
  feeLiquidity_not: CELO_BigDecimal
  feeLiquidity_gt: CELO_BigDecimal
  feeLiquidity_lt: CELO_BigDecimal
  feeLiquidity_gte: CELO_BigDecimal
  feeLiquidity_lte: CELO_BigDecimal
  feeLiquidity_in: [CELO_BigDecimal!]
  feeLiquidity_not_in: [CELO_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_Burn_orderBy {
  id
  transaction
  timestamp
  pair
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

scalar CELO_Bytes

type CELO_DayData {
  id: ID!
  date: Int!
  factory: CELO_Factory!
  volumeETH: CELO_BigDecimal!
  volumeUSD: CELO_BigDecimal!
  untrackedVolume: CELO_BigDecimal!
  liquidityETH: CELO_BigDecimal!
  liquidityUSD: CELO_BigDecimal!
  txCount: BigInt!
}

input CELO_DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: CELO_BigDecimal
  volumeETH_not: CELO_BigDecimal
  volumeETH_gt: CELO_BigDecimal
  volumeETH_lt: CELO_BigDecimal
  volumeETH_gte: CELO_BigDecimal
  volumeETH_lte: CELO_BigDecimal
  volumeETH_in: [CELO_BigDecimal!]
  volumeETH_not_in: [CELO_BigDecimal!]
  volumeUSD: CELO_BigDecimal
  volumeUSD_not: CELO_BigDecimal
  volumeUSD_gt: CELO_BigDecimal
  volumeUSD_lt: CELO_BigDecimal
  volumeUSD_gte: CELO_BigDecimal
  volumeUSD_lte: CELO_BigDecimal
  volumeUSD_in: [CELO_BigDecimal!]
  volumeUSD_not_in: [CELO_BigDecimal!]
  untrackedVolume: CELO_BigDecimal
  untrackedVolume_not: CELO_BigDecimal
  untrackedVolume_gt: CELO_BigDecimal
  untrackedVolume_lt: CELO_BigDecimal
  untrackedVolume_gte: CELO_BigDecimal
  untrackedVolume_lte: CELO_BigDecimal
  untrackedVolume_in: [CELO_BigDecimal!]
  untrackedVolume_not_in: [CELO_BigDecimal!]
  liquidityETH: CELO_BigDecimal
  liquidityETH_not: CELO_BigDecimal
  liquidityETH_gt: CELO_BigDecimal
  liquidityETH_lt: CELO_BigDecimal
  liquidityETH_gte: CELO_BigDecimal
  liquidityETH_lte: CELO_BigDecimal
  liquidityETH_in: [CELO_BigDecimal!]
  liquidityETH_not_in: [CELO_BigDecimal!]
  liquidityUSD: CELO_BigDecimal
  liquidityUSD_not: CELO_BigDecimal
  liquidityUSD_gt: CELO_BigDecimal
  liquidityUSD_lt: CELO_BigDecimal
  liquidityUSD_gte: CELO_BigDecimal
  liquidityUSD_lte: CELO_BigDecimal
  liquidityUSD_in: [CELO_BigDecimal!]
  liquidityUSD_not_in: [CELO_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_DayData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type CELO_Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: CELO_BigDecimal!
  volumeETH: CELO_BigDecimal!
  untrackedVolumeUSD: CELO_BigDecimal!
  liquidityUSD: CELO_BigDecimal!
  liquidityETH: CELO_BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: CELO_Pair_orderBy, orderDirection: CELO_OrderDirection, where: CELO_Pair_filter): [CELO_Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: CELO_Token_orderBy, orderDirection: CELO_OrderDirection, where: CELO_Token_filter): [CELO_Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: CELO_HourData_orderBy, orderDirection: CELO_OrderDirection, where: CELO_HourData_filter): [CELO_HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: CELO_DayData_orderBy, orderDirection: CELO_OrderDirection, where: CELO_DayData_filter): [CELO_DayData!]!
}

input CELO_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: CELO_BigDecimal
  volumeUSD_not: CELO_BigDecimal
  volumeUSD_gt: CELO_BigDecimal
  volumeUSD_lt: CELO_BigDecimal
  volumeUSD_gte: CELO_BigDecimal
  volumeUSD_lte: CELO_BigDecimal
  volumeUSD_in: [CELO_BigDecimal!]
  volumeUSD_not_in: [CELO_BigDecimal!]
  volumeETH: CELO_BigDecimal
  volumeETH_not: CELO_BigDecimal
  volumeETH_gt: CELO_BigDecimal
  volumeETH_lt: CELO_BigDecimal
  volumeETH_gte: CELO_BigDecimal
  volumeETH_lte: CELO_BigDecimal
  volumeETH_in: [CELO_BigDecimal!]
  volumeETH_not_in: [CELO_BigDecimal!]
  untrackedVolumeUSD: CELO_BigDecimal
  untrackedVolumeUSD_not: CELO_BigDecimal
  untrackedVolumeUSD_gt: CELO_BigDecimal
  untrackedVolumeUSD_lt: CELO_BigDecimal
  untrackedVolumeUSD_gte: CELO_BigDecimal
  untrackedVolumeUSD_lte: CELO_BigDecimal
  untrackedVolumeUSD_in: [CELO_BigDecimal!]
  untrackedVolumeUSD_not_in: [CELO_BigDecimal!]
  liquidityUSD: CELO_BigDecimal
  liquidityUSD_not: CELO_BigDecimal
  liquidityUSD_gt: CELO_BigDecimal
  liquidityUSD_lt: CELO_BigDecimal
  liquidityUSD_gte: CELO_BigDecimal
  liquidityUSD_lte: CELO_BigDecimal
  liquidityUSD_in: [CELO_BigDecimal!]
  liquidityUSD_not_in: [CELO_BigDecimal!]
  liquidityETH: CELO_BigDecimal
  liquidityETH_not: CELO_BigDecimal
  liquidityETH_gt: CELO_BigDecimal
  liquidityETH_lt: CELO_BigDecimal
  liquidityETH_gte: CELO_BigDecimal
  liquidityETH_lte: CELO_BigDecimal
  liquidityETH_in: [CELO_BigDecimal!]
  liquidityETH_not_in: [CELO_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
}

type CELO_HourData {
  id: ID!
  date: Int!
  factory: CELO_Factory!
  volumeETH: CELO_BigDecimal!
  volumeUSD: CELO_BigDecimal!
  untrackedVolume: CELO_BigDecimal!
  liquidityETH: CELO_BigDecimal!
  liquidityUSD: CELO_BigDecimal!
  txCount: BigInt!
}

input CELO_HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: CELO_BigDecimal
  volumeETH_not: CELO_BigDecimal
  volumeETH_gt: CELO_BigDecimal
  volumeETH_lt: CELO_BigDecimal
  volumeETH_gte: CELO_BigDecimal
  volumeETH_lte: CELO_BigDecimal
  volumeETH_in: [CELO_BigDecimal!]
  volumeETH_not_in: [CELO_BigDecimal!]
  volumeUSD: CELO_BigDecimal
  volumeUSD_not: CELO_BigDecimal
  volumeUSD_gt: CELO_BigDecimal
  volumeUSD_lt: CELO_BigDecimal
  volumeUSD_gte: CELO_BigDecimal
  volumeUSD_lte: CELO_BigDecimal
  volumeUSD_in: [CELO_BigDecimal!]
  volumeUSD_not_in: [CELO_BigDecimal!]
  untrackedVolume: CELO_BigDecimal
  untrackedVolume_not: CELO_BigDecimal
  untrackedVolume_gt: CELO_BigDecimal
  untrackedVolume_lt: CELO_BigDecimal
  untrackedVolume_gte: CELO_BigDecimal
  untrackedVolume_lte: CELO_BigDecimal
  untrackedVolume_in: [CELO_BigDecimal!]
  untrackedVolume_not_in: [CELO_BigDecimal!]
  liquidityETH: CELO_BigDecimal
  liquidityETH_not: CELO_BigDecimal
  liquidityETH_gt: CELO_BigDecimal
  liquidityETH_lt: CELO_BigDecimal
  liquidityETH_gte: CELO_BigDecimal
  liquidityETH_lte: CELO_BigDecimal
  liquidityETH_in: [CELO_BigDecimal!]
  liquidityETH_not_in: [CELO_BigDecimal!]
  liquidityUSD: CELO_BigDecimal
  liquidityUSD_not: CELO_BigDecimal
  liquidityUSD_gt: CELO_BigDecimal
  liquidityUSD_lt: CELO_BigDecimal
  liquidityUSD_gte: CELO_BigDecimal
  liquidityUSD_lte: CELO_BigDecimal
  liquidityUSD_in: [CELO_BigDecimal!]
  liquidityUSD_not_in: [CELO_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_HourData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type CELO_LiquidityPosition {
  id: ID!
  user: CELO_User!
  pair: CELO_Pair!
  liquidityTokenBalance: CELO_BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: CELO_LiquidityPositionSnapshot_orderBy, orderDirection: CELO_OrderDirection, where: CELO_LiquidityPositionSnapshot_filter): [CELO_LiquidityPositionSnapshot]!
  block: Int!
  timestamp: Int!
}

type CELO_LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: CELO_LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: CELO_User!
  pair: CELO_Pair!
  token0PriceUSD: CELO_BigDecimal!
  token1PriceUSD: CELO_BigDecimal!
  reserve0: CELO_BigDecimal!
  reserve1: CELO_BigDecimal!
  reserveUSD: CELO_BigDecimal!
  liquidityTokenTotalSupply: CELO_BigDecimal!
  liquidityTokenBalance: CELO_BigDecimal!
}

input CELO_LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0PriceUSD: CELO_BigDecimal
  token0PriceUSD_not: CELO_BigDecimal
  token0PriceUSD_gt: CELO_BigDecimal
  token0PriceUSD_lt: CELO_BigDecimal
  token0PriceUSD_gte: CELO_BigDecimal
  token0PriceUSD_lte: CELO_BigDecimal
  token0PriceUSD_in: [CELO_BigDecimal!]
  token0PriceUSD_not_in: [CELO_BigDecimal!]
  token1PriceUSD: CELO_BigDecimal
  token1PriceUSD_not: CELO_BigDecimal
  token1PriceUSD_gt: CELO_BigDecimal
  token1PriceUSD_lt: CELO_BigDecimal
  token1PriceUSD_gte: CELO_BigDecimal
  token1PriceUSD_lte: CELO_BigDecimal
  token1PriceUSD_in: [CELO_BigDecimal!]
  token1PriceUSD_not_in: [CELO_BigDecimal!]
  reserve0: CELO_BigDecimal
  reserve0_not: CELO_BigDecimal
  reserve0_gt: CELO_BigDecimal
  reserve0_lt: CELO_BigDecimal
  reserve0_gte: CELO_BigDecimal
  reserve0_lte: CELO_BigDecimal
  reserve0_in: [CELO_BigDecimal!]
  reserve0_not_in: [CELO_BigDecimal!]
  reserve1: CELO_BigDecimal
  reserve1_not: CELO_BigDecimal
  reserve1_gt: CELO_BigDecimal
  reserve1_lt: CELO_BigDecimal
  reserve1_gte: CELO_BigDecimal
  reserve1_lte: CELO_BigDecimal
  reserve1_in: [CELO_BigDecimal!]
  reserve1_not_in: [CELO_BigDecimal!]
  reserveUSD: CELO_BigDecimal
  reserveUSD_not: CELO_BigDecimal
  reserveUSD_gt: CELO_BigDecimal
  reserveUSD_lt: CELO_BigDecimal
  reserveUSD_gte: CELO_BigDecimal
  reserveUSD_lte: CELO_BigDecimal
  reserveUSD_in: [CELO_BigDecimal!]
  reserveUSD_not_in: [CELO_BigDecimal!]
  liquidityTokenTotalSupply: CELO_BigDecimal
  liquidityTokenTotalSupply_not: CELO_BigDecimal
  liquidityTokenTotalSupply_gt: CELO_BigDecimal
  liquidityTokenTotalSupply_lt: CELO_BigDecimal
  liquidityTokenTotalSupply_gte: CELO_BigDecimal
  liquidityTokenTotalSupply_lte: CELO_BigDecimal
  liquidityTokenTotalSupply_in: [CELO_BigDecimal!]
  liquidityTokenTotalSupply_not_in: [CELO_BigDecimal!]
  liquidityTokenBalance: CELO_BigDecimal
  liquidityTokenBalance_not: CELO_BigDecimal
  liquidityTokenBalance_gt: CELO_BigDecimal
  liquidityTokenBalance_lt: CELO_BigDecimal
  liquidityTokenBalance_gte: CELO_BigDecimal
  liquidityTokenBalance_lte: CELO_BigDecimal
  liquidityTokenBalance_in: [CELO_BigDecimal!]
  liquidityTokenBalance_not_in: [CELO_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  timestamp
  block
  user
  pair
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input CELO_LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidityTokenBalance: CELO_BigDecimal
  liquidityTokenBalance_not: CELO_BigDecimal
  liquidityTokenBalance_gt: CELO_BigDecimal
  liquidityTokenBalance_lt: CELO_BigDecimal
  liquidityTokenBalance_gte: CELO_BigDecimal
  liquidityTokenBalance_lte: CELO_BigDecimal
  liquidityTokenBalance_in: [CELO_BigDecimal!]
  liquidityTokenBalance_not_in: [CELO_BigDecimal!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_LiquidityPosition_orderBy {
  id
  user
  pair
  liquidityTokenBalance
  snapshots
  block
  timestamp
}

type CELO_Mint {
  id: ID!
  transaction: CELO_Transaction!
  timestamp: BigInt!
  pair: CELO_Pair!
  to: CELO_Bytes!
  liquidity: CELO_BigDecimal!
  sender: CELO_Bytes
  amount0: CELO_BigDecimal
  amount1: CELO_BigDecimal
  logIndex: BigInt
  amountUSD: CELO_BigDecimal
  feeTo: CELO_Bytes
  feeLiquidity: CELO_BigDecimal
}

input CELO_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  to: CELO_Bytes
  to_not: CELO_Bytes
  to_in: [CELO_Bytes!]
  to_not_in: [CELO_Bytes!]
  to_contains: CELO_Bytes
  to_not_contains: CELO_Bytes
  liquidity: CELO_BigDecimal
  liquidity_not: CELO_BigDecimal
  liquidity_gt: CELO_BigDecimal
  liquidity_lt: CELO_BigDecimal
  liquidity_gte: CELO_BigDecimal
  liquidity_lte: CELO_BigDecimal
  liquidity_in: [CELO_BigDecimal!]
  liquidity_not_in: [CELO_BigDecimal!]
  sender: CELO_Bytes
  sender_not: CELO_Bytes
  sender_in: [CELO_Bytes!]
  sender_not_in: [CELO_Bytes!]
  sender_contains: CELO_Bytes
  sender_not_contains: CELO_Bytes
  amount0: CELO_BigDecimal
  amount0_not: CELO_BigDecimal
  amount0_gt: CELO_BigDecimal
  amount0_lt: CELO_BigDecimal
  amount0_gte: CELO_BigDecimal
  amount0_lte: CELO_BigDecimal
  amount0_in: [CELO_BigDecimal!]
  amount0_not_in: [CELO_BigDecimal!]
  amount1: CELO_BigDecimal
  amount1_not: CELO_BigDecimal
  amount1_gt: CELO_BigDecimal
  amount1_lt: CELO_BigDecimal
  amount1_gte: CELO_BigDecimal
  amount1_lte: CELO_BigDecimal
  amount1_in: [CELO_BigDecimal!]
  amount1_not_in: [CELO_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: CELO_BigDecimal
  amountUSD_not: CELO_BigDecimal
  amountUSD_gt: CELO_BigDecimal
  amountUSD_lt: CELO_BigDecimal
  amountUSD_gte: CELO_BigDecimal
  amountUSD_lte: CELO_BigDecimal
  amountUSD_in: [CELO_BigDecimal!]
  amountUSD_not_in: [CELO_BigDecimal!]
  feeTo: CELO_Bytes
  feeTo_not: CELO_Bytes
  feeTo_in: [CELO_Bytes!]
  feeTo_not_in: [CELO_Bytes!]
  feeTo_contains: CELO_Bytes
  feeTo_not_contains: CELO_Bytes
  feeLiquidity: CELO_BigDecimal
  feeLiquidity_not: CELO_BigDecimal
  feeLiquidity_gt: CELO_BigDecimal
  feeLiquidity_lt: CELO_BigDecimal
  feeLiquidity_gte: CELO_BigDecimal
  feeLiquidity_lte: CELO_BigDecimal
  feeLiquidity_in: [CELO_BigDecimal!]
  feeLiquidity_not_in: [CELO_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_Mint_orderBy {
  id
  transaction
  timestamp
  pair
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

"""Defines the order direction, either ascending or descending"""
enum CELO_OrderDirection {
  asc
  desc
}

type CELO_Pair {
  id: ID!
  factory: CELO_Factory!
  name: String!
  token0: CELO_Token!
  token1: CELO_Token!
  reserve0: CELO_BigDecimal!
  reserve1: CELO_BigDecimal!
  totalSupply: CELO_BigDecimal!
  reserveETH: CELO_BigDecimal!
  reserveUSD: CELO_BigDecimal!
  trackedReserveETH: CELO_BigDecimal!
  token0Price: CELO_BigDecimal!
  token1Price: CELO_BigDecimal!
  volumeToken0: CELO_BigDecimal!
  volumeToken1: CELO_BigDecimal!
  volumeUSD: CELO_BigDecimal!
  untrackedVolumeUSD: CELO_BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: CELO_LiquidityPosition_orderBy, orderDirection: CELO_OrderDirection, where: CELO_LiquidityPosition_filter): [CELO_LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: CELO_LiquidityPositionSnapshot_orderBy, orderDirection: CELO_OrderDirection, where: CELO_LiquidityPositionSnapshot_filter): [CELO_LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: CELO_PairDayData_orderBy, orderDirection: CELO_OrderDirection, where: CELO_PairDayData_filter): [CELO_PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: CELO_PairHourData_orderBy, orderDirection: CELO_OrderDirection, where: CELO_PairHourData_filter): [CELO_PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: CELO_Mint_orderBy, orderDirection: CELO_OrderDirection, where: CELO_Mint_filter): [CELO_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: CELO_Burn_orderBy, orderDirection: CELO_OrderDirection, where: CELO_Burn_filter): [CELO_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: CELO_Swap_orderBy, orderDirection: CELO_OrderDirection, where: CELO_Swap_filter): [CELO_Swap!]!
  timestamp: BigInt!
  block: BigInt!
}

type CELO_PairDayData {
  id: ID!
  date: Int!
  pair: CELO_Pair!
  token0: CELO_Token!
  token1: CELO_Token!
  reserve0: CELO_BigDecimal!
  reserve1: CELO_BigDecimal!
  totalSupply: CELO_BigDecimal!
  reserveUSD: CELO_BigDecimal!
  volumeToken0: CELO_BigDecimal!
  volumeToken1: CELO_BigDecimal!
  volumeUSD: CELO_BigDecimal!
  txCount: BigInt!
}

input CELO_PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: CELO_BigDecimal
  reserve0_not: CELO_BigDecimal
  reserve0_gt: CELO_BigDecimal
  reserve0_lt: CELO_BigDecimal
  reserve0_gte: CELO_BigDecimal
  reserve0_lte: CELO_BigDecimal
  reserve0_in: [CELO_BigDecimal!]
  reserve0_not_in: [CELO_BigDecimal!]
  reserve1: CELO_BigDecimal
  reserve1_not: CELO_BigDecimal
  reserve1_gt: CELO_BigDecimal
  reserve1_lt: CELO_BigDecimal
  reserve1_gte: CELO_BigDecimal
  reserve1_lte: CELO_BigDecimal
  reserve1_in: [CELO_BigDecimal!]
  reserve1_not_in: [CELO_BigDecimal!]
  totalSupply: CELO_BigDecimal
  totalSupply_not: CELO_BigDecimal
  totalSupply_gt: CELO_BigDecimal
  totalSupply_lt: CELO_BigDecimal
  totalSupply_gte: CELO_BigDecimal
  totalSupply_lte: CELO_BigDecimal
  totalSupply_in: [CELO_BigDecimal!]
  totalSupply_not_in: [CELO_BigDecimal!]
  reserveUSD: CELO_BigDecimal
  reserveUSD_not: CELO_BigDecimal
  reserveUSD_gt: CELO_BigDecimal
  reserveUSD_lt: CELO_BigDecimal
  reserveUSD_gte: CELO_BigDecimal
  reserveUSD_lte: CELO_BigDecimal
  reserveUSD_in: [CELO_BigDecimal!]
  reserveUSD_not_in: [CELO_BigDecimal!]
  volumeToken0: CELO_BigDecimal
  volumeToken0_not: CELO_BigDecimal
  volumeToken0_gt: CELO_BigDecimal
  volumeToken0_lt: CELO_BigDecimal
  volumeToken0_gte: CELO_BigDecimal
  volumeToken0_lte: CELO_BigDecimal
  volumeToken0_in: [CELO_BigDecimal!]
  volumeToken0_not_in: [CELO_BigDecimal!]
  volumeToken1: CELO_BigDecimal
  volumeToken1_not: CELO_BigDecimal
  volumeToken1_gt: CELO_BigDecimal
  volumeToken1_lt: CELO_BigDecimal
  volumeToken1_gte: CELO_BigDecimal
  volumeToken1_lte: CELO_BigDecimal
  volumeToken1_in: [CELO_BigDecimal!]
  volumeToken1_not_in: [CELO_BigDecimal!]
  volumeUSD: CELO_BigDecimal
  volumeUSD_not: CELO_BigDecimal
  volumeUSD_gt: CELO_BigDecimal
  volumeUSD_lt: CELO_BigDecimal
  volumeUSD_gte: CELO_BigDecimal
  volumeUSD_lte: CELO_BigDecimal
  volumeUSD_in: [CELO_BigDecimal!]
  volumeUSD_not_in: [CELO_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_PairDayData_orderBy {
  id
  date
  pair
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

type CELO_PairHourData {
  id: ID!
  date: Int!
  pair: CELO_Pair!
  reserve0: CELO_BigDecimal!
  reserve1: CELO_BigDecimal!
  reserveUSD: CELO_BigDecimal!
  volumeToken0: CELO_BigDecimal!
  volumeToken1: CELO_BigDecimal!
  volumeUSD: CELO_BigDecimal!
  txCount: BigInt!
}

input CELO_PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  reserve0: CELO_BigDecimal
  reserve0_not: CELO_BigDecimal
  reserve0_gt: CELO_BigDecimal
  reserve0_lt: CELO_BigDecimal
  reserve0_gte: CELO_BigDecimal
  reserve0_lte: CELO_BigDecimal
  reserve0_in: [CELO_BigDecimal!]
  reserve0_not_in: [CELO_BigDecimal!]
  reserve1: CELO_BigDecimal
  reserve1_not: CELO_BigDecimal
  reserve1_gt: CELO_BigDecimal
  reserve1_lt: CELO_BigDecimal
  reserve1_gte: CELO_BigDecimal
  reserve1_lte: CELO_BigDecimal
  reserve1_in: [CELO_BigDecimal!]
  reserve1_not_in: [CELO_BigDecimal!]
  reserveUSD: CELO_BigDecimal
  reserveUSD_not: CELO_BigDecimal
  reserveUSD_gt: CELO_BigDecimal
  reserveUSD_lt: CELO_BigDecimal
  reserveUSD_gte: CELO_BigDecimal
  reserveUSD_lte: CELO_BigDecimal
  reserveUSD_in: [CELO_BigDecimal!]
  reserveUSD_not_in: [CELO_BigDecimal!]
  volumeToken0: CELO_BigDecimal
  volumeToken0_not: CELO_BigDecimal
  volumeToken0_gt: CELO_BigDecimal
  volumeToken0_lt: CELO_BigDecimal
  volumeToken0_gte: CELO_BigDecimal
  volumeToken0_lte: CELO_BigDecimal
  volumeToken0_in: [CELO_BigDecimal!]
  volumeToken0_not_in: [CELO_BigDecimal!]
  volumeToken1: CELO_BigDecimal
  volumeToken1_not: CELO_BigDecimal
  volumeToken1_gt: CELO_BigDecimal
  volumeToken1_lt: CELO_BigDecimal
  volumeToken1_gte: CELO_BigDecimal
  volumeToken1_lte: CELO_BigDecimal
  volumeToken1_in: [CELO_BigDecimal!]
  volumeToken1_not_in: [CELO_BigDecimal!]
  volumeUSD: CELO_BigDecimal
  volumeUSD_not: CELO_BigDecimal
  volumeUSD_gt: CELO_BigDecimal
  volumeUSD_lt: CELO_BigDecimal
  volumeUSD_gte: CELO_BigDecimal
  volumeUSD_lte: CELO_BigDecimal
  volumeUSD_in: [CELO_BigDecimal!]
  volumeUSD_not_in: [CELO_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_PairHourData_orderBy {
  id
  date
  pair
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

input CELO_Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: CELO_BigDecimal
  reserve0_not: CELO_BigDecimal
  reserve0_gt: CELO_BigDecimal
  reserve0_lt: CELO_BigDecimal
  reserve0_gte: CELO_BigDecimal
  reserve0_lte: CELO_BigDecimal
  reserve0_in: [CELO_BigDecimal!]
  reserve0_not_in: [CELO_BigDecimal!]
  reserve1: CELO_BigDecimal
  reserve1_not: CELO_BigDecimal
  reserve1_gt: CELO_BigDecimal
  reserve1_lt: CELO_BigDecimal
  reserve1_gte: CELO_BigDecimal
  reserve1_lte: CELO_BigDecimal
  reserve1_in: [CELO_BigDecimal!]
  reserve1_not_in: [CELO_BigDecimal!]
  totalSupply: CELO_BigDecimal
  totalSupply_not: CELO_BigDecimal
  totalSupply_gt: CELO_BigDecimal
  totalSupply_lt: CELO_BigDecimal
  totalSupply_gte: CELO_BigDecimal
  totalSupply_lte: CELO_BigDecimal
  totalSupply_in: [CELO_BigDecimal!]
  totalSupply_not_in: [CELO_BigDecimal!]
  reserveETH: CELO_BigDecimal
  reserveETH_not: CELO_BigDecimal
  reserveETH_gt: CELO_BigDecimal
  reserveETH_lt: CELO_BigDecimal
  reserveETH_gte: CELO_BigDecimal
  reserveETH_lte: CELO_BigDecimal
  reserveETH_in: [CELO_BigDecimal!]
  reserveETH_not_in: [CELO_BigDecimal!]
  reserveUSD: CELO_BigDecimal
  reserveUSD_not: CELO_BigDecimal
  reserveUSD_gt: CELO_BigDecimal
  reserveUSD_lt: CELO_BigDecimal
  reserveUSD_gte: CELO_BigDecimal
  reserveUSD_lte: CELO_BigDecimal
  reserveUSD_in: [CELO_BigDecimal!]
  reserveUSD_not_in: [CELO_BigDecimal!]
  trackedReserveETH: CELO_BigDecimal
  trackedReserveETH_not: CELO_BigDecimal
  trackedReserveETH_gt: CELO_BigDecimal
  trackedReserveETH_lt: CELO_BigDecimal
  trackedReserveETH_gte: CELO_BigDecimal
  trackedReserveETH_lte: CELO_BigDecimal
  trackedReserveETH_in: [CELO_BigDecimal!]
  trackedReserveETH_not_in: [CELO_BigDecimal!]
  token0Price: CELO_BigDecimal
  token0Price_not: CELO_BigDecimal
  token0Price_gt: CELO_BigDecimal
  token0Price_lt: CELO_BigDecimal
  token0Price_gte: CELO_BigDecimal
  token0Price_lte: CELO_BigDecimal
  token0Price_in: [CELO_BigDecimal!]
  token0Price_not_in: [CELO_BigDecimal!]
  token1Price: CELO_BigDecimal
  token1Price_not: CELO_BigDecimal
  token1Price_gt: CELO_BigDecimal
  token1Price_lt: CELO_BigDecimal
  token1Price_gte: CELO_BigDecimal
  token1Price_lte: CELO_BigDecimal
  token1Price_in: [CELO_BigDecimal!]
  token1Price_not_in: [CELO_BigDecimal!]
  volumeToken0: CELO_BigDecimal
  volumeToken0_not: CELO_BigDecimal
  volumeToken0_gt: CELO_BigDecimal
  volumeToken0_lt: CELO_BigDecimal
  volumeToken0_gte: CELO_BigDecimal
  volumeToken0_lte: CELO_BigDecimal
  volumeToken0_in: [CELO_BigDecimal!]
  volumeToken0_not_in: [CELO_BigDecimal!]
  volumeToken1: CELO_BigDecimal
  volumeToken1_not: CELO_BigDecimal
  volumeToken1_gt: CELO_BigDecimal
  volumeToken1_lt: CELO_BigDecimal
  volumeToken1_gte: CELO_BigDecimal
  volumeToken1_lte: CELO_BigDecimal
  volumeToken1_in: [CELO_BigDecimal!]
  volumeToken1_not_in: [CELO_BigDecimal!]
  volumeUSD: CELO_BigDecimal
  volumeUSD_not: CELO_BigDecimal
  volumeUSD_gt: CELO_BigDecimal
  volumeUSD_lt: CELO_BigDecimal
  volumeUSD_gte: CELO_BigDecimal
  volumeUSD_lte: CELO_BigDecimal
  volumeUSD_in: [CELO_BigDecimal!]
  volumeUSD_not_in: [CELO_BigDecimal!]
  untrackedVolumeUSD: CELO_BigDecimal
  untrackedVolumeUSD_not: CELO_BigDecimal
  untrackedVolumeUSD_gt: CELO_BigDecimal
  untrackedVolumeUSD_lt: CELO_BigDecimal
  untrackedVolumeUSD_gte: CELO_BigDecimal
  untrackedVolumeUSD_lte: CELO_BigDecimal
  untrackedVolumeUSD_in: [CELO_BigDecimal!]
  untrackedVolumeUSD_not_in: [CELO_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_Pair_orderBy {
  id
  factory
  name
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
}

type CELO_Swap {
  id: ID!
  transaction: CELO_Transaction!
  timestamp: BigInt!
  pair: CELO_Pair!
  sender: CELO_Bytes!
  amount0In: CELO_BigDecimal!
  amount1In: CELO_BigDecimal!
  amount0Out: CELO_BigDecimal!
  amount1Out: CELO_BigDecimal!
  to: CELO_Bytes!
  logIndex: BigInt
  amountUSD: CELO_BigDecimal!
}

input CELO_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  sender: CELO_Bytes
  sender_not: CELO_Bytes
  sender_in: [CELO_Bytes!]
  sender_not_in: [CELO_Bytes!]
  sender_contains: CELO_Bytes
  sender_not_contains: CELO_Bytes
  amount0In: CELO_BigDecimal
  amount0In_not: CELO_BigDecimal
  amount0In_gt: CELO_BigDecimal
  amount0In_lt: CELO_BigDecimal
  amount0In_gte: CELO_BigDecimal
  amount0In_lte: CELO_BigDecimal
  amount0In_in: [CELO_BigDecimal!]
  amount0In_not_in: [CELO_BigDecimal!]
  amount1In: CELO_BigDecimal
  amount1In_not: CELO_BigDecimal
  amount1In_gt: CELO_BigDecimal
  amount1In_lt: CELO_BigDecimal
  amount1In_gte: CELO_BigDecimal
  amount1In_lte: CELO_BigDecimal
  amount1In_in: [CELO_BigDecimal!]
  amount1In_not_in: [CELO_BigDecimal!]
  amount0Out: CELO_BigDecimal
  amount0Out_not: CELO_BigDecimal
  amount0Out_gt: CELO_BigDecimal
  amount0Out_lt: CELO_BigDecimal
  amount0Out_gte: CELO_BigDecimal
  amount0Out_lte: CELO_BigDecimal
  amount0Out_in: [CELO_BigDecimal!]
  amount0Out_not_in: [CELO_BigDecimal!]
  amount1Out: CELO_BigDecimal
  amount1Out_not: CELO_BigDecimal
  amount1Out_gt: CELO_BigDecimal
  amount1Out_lt: CELO_BigDecimal
  amount1Out_gte: CELO_BigDecimal
  amount1Out_lte: CELO_BigDecimal
  amount1Out_in: [CELO_BigDecimal!]
  amount1Out_not_in: [CELO_BigDecimal!]
  to: CELO_Bytes
  to_not: CELO_Bytes
  to_in: [CELO_Bytes!]
  to_not_in: [CELO_Bytes!]
  to_contains: CELO_Bytes
  to_not_contains: CELO_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: CELO_BigDecimal
  amountUSD_not: CELO_BigDecimal
  amountUSD_gt: CELO_BigDecimal
  amountUSD_lt: CELO_BigDecimal
  amountUSD_gte: CELO_BigDecimal
  amountUSD_lte: CELO_BigDecimal
  amountUSD_in: [CELO_BigDecimal!]
  amountUSD_not_in: [CELO_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_Swap_orderBy {
  id
  transaction
  timestamp
  pair
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
}

type CELO_Token {
  id: ID!
  factory: CELO_Factory!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: CELO_BigDecimal!
  volumeUSD: CELO_BigDecimal!
  untrackedVolumeUSD: CELO_BigDecimal!
  txCount: BigInt!
  liquidity: CELO_BigDecimal!
  derivedETH: CELO_BigDecimal!
  whitelistPairs(skip: Int = 0, first: Int = 100, orderBy: CELO_Pair_orderBy, orderDirection: CELO_OrderDirection, where: CELO_Pair_filter): [CELO_Pair!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: CELO_TokenHourData_orderBy, orderDirection: CELO_OrderDirection, where: CELO_TokenHourData_filter): [CELO_TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: CELO_TokenDayData_orderBy, orderDirection: CELO_OrderDirection, where: CELO_TokenDayData_filter): [CELO_TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: CELO_Pair_orderBy, orderDirection: CELO_OrderDirection, where: CELO_Pair_filter): [CELO_Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: CELO_Pair_orderBy, orderDirection: CELO_OrderDirection, where: CELO_Pair_filter): [CELO_Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: CELO_PairDayData_orderBy, orderDirection: CELO_OrderDirection, where: CELO_PairDayData_filter): [CELO_PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: CELO_PairDayData_orderBy, orderDirection: CELO_OrderDirection, where: CELO_PairDayData_filter): [CELO_PairDayData!]!
}

type CELO_TokenDayData {
  id: ID!
  date: Int!
  token: CELO_Token!
  volume: CELO_BigDecimal!
  volumeETH: CELO_BigDecimal!
  volumeUSD: CELO_BigDecimal!
  txCount: BigInt!
  liquidity: CELO_BigDecimal!
  liquidityETH: CELO_BigDecimal!
  liquidityUSD: CELO_BigDecimal!
  priceUSD: CELO_BigDecimal!
}

input CELO_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: CELO_BigDecimal
  volume_not: CELO_BigDecimal
  volume_gt: CELO_BigDecimal
  volume_lt: CELO_BigDecimal
  volume_gte: CELO_BigDecimal
  volume_lte: CELO_BigDecimal
  volume_in: [CELO_BigDecimal!]
  volume_not_in: [CELO_BigDecimal!]
  volumeETH: CELO_BigDecimal
  volumeETH_not: CELO_BigDecimal
  volumeETH_gt: CELO_BigDecimal
  volumeETH_lt: CELO_BigDecimal
  volumeETH_gte: CELO_BigDecimal
  volumeETH_lte: CELO_BigDecimal
  volumeETH_in: [CELO_BigDecimal!]
  volumeETH_not_in: [CELO_BigDecimal!]
  volumeUSD: CELO_BigDecimal
  volumeUSD_not: CELO_BigDecimal
  volumeUSD_gt: CELO_BigDecimal
  volumeUSD_lt: CELO_BigDecimal
  volumeUSD_gte: CELO_BigDecimal
  volumeUSD_lte: CELO_BigDecimal
  volumeUSD_in: [CELO_BigDecimal!]
  volumeUSD_not_in: [CELO_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: CELO_BigDecimal
  liquidity_not: CELO_BigDecimal
  liquidity_gt: CELO_BigDecimal
  liquidity_lt: CELO_BigDecimal
  liquidity_gte: CELO_BigDecimal
  liquidity_lte: CELO_BigDecimal
  liquidity_in: [CELO_BigDecimal!]
  liquidity_not_in: [CELO_BigDecimal!]
  liquidityETH: CELO_BigDecimal
  liquidityETH_not: CELO_BigDecimal
  liquidityETH_gt: CELO_BigDecimal
  liquidityETH_lt: CELO_BigDecimal
  liquidityETH_gte: CELO_BigDecimal
  liquidityETH_lte: CELO_BigDecimal
  liquidityETH_in: [CELO_BigDecimal!]
  liquidityETH_not_in: [CELO_BigDecimal!]
  liquidityUSD: CELO_BigDecimal
  liquidityUSD_not: CELO_BigDecimal
  liquidityUSD_gt: CELO_BigDecimal
  liquidityUSD_lt: CELO_BigDecimal
  liquidityUSD_gte: CELO_BigDecimal
  liquidityUSD_lte: CELO_BigDecimal
  liquidityUSD_in: [CELO_BigDecimal!]
  liquidityUSD_not_in: [CELO_BigDecimal!]
  priceUSD: CELO_BigDecimal
  priceUSD_not: CELO_BigDecimal
  priceUSD_gt: CELO_BigDecimal
  priceUSD_lt: CELO_BigDecimal
  priceUSD_gte: CELO_BigDecimal
  priceUSD_lte: CELO_BigDecimal
  priceUSD_in: [CELO_BigDecimal!]
  priceUSD_not_in: [CELO_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_TokenDayData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

type CELO_TokenHourData {
  id: ID!
  date: Int!
  token: CELO_Token!
  volume: CELO_BigDecimal!
  volumeETH: CELO_BigDecimal!
  volumeUSD: CELO_BigDecimal!
  txCount: BigInt!
  liquidity: CELO_BigDecimal!
  liquidityETH: CELO_BigDecimal!
  liquidityUSD: CELO_BigDecimal!
  priceUSD: CELO_BigDecimal!
}

input CELO_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: CELO_BigDecimal
  volume_not: CELO_BigDecimal
  volume_gt: CELO_BigDecimal
  volume_lt: CELO_BigDecimal
  volume_gte: CELO_BigDecimal
  volume_lte: CELO_BigDecimal
  volume_in: [CELO_BigDecimal!]
  volume_not_in: [CELO_BigDecimal!]
  volumeETH: CELO_BigDecimal
  volumeETH_not: CELO_BigDecimal
  volumeETH_gt: CELO_BigDecimal
  volumeETH_lt: CELO_BigDecimal
  volumeETH_gte: CELO_BigDecimal
  volumeETH_lte: CELO_BigDecimal
  volumeETH_in: [CELO_BigDecimal!]
  volumeETH_not_in: [CELO_BigDecimal!]
  volumeUSD: CELO_BigDecimal
  volumeUSD_not: CELO_BigDecimal
  volumeUSD_gt: CELO_BigDecimal
  volumeUSD_lt: CELO_BigDecimal
  volumeUSD_gte: CELO_BigDecimal
  volumeUSD_lte: CELO_BigDecimal
  volumeUSD_in: [CELO_BigDecimal!]
  volumeUSD_not_in: [CELO_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: CELO_BigDecimal
  liquidity_not: CELO_BigDecimal
  liquidity_gt: CELO_BigDecimal
  liquidity_lt: CELO_BigDecimal
  liquidity_gte: CELO_BigDecimal
  liquidity_lte: CELO_BigDecimal
  liquidity_in: [CELO_BigDecimal!]
  liquidity_not_in: [CELO_BigDecimal!]
  liquidityETH: CELO_BigDecimal
  liquidityETH_not: CELO_BigDecimal
  liquidityETH_gt: CELO_BigDecimal
  liquidityETH_lt: CELO_BigDecimal
  liquidityETH_gte: CELO_BigDecimal
  liquidityETH_lte: CELO_BigDecimal
  liquidityETH_in: [CELO_BigDecimal!]
  liquidityETH_not_in: [CELO_BigDecimal!]
  liquidityUSD: CELO_BigDecimal
  liquidityUSD_not: CELO_BigDecimal
  liquidityUSD_gt: CELO_BigDecimal
  liquidityUSD_lt: CELO_BigDecimal
  liquidityUSD_gte: CELO_BigDecimal
  liquidityUSD_lte: CELO_BigDecimal
  liquidityUSD_in: [CELO_BigDecimal!]
  liquidityUSD_not_in: [CELO_BigDecimal!]
  priceUSD: CELO_BigDecimal
  priceUSD_not: CELO_BigDecimal
  priceUSD_gt: CELO_BigDecimal
  priceUSD_lt: CELO_BigDecimal
  priceUSD_gte: CELO_BigDecimal
  priceUSD_lte: CELO_BigDecimal
  priceUSD_in: [CELO_BigDecimal!]
  priceUSD_not_in: [CELO_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_TokenHourData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

input CELO_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: CELO_BigDecimal
  volume_not: CELO_BigDecimal
  volume_gt: CELO_BigDecimal
  volume_lt: CELO_BigDecimal
  volume_gte: CELO_BigDecimal
  volume_lte: CELO_BigDecimal
  volume_in: [CELO_BigDecimal!]
  volume_not_in: [CELO_BigDecimal!]
  volumeUSD: CELO_BigDecimal
  volumeUSD_not: CELO_BigDecimal
  volumeUSD_gt: CELO_BigDecimal
  volumeUSD_lt: CELO_BigDecimal
  volumeUSD_gte: CELO_BigDecimal
  volumeUSD_lte: CELO_BigDecimal
  volumeUSD_in: [CELO_BigDecimal!]
  volumeUSD_not_in: [CELO_BigDecimal!]
  untrackedVolumeUSD: CELO_BigDecimal
  untrackedVolumeUSD_not: CELO_BigDecimal
  untrackedVolumeUSD_gt: CELO_BigDecimal
  untrackedVolumeUSD_lt: CELO_BigDecimal
  untrackedVolumeUSD_gte: CELO_BigDecimal
  untrackedVolumeUSD_lte: CELO_BigDecimal
  untrackedVolumeUSD_in: [CELO_BigDecimal!]
  untrackedVolumeUSD_not_in: [CELO_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: CELO_BigDecimal
  liquidity_not: CELO_BigDecimal
  liquidity_gt: CELO_BigDecimal
  liquidity_lt: CELO_BigDecimal
  liquidity_gte: CELO_BigDecimal
  liquidity_lte: CELO_BigDecimal
  liquidity_in: [CELO_BigDecimal!]
  liquidity_not_in: [CELO_BigDecimal!]
  derivedETH: CELO_BigDecimal
  derivedETH_not: CELO_BigDecimal
  derivedETH_gt: CELO_BigDecimal
  derivedETH_lt: CELO_BigDecimal
  derivedETH_gte: CELO_BigDecimal
  derivedETH_lte: CELO_BigDecimal
  derivedETH_in: [CELO_BigDecimal!]
  derivedETH_not_in: [CELO_BigDecimal!]
  whitelistPairs: [String!]
  whitelistPairs_not: [String!]
  whitelistPairs_contains: [String!]
  whitelistPairs_contains_nocase: [String!]
  whitelistPairs_not_contains: [String!]
  whitelistPairs_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_Token_orderBy {
  id
  factory
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  whitelistPairs
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
}

type CELO_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: CELO_Mint_orderBy, orderDirection: CELO_OrderDirection, where: CELO_Mint_filter): [CELO_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: CELO_Burn_orderBy, orderDirection: CELO_OrderDirection, where: CELO_Burn_filter): [CELO_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: CELO_Swap_orderBy, orderDirection: CELO_OrderDirection, where: CELO_Swap_filter): [CELO_Swap]!
}

input CELO_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
}

type CELO_User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: CELO_LiquidityPosition_orderBy, orderDirection: CELO_OrderDirection, where: CELO_LiquidityPosition_filter): [CELO_LiquidityPosition!]!
}

input CELO_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]

  """Filter for the block changed event."""
  _change_block: CELO_BlockChangedFilter
}

enum CELO_User_orderBy {
  id
  liquidityPositions
}

type CELO__Block_ {
  """The hash of the block"""
  hash: CELO_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type CELO__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: CELO__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar MATIC_BigDecimal

input MATIC_BlockChangedFilter {
  number_gte: Int!
}

input MATIC_Block_height {
  hash: MATIC_Bytes
  number: Int
  number_gte: Int
}

type MATIC_Bundle {
  id: ID!
  ethPrice: MATIC_BigDecimal!
}

input MATIC_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: MATIC_BigDecimal
  ethPrice_not: MATIC_BigDecimal
  ethPrice_gt: MATIC_BigDecimal
  ethPrice_lt: MATIC_BigDecimal
  ethPrice_gte: MATIC_BigDecimal
  ethPrice_lte: MATIC_BigDecimal
  ethPrice_in: [MATIC_BigDecimal!]
  ethPrice_not_in: [MATIC_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_Bundle_orderBy {
  id
  ethPrice
}

type MATIC_Burn {
  id: ID!
  transaction: MATIC_Transaction!
  timestamp: BigInt!
  pair: MATIC_Pair!
  liquidity: MATIC_BigDecimal!
  sender: MATIC_Bytes
  amount0: MATIC_BigDecimal
  amount1: MATIC_BigDecimal
  to: MATIC_Bytes
  logIndex: BigInt
  amountUSD: MATIC_BigDecimal
  complete: Boolean!
  feeTo: MATIC_Bytes
  feeLiquidity: MATIC_BigDecimal
}

input MATIC_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidity: MATIC_BigDecimal
  liquidity_not: MATIC_BigDecimal
  liquidity_gt: MATIC_BigDecimal
  liquidity_lt: MATIC_BigDecimal
  liquidity_gte: MATIC_BigDecimal
  liquidity_lte: MATIC_BigDecimal
  liquidity_in: [MATIC_BigDecimal!]
  liquidity_not_in: [MATIC_BigDecimal!]
  sender: MATIC_Bytes
  sender_not: MATIC_Bytes
  sender_in: [MATIC_Bytes!]
  sender_not_in: [MATIC_Bytes!]
  sender_contains: MATIC_Bytes
  sender_not_contains: MATIC_Bytes
  amount0: MATIC_BigDecimal
  amount0_not: MATIC_BigDecimal
  amount0_gt: MATIC_BigDecimal
  amount0_lt: MATIC_BigDecimal
  amount0_gte: MATIC_BigDecimal
  amount0_lte: MATIC_BigDecimal
  amount0_in: [MATIC_BigDecimal!]
  amount0_not_in: [MATIC_BigDecimal!]
  amount1: MATIC_BigDecimal
  amount1_not: MATIC_BigDecimal
  amount1_gt: MATIC_BigDecimal
  amount1_lt: MATIC_BigDecimal
  amount1_gte: MATIC_BigDecimal
  amount1_lte: MATIC_BigDecimal
  amount1_in: [MATIC_BigDecimal!]
  amount1_not_in: [MATIC_BigDecimal!]
  to: MATIC_Bytes
  to_not: MATIC_Bytes
  to_in: [MATIC_Bytes!]
  to_not_in: [MATIC_Bytes!]
  to_contains: MATIC_Bytes
  to_not_contains: MATIC_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: MATIC_BigDecimal
  amountUSD_not: MATIC_BigDecimal
  amountUSD_gt: MATIC_BigDecimal
  amountUSD_lt: MATIC_BigDecimal
  amountUSD_gte: MATIC_BigDecimal
  amountUSD_lte: MATIC_BigDecimal
  amountUSD_in: [MATIC_BigDecimal!]
  amountUSD_not_in: [MATIC_BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: MATIC_Bytes
  feeTo_not: MATIC_Bytes
  feeTo_in: [MATIC_Bytes!]
  feeTo_not_in: [MATIC_Bytes!]
  feeTo_contains: MATIC_Bytes
  feeTo_not_contains: MATIC_Bytes
  feeLiquidity: MATIC_BigDecimal
  feeLiquidity_not: MATIC_BigDecimal
  feeLiquidity_gt: MATIC_BigDecimal
  feeLiquidity_lt: MATIC_BigDecimal
  feeLiquidity_gte: MATIC_BigDecimal
  feeLiquidity_lte: MATIC_BigDecimal
  feeLiquidity_in: [MATIC_BigDecimal!]
  feeLiquidity_not_in: [MATIC_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_Burn_orderBy {
  id
  transaction
  timestamp
  pair
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

scalar MATIC_Bytes

type MATIC_DayData {
  id: ID!
  date: Int!
  factory: MATIC_Factory!
  volumeETH: MATIC_BigDecimal!
  volumeUSD: MATIC_BigDecimal!
  untrackedVolume: MATIC_BigDecimal!
  liquidityETH: MATIC_BigDecimal!
  liquidityUSD: MATIC_BigDecimal!
  txCount: BigInt!
}

input MATIC_DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: MATIC_BigDecimal
  volumeETH_not: MATIC_BigDecimal
  volumeETH_gt: MATIC_BigDecimal
  volumeETH_lt: MATIC_BigDecimal
  volumeETH_gte: MATIC_BigDecimal
  volumeETH_lte: MATIC_BigDecimal
  volumeETH_in: [MATIC_BigDecimal!]
  volumeETH_not_in: [MATIC_BigDecimal!]
  volumeUSD: MATIC_BigDecimal
  volumeUSD_not: MATIC_BigDecimal
  volumeUSD_gt: MATIC_BigDecimal
  volumeUSD_lt: MATIC_BigDecimal
  volumeUSD_gte: MATIC_BigDecimal
  volumeUSD_lte: MATIC_BigDecimal
  volumeUSD_in: [MATIC_BigDecimal!]
  volumeUSD_not_in: [MATIC_BigDecimal!]
  untrackedVolume: MATIC_BigDecimal
  untrackedVolume_not: MATIC_BigDecimal
  untrackedVolume_gt: MATIC_BigDecimal
  untrackedVolume_lt: MATIC_BigDecimal
  untrackedVolume_gte: MATIC_BigDecimal
  untrackedVolume_lte: MATIC_BigDecimal
  untrackedVolume_in: [MATIC_BigDecimal!]
  untrackedVolume_not_in: [MATIC_BigDecimal!]
  liquidityETH: MATIC_BigDecimal
  liquidityETH_not: MATIC_BigDecimal
  liquidityETH_gt: MATIC_BigDecimal
  liquidityETH_lt: MATIC_BigDecimal
  liquidityETH_gte: MATIC_BigDecimal
  liquidityETH_lte: MATIC_BigDecimal
  liquidityETH_in: [MATIC_BigDecimal!]
  liquidityETH_not_in: [MATIC_BigDecimal!]
  liquidityUSD: MATIC_BigDecimal
  liquidityUSD_not: MATIC_BigDecimal
  liquidityUSD_gt: MATIC_BigDecimal
  liquidityUSD_lt: MATIC_BigDecimal
  liquidityUSD_gte: MATIC_BigDecimal
  liquidityUSD_lte: MATIC_BigDecimal
  liquidityUSD_in: [MATIC_BigDecimal!]
  liquidityUSD_not_in: [MATIC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_DayData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type MATIC_Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: MATIC_BigDecimal!
  volumeETH: MATIC_BigDecimal!
  untrackedVolumeUSD: MATIC_BigDecimal!
  liquidityUSD: MATIC_BigDecimal!
  liquidityETH: MATIC_BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: MATIC_Pair_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_Pair_filter): [MATIC_Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: MATIC_Token_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_Token_filter): [MATIC_Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: MATIC_HourData_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_HourData_filter): [MATIC_HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: MATIC_DayData_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_DayData_filter): [MATIC_DayData!]!
}

input MATIC_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: MATIC_BigDecimal
  volumeUSD_not: MATIC_BigDecimal
  volumeUSD_gt: MATIC_BigDecimal
  volumeUSD_lt: MATIC_BigDecimal
  volumeUSD_gte: MATIC_BigDecimal
  volumeUSD_lte: MATIC_BigDecimal
  volumeUSD_in: [MATIC_BigDecimal!]
  volumeUSD_not_in: [MATIC_BigDecimal!]
  volumeETH: MATIC_BigDecimal
  volumeETH_not: MATIC_BigDecimal
  volumeETH_gt: MATIC_BigDecimal
  volumeETH_lt: MATIC_BigDecimal
  volumeETH_gte: MATIC_BigDecimal
  volumeETH_lte: MATIC_BigDecimal
  volumeETH_in: [MATIC_BigDecimal!]
  volumeETH_not_in: [MATIC_BigDecimal!]
  untrackedVolumeUSD: MATIC_BigDecimal
  untrackedVolumeUSD_not: MATIC_BigDecimal
  untrackedVolumeUSD_gt: MATIC_BigDecimal
  untrackedVolumeUSD_lt: MATIC_BigDecimal
  untrackedVolumeUSD_gte: MATIC_BigDecimal
  untrackedVolumeUSD_lte: MATIC_BigDecimal
  untrackedVolumeUSD_in: [MATIC_BigDecimal!]
  untrackedVolumeUSD_not_in: [MATIC_BigDecimal!]
  liquidityUSD: MATIC_BigDecimal
  liquidityUSD_not: MATIC_BigDecimal
  liquidityUSD_gt: MATIC_BigDecimal
  liquidityUSD_lt: MATIC_BigDecimal
  liquidityUSD_gte: MATIC_BigDecimal
  liquidityUSD_lte: MATIC_BigDecimal
  liquidityUSD_in: [MATIC_BigDecimal!]
  liquidityUSD_not_in: [MATIC_BigDecimal!]
  liquidityETH: MATIC_BigDecimal
  liquidityETH_not: MATIC_BigDecimal
  liquidityETH_gt: MATIC_BigDecimal
  liquidityETH_lt: MATIC_BigDecimal
  liquidityETH_gte: MATIC_BigDecimal
  liquidityETH_lte: MATIC_BigDecimal
  liquidityETH_in: [MATIC_BigDecimal!]
  liquidityETH_not_in: [MATIC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
}

type MATIC_HourData {
  id: ID!
  date: Int!
  factory: MATIC_Factory!
  volumeETH: MATIC_BigDecimal!
  volumeUSD: MATIC_BigDecimal!
  untrackedVolume: MATIC_BigDecimal!
  liquidityETH: MATIC_BigDecimal!
  liquidityUSD: MATIC_BigDecimal!
  txCount: BigInt!
}

input MATIC_HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: MATIC_BigDecimal
  volumeETH_not: MATIC_BigDecimal
  volumeETH_gt: MATIC_BigDecimal
  volumeETH_lt: MATIC_BigDecimal
  volumeETH_gte: MATIC_BigDecimal
  volumeETH_lte: MATIC_BigDecimal
  volumeETH_in: [MATIC_BigDecimal!]
  volumeETH_not_in: [MATIC_BigDecimal!]
  volumeUSD: MATIC_BigDecimal
  volumeUSD_not: MATIC_BigDecimal
  volumeUSD_gt: MATIC_BigDecimal
  volumeUSD_lt: MATIC_BigDecimal
  volumeUSD_gte: MATIC_BigDecimal
  volumeUSD_lte: MATIC_BigDecimal
  volumeUSD_in: [MATIC_BigDecimal!]
  volumeUSD_not_in: [MATIC_BigDecimal!]
  untrackedVolume: MATIC_BigDecimal
  untrackedVolume_not: MATIC_BigDecimal
  untrackedVolume_gt: MATIC_BigDecimal
  untrackedVolume_lt: MATIC_BigDecimal
  untrackedVolume_gte: MATIC_BigDecimal
  untrackedVolume_lte: MATIC_BigDecimal
  untrackedVolume_in: [MATIC_BigDecimal!]
  untrackedVolume_not_in: [MATIC_BigDecimal!]
  liquidityETH: MATIC_BigDecimal
  liquidityETH_not: MATIC_BigDecimal
  liquidityETH_gt: MATIC_BigDecimal
  liquidityETH_lt: MATIC_BigDecimal
  liquidityETH_gte: MATIC_BigDecimal
  liquidityETH_lte: MATIC_BigDecimal
  liquidityETH_in: [MATIC_BigDecimal!]
  liquidityETH_not_in: [MATIC_BigDecimal!]
  liquidityUSD: MATIC_BigDecimal
  liquidityUSD_not: MATIC_BigDecimal
  liquidityUSD_gt: MATIC_BigDecimal
  liquidityUSD_lt: MATIC_BigDecimal
  liquidityUSD_gte: MATIC_BigDecimal
  liquidityUSD_lte: MATIC_BigDecimal
  liquidityUSD_in: [MATIC_BigDecimal!]
  liquidityUSD_not_in: [MATIC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_HourData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type MATIC_LiquidityPosition {
  id: ID!
  user: MATIC_User!
  pair: MATIC_Pair!
  liquidityTokenBalance: MATIC_BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: MATIC_LiquidityPositionSnapshot_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_LiquidityPositionSnapshot_filter): [MATIC_LiquidityPositionSnapshot]!
  block: Int!
  timestamp: Int!
}

type MATIC_LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: MATIC_LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: MATIC_User!
  pair: MATIC_Pair!
  token0PriceUSD: MATIC_BigDecimal!
  token1PriceUSD: MATIC_BigDecimal!
  reserve0: MATIC_BigDecimal!
  reserve1: MATIC_BigDecimal!
  reserveUSD: MATIC_BigDecimal!
  liquidityTokenTotalSupply: MATIC_BigDecimal!
  liquidityTokenBalance: MATIC_BigDecimal!
}

input MATIC_LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0PriceUSD: MATIC_BigDecimal
  token0PriceUSD_not: MATIC_BigDecimal
  token0PriceUSD_gt: MATIC_BigDecimal
  token0PriceUSD_lt: MATIC_BigDecimal
  token0PriceUSD_gte: MATIC_BigDecimal
  token0PriceUSD_lte: MATIC_BigDecimal
  token0PriceUSD_in: [MATIC_BigDecimal!]
  token0PriceUSD_not_in: [MATIC_BigDecimal!]
  token1PriceUSD: MATIC_BigDecimal
  token1PriceUSD_not: MATIC_BigDecimal
  token1PriceUSD_gt: MATIC_BigDecimal
  token1PriceUSD_lt: MATIC_BigDecimal
  token1PriceUSD_gte: MATIC_BigDecimal
  token1PriceUSD_lte: MATIC_BigDecimal
  token1PriceUSD_in: [MATIC_BigDecimal!]
  token1PriceUSD_not_in: [MATIC_BigDecimal!]
  reserve0: MATIC_BigDecimal
  reserve0_not: MATIC_BigDecimal
  reserve0_gt: MATIC_BigDecimal
  reserve0_lt: MATIC_BigDecimal
  reserve0_gte: MATIC_BigDecimal
  reserve0_lte: MATIC_BigDecimal
  reserve0_in: [MATIC_BigDecimal!]
  reserve0_not_in: [MATIC_BigDecimal!]
  reserve1: MATIC_BigDecimal
  reserve1_not: MATIC_BigDecimal
  reserve1_gt: MATIC_BigDecimal
  reserve1_lt: MATIC_BigDecimal
  reserve1_gte: MATIC_BigDecimal
  reserve1_lte: MATIC_BigDecimal
  reserve1_in: [MATIC_BigDecimal!]
  reserve1_not_in: [MATIC_BigDecimal!]
  reserveUSD: MATIC_BigDecimal
  reserveUSD_not: MATIC_BigDecimal
  reserveUSD_gt: MATIC_BigDecimal
  reserveUSD_lt: MATIC_BigDecimal
  reserveUSD_gte: MATIC_BigDecimal
  reserveUSD_lte: MATIC_BigDecimal
  reserveUSD_in: [MATIC_BigDecimal!]
  reserveUSD_not_in: [MATIC_BigDecimal!]
  liquidityTokenTotalSupply: MATIC_BigDecimal
  liquidityTokenTotalSupply_not: MATIC_BigDecimal
  liquidityTokenTotalSupply_gt: MATIC_BigDecimal
  liquidityTokenTotalSupply_lt: MATIC_BigDecimal
  liquidityTokenTotalSupply_gte: MATIC_BigDecimal
  liquidityTokenTotalSupply_lte: MATIC_BigDecimal
  liquidityTokenTotalSupply_in: [MATIC_BigDecimal!]
  liquidityTokenTotalSupply_not_in: [MATIC_BigDecimal!]
  liquidityTokenBalance: MATIC_BigDecimal
  liquidityTokenBalance_not: MATIC_BigDecimal
  liquidityTokenBalance_gt: MATIC_BigDecimal
  liquidityTokenBalance_lt: MATIC_BigDecimal
  liquidityTokenBalance_gte: MATIC_BigDecimal
  liquidityTokenBalance_lte: MATIC_BigDecimal
  liquidityTokenBalance_in: [MATIC_BigDecimal!]
  liquidityTokenBalance_not_in: [MATIC_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  timestamp
  block
  user
  pair
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input MATIC_LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidityTokenBalance: MATIC_BigDecimal
  liquidityTokenBalance_not: MATIC_BigDecimal
  liquidityTokenBalance_gt: MATIC_BigDecimal
  liquidityTokenBalance_lt: MATIC_BigDecimal
  liquidityTokenBalance_gte: MATIC_BigDecimal
  liquidityTokenBalance_lte: MATIC_BigDecimal
  liquidityTokenBalance_in: [MATIC_BigDecimal!]
  liquidityTokenBalance_not_in: [MATIC_BigDecimal!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_LiquidityPosition_orderBy {
  id
  user
  pair
  liquidityTokenBalance
  snapshots
  block
  timestamp
}

type MATIC_Mint {
  id: ID!
  transaction: MATIC_Transaction!
  timestamp: BigInt!
  pair: MATIC_Pair!
  to: MATIC_Bytes!
  liquidity: MATIC_BigDecimal!
  sender: MATIC_Bytes
  amount0: MATIC_BigDecimal
  amount1: MATIC_BigDecimal
  logIndex: BigInt
  amountUSD: MATIC_BigDecimal
  feeTo: MATIC_Bytes
  feeLiquidity: MATIC_BigDecimal
}

input MATIC_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  to: MATIC_Bytes
  to_not: MATIC_Bytes
  to_in: [MATIC_Bytes!]
  to_not_in: [MATIC_Bytes!]
  to_contains: MATIC_Bytes
  to_not_contains: MATIC_Bytes
  liquidity: MATIC_BigDecimal
  liquidity_not: MATIC_BigDecimal
  liquidity_gt: MATIC_BigDecimal
  liquidity_lt: MATIC_BigDecimal
  liquidity_gte: MATIC_BigDecimal
  liquidity_lte: MATIC_BigDecimal
  liquidity_in: [MATIC_BigDecimal!]
  liquidity_not_in: [MATIC_BigDecimal!]
  sender: MATIC_Bytes
  sender_not: MATIC_Bytes
  sender_in: [MATIC_Bytes!]
  sender_not_in: [MATIC_Bytes!]
  sender_contains: MATIC_Bytes
  sender_not_contains: MATIC_Bytes
  amount0: MATIC_BigDecimal
  amount0_not: MATIC_BigDecimal
  amount0_gt: MATIC_BigDecimal
  amount0_lt: MATIC_BigDecimal
  amount0_gte: MATIC_BigDecimal
  amount0_lte: MATIC_BigDecimal
  amount0_in: [MATIC_BigDecimal!]
  amount0_not_in: [MATIC_BigDecimal!]
  amount1: MATIC_BigDecimal
  amount1_not: MATIC_BigDecimal
  amount1_gt: MATIC_BigDecimal
  amount1_lt: MATIC_BigDecimal
  amount1_gte: MATIC_BigDecimal
  amount1_lte: MATIC_BigDecimal
  amount1_in: [MATIC_BigDecimal!]
  amount1_not_in: [MATIC_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: MATIC_BigDecimal
  amountUSD_not: MATIC_BigDecimal
  amountUSD_gt: MATIC_BigDecimal
  amountUSD_lt: MATIC_BigDecimal
  amountUSD_gte: MATIC_BigDecimal
  amountUSD_lte: MATIC_BigDecimal
  amountUSD_in: [MATIC_BigDecimal!]
  amountUSD_not_in: [MATIC_BigDecimal!]
  feeTo: MATIC_Bytes
  feeTo_not: MATIC_Bytes
  feeTo_in: [MATIC_Bytes!]
  feeTo_not_in: [MATIC_Bytes!]
  feeTo_contains: MATIC_Bytes
  feeTo_not_contains: MATIC_Bytes
  feeLiquidity: MATIC_BigDecimal
  feeLiquidity_not: MATIC_BigDecimal
  feeLiquidity_gt: MATIC_BigDecimal
  feeLiquidity_lt: MATIC_BigDecimal
  feeLiquidity_gte: MATIC_BigDecimal
  feeLiquidity_lte: MATIC_BigDecimal
  feeLiquidity_in: [MATIC_BigDecimal!]
  feeLiquidity_not_in: [MATIC_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_Mint_orderBy {
  id
  transaction
  timestamp
  pair
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

"""Defines the order direction, either ascending or descending"""
enum MATIC_OrderDirection {
  asc
  desc
}

type MATIC_Pair {
  id: ID!
  factory: MATIC_Factory!
  name: String!
  token0: MATIC_Token!
  token1: MATIC_Token!
  reserve0: MATIC_BigDecimal!
  reserve1: MATIC_BigDecimal!
  totalSupply: MATIC_BigDecimal!
  reserveETH: MATIC_BigDecimal!
  reserveUSD: MATIC_BigDecimal!
  trackedReserveETH: MATIC_BigDecimal!
  token0Price: MATIC_BigDecimal!
  token1Price: MATIC_BigDecimal!
  volumeToken0: MATIC_BigDecimal!
  volumeToken1: MATIC_BigDecimal!
  volumeUSD: MATIC_BigDecimal!
  untrackedVolumeUSD: MATIC_BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: MATIC_LiquidityPosition_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_LiquidityPosition_filter): [MATIC_LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: MATIC_LiquidityPositionSnapshot_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_LiquidityPositionSnapshot_filter): [MATIC_LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: MATIC_PairDayData_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_PairDayData_filter): [MATIC_PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: MATIC_PairHourData_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_PairHourData_filter): [MATIC_PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: MATIC_Mint_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_Mint_filter): [MATIC_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: MATIC_Burn_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_Burn_filter): [MATIC_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: MATIC_Swap_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_Swap_filter): [MATIC_Swap!]!
  timestamp: BigInt!
  block: BigInt!
}

type MATIC_PairDayData {
  id: ID!
  date: Int!
  pair: MATIC_Pair!
  token0: MATIC_Token!
  token1: MATIC_Token!
  reserve0: MATIC_BigDecimal!
  reserve1: MATIC_BigDecimal!
  totalSupply: MATIC_BigDecimal!
  reserveUSD: MATIC_BigDecimal!
  volumeToken0: MATIC_BigDecimal!
  volumeToken1: MATIC_BigDecimal!
  volumeUSD: MATIC_BigDecimal!
  txCount: BigInt!
}

input MATIC_PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: MATIC_BigDecimal
  reserve0_not: MATIC_BigDecimal
  reserve0_gt: MATIC_BigDecimal
  reserve0_lt: MATIC_BigDecimal
  reserve0_gte: MATIC_BigDecimal
  reserve0_lte: MATIC_BigDecimal
  reserve0_in: [MATIC_BigDecimal!]
  reserve0_not_in: [MATIC_BigDecimal!]
  reserve1: MATIC_BigDecimal
  reserve1_not: MATIC_BigDecimal
  reserve1_gt: MATIC_BigDecimal
  reserve1_lt: MATIC_BigDecimal
  reserve1_gte: MATIC_BigDecimal
  reserve1_lte: MATIC_BigDecimal
  reserve1_in: [MATIC_BigDecimal!]
  reserve1_not_in: [MATIC_BigDecimal!]
  totalSupply: MATIC_BigDecimal
  totalSupply_not: MATIC_BigDecimal
  totalSupply_gt: MATIC_BigDecimal
  totalSupply_lt: MATIC_BigDecimal
  totalSupply_gte: MATIC_BigDecimal
  totalSupply_lte: MATIC_BigDecimal
  totalSupply_in: [MATIC_BigDecimal!]
  totalSupply_not_in: [MATIC_BigDecimal!]
  reserveUSD: MATIC_BigDecimal
  reserveUSD_not: MATIC_BigDecimal
  reserveUSD_gt: MATIC_BigDecimal
  reserveUSD_lt: MATIC_BigDecimal
  reserveUSD_gte: MATIC_BigDecimal
  reserveUSD_lte: MATIC_BigDecimal
  reserveUSD_in: [MATIC_BigDecimal!]
  reserveUSD_not_in: [MATIC_BigDecimal!]
  volumeToken0: MATIC_BigDecimal
  volumeToken0_not: MATIC_BigDecimal
  volumeToken0_gt: MATIC_BigDecimal
  volumeToken0_lt: MATIC_BigDecimal
  volumeToken0_gte: MATIC_BigDecimal
  volumeToken0_lte: MATIC_BigDecimal
  volumeToken0_in: [MATIC_BigDecimal!]
  volumeToken0_not_in: [MATIC_BigDecimal!]
  volumeToken1: MATIC_BigDecimal
  volumeToken1_not: MATIC_BigDecimal
  volumeToken1_gt: MATIC_BigDecimal
  volumeToken1_lt: MATIC_BigDecimal
  volumeToken1_gte: MATIC_BigDecimal
  volumeToken1_lte: MATIC_BigDecimal
  volumeToken1_in: [MATIC_BigDecimal!]
  volumeToken1_not_in: [MATIC_BigDecimal!]
  volumeUSD: MATIC_BigDecimal
  volumeUSD_not: MATIC_BigDecimal
  volumeUSD_gt: MATIC_BigDecimal
  volumeUSD_lt: MATIC_BigDecimal
  volumeUSD_gte: MATIC_BigDecimal
  volumeUSD_lte: MATIC_BigDecimal
  volumeUSD_in: [MATIC_BigDecimal!]
  volumeUSD_not_in: [MATIC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_PairDayData_orderBy {
  id
  date
  pair
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

type MATIC_PairHourData {
  id: ID!
  date: Int!
  pair: MATIC_Pair!
  reserve0: MATIC_BigDecimal!
  reserve1: MATIC_BigDecimal!
  reserveUSD: MATIC_BigDecimal!
  volumeToken0: MATIC_BigDecimal!
  volumeToken1: MATIC_BigDecimal!
  volumeUSD: MATIC_BigDecimal!
  txCount: BigInt!
}

input MATIC_PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  reserve0: MATIC_BigDecimal
  reserve0_not: MATIC_BigDecimal
  reserve0_gt: MATIC_BigDecimal
  reserve0_lt: MATIC_BigDecimal
  reserve0_gte: MATIC_BigDecimal
  reserve0_lte: MATIC_BigDecimal
  reserve0_in: [MATIC_BigDecimal!]
  reserve0_not_in: [MATIC_BigDecimal!]
  reserve1: MATIC_BigDecimal
  reserve1_not: MATIC_BigDecimal
  reserve1_gt: MATIC_BigDecimal
  reserve1_lt: MATIC_BigDecimal
  reserve1_gte: MATIC_BigDecimal
  reserve1_lte: MATIC_BigDecimal
  reserve1_in: [MATIC_BigDecimal!]
  reserve1_not_in: [MATIC_BigDecimal!]
  reserveUSD: MATIC_BigDecimal
  reserveUSD_not: MATIC_BigDecimal
  reserveUSD_gt: MATIC_BigDecimal
  reserveUSD_lt: MATIC_BigDecimal
  reserveUSD_gte: MATIC_BigDecimal
  reserveUSD_lte: MATIC_BigDecimal
  reserveUSD_in: [MATIC_BigDecimal!]
  reserveUSD_not_in: [MATIC_BigDecimal!]
  volumeToken0: MATIC_BigDecimal
  volumeToken0_not: MATIC_BigDecimal
  volumeToken0_gt: MATIC_BigDecimal
  volumeToken0_lt: MATIC_BigDecimal
  volumeToken0_gte: MATIC_BigDecimal
  volumeToken0_lte: MATIC_BigDecimal
  volumeToken0_in: [MATIC_BigDecimal!]
  volumeToken0_not_in: [MATIC_BigDecimal!]
  volumeToken1: MATIC_BigDecimal
  volumeToken1_not: MATIC_BigDecimal
  volumeToken1_gt: MATIC_BigDecimal
  volumeToken1_lt: MATIC_BigDecimal
  volumeToken1_gte: MATIC_BigDecimal
  volumeToken1_lte: MATIC_BigDecimal
  volumeToken1_in: [MATIC_BigDecimal!]
  volumeToken1_not_in: [MATIC_BigDecimal!]
  volumeUSD: MATIC_BigDecimal
  volumeUSD_not: MATIC_BigDecimal
  volumeUSD_gt: MATIC_BigDecimal
  volumeUSD_lt: MATIC_BigDecimal
  volumeUSD_gte: MATIC_BigDecimal
  volumeUSD_lte: MATIC_BigDecimal
  volumeUSD_in: [MATIC_BigDecimal!]
  volumeUSD_not_in: [MATIC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_PairHourData_orderBy {
  id
  date
  pair
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

input MATIC_Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: MATIC_BigDecimal
  reserve0_not: MATIC_BigDecimal
  reserve0_gt: MATIC_BigDecimal
  reserve0_lt: MATIC_BigDecimal
  reserve0_gte: MATIC_BigDecimal
  reserve0_lte: MATIC_BigDecimal
  reserve0_in: [MATIC_BigDecimal!]
  reserve0_not_in: [MATIC_BigDecimal!]
  reserve1: MATIC_BigDecimal
  reserve1_not: MATIC_BigDecimal
  reserve1_gt: MATIC_BigDecimal
  reserve1_lt: MATIC_BigDecimal
  reserve1_gte: MATIC_BigDecimal
  reserve1_lte: MATIC_BigDecimal
  reserve1_in: [MATIC_BigDecimal!]
  reserve1_not_in: [MATIC_BigDecimal!]
  totalSupply: MATIC_BigDecimal
  totalSupply_not: MATIC_BigDecimal
  totalSupply_gt: MATIC_BigDecimal
  totalSupply_lt: MATIC_BigDecimal
  totalSupply_gte: MATIC_BigDecimal
  totalSupply_lte: MATIC_BigDecimal
  totalSupply_in: [MATIC_BigDecimal!]
  totalSupply_not_in: [MATIC_BigDecimal!]
  reserveETH: MATIC_BigDecimal
  reserveETH_not: MATIC_BigDecimal
  reserveETH_gt: MATIC_BigDecimal
  reserveETH_lt: MATIC_BigDecimal
  reserveETH_gte: MATIC_BigDecimal
  reserveETH_lte: MATIC_BigDecimal
  reserveETH_in: [MATIC_BigDecimal!]
  reserveETH_not_in: [MATIC_BigDecimal!]
  reserveUSD: MATIC_BigDecimal
  reserveUSD_not: MATIC_BigDecimal
  reserveUSD_gt: MATIC_BigDecimal
  reserveUSD_lt: MATIC_BigDecimal
  reserveUSD_gte: MATIC_BigDecimal
  reserveUSD_lte: MATIC_BigDecimal
  reserveUSD_in: [MATIC_BigDecimal!]
  reserveUSD_not_in: [MATIC_BigDecimal!]
  trackedReserveETH: MATIC_BigDecimal
  trackedReserveETH_not: MATIC_BigDecimal
  trackedReserveETH_gt: MATIC_BigDecimal
  trackedReserveETH_lt: MATIC_BigDecimal
  trackedReserveETH_gte: MATIC_BigDecimal
  trackedReserveETH_lte: MATIC_BigDecimal
  trackedReserveETH_in: [MATIC_BigDecimal!]
  trackedReserveETH_not_in: [MATIC_BigDecimal!]
  token0Price: MATIC_BigDecimal
  token0Price_not: MATIC_BigDecimal
  token0Price_gt: MATIC_BigDecimal
  token0Price_lt: MATIC_BigDecimal
  token0Price_gte: MATIC_BigDecimal
  token0Price_lte: MATIC_BigDecimal
  token0Price_in: [MATIC_BigDecimal!]
  token0Price_not_in: [MATIC_BigDecimal!]
  token1Price: MATIC_BigDecimal
  token1Price_not: MATIC_BigDecimal
  token1Price_gt: MATIC_BigDecimal
  token1Price_lt: MATIC_BigDecimal
  token1Price_gte: MATIC_BigDecimal
  token1Price_lte: MATIC_BigDecimal
  token1Price_in: [MATIC_BigDecimal!]
  token1Price_not_in: [MATIC_BigDecimal!]
  volumeToken0: MATIC_BigDecimal
  volumeToken0_not: MATIC_BigDecimal
  volumeToken0_gt: MATIC_BigDecimal
  volumeToken0_lt: MATIC_BigDecimal
  volumeToken0_gte: MATIC_BigDecimal
  volumeToken0_lte: MATIC_BigDecimal
  volumeToken0_in: [MATIC_BigDecimal!]
  volumeToken0_not_in: [MATIC_BigDecimal!]
  volumeToken1: MATIC_BigDecimal
  volumeToken1_not: MATIC_BigDecimal
  volumeToken1_gt: MATIC_BigDecimal
  volumeToken1_lt: MATIC_BigDecimal
  volumeToken1_gte: MATIC_BigDecimal
  volumeToken1_lte: MATIC_BigDecimal
  volumeToken1_in: [MATIC_BigDecimal!]
  volumeToken1_not_in: [MATIC_BigDecimal!]
  volumeUSD: MATIC_BigDecimal
  volumeUSD_not: MATIC_BigDecimal
  volumeUSD_gt: MATIC_BigDecimal
  volumeUSD_lt: MATIC_BigDecimal
  volumeUSD_gte: MATIC_BigDecimal
  volumeUSD_lte: MATIC_BigDecimal
  volumeUSD_in: [MATIC_BigDecimal!]
  volumeUSD_not_in: [MATIC_BigDecimal!]
  untrackedVolumeUSD: MATIC_BigDecimal
  untrackedVolumeUSD_not: MATIC_BigDecimal
  untrackedVolumeUSD_gt: MATIC_BigDecimal
  untrackedVolumeUSD_lt: MATIC_BigDecimal
  untrackedVolumeUSD_gte: MATIC_BigDecimal
  untrackedVolumeUSD_lte: MATIC_BigDecimal
  untrackedVolumeUSD_in: [MATIC_BigDecimal!]
  untrackedVolumeUSD_not_in: [MATIC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_Pair_orderBy {
  id
  factory
  name
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
}

type MATIC_Swap {
  id: ID!
  transaction: MATIC_Transaction!
  timestamp: BigInt!
  pair: MATIC_Pair!
  sender: MATIC_Bytes!
  amount0In: MATIC_BigDecimal!
  amount1In: MATIC_BigDecimal!
  amount0Out: MATIC_BigDecimal!
  amount1Out: MATIC_BigDecimal!
  to: MATIC_Bytes!
  logIndex: BigInt
  amountUSD: MATIC_BigDecimal!
}

input MATIC_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  sender: MATIC_Bytes
  sender_not: MATIC_Bytes
  sender_in: [MATIC_Bytes!]
  sender_not_in: [MATIC_Bytes!]
  sender_contains: MATIC_Bytes
  sender_not_contains: MATIC_Bytes
  amount0In: MATIC_BigDecimal
  amount0In_not: MATIC_BigDecimal
  amount0In_gt: MATIC_BigDecimal
  amount0In_lt: MATIC_BigDecimal
  amount0In_gte: MATIC_BigDecimal
  amount0In_lte: MATIC_BigDecimal
  amount0In_in: [MATIC_BigDecimal!]
  amount0In_not_in: [MATIC_BigDecimal!]
  amount1In: MATIC_BigDecimal
  amount1In_not: MATIC_BigDecimal
  amount1In_gt: MATIC_BigDecimal
  amount1In_lt: MATIC_BigDecimal
  amount1In_gte: MATIC_BigDecimal
  amount1In_lte: MATIC_BigDecimal
  amount1In_in: [MATIC_BigDecimal!]
  amount1In_not_in: [MATIC_BigDecimal!]
  amount0Out: MATIC_BigDecimal
  amount0Out_not: MATIC_BigDecimal
  amount0Out_gt: MATIC_BigDecimal
  amount0Out_lt: MATIC_BigDecimal
  amount0Out_gte: MATIC_BigDecimal
  amount0Out_lte: MATIC_BigDecimal
  amount0Out_in: [MATIC_BigDecimal!]
  amount0Out_not_in: [MATIC_BigDecimal!]
  amount1Out: MATIC_BigDecimal
  amount1Out_not: MATIC_BigDecimal
  amount1Out_gt: MATIC_BigDecimal
  amount1Out_lt: MATIC_BigDecimal
  amount1Out_gte: MATIC_BigDecimal
  amount1Out_lte: MATIC_BigDecimal
  amount1Out_in: [MATIC_BigDecimal!]
  amount1Out_not_in: [MATIC_BigDecimal!]
  to: MATIC_Bytes
  to_not: MATIC_Bytes
  to_in: [MATIC_Bytes!]
  to_not_in: [MATIC_Bytes!]
  to_contains: MATIC_Bytes
  to_not_contains: MATIC_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: MATIC_BigDecimal
  amountUSD_not: MATIC_BigDecimal
  amountUSD_gt: MATIC_BigDecimal
  amountUSD_lt: MATIC_BigDecimal
  amountUSD_gte: MATIC_BigDecimal
  amountUSD_lte: MATIC_BigDecimal
  amountUSD_in: [MATIC_BigDecimal!]
  amountUSD_not_in: [MATIC_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_Swap_orderBy {
  id
  transaction
  timestamp
  pair
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
}

type MATIC_Token {
  id: ID!
  factory: MATIC_Factory!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: MATIC_BigDecimal!
  volumeUSD: MATIC_BigDecimal!
  untrackedVolumeUSD: MATIC_BigDecimal!
  txCount: BigInt!
  liquidity: MATIC_BigDecimal!
  derivedETH: MATIC_BigDecimal!
  whitelistPairs(skip: Int = 0, first: Int = 100, orderBy: MATIC_Pair_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_Pair_filter): [MATIC_Pair!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: MATIC_TokenHourData_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_TokenHourData_filter): [MATIC_TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: MATIC_TokenDayData_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_TokenDayData_filter): [MATIC_TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: MATIC_Pair_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_Pair_filter): [MATIC_Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: MATIC_Pair_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_Pair_filter): [MATIC_Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: MATIC_PairDayData_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_PairDayData_filter): [MATIC_PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: MATIC_PairDayData_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_PairDayData_filter): [MATIC_PairDayData!]!
}

type MATIC_TokenDayData {
  id: ID!
  date: Int!
  token: MATIC_Token!
  volume: MATIC_BigDecimal!
  volumeETH: MATIC_BigDecimal!
  volumeUSD: MATIC_BigDecimal!
  txCount: BigInt!
  liquidity: MATIC_BigDecimal!
  liquidityETH: MATIC_BigDecimal!
  liquidityUSD: MATIC_BigDecimal!
  priceUSD: MATIC_BigDecimal!
}

input MATIC_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: MATIC_BigDecimal
  volume_not: MATIC_BigDecimal
  volume_gt: MATIC_BigDecimal
  volume_lt: MATIC_BigDecimal
  volume_gte: MATIC_BigDecimal
  volume_lte: MATIC_BigDecimal
  volume_in: [MATIC_BigDecimal!]
  volume_not_in: [MATIC_BigDecimal!]
  volumeETH: MATIC_BigDecimal
  volumeETH_not: MATIC_BigDecimal
  volumeETH_gt: MATIC_BigDecimal
  volumeETH_lt: MATIC_BigDecimal
  volumeETH_gte: MATIC_BigDecimal
  volumeETH_lte: MATIC_BigDecimal
  volumeETH_in: [MATIC_BigDecimal!]
  volumeETH_not_in: [MATIC_BigDecimal!]
  volumeUSD: MATIC_BigDecimal
  volumeUSD_not: MATIC_BigDecimal
  volumeUSD_gt: MATIC_BigDecimal
  volumeUSD_lt: MATIC_BigDecimal
  volumeUSD_gte: MATIC_BigDecimal
  volumeUSD_lte: MATIC_BigDecimal
  volumeUSD_in: [MATIC_BigDecimal!]
  volumeUSD_not_in: [MATIC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: MATIC_BigDecimal
  liquidity_not: MATIC_BigDecimal
  liquidity_gt: MATIC_BigDecimal
  liquidity_lt: MATIC_BigDecimal
  liquidity_gte: MATIC_BigDecimal
  liquidity_lte: MATIC_BigDecimal
  liquidity_in: [MATIC_BigDecimal!]
  liquidity_not_in: [MATIC_BigDecimal!]
  liquidityETH: MATIC_BigDecimal
  liquidityETH_not: MATIC_BigDecimal
  liquidityETH_gt: MATIC_BigDecimal
  liquidityETH_lt: MATIC_BigDecimal
  liquidityETH_gte: MATIC_BigDecimal
  liquidityETH_lte: MATIC_BigDecimal
  liquidityETH_in: [MATIC_BigDecimal!]
  liquidityETH_not_in: [MATIC_BigDecimal!]
  liquidityUSD: MATIC_BigDecimal
  liquidityUSD_not: MATIC_BigDecimal
  liquidityUSD_gt: MATIC_BigDecimal
  liquidityUSD_lt: MATIC_BigDecimal
  liquidityUSD_gte: MATIC_BigDecimal
  liquidityUSD_lte: MATIC_BigDecimal
  liquidityUSD_in: [MATIC_BigDecimal!]
  liquidityUSD_not_in: [MATIC_BigDecimal!]
  priceUSD: MATIC_BigDecimal
  priceUSD_not: MATIC_BigDecimal
  priceUSD_gt: MATIC_BigDecimal
  priceUSD_lt: MATIC_BigDecimal
  priceUSD_gte: MATIC_BigDecimal
  priceUSD_lte: MATIC_BigDecimal
  priceUSD_in: [MATIC_BigDecimal!]
  priceUSD_not_in: [MATIC_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_TokenDayData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

type MATIC_TokenHourData {
  id: ID!
  date: Int!
  token: MATIC_Token!
  volume: MATIC_BigDecimal!
  volumeETH: MATIC_BigDecimal!
  volumeUSD: MATIC_BigDecimal!
  txCount: BigInt!
  liquidity: MATIC_BigDecimal!
  liquidityETH: MATIC_BigDecimal!
  liquidityUSD: MATIC_BigDecimal!
  priceUSD: MATIC_BigDecimal!
}

input MATIC_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: MATIC_BigDecimal
  volume_not: MATIC_BigDecimal
  volume_gt: MATIC_BigDecimal
  volume_lt: MATIC_BigDecimal
  volume_gte: MATIC_BigDecimal
  volume_lte: MATIC_BigDecimal
  volume_in: [MATIC_BigDecimal!]
  volume_not_in: [MATIC_BigDecimal!]
  volumeETH: MATIC_BigDecimal
  volumeETH_not: MATIC_BigDecimal
  volumeETH_gt: MATIC_BigDecimal
  volumeETH_lt: MATIC_BigDecimal
  volumeETH_gte: MATIC_BigDecimal
  volumeETH_lte: MATIC_BigDecimal
  volumeETH_in: [MATIC_BigDecimal!]
  volumeETH_not_in: [MATIC_BigDecimal!]
  volumeUSD: MATIC_BigDecimal
  volumeUSD_not: MATIC_BigDecimal
  volumeUSD_gt: MATIC_BigDecimal
  volumeUSD_lt: MATIC_BigDecimal
  volumeUSD_gte: MATIC_BigDecimal
  volumeUSD_lte: MATIC_BigDecimal
  volumeUSD_in: [MATIC_BigDecimal!]
  volumeUSD_not_in: [MATIC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: MATIC_BigDecimal
  liquidity_not: MATIC_BigDecimal
  liquidity_gt: MATIC_BigDecimal
  liquidity_lt: MATIC_BigDecimal
  liquidity_gte: MATIC_BigDecimal
  liquidity_lte: MATIC_BigDecimal
  liquidity_in: [MATIC_BigDecimal!]
  liquidity_not_in: [MATIC_BigDecimal!]
  liquidityETH: MATIC_BigDecimal
  liquidityETH_not: MATIC_BigDecimal
  liquidityETH_gt: MATIC_BigDecimal
  liquidityETH_lt: MATIC_BigDecimal
  liquidityETH_gte: MATIC_BigDecimal
  liquidityETH_lte: MATIC_BigDecimal
  liquidityETH_in: [MATIC_BigDecimal!]
  liquidityETH_not_in: [MATIC_BigDecimal!]
  liquidityUSD: MATIC_BigDecimal
  liquidityUSD_not: MATIC_BigDecimal
  liquidityUSD_gt: MATIC_BigDecimal
  liquidityUSD_lt: MATIC_BigDecimal
  liquidityUSD_gte: MATIC_BigDecimal
  liquidityUSD_lte: MATIC_BigDecimal
  liquidityUSD_in: [MATIC_BigDecimal!]
  liquidityUSD_not_in: [MATIC_BigDecimal!]
  priceUSD: MATIC_BigDecimal
  priceUSD_not: MATIC_BigDecimal
  priceUSD_gt: MATIC_BigDecimal
  priceUSD_lt: MATIC_BigDecimal
  priceUSD_gte: MATIC_BigDecimal
  priceUSD_lte: MATIC_BigDecimal
  priceUSD_in: [MATIC_BigDecimal!]
  priceUSD_not_in: [MATIC_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_TokenHourData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

input MATIC_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: MATIC_BigDecimal
  volume_not: MATIC_BigDecimal
  volume_gt: MATIC_BigDecimal
  volume_lt: MATIC_BigDecimal
  volume_gte: MATIC_BigDecimal
  volume_lte: MATIC_BigDecimal
  volume_in: [MATIC_BigDecimal!]
  volume_not_in: [MATIC_BigDecimal!]
  volumeUSD: MATIC_BigDecimal
  volumeUSD_not: MATIC_BigDecimal
  volumeUSD_gt: MATIC_BigDecimal
  volumeUSD_lt: MATIC_BigDecimal
  volumeUSD_gte: MATIC_BigDecimal
  volumeUSD_lte: MATIC_BigDecimal
  volumeUSD_in: [MATIC_BigDecimal!]
  volumeUSD_not_in: [MATIC_BigDecimal!]
  untrackedVolumeUSD: MATIC_BigDecimal
  untrackedVolumeUSD_not: MATIC_BigDecimal
  untrackedVolumeUSD_gt: MATIC_BigDecimal
  untrackedVolumeUSD_lt: MATIC_BigDecimal
  untrackedVolumeUSD_gte: MATIC_BigDecimal
  untrackedVolumeUSD_lte: MATIC_BigDecimal
  untrackedVolumeUSD_in: [MATIC_BigDecimal!]
  untrackedVolumeUSD_not_in: [MATIC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: MATIC_BigDecimal
  liquidity_not: MATIC_BigDecimal
  liquidity_gt: MATIC_BigDecimal
  liquidity_lt: MATIC_BigDecimal
  liquidity_gte: MATIC_BigDecimal
  liquidity_lte: MATIC_BigDecimal
  liquidity_in: [MATIC_BigDecimal!]
  liquidity_not_in: [MATIC_BigDecimal!]
  derivedETH: MATIC_BigDecimal
  derivedETH_not: MATIC_BigDecimal
  derivedETH_gt: MATIC_BigDecimal
  derivedETH_lt: MATIC_BigDecimal
  derivedETH_gte: MATIC_BigDecimal
  derivedETH_lte: MATIC_BigDecimal
  derivedETH_in: [MATIC_BigDecimal!]
  derivedETH_not_in: [MATIC_BigDecimal!]
  whitelistPairs: [String!]
  whitelistPairs_not: [String!]
  whitelistPairs_contains: [String!]
  whitelistPairs_contains_nocase: [String!]
  whitelistPairs_not_contains: [String!]
  whitelistPairs_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_Token_orderBy {
  id
  factory
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  whitelistPairs
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
}

type MATIC_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: MATIC_Mint_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_Mint_filter): [MATIC_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: MATIC_Burn_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_Burn_filter): [MATIC_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: MATIC_Swap_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_Swap_filter): [MATIC_Swap]!
}

input MATIC_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
}

type MATIC_User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: MATIC_LiquidityPosition_orderBy, orderDirection: MATIC_OrderDirection, where: MATIC_LiquidityPosition_filter): [MATIC_LiquidityPosition!]!
}

input MATIC_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]

  """Filter for the block changed event."""
  _change_block: MATIC_BlockChangedFilter
}

enum MATIC_User_orderBy {
  id
  liquidityPositions
}

type MATIC__Block_ {
  """The hash of the block"""
  hash: MATIC_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type MATIC__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: MATIC__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar ARBITRUM_BigDecimal

input ARBITRUM_BlockChangedFilter {
  number_gte: Int!
}

input ARBITRUM_Block_height {
  hash: ARBITRUM_Bytes
  number: Int
  number_gte: Int
}

type ARBITRUM_Bundle {
  id: ID!
  ethPrice: ARBITRUM_BigDecimal!
}

input ARBITRUM_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: ARBITRUM_BigDecimal
  ethPrice_not: ARBITRUM_BigDecimal
  ethPrice_gt: ARBITRUM_BigDecimal
  ethPrice_lt: ARBITRUM_BigDecimal
  ethPrice_gte: ARBITRUM_BigDecimal
  ethPrice_lte: ARBITRUM_BigDecimal
  ethPrice_in: [ARBITRUM_BigDecimal!]
  ethPrice_not_in: [ARBITRUM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_Bundle_orderBy {
  id
  ethPrice
}

type ARBITRUM_Burn {
  id: ID!
  transaction: ARBITRUM_Transaction!
  timestamp: BigInt!
  pair: ARBITRUM_Pair!
  liquidity: ARBITRUM_BigDecimal!
  sender: ARBITRUM_Bytes
  amount0: ARBITRUM_BigDecimal
  amount1: ARBITRUM_BigDecimal
  to: ARBITRUM_Bytes
  logIndex: BigInt
  amountUSD: ARBITRUM_BigDecimal
  complete: Boolean!
  feeTo: ARBITRUM_Bytes
  feeLiquidity: ARBITRUM_BigDecimal
}

input ARBITRUM_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidity: ARBITRUM_BigDecimal
  liquidity_not: ARBITRUM_BigDecimal
  liquidity_gt: ARBITRUM_BigDecimal
  liquidity_lt: ARBITRUM_BigDecimal
  liquidity_gte: ARBITRUM_BigDecimal
  liquidity_lte: ARBITRUM_BigDecimal
  liquidity_in: [ARBITRUM_BigDecimal!]
  liquidity_not_in: [ARBITRUM_BigDecimal!]
  sender: ARBITRUM_Bytes
  sender_not: ARBITRUM_Bytes
  sender_in: [ARBITRUM_Bytes!]
  sender_not_in: [ARBITRUM_Bytes!]
  sender_contains: ARBITRUM_Bytes
  sender_not_contains: ARBITRUM_Bytes
  amount0: ARBITRUM_BigDecimal
  amount0_not: ARBITRUM_BigDecimal
  amount0_gt: ARBITRUM_BigDecimal
  amount0_lt: ARBITRUM_BigDecimal
  amount0_gte: ARBITRUM_BigDecimal
  amount0_lte: ARBITRUM_BigDecimal
  amount0_in: [ARBITRUM_BigDecimal!]
  amount0_not_in: [ARBITRUM_BigDecimal!]
  amount1: ARBITRUM_BigDecimal
  amount1_not: ARBITRUM_BigDecimal
  amount1_gt: ARBITRUM_BigDecimal
  amount1_lt: ARBITRUM_BigDecimal
  amount1_gte: ARBITRUM_BigDecimal
  amount1_lte: ARBITRUM_BigDecimal
  amount1_in: [ARBITRUM_BigDecimal!]
  amount1_not_in: [ARBITRUM_BigDecimal!]
  to: ARBITRUM_Bytes
  to_not: ARBITRUM_Bytes
  to_in: [ARBITRUM_Bytes!]
  to_not_in: [ARBITRUM_Bytes!]
  to_contains: ARBITRUM_Bytes
  to_not_contains: ARBITRUM_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: ARBITRUM_BigDecimal
  amountUSD_not: ARBITRUM_BigDecimal
  amountUSD_gt: ARBITRUM_BigDecimal
  amountUSD_lt: ARBITRUM_BigDecimal
  amountUSD_gte: ARBITRUM_BigDecimal
  amountUSD_lte: ARBITRUM_BigDecimal
  amountUSD_in: [ARBITRUM_BigDecimal!]
  amountUSD_not_in: [ARBITRUM_BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: ARBITRUM_Bytes
  feeTo_not: ARBITRUM_Bytes
  feeTo_in: [ARBITRUM_Bytes!]
  feeTo_not_in: [ARBITRUM_Bytes!]
  feeTo_contains: ARBITRUM_Bytes
  feeTo_not_contains: ARBITRUM_Bytes
  feeLiquidity: ARBITRUM_BigDecimal
  feeLiquidity_not: ARBITRUM_BigDecimal
  feeLiquidity_gt: ARBITRUM_BigDecimal
  feeLiquidity_lt: ARBITRUM_BigDecimal
  feeLiquidity_gte: ARBITRUM_BigDecimal
  feeLiquidity_lte: ARBITRUM_BigDecimal
  feeLiquidity_in: [ARBITRUM_BigDecimal!]
  feeLiquidity_not_in: [ARBITRUM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_Burn_orderBy {
  id
  transaction
  timestamp
  pair
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

scalar ARBITRUM_Bytes

type ARBITRUM_DayData {
  id: ID!
  date: Int!
  factory: ARBITRUM_Factory!
  volumeETH: ARBITRUM_BigDecimal!
  volumeUSD: ARBITRUM_BigDecimal!
  untrackedVolume: ARBITRUM_BigDecimal!
  liquidityETH: ARBITRUM_BigDecimal!
  liquidityUSD: ARBITRUM_BigDecimal!
  txCount: BigInt!
}

input ARBITRUM_DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: ARBITRUM_BigDecimal
  volumeETH_not: ARBITRUM_BigDecimal
  volumeETH_gt: ARBITRUM_BigDecimal
  volumeETH_lt: ARBITRUM_BigDecimal
  volumeETH_gte: ARBITRUM_BigDecimal
  volumeETH_lte: ARBITRUM_BigDecimal
  volumeETH_in: [ARBITRUM_BigDecimal!]
  volumeETH_not_in: [ARBITRUM_BigDecimal!]
  volumeUSD: ARBITRUM_BigDecimal
  volumeUSD_not: ARBITRUM_BigDecimal
  volumeUSD_gt: ARBITRUM_BigDecimal
  volumeUSD_lt: ARBITRUM_BigDecimal
  volumeUSD_gte: ARBITRUM_BigDecimal
  volumeUSD_lte: ARBITRUM_BigDecimal
  volumeUSD_in: [ARBITRUM_BigDecimal!]
  volumeUSD_not_in: [ARBITRUM_BigDecimal!]
  untrackedVolume: ARBITRUM_BigDecimal
  untrackedVolume_not: ARBITRUM_BigDecimal
  untrackedVolume_gt: ARBITRUM_BigDecimal
  untrackedVolume_lt: ARBITRUM_BigDecimal
  untrackedVolume_gte: ARBITRUM_BigDecimal
  untrackedVolume_lte: ARBITRUM_BigDecimal
  untrackedVolume_in: [ARBITRUM_BigDecimal!]
  untrackedVolume_not_in: [ARBITRUM_BigDecimal!]
  liquidityETH: ARBITRUM_BigDecimal
  liquidityETH_not: ARBITRUM_BigDecimal
  liquidityETH_gt: ARBITRUM_BigDecimal
  liquidityETH_lt: ARBITRUM_BigDecimal
  liquidityETH_gte: ARBITRUM_BigDecimal
  liquidityETH_lte: ARBITRUM_BigDecimal
  liquidityETH_in: [ARBITRUM_BigDecimal!]
  liquidityETH_not_in: [ARBITRUM_BigDecimal!]
  liquidityUSD: ARBITRUM_BigDecimal
  liquidityUSD_not: ARBITRUM_BigDecimal
  liquidityUSD_gt: ARBITRUM_BigDecimal
  liquidityUSD_lt: ARBITRUM_BigDecimal
  liquidityUSD_gte: ARBITRUM_BigDecimal
  liquidityUSD_lte: ARBITRUM_BigDecimal
  liquidityUSD_in: [ARBITRUM_BigDecimal!]
  liquidityUSD_not_in: [ARBITRUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_DayData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type ARBITRUM_Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: ARBITRUM_BigDecimal!
  volumeETH: ARBITRUM_BigDecimal!
  untrackedVolumeUSD: ARBITRUM_BigDecimal!
  liquidityUSD: ARBITRUM_BigDecimal!
  liquidityETH: ARBITRUM_BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_Pair_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_Pair_filter): [ARBITRUM_Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_Token_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_Token_filter): [ARBITRUM_Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_HourData_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_HourData_filter): [ARBITRUM_HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_DayData_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_DayData_filter): [ARBITRUM_DayData!]!
}

input ARBITRUM_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: ARBITRUM_BigDecimal
  volumeUSD_not: ARBITRUM_BigDecimal
  volumeUSD_gt: ARBITRUM_BigDecimal
  volumeUSD_lt: ARBITRUM_BigDecimal
  volumeUSD_gte: ARBITRUM_BigDecimal
  volumeUSD_lte: ARBITRUM_BigDecimal
  volumeUSD_in: [ARBITRUM_BigDecimal!]
  volumeUSD_not_in: [ARBITRUM_BigDecimal!]
  volumeETH: ARBITRUM_BigDecimal
  volumeETH_not: ARBITRUM_BigDecimal
  volumeETH_gt: ARBITRUM_BigDecimal
  volumeETH_lt: ARBITRUM_BigDecimal
  volumeETH_gte: ARBITRUM_BigDecimal
  volumeETH_lte: ARBITRUM_BigDecimal
  volumeETH_in: [ARBITRUM_BigDecimal!]
  volumeETH_not_in: [ARBITRUM_BigDecimal!]
  untrackedVolumeUSD: ARBITRUM_BigDecimal
  untrackedVolumeUSD_not: ARBITRUM_BigDecimal
  untrackedVolumeUSD_gt: ARBITRUM_BigDecimal
  untrackedVolumeUSD_lt: ARBITRUM_BigDecimal
  untrackedVolumeUSD_gte: ARBITRUM_BigDecimal
  untrackedVolumeUSD_lte: ARBITRUM_BigDecimal
  untrackedVolumeUSD_in: [ARBITRUM_BigDecimal!]
  untrackedVolumeUSD_not_in: [ARBITRUM_BigDecimal!]
  liquidityUSD: ARBITRUM_BigDecimal
  liquidityUSD_not: ARBITRUM_BigDecimal
  liquidityUSD_gt: ARBITRUM_BigDecimal
  liquidityUSD_lt: ARBITRUM_BigDecimal
  liquidityUSD_gte: ARBITRUM_BigDecimal
  liquidityUSD_lte: ARBITRUM_BigDecimal
  liquidityUSD_in: [ARBITRUM_BigDecimal!]
  liquidityUSD_not_in: [ARBITRUM_BigDecimal!]
  liquidityETH: ARBITRUM_BigDecimal
  liquidityETH_not: ARBITRUM_BigDecimal
  liquidityETH_gt: ARBITRUM_BigDecimal
  liquidityETH_lt: ARBITRUM_BigDecimal
  liquidityETH_gte: ARBITRUM_BigDecimal
  liquidityETH_lte: ARBITRUM_BigDecimal
  liquidityETH_in: [ARBITRUM_BigDecimal!]
  liquidityETH_not_in: [ARBITRUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
}

type ARBITRUM_HourData {
  id: ID!
  date: Int!
  factory: ARBITRUM_Factory!
  volumeETH: ARBITRUM_BigDecimal!
  volumeUSD: ARBITRUM_BigDecimal!
  untrackedVolume: ARBITRUM_BigDecimal!
  liquidityETH: ARBITRUM_BigDecimal!
  liquidityUSD: ARBITRUM_BigDecimal!
  txCount: BigInt!
}

input ARBITRUM_HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: ARBITRUM_BigDecimal
  volumeETH_not: ARBITRUM_BigDecimal
  volumeETH_gt: ARBITRUM_BigDecimal
  volumeETH_lt: ARBITRUM_BigDecimal
  volumeETH_gte: ARBITRUM_BigDecimal
  volumeETH_lte: ARBITRUM_BigDecimal
  volumeETH_in: [ARBITRUM_BigDecimal!]
  volumeETH_not_in: [ARBITRUM_BigDecimal!]
  volumeUSD: ARBITRUM_BigDecimal
  volumeUSD_not: ARBITRUM_BigDecimal
  volumeUSD_gt: ARBITRUM_BigDecimal
  volumeUSD_lt: ARBITRUM_BigDecimal
  volumeUSD_gte: ARBITRUM_BigDecimal
  volumeUSD_lte: ARBITRUM_BigDecimal
  volumeUSD_in: [ARBITRUM_BigDecimal!]
  volumeUSD_not_in: [ARBITRUM_BigDecimal!]
  untrackedVolume: ARBITRUM_BigDecimal
  untrackedVolume_not: ARBITRUM_BigDecimal
  untrackedVolume_gt: ARBITRUM_BigDecimal
  untrackedVolume_lt: ARBITRUM_BigDecimal
  untrackedVolume_gte: ARBITRUM_BigDecimal
  untrackedVolume_lte: ARBITRUM_BigDecimal
  untrackedVolume_in: [ARBITRUM_BigDecimal!]
  untrackedVolume_not_in: [ARBITRUM_BigDecimal!]
  liquidityETH: ARBITRUM_BigDecimal
  liquidityETH_not: ARBITRUM_BigDecimal
  liquidityETH_gt: ARBITRUM_BigDecimal
  liquidityETH_lt: ARBITRUM_BigDecimal
  liquidityETH_gte: ARBITRUM_BigDecimal
  liquidityETH_lte: ARBITRUM_BigDecimal
  liquidityETH_in: [ARBITRUM_BigDecimal!]
  liquidityETH_not_in: [ARBITRUM_BigDecimal!]
  liquidityUSD: ARBITRUM_BigDecimal
  liquidityUSD_not: ARBITRUM_BigDecimal
  liquidityUSD_gt: ARBITRUM_BigDecimal
  liquidityUSD_lt: ARBITRUM_BigDecimal
  liquidityUSD_gte: ARBITRUM_BigDecimal
  liquidityUSD_lte: ARBITRUM_BigDecimal
  liquidityUSD_in: [ARBITRUM_BigDecimal!]
  liquidityUSD_not_in: [ARBITRUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_HourData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type ARBITRUM_LiquidityPosition {
  id: ID!
  user: ARBITRUM_User!
  pair: ARBITRUM_Pair!
  liquidityTokenBalance: ARBITRUM_BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_LiquidityPositionSnapshot_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_LiquidityPositionSnapshot_filter): [ARBITRUM_LiquidityPositionSnapshot]!
  block: Int!
  timestamp: Int!
}

type ARBITRUM_LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: ARBITRUM_LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: ARBITRUM_User!
  pair: ARBITRUM_Pair!
  token0PriceUSD: ARBITRUM_BigDecimal!
  token1PriceUSD: ARBITRUM_BigDecimal!
  reserve0: ARBITRUM_BigDecimal!
  reserve1: ARBITRUM_BigDecimal!
  reserveUSD: ARBITRUM_BigDecimal!
  liquidityTokenTotalSupply: ARBITRUM_BigDecimal!
  liquidityTokenBalance: ARBITRUM_BigDecimal!
}

input ARBITRUM_LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0PriceUSD: ARBITRUM_BigDecimal
  token0PriceUSD_not: ARBITRUM_BigDecimal
  token0PriceUSD_gt: ARBITRUM_BigDecimal
  token0PriceUSD_lt: ARBITRUM_BigDecimal
  token0PriceUSD_gte: ARBITRUM_BigDecimal
  token0PriceUSD_lte: ARBITRUM_BigDecimal
  token0PriceUSD_in: [ARBITRUM_BigDecimal!]
  token0PriceUSD_not_in: [ARBITRUM_BigDecimal!]
  token1PriceUSD: ARBITRUM_BigDecimal
  token1PriceUSD_not: ARBITRUM_BigDecimal
  token1PriceUSD_gt: ARBITRUM_BigDecimal
  token1PriceUSD_lt: ARBITRUM_BigDecimal
  token1PriceUSD_gte: ARBITRUM_BigDecimal
  token1PriceUSD_lte: ARBITRUM_BigDecimal
  token1PriceUSD_in: [ARBITRUM_BigDecimal!]
  token1PriceUSD_not_in: [ARBITRUM_BigDecimal!]
  reserve0: ARBITRUM_BigDecimal
  reserve0_not: ARBITRUM_BigDecimal
  reserve0_gt: ARBITRUM_BigDecimal
  reserve0_lt: ARBITRUM_BigDecimal
  reserve0_gte: ARBITRUM_BigDecimal
  reserve0_lte: ARBITRUM_BigDecimal
  reserve0_in: [ARBITRUM_BigDecimal!]
  reserve0_not_in: [ARBITRUM_BigDecimal!]
  reserve1: ARBITRUM_BigDecimal
  reserve1_not: ARBITRUM_BigDecimal
  reserve1_gt: ARBITRUM_BigDecimal
  reserve1_lt: ARBITRUM_BigDecimal
  reserve1_gte: ARBITRUM_BigDecimal
  reserve1_lte: ARBITRUM_BigDecimal
  reserve1_in: [ARBITRUM_BigDecimal!]
  reserve1_not_in: [ARBITRUM_BigDecimal!]
  reserveUSD: ARBITRUM_BigDecimal
  reserveUSD_not: ARBITRUM_BigDecimal
  reserveUSD_gt: ARBITRUM_BigDecimal
  reserveUSD_lt: ARBITRUM_BigDecimal
  reserveUSD_gte: ARBITRUM_BigDecimal
  reserveUSD_lte: ARBITRUM_BigDecimal
  reserveUSD_in: [ARBITRUM_BigDecimal!]
  reserveUSD_not_in: [ARBITRUM_BigDecimal!]
  liquidityTokenTotalSupply: ARBITRUM_BigDecimal
  liquidityTokenTotalSupply_not: ARBITRUM_BigDecimal
  liquidityTokenTotalSupply_gt: ARBITRUM_BigDecimal
  liquidityTokenTotalSupply_lt: ARBITRUM_BigDecimal
  liquidityTokenTotalSupply_gte: ARBITRUM_BigDecimal
  liquidityTokenTotalSupply_lte: ARBITRUM_BigDecimal
  liquidityTokenTotalSupply_in: [ARBITRUM_BigDecimal!]
  liquidityTokenTotalSupply_not_in: [ARBITRUM_BigDecimal!]
  liquidityTokenBalance: ARBITRUM_BigDecimal
  liquidityTokenBalance_not: ARBITRUM_BigDecimal
  liquidityTokenBalance_gt: ARBITRUM_BigDecimal
  liquidityTokenBalance_lt: ARBITRUM_BigDecimal
  liquidityTokenBalance_gte: ARBITRUM_BigDecimal
  liquidityTokenBalance_lte: ARBITRUM_BigDecimal
  liquidityTokenBalance_in: [ARBITRUM_BigDecimal!]
  liquidityTokenBalance_not_in: [ARBITRUM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  timestamp
  block
  user
  pair
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input ARBITRUM_LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidityTokenBalance: ARBITRUM_BigDecimal
  liquidityTokenBalance_not: ARBITRUM_BigDecimal
  liquidityTokenBalance_gt: ARBITRUM_BigDecimal
  liquidityTokenBalance_lt: ARBITRUM_BigDecimal
  liquidityTokenBalance_gte: ARBITRUM_BigDecimal
  liquidityTokenBalance_lte: ARBITRUM_BigDecimal
  liquidityTokenBalance_in: [ARBITRUM_BigDecimal!]
  liquidityTokenBalance_not_in: [ARBITRUM_BigDecimal!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_LiquidityPosition_orderBy {
  id
  user
  pair
  liquidityTokenBalance
  snapshots
  block
  timestamp
}

type ARBITRUM_Mint {
  id: ID!
  transaction: ARBITRUM_Transaction!
  timestamp: BigInt!
  pair: ARBITRUM_Pair!
  to: ARBITRUM_Bytes!
  liquidity: ARBITRUM_BigDecimal!
  sender: ARBITRUM_Bytes
  amount0: ARBITRUM_BigDecimal
  amount1: ARBITRUM_BigDecimal
  logIndex: BigInt
  amountUSD: ARBITRUM_BigDecimal
  feeTo: ARBITRUM_Bytes
  feeLiquidity: ARBITRUM_BigDecimal
}

input ARBITRUM_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  to: ARBITRUM_Bytes
  to_not: ARBITRUM_Bytes
  to_in: [ARBITRUM_Bytes!]
  to_not_in: [ARBITRUM_Bytes!]
  to_contains: ARBITRUM_Bytes
  to_not_contains: ARBITRUM_Bytes
  liquidity: ARBITRUM_BigDecimal
  liquidity_not: ARBITRUM_BigDecimal
  liquidity_gt: ARBITRUM_BigDecimal
  liquidity_lt: ARBITRUM_BigDecimal
  liquidity_gte: ARBITRUM_BigDecimal
  liquidity_lte: ARBITRUM_BigDecimal
  liquidity_in: [ARBITRUM_BigDecimal!]
  liquidity_not_in: [ARBITRUM_BigDecimal!]
  sender: ARBITRUM_Bytes
  sender_not: ARBITRUM_Bytes
  sender_in: [ARBITRUM_Bytes!]
  sender_not_in: [ARBITRUM_Bytes!]
  sender_contains: ARBITRUM_Bytes
  sender_not_contains: ARBITRUM_Bytes
  amount0: ARBITRUM_BigDecimal
  amount0_not: ARBITRUM_BigDecimal
  amount0_gt: ARBITRUM_BigDecimal
  amount0_lt: ARBITRUM_BigDecimal
  amount0_gte: ARBITRUM_BigDecimal
  amount0_lte: ARBITRUM_BigDecimal
  amount0_in: [ARBITRUM_BigDecimal!]
  amount0_not_in: [ARBITRUM_BigDecimal!]
  amount1: ARBITRUM_BigDecimal
  amount1_not: ARBITRUM_BigDecimal
  amount1_gt: ARBITRUM_BigDecimal
  amount1_lt: ARBITRUM_BigDecimal
  amount1_gte: ARBITRUM_BigDecimal
  amount1_lte: ARBITRUM_BigDecimal
  amount1_in: [ARBITRUM_BigDecimal!]
  amount1_not_in: [ARBITRUM_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: ARBITRUM_BigDecimal
  amountUSD_not: ARBITRUM_BigDecimal
  amountUSD_gt: ARBITRUM_BigDecimal
  amountUSD_lt: ARBITRUM_BigDecimal
  amountUSD_gte: ARBITRUM_BigDecimal
  amountUSD_lte: ARBITRUM_BigDecimal
  amountUSD_in: [ARBITRUM_BigDecimal!]
  amountUSD_not_in: [ARBITRUM_BigDecimal!]
  feeTo: ARBITRUM_Bytes
  feeTo_not: ARBITRUM_Bytes
  feeTo_in: [ARBITRUM_Bytes!]
  feeTo_not_in: [ARBITRUM_Bytes!]
  feeTo_contains: ARBITRUM_Bytes
  feeTo_not_contains: ARBITRUM_Bytes
  feeLiquidity: ARBITRUM_BigDecimal
  feeLiquidity_not: ARBITRUM_BigDecimal
  feeLiquidity_gt: ARBITRUM_BigDecimal
  feeLiquidity_lt: ARBITRUM_BigDecimal
  feeLiquidity_gte: ARBITRUM_BigDecimal
  feeLiquidity_lte: ARBITRUM_BigDecimal
  feeLiquidity_in: [ARBITRUM_BigDecimal!]
  feeLiquidity_not_in: [ARBITRUM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_Mint_orderBy {
  id
  transaction
  timestamp
  pair
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

"""Defines the order direction, either ascending or descending"""
enum ARBITRUM_OrderDirection {
  asc
  desc
}

type ARBITRUM_Pair {
  id: ID!
  factory: ARBITRUM_Factory!
  name: String!
  token0: ARBITRUM_Token!
  token1: ARBITRUM_Token!
  reserve0: ARBITRUM_BigDecimal!
  reserve1: ARBITRUM_BigDecimal!
  totalSupply: ARBITRUM_BigDecimal!
  reserveETH: ARBITRUM_BigDecimal!
  reserveUSD: ARBITRUM_BigDecimal!
  trackedReserveETH: ARBITRUM_BigDecimal!
  token0Price: ARBITRUM_BigDecimal!
  token1Price: ARBITRUM_BigDecimal!
  volumeToken0: ARBITRUM_BigDecimal!
  volumeToken1: ARBITRUM_BigDecimal!
  volumeUSD: ARBITRUM_BigDecimal!
  untrackedVolumeUSD: ARBITRUM_BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_LiquidityPosition_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_LiquidityPosition_filter): [ARBITRUM_LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_LiquidityPositionSnapshot_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_LiquidityPositionSnapshot_filter): [ARBITRUM_LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_PairDayData_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_PairDayData_filter): [ARBITRUM_PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_PairHourData_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_PairHourData_filter): [ARBITRUM_PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_Mint_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_Mint_filter): [ARBITRUM_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_Burn_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_Burn_filter): [ARBITRUM_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_Swap_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_Swap_filter): [ARBITRUM_Swap!]!
  timestamp: BigInt!
  block: BigInt!
}

type ARBITRUM_PairDayData {
  id: ID!
  date: Int!
  pair: ARBITRUM_Pair!
  token0: ARBITRUM_Token!
  token1: ARBITRUM_Token!
  reserve0: ARBITRUM_BigDecimal!
  reserve1: ARBITRUM_BigDecimal!
  totalSupply: ARBITRUM_BigDecimal!
  reserveUSD: ARBITRUM_BigDecimal!
  volumeToken0: ARBITRUM_BigDecimal!
  volumeToken1: ARBITRUM_BigDecimal!
  volumeUSD: ARBITRUM_BigDecimal!
  txCount: BigInt!
}

input ARBITRUM_PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: ARBITRUM_BigDecimal
  reserve0_not: ARBITRUM_BigDecimal
  reserve0_gt: ARBITRUM_BigDecimal
  reserve0_lt: ARBITRUM_BigDecimal
  reserve0_gte: ARBITRUM_BigDecimal
  reserve0_lte: ARBITRUM_BigDecimal
  reserve0_in: [ARBITRUM_BigDecimal!]
  reserve0_not_in: [ARBITRUM_BigDecimal!]
  reserve1: ARBITRUM_BigDecimal
  reserve1_not: ARBITRUM_BigDecimal
  reserve1_gt: ARBITRUM_BigDecimal
  reserve1_lt: ARBITRUM_BigDecimal
  reserve1_gte: ARBITRUM_BigDecimal
  reserve1_lte: ARBITRUM_BigDecimal
  reserve1_in: [ARBITRUM_BigDecimal!]
  reserve1_not_in: [ARBITRUM_BigDecimal!]
  totalSupply: ARBITRUM_BigDecimal
  totalSupply_not: ARBITRUM_BigDecimal
  totalSupply_gt: ARBITRUM_BigDecimal
  totalSupply_lt: ARBITRUM_BigDecimal
  totalSupply_gte: ARBITRUM_BigDecimal
  totalSupply_lte: ARBITRUM_BigDecimal
  totalSupply_in: [ARBITRUM_BigDecimal!]
  totalSupply_not_in: [ARBITRUM_BigDecimal!]
  reserveUSD: ARBITRUM_BigDecimal
  reserveUSD_not: ARBITRUM_BigDecimal
  reserveUSD_gt: ARBITRUM_BigDecimal
  reserveUSD_lt: ARBITRUM_BigDecimal
  reserveUSD_gte: ARBITRUM_BigDecimal
  reserveUSD_lte: ARBITRUM_BigDecimal
  reserveUSD_in: [ARBITRUM_BigDecimal!]
  reserveUSD_not_in: [ARBITRUM_BigDecimal!]
  volumeToken0: ARBITRUM_BigDecimal
  volumeToken0_not: ARBITRUM_BigDecimal
  volumeToken0_gt: ARBITRUM_BigDecimal
  volumeToken0_lt: ARBITRUM_BigDecimal
  volumeToken0_gte: ARBITRUM_BigDecimal
  volumeToken0_lte: ARBITRUM_BigDecimal
  volumeToken0_in: [ARBITRUM_BigDecimal!]
  volumeToken0_not_in: [ARBITRUM_BigDecimal!]
  volumeToken1: ARBITRUM_BigDecimal
  volumeToken1_not: ARBITRUM_BigDecimal
  volumeToken1_gt: ARBITRUM_BigDecimal
  volumeToken1_lt: ARBITRUM_BigDecimal
  volumeToken1_gte: ARBITRUM_BigDecimal
  volumeToken1_lte: ARBITRUM_BigDecimal
  volumeToken1_in: [ARBITRUM_BigDecimal!]
  volumeToken1_not_in: [ARBITRUM_BigDecimal!]
  volumeUSD: ARBITRUM_BigDecimal
  volumeUSD_not: ARBITRUM_BigDecimal
  volumeUSD_gt: ARBITRUM_BigDecimal
  volumeUSD_lt: ARBITRUM_BigDecimal
  volumeUSD_gte: ARBITRUM_BigDecimal
  volumeUSD_lte: ARBITRUM_BigDecimal
  volumeUSD_in: [ARBITRUM_BigDecimal!]
  volumeUSD_not_in: [ARBITRUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_PairDayData_orderBy {
  id
  date
  pair
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

type ARBITRUM_PairHourData {
  id: ID!
  date: Int!
  pair: ARBITRUM_Pair!
  reserve0: ARBITRUM_BigDecimal!
  reserve1: ARBITRUM_BigDecimal!
  reserveUSD: ARBITRUM_BigDecimal!
  volumeToken0: ARBITRUM_BigDecimal!
  volumeToken1: ARBITRUM_BigDecimal!
  volumeUSD: ARBITRUM_BigDecimal!
  txCount: BigInt!
}

input ARBITRUM_PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  reserve0: ARBITRUM_BigDecimal
  reserve0_not: ARBITRUM_BigDecimal
  reserve0_gt: ARBITRUM_BigDecimal
  reserve0_lt: ARBITRUM_BigDecimal
  reserve0_gte: ARBITRUM_BigDecimal
  reserve0_lte: ARBITRUM_BigDecimal
  reserve0_in: [ARBITRUM_BigDecimal!]
  reserve0_not_in: [ARBITRUM_BigDecimal!]
  reserve1: ARBITRUM_BigDecimal
  reserve1_not: ARBITRUM_BigDecimal
  reserve1_gt: ARBITRUM_BigDecimal
  reserve1_lt: ARBITRUM_BigDecimal
  reserve1_gte: ARBITRUM_BigDecimal
  reserve1_lte: ARBITRUM_BigDecimal
  reserve1_in: [ARBITRUM_BigDecimal!]
  reserve1_not_in: [ARBITRUM_BigDecimal!]
  reserveUSD: ARBITRUM_BigDecimal
  reserveUSD_not: ARBITRUM_BigDecimal
  reserveUSD_gt: ARBITRUM_BigDecimal
  reserveUSD_lt: ARBITRUM_BigDecimal
  reserveUSD_gte: ARBITRUM_BigDecimal
  reserveUSD_lte: ARBITRUM_BigDecimal
  reserveUSD_in: [ARBITRUM_BigDecimal!]
  reserveUSD_not_in: [ARBITRUM_BigDecimal!]
  volumeToken0: ARBITRUM_BigDecimal
  volumeToken0_not: ARBITRUM_BigDecimal
  volumeToken0_gt: ARBITRUM_BigDecimal
  volumeToken0_lt: ARBITRUM_BigDecimal
  volumeToken0_gte: ARBITRUM_BigDecimal
  volumeToken0_lte: ARBITRUM_BigDecimal
  volumeToken0_in: [ARBITRUM_BigDecimal!]
  volumeToken0_not_in: [ARBITRUM_BigDecimal!]
  volumeToken1: ARBITRUM_BigDecimal
  volumeToken1_not: ARBITRUM_BigDecimal
  volumeToken1_gt: ARBITRUM_BigDecimal
  volumeToken1_lt: ARBITRUM_BigDecimal
  volumeToken1_gte: ARBITRUM_BigDecimal
  volumeToken1_lte: ARBITRUM_BigDecimal
  volumeToken1_in: [ARBITRUM_BigDecimal!]
  volumeToken1_not_in: [ARBITRUM_BigDecimal!]
  volumeUSD: ARBITRUM_BigDecimal
  volumeUSD_not: ARBITRUM_BigDecimal
  volumeUSD_gt: ARBITRUM_BigDecimal
  volumeUSD_lt: ARBITRUM_BigDecimal
  volumeUSD_gte: ARBITRUM_BigDecimal
  volumeUSD_lte: ARBITRUM_BigDecimal
  volumeUSD_in: [ARBITRUM_BigDecimal!]
  volumeUSD_not_in: [ARBITRUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_PairHourData_orderBy {
  id
  date
  pair
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

input ARBITRUM_Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: ARBITRUM_BigDecimal
  reserve0_not: ARBITRUM_BigDecimal
  reserve0_gt: ARBITRUM_BigDecimal
  reserve0_lt: ARBITRUM_BigDecimal
  reserve0_gte: ARBITRUM_BigDecimal
  reserve0_lte: ARBITRUM_BigDecimal
  reserve0_in: [ARBITRUM_BigDecimal!]
  reserve0_not_in: [ARBITRUM_BigDecimal!]
  reserve1: ARBITRUM_BigDecimal
  reserve1_not: ARBITRUM_BigDecimal
  reserve1_gt: ARBITRUM_BigDecimal
  reserve1_lt: ARBITRUM_BigDecimal
  reserve1_gte: ARBITRUM_BigDecimal
  reserve1_lte: ARBITRUM_BigDecimal
  reserve1_in: [ARBITRUM_BigDecimal!]
  reserve1_not_in: [ARBITRUM_BigDecimal!]
  totalSupply: ARBITRUM_BigDecimal
  totalSupply_not: ARBITRUM_BigDecimal
  totalSupply_gt: ARBITRUM_BigDecimal
  totalSupply_lt: ARBITRUM_BigDecimal
  totalSupply_gte: ARBITRUM_BigDecimal
  totalSupply_lte: ARBITRUM_BigDecimal
  totalSupply_in: [ARBITRUM_BigDecimal!]
  totalSupply_not_in: [ARBITRUM_BigDecimal!]
  reserveETH: ARBITRUM_BigDecimal
  reserveETH_not: ARBITRUM_BigDecimal
  reserveETH_gt: ARBITRUM_BigDecimal
  reserveETH_lt: ARBITRUM_BigDecimal
  reserveETH_gte: ARBITRUM_BigDecimal
  reserveETH_lte: ARBITRUM_BigDecimal
  reserveETH_in: [ARBITRUM_BigDecimal!]
  reserveETH_not_in: [ARBITRUM_BigDecimal!]
  reserveUSD: ARBITRUM_BigDecimal
  reserveUSD_not: ARBITRUM_BigDecimal
  reserveUSD_gt: ARBITRUM_BigDecimal
  reserveUSD_lt: ARBITRUM_BigDecimal
  reserveUSD_gte: ARBITRUM_BigDecimal
  reserveUSD_lte: ARBITRUM_BigDecimal
  reserveUSD_in: [ARBITRUM_BigDecimal!]
  reserveUSD_not_in: [ARBITRUM_BigDecimal!]
  trackedReserveETH: ARBITRUM_BigDecimal
  trackedReserveETH_not: ARBITRUM_BigDecimal
  trackedReserveETH_gt: ARBITRUM_BigDecimal
  trackedReserveETH_lt: ARBITRUM_BigDecimal
  trackedReserveETH_gte: ARBITRUM_BigDecimal
  trackedReserveETH_lte: ARBITRUM_BigDecimal
  trackedReserveETH_in: [ARBITRUM_BigDecimal!]
  trackedReserveETH_not_in: [ARBITRUM_BigDecimal!]
  token0Price: ARBITRUM_BigDecimal
  token0Price_not: ARBITRUM_BigDecimal
  token0Price_gt: ARBITRUM_BigDecimal
  token0Price_lt: ARBITRUM_BigDecimal
  token0Price_gte: ARBITRUM_BigDecimal
  token0Price_lte: ARBITRUM_BigDecimal
  token0Price_in: [ARBITRUM_BigDecimal!]
  token0Price_not_in: [ARBITRUM_BigDecimal!]
  token1Price: ARBITRUM_BigDecimal
  token1Price_not: ARBITRUM_BigDecimal
  token1Price_gt: ARBITRUM_BigDecimal
  token1Price_lt: ARBITRUM_BigDecimal
  token1Price_gte: ARBITRUM_BigDecimal
  token1Price_lte: ARBITRUM_BigDecimal
  token1Price_in: [ARBITRUM_BigDecimal!]
  token1Price_not_in: [ARBITRUM_BigDecimal!]
  volumeToken0: ARBITRUM_BigDecimal
  volumeToken0_not: ARBITRUM_BigDecimal
  volumeToken0_gt: ARBITRUM_BigDecimal
  volumeToken0_lt: ARBITRUM_BigDecimal
  volumeToken0_gte: ARBITRUM_BigDecimal
  volumeToken0_lte: ARBITRUM_BigDecimal
  volumeToken0_in: [ARBITRUM_BigDecimal!]
  volumeToken0_not_in: [ARBITRUM_BigDecimal!]
  volumeToken1: ARBITRUM_BigDecimal
  volumeToken1_not: ARBITRUM_BigDecimal
  volumeToken1_gt: ARBITRUM_BigDecimal
  volumeToken1_lt: ARBITRUM_BigDecimal
  volumeToken1_gte: ARBITRUM_BigDecimal
  volumeToken1_lte: ARBITRUM_BigDecimal
  volumeToken1_in: [ARBITRUM_BigDecimal!]
  volumeToken1_not_in: [ARBITRUM_BigDecimal!]
  volumeUSD: ARBITRUM_BigDecimal
  volumeUSD_not: ARBITRUM_BigDecimal
  volumeUSD_gt: ARBITRUM_BigDecimal
  volumeUSD_lt: ARBITRUM_BigDecimal
  volumeUSD_gte: ARBITRUM_BigDecimal
  volumeUSD_lte: ARBITRUM_BigDecimal
  volumeUSD_in: [ARBITRUM_BigDecimal!]
  volumeUSD_not_in: [ARBITRUM_BigDecimal!]
  untrackedVolumeUSD: ARBITRUM_BigDecimal
  untrackedVolumeUSD_not: ARBITRUM_BigDecimal
  untrackedVolumeUSD_gt: ARBITRUM_BigDecimal
  untrackedVolumeUSD_lt: ARBITRUM_BigDecimal
  untrackedVolumeUSD_gte: ARBITRUM_BigDecimal
  untrackedVolumeUSD_lte: ARBITRUM_BigDecimal
  untrackedVolumeUSD_in: [ARBITRUM_BigDecimal!]
  untrackedVolumeUSD_not_in: [ARBITRUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_Pair_orderBy {
  id
  factory
  name
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
}

type ARBITRUM_Swap {
  id: ID!
  transaction: ARBITRUM_Transaction!
  timestamp: BigInt!
  pair: ARBITRUM_Pair!
  sender: ARBITRUM_Bytes!
  amount0In: ARBITRUM_BigDecimal!
  amount1In: ARBITRUM_BigDecimal!
  amount0Out: ARBITRUM_BigDecimal!
  amount1Out: ARBITRUM_BigDecimal!
  to: ARBITRUM_Bytes!
  logIndex: BigInt
  amountUSD: ARBITRUM_BigDecimal!
}

input ARBITRUM_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  sender: ARBITRUM_Bytes
  sender_not: ARBITRUM_Bytes
  sender_in: [ARBITRUM_Bytes!]
  sender_not_in: [ARBITRUM_Bytes!]
  sender_contains: ARBITRUM_Bytes
  sender_not_contains: ARBITRUM_Bytes
  amount0In: ARBITRUM_BigDecimal
  amount0In_not: ARBITRUM_BigDecimal
  amount0In_gt: ARBITRUM_BigDecimal
  amount0In_lt: ARBITRUM_BigDecimal
  amount0In_gte: ARBITRUM_BigDecimal
  amount0In_lte: ARBITRUM_BigDecimal
  amount0In_in: [ARBITRUM_BigDecimal!]
  amount0In_not_in: [ARBITRUM_BigDecimal!]
  amount1In: ARBITRUM_BigDecimal
  amount1In_not: ARBITRUM_BigDecimal
  amount1In_gt: ARBITRUM_BigDecimal
  amount1In_lt: ARBITRUM_BigDecimal
  amount1In_gte: ARBITRUM_BigDecimal
  amount1In_lte: ARBITRUM_BigDecimal
  amount1In_in: [ARBITRUM_BigDecimal!]
  amount1In_not_in: [ARBITRUM_BigDecimal!]
  amount0Out: ARBITRUM_BigDecimal
  amount0Out_not: ARBITRUM_BigDecimal
  amount0Out_gt: ARBITRUM_BigDecimal
  amount0Out_lt: ARBITRUM_BigDecimal
  amount0Out_gte: ARBITRUM_BigDecimal
  amount0Out_lte: ARBITRUM_BigDecimal
  amount0Out_in: [ARBITRUM_BigDecimal!]
  amount0Out_not_in: [ARBITRUM_BigDecimal!]
  amount1Out: ARBITRUM_BigDecimal
  amount1Out_not: ARBITRUM_BigDecimal
  amount1Out_gt: ARBITRUM_BigDecimal
  amount1Out_lt: ARBITRUM_BigDecimal
  amount1Out_gte: ARBITRUM_BigDecimal
  amount1Out_lte: ARBITRUM_BigDecimal
  amount1Out_in: [ARBITRUM_BigDecimal!]
  amount1Out_not_in: [ARBITRUM_BigDecimal!]
  to: ARBITRUM_Bytes
  to_not: ARBITRUM_Bytes
  to_in: [ARBITRUM_Bytes!]
  to_not_in: [ARBITRUM_Bytes!]
  to_contains: ARBITRUM_Bytes
  to_not_contains: ARBITRUM_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: ARBITRUM_BigDecimal
  amountUSD_not: ARBITRUM_BigDecimal
  amountUSD_gt: ARBITRUM_BigDecimal
  amountUSD_lt: ARBITRUM_BigDecimal
  amountUSD_gte: ARBITRUM_BigDecimal
  amountUSD_lte: ARBITRUM_BigDecimal
  amountUSD_in: [ARBITRUM_BigDecimal!]
  amountUSD_not_in: [ARBITRUM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_Swap_orderBy {
  id
  transaction
  timestamp
  pair
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
}

type ARBITRUM_Token {
  id: ID!
  factory: ARBITRUM_Factory!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: ARBITRUM_BigDecimal!
  volumeUSD: ARBITRUM_BigDecimal!
  untrackedVolumeUSD: ARBITRUM_BigDecimal!
  txCount: BigInt!
  liquidity: ARBITRUM_BigDecimal!
  derivedETH: ARBITRUM_BigDecimal!
  whitelistPairs(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_Pair_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_Pair_filter): [ARBITRUM_Pair!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_TokenHourData_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_TokenHourData_filter): [ARBITRUM_TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_TokenDayData_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_TokenDayData_filter): [ARBITRUM_TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_Pair_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_Pair_filter): [ARBITRUM_Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_Pair_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_Pair_filter): [ARBITRUM_Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_PairDayData_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_PairDayData_filter): [ARBITRUM_PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_PairDayData_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_PairDayData_filter): [ARBITRUM_PairDayData!]!
}

type ARBITRUM_TokenDayData {
  id: ID!
  date: Int!
  token: ARBITRUM_Token!
  volume: ARBITRUM_BigDecimal!
  volumeETH: ARBITRUM_BigDecimal!
  volumeUSD: ARBITRUM_BigDecimal!
  txCount: BigInt!
  liquidity: ARBITRUM_BigDecimal!
  liquidityETH: ARBITRUM_BigDecimal!
  liquidityUSD: ARBITRUM_BigDecimal!
  priceUSD: ARBITRUM_BigDecimal!
}

input ARBITRUM_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: ARBITRUM_BigDecimal
  volume_not: ARBITRUM_BigDecimal
  volume_gt: ARBITRUM_BigDecimal
  volume_lt: ARBITRUM_BigDecimal
  volume_gte: ARBITRUM_BigDecimal
  volume_lte: ARBITRUM_BigDecimal
  volume_in: [ARBITRUM_BigDecimal!]
  volume_not_in: [ARBITRUM_BigDecimal!]
  volumeETH: ARBITRUM_BigDecimal
  volumeETH_not: ARBITRUM_BigDecimal
  volumeETH_gt: ARBITRUM_BigDecimal
  volumeETH_lt: ARBITRUM_BigDecimal
  volumeETH_gte: ARBITRUM_BigDecimal
  volumeETH_lte: ARBITRUM_BigDecimal
  volumeETH_in: [ARBITRUM_BigDecimal!]
  volumeETH_not_in: [ARBITRUM_BigDecimal!]
  volumeUSD: ARBITRUM_BigDecimal
  volumeUSD_not: ARBITRUM_BigDecimal
  volumeUSD_gt: ARBITRUM_BigDecimal
  volumeUSD_lt: ARBITRUM_BigDecimal
  volumeUSD_gte: ARBITRUM_BigDecimal
  volumeUSD_lte: ARBITRUM_BigDecimal
  volumeUSD_in: [ARBITRUM_BigDecimal!]
  volumeUSD_not_in: [ARBITRUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: ARBITRUM_BigDecimal
  liquidity_not: ARBITRUM_BigDecimal
  liquidity_gt: ARBITRUM_BigDecimal
  liquidity_lt: ARBITRUM_BigDecimal
  liquidity_gte: ARBITRUM_BigDecimal
  liquidity_lte: ARBITRUM_BigDecimal
  liquidity_in: [ARBITRUM_BigDecimal!]
  liquidity_not_in: [ARBITRUM_BigDecimal!]
  liquidityETH: ARBITRUM_BigDecimal
  liquidityETH_not: ARBITRUM_BigDecimal
  liquidityETH_gt: ARBITRUM_BigDecimal
  liquidityETH_lt: ARBITRUM_BigDecimal
  liquidityETH_gte: ARBITRUM_BigDecimal
  liquidityETH_lte: ARBITRUM_BigDecimal
  liquidityETH_in: [ARBITRUM_BigDecimal!]
  liquidityETH_not_in: [ARBITRUM_BigDecimal!]
  liquidityUSD: ARBITRUM_BigDecimal
  liquidityUSD_not: ARBITRUM_BigDecimal
  liquidityUSD_gt: ARBITRUM_BigDecimal
  liquidityUSD_lt: ARBITRUM_BigDecimal
  liquidityUSD_gte: ARBITRUM_BigDecimal
  liquidityUSD_lte: ARBITRUM_BigDecimal
  liquidityUSD_in: [ARBITRUM_BigDecimal!]
  liquidityUSD_not_in: [ARBITRUM_BigDecimal!]
  priceUSD: ARBITRUM_BigDecimal
  priceUSD_not: ARBITRUM_BigDecimal
  priceUSD_gt: ARBITRUM_BigDecimal
  priceUSD_lt: ARBITRUM_BigDecimal
  priceUSD_gte: ARBITRUM_BigDecimal
  priceUSD_lte: ARBITRUM_BigDecimal
  priceUSD_in: [ARBITRUM_BigDecimal!]
  priceUSD_not_in: [ARBITRUM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_TokenDayData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

type ARBITRUM_TokenHourData {
  id: ID!
  date: Int!
  token: ARBITRUM_Token!
  volume: ARBITRUM_BigDecimal!
  volumeETH: ARBITRUM_BigDecimal!
  volumeUSD: ARBITRUM_BigDecimal!
  txCount: BigInt!
  liquidity: ARBITRUM_BigDecimal!
  liquidityETH: ARBITRUM_BigDecimal!
  liquidityUSD: ARBITRUM_BigDecimal!
  priceUSD: ARBITRUM_BigDecimal!
}

input ARBITRUM_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: ARBITRUM_BigDecimal
  volume_not: ARBITRUM_BigDecimal
  volume_gt: ARBITRUM_BigDecimal
  volume_lt: ARBITRUM_BigDecimal
  volume_gte: ARBITRUM_BigDecimal
  volume_lte: ARBITRUM_BigDecimal
  volume_in: [ARBITRUM_BigDecimal!]
  volume_not_in: [ARBITRUM_BigDecimal!]
  volumeETH: ARBITRUM_BigDecimal
  volumeETH_not: ARBITRUM_BigDecimal
  volumeETH_gt: ARBITRUM_BigDecimal
  volumeETH_lt: ARBITRUM_BigDecimal
  volumeETH_gte: ARBITRUM_BigDecimal
  volumeETH_lte: ARBITRUM_BigDecimal
  volumeETH_in: [ARBITRUM_BigDecimal!]
  volumeETH_not_in: [ARBITRUM_BigDecimal!]
  volumeUSD: ARBITRUM_BigDecimal
  volumeUSD_not: ARBITRUM_BigDecimal
  volumeUSD_gt: ARBITRUM_BigDecimal
  volumeUSD_lt: ARBITRUM_BigDecimal
  volumeUSD_gte: ARBITRUM_BigDecimal
  volumeUSD_lte: ARBITRUM_BigDecimal
  volumeUSD_in: [ARBITRUM_BigDecimal!]
  volumeUSD_not_in: [ARBITRUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: ARBITRUM_BigDecimal
  liquidity_not: ARBITRUM_BigDecimal
  liquidity_gt: ARBITRUM_BigDecimal
  liquidity_lt: ARBITRUM_BigDecimal
  liquidity_gte: ARBITRUM_BigDecimal
  liquidity_lte: ARBITRUM_BigDecimal
  liquidity_in: [ARBITRUM_BigDecimal!]
  liquidity_not_in: [ARBITRUM_BigDecimal!]
  liquidityETH: ARBITRUM_BigDecimal
  liquidityETH_not: ARBITRUM_BigDecimal
  liquidityETH_gt: ARBITRUM_BigDecimal
  liquidityETH_lt: ARBITRUM_BigDecimal
  liquidityETH_gte: ARBITRUM_BigDecimal
  liquidityETH_lte: ARBITRUM_BigDecimal
  liquidityETH_in: [ARBITRUM_BigDecimal!]
  liquidityETH_not_in: [ARBITRUM_BigDecimal!]
  liquidityUSD: ARBITRUM_BigDecimal
  liquidityUSD_not: ARBITRUM_BigDecimal
  liquidityUSD_gt: ARBITRUM_BigDecimal
  liquidityUSD_lt: ARBITRUM_BigDecimal
  liquidityUSD_gte: ARBITRUM_BigDecimal
  liquidityUSD_lte: ARBITRUM_BigDecimal
  liquidityUSD_in: [ARBITRUM_BigDecimal!]
  liquidityUSD_not_in: [ARBITRUM_BigDecimal!]
  priceUSD: ARBITRUM_BigDecimal
  priceUSD_not: ARBITRUM_BigDecimal
  priceUSD_gt: ARBITRUM_BigDecimal
  priceUSD_lt: ARBITRUM_BigDecimal
  priceUSD_gte: ARBITRUM_BigDecimal
  priceUSD_lte: ARBITRUM_BigDecimal
  priceUSD_in: [ARBITRUM_BigDecimal!]
  priceUSD_not_in: [ARBITRUM_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_TokenHourData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

input ARBITRUM_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: ARBITRUM_BigDecimal
  volume_not: ARBITRUM_BigDecimal
  volume_gt: ARBITRUM_BigDecimal
  volume_lt: ARBITRUM_BigDecimal
  volume_gte: ARBITRUM_BigDecimal
  volume_lte: ARBITRUM_BigDecimal
  volume_in: [ARBITRUM_BigDecimal!]
  volume_not_in: [ARBITRUM_BigDecimal!]
  volumeUSD: ARBITRUM_BigDecimal
  volumeUSD_not: ARBITRUM_BigDecimal
  volumeUSD_gt: ARBITRUM_BigDecimal
  volumeUSD_lt: ARBITRUM_BigDecimal
  volumeUSD_gte: ARBITRUM_BigDecimal
  volumeUSD_lte: ARBITRUM_BigDecimal
  volumeUSD_in: [ARBITRUM_BigDecimal!]
  volumeUSD_not_in: [ARBITRUM_BigDecimal!]
  untrackedVolumeUSD: ARBITRUM_BigDecimal
  untrackedVolumeUSD_not: ARBITRUM_BigDecimal
  untrackedVolumeUSD_gt: ARBITRUM_BigDecimal
  untrackedVolumeUSD_lt: ARBITRUM_BigDecimal
  untrackedVolumeUSD_gte: ARBITRUM_BigDecimal
  untrackedVolumeUSD_lte: ARBITRUM_BigDecimal
  untrackedVolumeUSD_in: [ARBITRUM_BigDecimal!]
  untrackedVolumeUSD_not_in: [ARBITRUM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: ARBITRUM_BigDecimal
  liquidity_not: ARBITRUM_BigDecimal
  liquidity_gt: ARBITRUM_BigDecimal
  liquidity_lt: ARBITRUM_BigDecimal
  liquidity_gte: ARBITRUM_BigDecimal
  liquidity_lte: ARBITRUM_BigDecimal
  liquidity_in: [ARBITRUM_BigDecimal!]
  liquidity_not_in: [ARBITRUM_BigDecimal!]
  derivedETH: ARBITRUM_BigDecimal
  derivedETH_not: ARBITRUM_BigDecimal
  derivedETH_gt: ARBITRUM_BigDecimal
  derivedETH_lt: ARBITRUM_BigDecimal
  derivedETH_gte: ARBITRUM_BigDecimal
  derivedETH_lte: ARBITRUM_BigDecimal
  derivedETH_in: [ARBITRUM_BigDecimal!]
  derivedETH_not_in: [ARBITRUM_BigDecimal!]
  whitelistPairs: [String!]
  whitelistPairs_not: [String!]
  whitelistPairs_contains: [String!]
  whitelistPairs_contains_nocase: [String!]
  whitelistPairs_not_contains: [String!]
  whitelistPairs_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_Token_orderBy {
  id
  factory
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  whitelistPairs
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
}

type ARBITRUM_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_Mint_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_Mint_filter): [ARBITRUM_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_Burn_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_Burn_filter): [ARBITRUM_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_Swap_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_Swap_filter): [ARBITRUM_Swap]!
}

input ARBITRUM_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
}

type ARBITRUM_User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: ARBITRUM_LiquidityPosition_orderBy, orderDirection: ARBITRUM_OrderDirection, where: ARBITRUM_LiquidityPosition_filter): [ARBITRUM_LiquidityPosition!]!
}

input ARBITRUM_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]

  """Filter for the block changed event."""
  _change_block: ARBITRUM_BlockChangedFilter
}

enum ARBITRUM_User_orderBy {
  id
  liquidityPositions
}

type ARBITRUM__Block_ {
  """The hash of the block"""
  hash: ARBITRUM_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type ARBITRUM__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: ARBITRUM__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar MOONRIVER_BigDecimal

input MOONRIVER_BlockChangedFilter {
  number_gte: Int!
}

input MOONRIVER_Block_height {
  hash: MOONRIVER_Bytes
  number: Int
  number_gte: Int
}

type MOONRIVER_Bundle {
  id: ID!
  ethPrice: MOONRIVER_BigDecimal!
}

input MOONRIVER_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: MOONRIVER_BigDecimal
  ethPrice_not: MOONRIVER_BigDecimal
  ethPrice_gt: MOONRIVER_BigDecimal
  ethPrice_lt: MOONRIVER_BigDecimal
  ethPrice_gte: MOONRIVER_BigDecimal
  ethPrice_lte: MOONRIVER_BigDecimal
  ethPrice_in: [MOONRIVER_BigDecimal!]
  ethPrice_not_in: [MOONRIVER_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_Bundle_orderBy {
  id
  ethPrice
}

type MOONRIVER_Burn {
  id: ID!
  transaction: MOONRIVER_Transaction!
  timestamp: BigInt!
  pair: MOONRIVER_Pair!
  liquidity: MOONRIVER_BigDecimal!
  sender: MOONRIVER_Bytes
  amount0: MOONRIVER_BigDecimal
  amount1: MOONRIVER_BigDecimal
  to: MOONRIVER_Bytes
  logIndex: BigInt
  amountUSD: MOONRIVER_BigDecimal
  complete: Boolean!
  feeTo: MOONRIVER_Bytes
  feeLiquidity: MOONRIVER_BigDecimal
}

input MOONRIVER_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidity: MOONRIVER_BigDecimal
  liquidity_not: MOONRIVER_BigDecimal
  liquidity_gt: MOONRIVER_BigDecimal
  liquidity_lt: MOONRIVER_BigDecimal
  liquidity_gte: MOONRIVER_BigDecimal
  liquidity_lte: MOONRIVER_BigDecimal
  liquidity_in: [MOONRIVER_BigDecimal!]
  liquidity_not_in: [MOONRIVER_BigDecimal!]
  sender: MOONRIVER_Bytes
  sender_not: MOONRIVER_Bytes
  sender_in: [MOONRIVER_Bytes!]
  sender_not_in: [MOONRIVER_Bytes!]
  sender_contains: MOONRIVER_Bytes
  sender_not_contains: MOONRIVER_Bytes
  amount0: MOONRIVER_BigDecimal
  amount0_not: MOONRIVER_BigDecimal
  amount0_gt: MOONRIVER_BigDecimal
  amount0_lt: MOONRIVER_BigDecimal
  amount0_gte: MOONRIVER_BigDecimal
  amount0_lte: MOONRIVER_BigDecimal
  amount0_in: [MOONRIVER_BigDecimal!]
  amount0_not_in: [MOONRIVER_BigDecimal!]
  amount1: MOONRIVER_BigDecimal
  amount1_not: MOONRIVER_BigDecimal
  amount1_gt: MOONRIVER_BigDecimal
  amount1_lt: MOONRIVER_BigDecimal
  amount1_gte: MOONRIVER_BigDecimal
  amount1_lte: MOONRIVER_BigDecimal
  amount1_in: [MOONRIVER_BigDecimal!]
  amount1_not_in: [MOONRIVER_BigDecimal!]
  to: MOONRIVER_Bytes
  to_not: MOONRIVER_Bytes
  to_in: [MOONRIVER_Bytes!]
  to_not_in: [MOONRIVER_Bytes!]
  to_contains: MOONRIVER_Bytes
  to_not_contains: MOONRIVER_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: MOONRIVER_BigDecimal
  amountUSD_not: MOONRIVER_BigDecimal
  amountUSD_gt: MOONRIVER_BigDecimal
  amountUSD_lt: MOONRIVER_BigDecimal
  amountUSD_gte: MOONRIVER_BigDecimal
  amountUSD_lte: MOONRIVER_BigDecimal
  amountUSD_in: [MOONRIVER_BigDecimal!]
  amountUSD_not_in: [MOONRIVER_BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: MOONRIVER_Bytes
  feeTo_not: MOONRIVER_Bytes
  feeTo_in: [MOONRIVER_Bytes!]
  feeTo_not_in: [MOONRIVER_Bytes!]
  feeTo_contains: MOONRIVER_Bytes
  feeTo_not_contains: MOONRIVER_Bytes
  feeLiquidity: MOONRIVER_BigDecimal
  feeLiquidity_not: MOONRIVER_BigDecimal
  feeLiquidity_gt: MOONRIVER_BigDecimal
  feeLiquidity_lt: MOONRIVER_BigDecimal
  feeLiquidity_gte: MOONRIVER_BigDecimal
  feeLiquidity_lte: MOONRIVER_BigDecimal
  feeLiquidity_in: [MOONRIVER_BigDecimal!]
  feeLiquidity_not_in: [MOONRIVER_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_Burn_orderBy {
  id
  transaction
  timestamp
  pair
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

scalar MOONRIVER_Bytes

type MOONRIVER_DayData {
  id: ID!
  date: Int!
  factory: MOONRIVER_Factory!
  volumeETH: MOONRIVER_BigDecimal!
  volumeUSD: MOONRIVER_BigDecimal!
  untrackedVolume: MOONRIVER_BigDecimal!
  liquidityETH: MOONRIVER_BigDecimal!
  liquidityUSD: MOONRIVER_BigDecimal!
  txCount: BigInt!
}

input MOONRIVER_DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: MOONRIVER_BigDecimal
  volumeETH_not: MOONRIVER_BigDecimal
  volumeETH_gt: MOONRIVER_BigDecimal
  volumeETH_lt: MOONRIVER_BigDecimal
  volumeETH_gte: MOONRIVER_BigDecimal
  volumeETH_lte: MOONRIVER_BigDecimal
  volumeETH_in: [MOONRIVER_BigDecimal!]
  volumeETH_not_in: [MOONRIVER_BigDecimal!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  untrackedVolume: MOONRIVER_BigDecimal
  untrackedVolume_not: MOONRIVER_BigDecimal
  untrackedVolume_gt: MOONRIVER_BigDecimal
  untrackedVolume_lt: MOONRIVER_BigDecimal
  untrackedVolume_gte: MOONRIVER_BigDecimal
  untrackedVolume_lte: MOONRIVER_BigDecimal
  untrackedVolume_in: [MOONRIVER_BigDecimal!]
  untrackedVolume_not_in: [MOONRIVER_BigDecimal!]
  liquidityETH: MOONRIVER_BigDecimal
  liquidityETH_not: MOONRIVER_BigDecimal
  liquidityETH_gt: MOONRIVER_BigDecimal
  liquidityETH_lt: MOONRIVER_BigDecimal
  liquidityETH_gte: MOONRIVER_BigDecimal
  liquidityETH_lte: MOONRIVER_BigDecimal
  liquidityETH_in: [MOONRIVER_BigDecimal!]
  liquidityETH_not_in: [MOONRIVER_BigDecimal!]
  liquidityUSD: MOONRIVER_BigDecimal
  liquidityUSD_not: MOONRIVER_BigDecimal
  liquidityUSD_gt: MOONRIVER_BigDecimal
  liquidityUSD_lt: MOONRIVER_BigDecimal
  liquidityUSD_gte: MOONRIVER_BigDecimal
  liquidityUSD_lte: MOONRIVER_BigDecimal
  liquidityUSD_in: [MOONRIVER_BigDecimal!]
  liquidityUSD_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_DayData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type MOONRIVER_Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: MOONRIVER_BigDecimal!
  volumeETH: MOONRIVER_BigDecimal!
  untrackedVolumeUSD: MOONRIVER_BigDecimal!
  liquidityUSD: MOONRIVER_BigDecimal!
  liquidityETH: MOONRIVER_BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Pair_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Pair_filter): [MOONRIVER_Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Token_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Token_filter): [MOONRIVER_Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_HourData_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_HourData_filter): [MOONRIVER_HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_DayData_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_DayData_filter): [MOONRIVER_DayData!]!
}

input MOONRIVER_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  volumeETH: MOONRIVER_BigDecimal
  volumeETH_not: MOONRIVER_BigDecimal
  volumeETH_gt: MOONRIVER_BigDecimal
  volumeETH_lt: MOONRIVER_BigDecimal
  volumeETH_gte: MOONRIVER_BigDecimal
  volumeETH_lte: MOONRIVER_BigDecimal
  volumeETH_in: [MOONRIVER_BigDecimal!]
  volumeETH_not_in: [MOONRIVER_BigDecimal!]
  untrackedVolumeUSD: MOONRIVER_BigDecimal
  untrackedVolumeUSD_not: MOONRIVER_BigDecimal
  untrackedVolumeUSD_gt: MOONRIVER_BigDecimal
  untrackedVolumeUSD_lt: MOONRIVER_BigDecimal
  untrackedVolumeUSD_gte: MOONRIVER_BigDecimal
  untrackedVolumeUSD_lte: MOONRIVER_BigDecimal
  untrackedVolumeUSD_in: [MOONRIVER_BigDecimal!]
  untrackedVolumeUSD_not_in: [MOONRIVER_BigDecimal!]
  liquidityUSD: MOONRIVER_BigDecimal
  liquidityUSD_not: MOONRIVER_BigDecimal
  liquidityUSD_gt: MOONRIVER_BigDecimal
  liquidityUSD_lt: MOONRIVER_BigDecimal
  liquidityUSD_gte: MOONRIVER_BigDecimal
  liquidityUSD_lte: MOONRIVER_BigDecimal
  liquidityUSD_in: [MOONRIVER_BigDecimal!]
  liquidityUSD_not_in: [MOONRIVER_BigDecimal!]
  liquidityETH: MOONRIVER_BigDecimal
  liquidityETH_not: MOONRIVER_BigDecimal
  liquidityETH_gt: MOONRIVER_BigDecimal
  liquidityETH_lt: MOONRIVER_BigDecimal
  liquidityETH_gte: MOONRIVER_BigDecimal
  liquidityETH_lte: MOONRIVER_BigDecimal
  liquidityETH_in: [MOONRIVER_BigDecimal!]
  liquidityETH_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
}

type MOONRIVER_HourData {
  id: ID!
  date: Int!
  factory: MOONRIVER_Factory!
  volumeETH: MOONRIVER_BigDecimal!
  volumeUSD: MOONRIVER_BigDecimal!
  untrackedVolume: MOONRIVER_BigDecimal!
  liquidityETH: MOONRIVER_BigDecimal!
  liquidityUSD: MOONRIVER_BigDecimal!
  txCount: BigInt!
}

input MOONRIVER_HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: MOONRIVER_BigDecimal
  volumeETH_not: MOONRIVER_BigDecimal
  volumeETH_gt: MOONRIVER_BigDecimal
  volumeETH_lt: MOONRIVER_BigDecimal
  volumeETH_gte: MOONRIVER_BigDecimal
  volumeETH_lte: MOONRIVER_BigDecimal
  volumeETH_in: [MOONRIVER_BigDecimal!]
  volumeETH_not_in: [MOONRIVER_BigDecimal!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  untrackedVolume: MOONRIVER_BigDecimal
  untrackedVolume_not: MOONRIVER_BigDecimal
  untrackedVolume_gt: MOONRIVER_BigDecimal
  untrackedVolume_lt: MOONRIVER_BigDecimal
  untrackedVolume_gte: MOONRIVER_BigDecimal
  untrackedVolume_lte: MOONRIVER_BigDecimal
  untrackedVolume_in: [MOONRIVER_BigDecimal!]
  untrackedVolume_not_in: [MOONRIVER_BigDecimal!]
  liquidityETH: MOONRIVER_BigDecimal
  liquidityETH_not: MOONRIVER_BigDecimal
  liquidityETH_gt: MOONRIVER_BigDecimal
  liquidityETH_lt: MOONRIVER_BigDecimal
  liquidityETH_gte: MOONRIVER_BigDecimal
  liquidityETH_lte: MOONRIVER_BigDecimal
  liquidityETH_in: [MOONRIVER_BigDecimal!]
  liquidityETH_not_in: [MOONRIVER_BigDecimal!]
  liquidityUSD: MOONRIVER_BigDecimal
  liquidityUSD_not: MOONRIVER_BigDecimal
  liquidityUSD_gt: MOONRIVER_BigDecimal
  liquidityUSD_lt: MOONRIVER_BigDecimal
  liquidityUSD_gte: MOONRIVER_BigDecimal
  liquidityUSD_lte: MOONRIVER_BigDecimal
  liquidityUSD_in: [MOONRIVER_BigDecimal!]
  liquidityUSD_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_HourData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type MOONRIVER_LiquidityPosition {
  id: ID!
  user: MOONRIVER_User!
  pair: MOONRIVER_Pair!
  liquidityTokenBalance: MOONRIVER_BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_LiquidityPositionSnapshot_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_LiquidityPositionSnapshot_filter): [MOONRIVER_LiquidityPositionSnapshot]!
  block: Int!
  timestamp: Int!
}

type MOONRIVER_LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: MOONRIVER_LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: MOONRIVER_User!
  pair: MOONRIVER_Pair!
  token0PriceUSD: MOONRIVER_BigDecimal!
  token1PriceUSD: MOONRIVER_BigDecimal!
  reserve0: MOONRIVER_BigDecimal!
  reserve1: MOONRIVER_BigDecimal!
  reserveUSD: MOONRIVER_BigDecimal!
  liquidityTokenTotalSupply: MOONRIVER_BigDecimal!
  liquidityTokenBalance: MOONRIVER_BigDecimal!
}

input MOONRIVER_LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0PriceUSD: MOONRIVER_BigDecimal
  token0PriceUSD_not: MOONRIVER_BigDecimal
  token0PriceUSD_gt: MOONRIVER_BigDecimal
  token0PriceUSD_lt: MOONRIVER_BigDecimal
  token0PriceUSD_gte: MOONRIVER_BigDecimal
  token0PriceUSD_lte: MOONRIVER_BigDecimal
  token0PriceUSD_in: [MOONRIVER_BigDecimal!]
  token0PriceUSD_not_in: [MOONRIVER_BigDecimal!]
  token1PriceUSD: MOONRIVER_BigDecimal
  token1PriceUSD_not: MOONRIVER_BigDecimal
  token1PriceUSD_gt: MOONRIVER_BigDecimal
  token1PriceUSD_lt: MOONRIVER_BigDecimal
  token1PriceUSD_gte: MOONRIVER_BigDecimal
  token1PriceUSD_lte: MOONRIVER_BigDecimal
  token1PriceUSD_in: [MOONRIVER_BigDecimal!]
  token1PriceUSD_not_in: [MOONRIVER_BigDecimal!]
  reserve0: MOONRIVER_BigDecimal
  reserve0_not: MOONRIVER_BigDecimal
  reserve0_gt: MOONRIVER_BigDecimal
  reserve0_lt: MOONRIVER_BigDecimal
  reserve0_gte: MOONRIVER_BigDecimal
  reserve0_lte: MOONRIVER_BigDecimal
  reserve0_in: [MOONRIVER_BigDecimal!]
  reserve0_not_in: [MOONRIVER_BigDecimal!]
  reserve1: MOONRIVER_BigDecimal
  reserve1_not: MOONRIVER_BigDecimal
  reserve1_gt: MOONRIVER_BigDecimal
  reserve1_lt: MOONRIVER_BigDecimal
  reserve1_gte: MOONRIVER_BigDecimal
  reserve1_lte: MOONRIVER_BigDecimal
  reserve1_in: [MOONRIVER_BigDecimal!]
  reserve1_not_in: [MOONRIVER_BigDecimal!]
  reserveUSD: MOONRIVER_BigDecimal
  reserveUSD_not: MOONRIVER_BigDecimal
  reserveUSD_gt: MOONRIVER_BigDecimal
  reserveUSD_lt: MOONRIVER_BigDecimal
  reserveUSD_gte: MOONRIVER_BigDecimal
  reserveUSD_lte: MOONRIVER_BigDecimal
  reserveUSD_in: [MOONRIVER_BigDecimal!]
  reserveUSD_not_in: [MOONRIVER_BigDecimal!]
  liquidityTokenTotalSupply: MOONRIVER_BigDecimal
  liquidityTokenTotalSupply_not: MOONRIVER_BigDecimal
  liquidityTokenTotalSupply_gt: MOONRIVER_BigDecimal
  liquidityTokenTotalSupply_lt: MOONRIVER_BigDecimal
  liquidityTokenTotalSupply_gte: MOONRIVER_BigDecimal
  liquidityTokenTotalSupply_lte: MOONRIVER_BigDecimal
  liquidityTokenTotalSupply_in: [MOONRIVER_BigDecimal!]
  liquidityTokenTotalSupply_not_in: [MOONRIVER_BigDecimal!]
  liquidityTokenBalance: MOONRIVER_BigDecimal
  liquidityTokenBalance_not: MOONRIVER_BigDecimal
  liquidityTokenBalance_gt: MOONRIVER_BigDecimal
  liquidityTokenBalance_lt: MOONRIVER_BigDecimal
  liquidityTokenBalance_gte: MOONRIVER_BigDecimal
  liquidityTokenBalance_lte: MOONRIVER_BigDecimal
  liquidityTokenBalance_in: [MOONRIVER_BigDecimal!]
  liquidityTokenBalance_not_in: [MOONRIVER_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  timestamp
  block
  user
  pair
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input MOONRIVER_LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidityTokenBalance: MOONRIVER_BigDecimal
  liquidityTokenBalance_not: MOONRIVER_BigDecimal
  liquidityTokenBalance_gt: MOONRIVER_BigDecimal
  liquidityTokenBalance_lt: MOONRIVER_BigDecimal
  liquidityTokenBalance_gte: MOONRIVER_BigDecimal
  liquidityTokenBalance_lte: MOONRIVER_BigDecimal
  liquidityTokenBalance_in: [MOONRIVER_BigDecimal!]
  liquidityTokenBalance_not_in: [MOONRIVER_BigDecimal!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_LiquidityPosition_orderBy {
  id
  user
  pair
  liquidityTokenBalance
  snapshots
  block
  timestamp
}

type MOONRIVER_Mint {
  id: ID!
  transaction: MOONRIVER_Transaction!
  timestamp: BigInt!
  pair: MOONRIVER_Pair!
  to: MOONRIVER_Bytes!
  liquidity: MOONRIVER_BigDecimal!
  sender: MOONRIVER_Bytes
  amount0: MOONRIVER_BigDecimal
  amount1: MOONRIVER_BigDecimal
  logIndex: BigInt
  amountUSD: MOONRIVER_BigDecimal
  feeTo: MOONRIVER_Bytes
  feeLiquidity: MOONRIVER_BigDecimal
}

input MOONRIVER_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  to: MOONRIVER_Bytes
  to_not: MOONRIVER_Bytes
  to_in: [MOONRIVER_Bytes!]
  to_not_in: [MOONRIVER_Bytes!]
  to_contains: MOONRIVER_Bytes
  to_not_contains: MOONRIVER_Bytes
  liquidity: MOONRIVER_BigDecimal
  liquidity_not: MOONRIVER_BigDecimal
  liquidity_gt: MOONRIVER_BigDecimal
  liquidity_lt: MOONRIVER_BigDecimal
  liquidity_gte: MOONRIVER_BigDecimal
  liquidity_lte: MOONRIVER_BigDecimal
  liquidity_in: [MOONRIVER_BigDecimal!]
  liquidity_not_in: [MOONRIVER_BigDecimal!]
  sender: MOONRIVER_Bytes
  sender_not: MOONRIVER_Bytes
  sender_in: [MOONRIVER_Bytes!]
  sender_not_in: [MOONRIVER_Bytes!]
  sender_contains: MOONRIVER_Bytes
  sender_not_contains: MOONRIVER_Bytes
  amount0: MOONRIVER_BigDecimal
  amount0_not: MOONRIVER_BigDecimal
  amount0_gt: MOONRIVER_BigDecimal
  amount0_lt: MOONRIVER_BigDecimal
  amount0_gte: MOONRIVER_BigDecimal
  amount0_lte: MOONRIVER_BigDecimal
  amount0_in: [MOONRIVER_BigDecimal!]
  amount0_not_in: [MOONRIVER_BigDecimal!]
  amount1: MOONRIVER_BigDecimal
  amount1_not: MOONRIVER_BigDecimal
  amount1_gt: MOONRIVER_BigDecimal
  amount1_lt: MOONRIVER_BigDecimal
  amount1_gte: MOONRIVER_BigDecimal
  amount1_lte: MOONRIVER_BigDecimal
  amount1_in: [MOONRIVER_BigDecimal!]
  amount1_not_in: [MOONRIVER_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: MOONRIVER_BigDecimal
  amountUSD_not: MOONRIVER_BigDecimal
  amountUSD_gt: MOONRIVER_BigDecimal
  amountUSD_lt: MOONRIVER_BigDecimal
  amountUSD_gte: MOONRIVER_BigDecimal
  amountUSD_lte: MOONRIVER_BigDecimal
  amountUSD_in: [MOONRIVER_BigDecimal!]
  amountUSD_not_in: [MOONRIVER_BigDecimal!]
  feeTo: MOONRIVER_Bytes
  feeTo_not: MOONRIVER_Bytes
  feeTo_in: [MOONRIVER_Bytes!]
  feeTo_not_in: [MOONRIVER_Bytes!]
  feeTo_contains: MOONRIVER_Bytes
  feeTo_not_contains: MOONRIVER_Bytes
  feeLiquidity: MOONRIVER_BigDecimal
  feeLiquidity_not: MOONRIVER_BigDecimal
  feeLiquidity_gt: MOONRIVER_BigDecimal
  feeLiquidity_lt: MOONRIVER_BigDecimal
  feeLiquidity_gte: MOONRIVER_BigDecimal
  feeLiquidity_lte: MOONRIVER_BigDecimal
  feeLiquidity_in: [MOONRIVER_BigDecimal!]
  feeLiquidity_not_in: [MOONRIVER_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_Mint_orderBy {
  id
  transaction
  timestamp
  pair
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

"""Defines the order direction, either ascending or descending"""
enum MOONRIVER_OrderDirection {
  asc
  desc
}

type MOONRIVER_Pair {
  id: ID!
  factory: MOONRIVER_Factory!
  name: String!
  token0: MOONRIVER_Token!
  token1: MOONRIVER_Token!
  reserve0: MOONRIVER_BigDecimal!
  reserve1: MOONRIVER_BigDecimal!
  totalSupply: MOONRIVER_BigDecimal!
  reserveETH: MOONRIVER_BigDecimal!
  reserveUSD: MOONRIVER_BigDecimal!
  trackedReserveETH: MOONRIVER_BigDecimal!
  token0Price: MOONRIVER_BigDecimal!
  token1Price: MOONRIVER_BigDecimal!
  volumeToken0: MOONRIVER_BigDecimal!
  volumeToken1: MOONRIVER_BigDecimal!
  volumeUSD: MOONRIVER_BigDecimal!
  untrackedVolumeUSD: MOONRIVER_BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_LiquidityPosition_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_LiquidityPosition_filter): [MOONRIVER_LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_LiquidityPositionSnapshot_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_LiquidityPositionSnapshot_filter): [MOONRIVER_LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_PairDayData_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_PairDayData_filter): [MOONRIVER_PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_PairHourData_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_PairHourData_filter): [MOONRIVER_PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Mint_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Mint_filter): [MOONRIVER_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Burn_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Burn_filter): [MOONRIVER_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Swap_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Swap_filter): [MOONRIVER_Swap!]!
  timestamp: BigInt!
  block: BigInt!
}

type MOONRIVER_PairDayData {
  id: ID!
  date: Int!
  pair: MOONRIVER_Pair!
  token0: MOONRIVER_Token!
  token1: MOONRIVER_Token!
  reserve0: MOONRIVER_BigDecimal!
  reserve1: MOONRIVER_BigDecimal!
  totalSupply: MOONRIVER_BigDecimal!
  reserveUSD: MOONRIVER_BigDecimal!
  volumeToken0: MOONRIVER_BigDecimal!
  volumeToken1: MOONRIVER_BigDecimal!
  volumeUSD: MOONRIVER_BigDecimal!
  txCount: BigInt!
}

input MOONRIVER_PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: MOONRIVER_BigDecimal
  reserve0_not: MOONRIVER_BigDecimal
  reserve0_gt: MOONRIVER_BigDecimal
  reserve0_lt: MOONRIVER_BigDecimal
  reserve0_gte: MOONRIVER_BigDecimal
  reserve0_lte: MOONRIVER_BigDecimal
  reserve0_in: [MOONRIVER_BigDecimal!]
  reserve0_not_in: [MOONRIVER_BigDecimal!]
  reserve1: MOONRIVER_BigDecimal
  reserve1_not: MOONRIVER_BigDecimal
  reserve1_gt: MOONRIVER_BigDecimal
  reserve1_lt: MOONRIVER_BigDecimal
  reserve1_gte: MOONRIVER_BigDecimal
  reserve1_lte: MOONRIVER_BigDecimal
  reserve1_in: [MOONRIVER_BigDecimal!]
  reserve1_not_in: [MOONRIVER_BigDecimal!]
  totalSupply: MOONRIVER_BigDecimal
  totalSupply_not: MOONRIVER_BigDecimal
  totalSupply_gt: MOONRIVER_BigDecimal
  totalSupply_lt: MOONRIVER_BigDecimal
  totalSupply_gte: MOONRIVER_BigDecimal
  totalSupply_lte: MOONRIVER_BigDecimal
  totalSupply_in: [MOONRIVER_BigDecimal!]
  totalSupply_not_in: [MOONRIVER_BigDecimal!]
  reserveUSD: MOONRIVER_BigDecimal
  reserveUSD_not: MOONRIVER_BigDecimal
  reserveUSD_gt: MOONRIVER_BigDecimal
  reserveUSD_lt: MOONRIVER_BigDecimal
  reserveUSD_gte: MOONRIVER_BigDecimal
  reserveUSD_lte: MOONRIVER_BigDecimal
  reserveUSD_in: [MOONRIVER_BigDecimal!]
  reserveUSD_not_in: [MOONRIVER_BigDecimal!]
  volumeToken0: MOONRIVER_BigDecimal
  volumeToken0_not: MOONRIVER_BigDecimal
  volumeToken0_gt: MOONRIVER_BigDecimal
  volumeToken0_lt: MOONRIVER_BigDecimal
  volumeToken0_gte: MOONRIVER_BigDecimal
  volumeToken0_lte: MOONRIVER_BigDecimal
  volumeToken0_in: [MOONRIVER_BigDecimal!]
  volumeToken0_not_in: [MOONRIVER_BigDecimal!]
  volumeToken1: MOONRIVER_BigDecimal
  volumeToken1_not: MOONRIVER_BigDecimal
  volumeToken1_gt: MOONRIVER_BigDecimal
  volumeToken1_lt: MOONRIVER_BigDecimal
  volumeToken1_gte: MOONRIVER_BigDecimal
  volumeToken1_lte: MOONRIVER_BigDecimal
  volumeToken1_in: [MOONRIVER_BigDecimal!]
  volumeToken1_not_in: [MOONRIVER_BigDecimal!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_PairDayData_orderBy {
  id
  date
  pair
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

type MOONRIVER_PairHourData {
  id: ID!
  date: Int!
  pair: MOONRIVER_Pair!
  reserve0: MOONRIVER_BigDecimal!
  reserve1: MOONRIVER_BigDecimal!
  reserveUSD: MOONRIVER_BigDecimal!
  volumeToken0: MOONRIVER_BigDecimal!
  volumeToken1: MOONRIVER_BigDecimal!
  volumeUSD: MOONRIVER_BigDecimal!
  txCount: BigInt!
}

input MOONRIVER_PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  reserve0: MOONRIVER_BigDecimal
  reserve0_not: MOONRIVER_BigDecimal
  reserve0_gt: MOONRIVER_BigDecimal
  reserve0_lt: MOONRIVER_BigDecimal
  reserve0_gte: MOONRIVER_BigDecimal
  reserve0_lte: MOONRIVER_BigDecimal
  reserve0_in: [MOONRIVER_BigDecimal!]
  reserve0_not_in: [MOONRIVER_BigDecimal!]
  reserve1: MOONRIVER_BigDecimal
  reserve1_not: MOONRIVER_BigDecimal
  reserve1_gt: MOONRIVER_BigDecimal
  reserve1_lt: MOONRIVER_BigDecimal
  reserve1_gte: MOONRIVER_BigDecimal
  reserve1_lte: MOONRIVER_BigDecimal
  reserve1_in: [MOONRIVER_BigDecimal!]
  reserve1_not_in: [MOONRIVER_BigDecimal!]
  reserveUSD: MOONRIVER_BigDecimal
  reserveUSD_not: MOONRIVER_BigDecimal
  reserveUSD_gt: MOONRIVER_BigDecimal
  reserveUSD_lt: MOONRIVER_BigDecimal
  reserveUSD_gte: MOONRIVER_BigDecimal
  reserveUSD_lte: MOONRIVER_BigDecimal
  reserveUSD_in: [MOONRIVER_BigDecimal!]
  reserveUSD_not_in: [MOONRIVER_BigDecimal!]
  volumeToken0: MOONRIVER_BigDecimal
  volumeToken0_not: MOONRIVER_BigDecimal
  volumeToken0_gt: MOONRIVER_BigDecimal
  volumeToken0_lt: MOONRIVER_BigDecimal
  volumeToken0_gte: MOONRIVER_BigDecimal
  volumeToken0_lte: MOONRIVER_BigDecimal
  volumeToken0_in: [MOONRIVER_BigDecimal!]
  volumeToken0_not_in: [MOONRIVER_BigDecimal!]
  volumeToken1: MOONRIVER_BigDecimal
  volumeToken1_not: MOONRIVER_BigDecimal
  volumeToken1_gt: MOONRIVER_BigDecimal
  volumeToken1_lt: MOONRIVER_BigDecimal
  volumeToken1_gte: MOONRIVER_BigDecimal
  volumeToken1_lte: MOONRIVER_BigDecimal
  volumeToken1_in: [MOONRIVER_BigDecimal!]
  volumeToken1_not_in: [MOONRIVER_BigDecimal!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_PairHourData_orderBy {
  id
  date
  pair
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

input MOONRIVER_Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: MOONRIVER_BigDecimal
  reserve0_not: MOONRIVER_BigDecimal
  reserve0_gt: MOONRIVER_BigDecimal
  reserve0_lt: MOONRIVER_BigDecimal
  reserve0_gte: MOONRIVER_BigDecimal
  reserve0_lte: MOONRIVER_BigDecimal
  reserve0_in: [MOONRIVER_BigDecimal!]
  reserve0_not_in: [MOONRIVER_BigDecimal!]
  reserve1: MOONRIVER_BigDecimal
  reserve1_not: MOONRIVER_BigDecimal
  reserve1_gt: MOONRIVER_BigDecimal
  reserve1_lt: MOONRIVER_BigDecimal
  reserve1_gte: MOONRIVER_BigDecimal
  reserve1_lte: MOONRIVER_BigDecimal
  reserve1_in: [MOONRIVER_BigDecimal!]
  reserve1_not_in: [MOONRIVER_BigDecimal!]
  totalSupply: MOONRIVER_BigDecimal
  totalSupply_not: MOONRIVER_BigDecimal
  totalSupply_gt: MOONRIVER_BigDecimal
  totalSupply_lt: MOONRIVER_BigDecimal
  totalSupply_gte: MOONRIVER_BigDecimal
  totalSupply_lte: MOONRIVER_BigDecimal
  totalSupply_in: [MOONRIVER_BigDecimal!]
  totalSupply_not_in: [MOONRIVER_BigDecimal!]
  reserveETH: MOONRIVER_BigDecimal
  reserveETH_not: MOONRIVER_BigDecimal
  reserveETH_gt: MOONRIVER_BigDecimal
  reserveETH_lt: MOONRIVER_BigDecimal
  reserveETH_gte: MOONRIVER_BigDecimal
  reserveETH_lte: MOONRIVER_BigDecimal
  reserveETH_in: [MOONRIVER_BigDecimal!]
  reserveETH_not_in: [MOONRIVER_BigDecimal!]
  reserveUSD: MOONRIVER_BigDecimal
  reserveUSD_not: MOONRIVER_BigDecimal
  reserveUSD_gt: MOONRIVER_BigDecimal
  reserveUSD_lt: MOONRIVER_BigDecimal
  reserveUSD_gte: MOONRIVER_BigDecimal
  reserveUSD_lte: MOONRIVER_BigDecimal
  reserveUSD_in: [MOONRIVER_BigDecimal!]
  reserveUSD_not_in: [MOONRIVER_BigDecimal!]
  trackedReserveETH: MOONRIVER_BigDecimal
  trackedReserveETH_not: MOONRIVER_BigDecimal
  trackedReserveETH_gt: MOONRIVER_BigDecimal
  trackedReserveETH_lt: MOONRIVER_BigDecimal
  trackedReserveETH_gte: MOONRIVER_BigDecimal
  trackedReserveETH_lte: MOONRIVER_BigDecimal
  trackedReserveETH_in: [MOONRIVER_BigDecimal!]
  trackedReserveETH_not_in: [MOONRIVER_BigDecimal!]
  token0Price: MOONRIVER_BigDecimal
  token0Price_not: MOONRIVER_BigDecimal
  token0Price_gt: MOONRIVER_BigDecimal
  token0Price_lt: MOONRIVER_BigDecimal
  token0Price_gte: MOONRIVER_BigDecimal
  token0Price_lte: MOONRIVER_BigDecimal
  token0Price_in: [MOONRIVER_BigDecimal!]
  token0Price_not_in: [MOONRIVER_BigDecimal!]
  token1Price: MOONRIVER_BigDecimal
  token1Price_not: MOONRIVER_BigDecimal
  token1Price_gt: MOONRIVER_BigDecimal
  token1Price_lt: MOONRIVER_BigDecimal
  token1Price_gte: MOONRIVER_BigDecimal
  token1Price_lte: MOONRIVER_BigDecimal
  token1Price_in: [MOONRIVER_BigDecimal!]
  token1Price_not_in: [MOONRIVER_BigDecimal!]
  volumeToken0: MOONRIVER_BigDecimal
  volumeToken0_not: MOONRIVER_BigDecimal
  volumeToken0_gt: MOONRIVER_BigDecimal
  volumeToken0_lt: MOONRIVER_BigDecimal
  volumeToken0_gte: MOONRIVER_BigDecimal
  volumeToken0_lte: MOONRIVER_BigDecimal
  volumeToken0_in: [MOONRIVER_BigDecimal!]
  volumeToken0_not_in: [MOONRIVER_BigDecimal!]
  volumeToken1: MOONRIVER_BigDecimal
  volumeToken1_not: MOONRIVER_BigDecimal
  volumeToken1_gt: MOONRIVER_BigDecimal
  volumeToken1_lt: MOONRIVER_BigDecimal
  volumeToken1_gte: MOONRIVER_BigDecimal
  volumeToken1_lte: MOONRIVER_BigDecimal
  volumeToken1_in: [MOONRIVER_BigDecimal!]
  volumeToken1_not_in: [MOONRIVER_BigDecimal!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  untrackedVolumeUSD: MOONRIVER_BigDecimal
  untrackedVolumeUSD_not: MOONRIVER_BigDecimal
  untrackedVolumeUSD_gt: MOONRIVER_BigDecimal
  untrackedVolumeUSD_lt: MOONRIVER_BigDecimal
  untrackedVolumeUSD_gte: MOONRIVER_BigDecimal
  untrackedVolumeUSD_lte: MOONRIVER_BigDecimal
  untrackedVolumeUSD_in: [MOONRIVER_BigDecimal!]
  untrackedVolumeUSD_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_Pair_orderBy {
  id
  factory
  name
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
}

type MOONRIVER_Swap {
  id: ID!
  transaction: MOONRIVER_Transaction!
  timestamp: BigInt!
  pair: MOONRIVER_Pair!
  sender: MOONRIVER_Bytes!
  amount0In: MOONRIVER_BigDecimal!
  amount1In: MOONRIVER_BigDecimal!
  amount0Out: MOONRIVER_BigDecimal!
  amount1Out: MOONRIVER_BigDecimal!
  to: MOONRIVER_Bytes!
  logIndex: BigInt
  amountUSD: MOONRIVER_BigDecimal!
}

input MOONRIVER_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  sender: MOONRIVER_Bytes
  sender_not: MOONRIVER_Bytes
  sender_in: [MOONRIVER_Bytes!]
  sender_not_in: [MOONRIVER_Bytes!]
  sender_contains: MOONRIVER_Bytes
  sender_not_contains: MOONRIVER_Bytes
  amount0In: MOONRIVER_BigDecimal
  amount0In_not: MOONRIVER_BigDecimal
  amount0In_gt: MOONRIVER_BigDecimal
  amount0In_lt: MOONRIVER_BigDecimal
  amount0In_gte: MOONRIVER_BigDecimal
  amount0In_lte: MOONRIVER_BigDecimal
  amount0In_in: [MOONRIVER_BigDecimal!]
  amount0In_not_in: [MOONRIVER_BigDecimal!]
  amount1In: MOONRIVER_BigDecimal
  amount1In_not: MOONRIVER_BigDecimal
  amount1In_gt: MOONRIVER_BigDecimal
  amount1In_lt: MOONRIVER_BigDecimal
  amount1In_gte: MOONRIVER_BigDecimal
  amount1In_lte: MOONRIVER_BigDecimal
  amount1In_in: [MOONRIVER_BigDecimal!]
  amount1In_not_in: [MOONRIVER_BigDecimal!]
  amount0Out: MOONRIVER_BigDecimal
  amount0Out_not: MOONRIVER_BigDecimal
  amount0Out_gt: MOONRIVER_BigDecimal
  amount0Out_lt: MOONRIVER_BigDecimal
  amount0Out_gte: MOONRIVER_BigDecimal
  amount0Out_lte: MOONRIVER_BigDecimal
  amount0Out_in: [MOONRIVER_BigDecimal!]
  amount0Out_not_in: [MOONRIVER_BigDecimal!]
  amount1Out: MOONRIVER_BigDecimal
  amount1Out_not: MOONRIVER_BigDecimal
  amount1Out_gt: MOONRIVER_BigDecimal
  amount1Out_lt: MOONRIVER_BigDecimal
  amount1Out_gte: MOONRIVER_BigDecimal
  amount1Out_lte: MOONRIVER_BigDecimal
  amount1Out_in: [MOONRIVER_BigDecimal!]
  amount1Out_not_in: [MOONRIVER_BigDecimal!]
  to: MOONRIVER_Bytes
  to_not: MOONRIVER_Bytes
  to_in: [MOONRIVER_Bytes!]
  to_not_in: [MOONRIVER_Bytes!]
  to_contains: MOONRIVER_Bytes
  to_not_contains: MOONRIVER_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: MOONRIVER_BigDecimal
  amountUSD_not: MOONRIVER_BigDecimal
  amountUSD_gt: MOONRIVER_BigDecimal
  amountUSD_lt: MOONRIVER_BigDecimal
  amountUSD_gte: MOONRIVER_BigDecimal
  amountUSD_lte: MOONRIVER_BigDecimal
  amountUSD_in: [MOONRIVER_BigDecimal!]
  amountUSD_not_in: [MOONRIVER_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_Swap_orderBy {
  id
  transaction
  timestamp
  pair
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
}

type MOONRIVER_Token {
  id: ID!
  factory: MOONRIVER_Factory!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: MOONRIVER_BigDecimal!
  volumeUSD: MOONRIVER_BigDecimal!
  untrackedVolumeUSD: MOONRIVER_BigDecimal!
  txCount: BigInt!
  liquidity: MOONRIVER_BigDecimal!
  derivedETH: MOONRIVER_BigDecimal!
  whitelistPairs(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Pair_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Pair_filter): [MOONRIVER_Pair!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_TokenHourData_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_TokenHourData_filter): [MOONRIVER_TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_TokenDayData_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_TokenDayData_filter): [MOONRIVER_TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Pair_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Pair_filter): [MOONRIVER_Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Pair_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Pair_filter): [MOONRIVER_Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_PairDayData_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_PairDayData_filter): [MOONRIVER_PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_PairDayData_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_PairDayData_filter): [MOONRIVER_PairDayData!]!
}

type MOONRIVER_TokenDayData {
  id: ID!
  date: Int!
  token: MOONRIVER_Token!
  volume: MOONRIVER_BigDecimal!
  volumeETH: MOONRIVER_BigDecimal!
  volumeUSD: MOONRIVER_BigDecimal!
  txCount: BigInt!
  liquidity: MOONRIVER_BigDecimal!
  liquidityETH: MOONRIVER_BigDecimal!
  liquidityUSD: MOONRIVER_BigDecimal!
  priceUSD: MOONRIVER_BigDecimal!
}

input MOONRIVER_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: MOONRIVER_BigDecimal
  volume_not: MOONRIVER_BigDecimal
  volume_gt: MOONRIVER_BigDecimal
  volume_lt: MOONRIVER_BigDecimal
  volume_gte: MOONRIVER_BigDecimal
  volume_lte: MOONRIVER_BigDecimal
  volume_in: [MOONRIVER_BigDecimal!]
  volume_not_in: [MOONRIVER_BigDecimal!]
  volumeETH: MOONRIVER_BigDecimal
  volumeETH_not: MOONRIVER_BigDecimal
  volumeETH_gt: MOONRIVER_BigDecimal
  volumeETH_lt: MOONRIVER_BigDecimal
  volumeETH_gte: MOONRIVER_BigDecimal
  volumeETH_lte: MOONRIVER_BigDecimal
  volumeETH_in: [MOONRIVER_BigDecimal!]
  volumeETH_not_in: [MOONRIVER_BigDecimal!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: MOONRIVER_BigDecimal
  liquidity_not: MOONRIVER_BigDecimal
  liquidity_gt: MOONRIVER_BigDecimal
  liquidity_lt: MOONRIVER_BigDecimal
  liquidity_gte: MOONRIVER_BigDecimal
  liquidity_lte: MOONRIVER_BigDecimal
  liquidity_in: [MOONRIVER_BigDecimal!]
  liquidity_not_in: [MOONRIVER_BigDecimal!]
  liquidityETH: MOONRIVER_BigDecimal
  liquidityETH_not: MOONRIVER_BigDecimal
  liquidityETH_gt: MOONRIVER_BigDecimal
  liquidityETH_lt: MOONRIVER_BigDecimal
  liquidityETH_gte: MOONRIVER_BigDecimal
  liquidityETH_lte: MOONRIVER_BigDecimal
  liquidityETH_in: [MOONRIVER_BigDecimal!]
  liquidityETH_not_in: [MOONRIVER_BigDecimal!]
  liquidityUSD: MOONRIVER_BigDecimal
  liquidityUSD_not: MOONRIVER_BigDecimal
  liquidityUSD_gt: MOONRIVER_BigDecimal
  liquidityUSD_lt: MOONRIVER_BigDecimal
  liquidityUSD_gte: MOONRIVER_BigDecimal
  liquidityUSD_lte: MOONRIVER_BigDecimal
  liquidityUSD_in: [MOONRIVER_BigDecimal!]
  liquidityUSD_not_in: [MOONRIVER_BigDecimal!]
  priceUSD: MOONRIVER_BigDecimal
  priceUSD_not: MOONRIVER_BigDecimal
  priceUSD_gt: MOONRIVER_BigDecimal
  priceUSD_lt: MOONRIVER_BigDecimal
  priceUSD_gte: MOONRIVER_BigDecimal
  priceUSD_lte: MOONRIVER_BigDecimal
  priceUSD_in: [MOONRIVER_BigDecimal!]
  priceUSD_not_in: [MOONRIVER_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_TokenDayData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

type MOONRIVER_TokenHourData {
  id: ID!
  date: Int!
  token: MOONRIVER_Token!
  volume: MOONRIVER_BigDecimal!
  volumeETH: MOONRIVER_BigDecimal!
  volumeUSD: MOONRIVER_BigDecimal!
  txCount: BigInt!
  liquidity: MOONRIVER_BigDecimal!
  liquidityETH: MOONRIVER_BigDecimal!
  liquidityUSD: MOONRIVER_BigDecimal!
  priceUSD: MOONRIVER_BigDecimal!
}

input MOONRIVER_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: MOONRIVER_BigDecimal
  volume_not: MOONRIVER_BigDecimal
  volume_gt: MOONRIVER_BigDecimal
  volume_lt: MOONRIVER_BigDecimal
  volume_gte: MOONRIVER_BigDecimal
  volume_lte: MOONRIVER_BigDecimal
  volume_in: [MOONRIVER_BigDecimal!]
  volume_not_in: [MOONRIVER_BigDecimal!]
  volumeETH: MOONRIVER_BigDecimal
  volumeETH_not: MOONRIVER_BigDecimal
  volumeETH_gt: MOONRIVER_BigDecimal
  volumeETH_lt: MOONRIVER_BigDecimal
  volumeETH_gte: MOONRIVER_BigDecimal
  volumeETH_lte: MOONRIVER_BigDecimal
  volumeETH_in: [MOONRIVER_BigDecimal!]
  volumeETH_not_in: [MOONRIVER_BigDecimal!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: MOONRIVER_BigDecimal
  liquidity_not: MOONRIVER_BigDecimal
  liquidity_gt: MOONRIVER_BigDecimal
  liquidity_lt: MOONRIVER_BigDecimal
  liquidity_gte: MOONRIVER_BigDecimal
  liquidity_lte: MOONRIVER_BigDecimal
  liquidity_in: [MOONRIVER_BigDecimal!]
  liquidity_not_in: [MOONRIVER_BigDecimal!]
  liquidityETH: MOONRIVER_BigDecimal
  liquidityETH_not: MOONRIVER_BigDecimal
  liquidityETH_gt: MOONRIVER_BigDecimal
  liquidityETH_lt: MOONRIVER_BigDecimal
  liquidityETH_gte: MOONRIVER_BigDecimal
  liquidityETH_lte: MOONRIVER_BigDecimal
  liquidityETH_in: [MOONRIVER_BigDecimal!]
  liquidityETH_not_in: [MOONRIVER_BigDecimal!]
  liquidityUSD: MOONRIVER_BigDecimal
  liquidityUSD_not: MOONRIVER_BigDecimal
  liquidityUSD_gt: MOONRIVER_BigDecimal
  liquidityUSD_lt: MOONRIVER_BigDecimal
  liquidityUSD_gte: MOONRIVER_BigDecimal
  liquidityUSD_lte: MOONRIVER_BigDecimal
  liquidityUSD_in: [MOONRIVER_BigDecimal!]
  liquidityUSD_not_in: [MOONRIVER_BigDecimal!]
  priceUSD: MOONRIVER_BigDecimal
  priceUSD_not: MOONRIVER_BigDecimal
  priceUSD_gt: MOONRIVER_BigDecimal
  priceUSD_lt: MOONRIVER_BigDecimal
  priceUSD_gte: MOONRIVER_BigDecimal
  priceUSD_lte: MOONRIVER_BigDecimal
  priceUSD_in: [MOONRIVER_BigDecimal!]
  priceUSD_not_in: [MOONRIVER_BigDecimal!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_TokenHourData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

input MOONRIVER_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: MOONRIVER_BigDecimal
  volume_not: MOONRIVER_BigDecimal
  volume_gt: MOONRIVER_BigDecimal
  volume_lt: MOONRIVER_BigDecimal
  volume_gte: MOONRIVER_BigDecimal
  volume_lte: MOONRIVER_BigDecimal
  volume_in: [MOONRIVER_BigDecimal!]
  volume_not_in: [MOONRIVER_BigDecimal!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  untrackedVolumeUSD: MOONRIVER_BigDecimal
  untrackedVolumeUSD_not: MOONRIVER_BigDecimal
  untrackedVolumeUSD_gt: MOONRIVER_BigDecimal
  untrackedVolumeUSD_lt: MOONRIVER_BigDecimal
  untrackedVolumeUSD_gte: MOONRIVER_BigDecimal
  untrackedVolumeUSD_lte: MOONRIVER_BigDecimal
  untrackedVolumeUSD_in: [MOONRIVER_BigDecimal!]
  untrackedVolumeUSD_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: MOONRIVER_BigDecimal
  liquidity_not: MOONRIVER_BigDecimal
  liquidity_gt: MOONRIVER_BigDecimal
  liquidity_lt: MOONRIVER_BigDecimal
  liquidity_gte: MOONRIVER_BigDecimal
  liquidity_lte: MOONRIVER_BigDecimal
  liquidity_in: [MOONRIVER_BigDecimal!]
  liquidity_not_in: [MOONRIVER_BigDecimal!]
  derivedETH: MOONRIVER_BigDecimal
  derivedETH_not: MOONRIVER_BigDecimal
  derivedETH_gt: MOONRIVER_BigDecimal
  derivedETH_lt: MOONRIVER_BigDecimal
  derivedETH_gte: MOONRIVER_BigDecimal
  derivedETH_lte: MOONRIVER_BigDecimal
  derivedETH_in: [MOONRIVER_BigDecimal!]
  derivedETH_not_in: [MOONRIVER_BigDecimal!]
  whitelistPairs: [String!]
  whitelistPairs_not: [String!]
  whitelistPairs_contains: [String!]
  whitelistPairs_contains_nocase: [String!]
  whitelistPairs_not_contains: [String!]
  whitelistPairs_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_Token_orderBy {
  id
  factory
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  whitelistPairs
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
}

type MOONRIVER_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Mint_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Mint_filter): [MOONRIVER_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Burn_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Burn_filter): [MOONRIVER_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Swap_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Swap_filter): [MOONRIVER_Swap]!
}

input MOONRIVER_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
}

type MOONRIVER_User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_LiquidityPosition_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_LiquidityPosition_filter): [MOONRIVER_LiquidityPosition!]!
}

input MOONRIVER_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]

  """Filter for the block changed event."""
  _change_block: MOONRIVER_BlockChangedFilter
}

enum MOONRIVER_User_orderBy {
  id
  liquidityPositions
}

type MOONRIVER__Block_ {
  """The hash of the block"""
  hash: MOONRIVER_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type MOONRIVER__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: MOONRIVER__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}