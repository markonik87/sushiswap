schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BSC_BigDecimal

scalar BigInt

input BSC_BlockChangedFilter {
  number_gte: Int!
}

input BSC_Block_height {
  hash: BSC_Bytes
  number: Int
  number_gte: Int
}

type BSC_Bundle {
  id: ID!
  ethPrice: BSC_BigDecimal!
}

input BSC_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: BSC_BigDecimal
  ethPrice_not: BSC_BigDecimal
  ethPrice_gt: BSC_BigDecimal
  ethPrice_lt: BSC_BigDecimal
  ethPrice_gte: BSC_BigDecimal
  ethPrice_lte: BSC_BigDecimal
  ethPrice_in: [BSC_BigDecimal!]
  ethPrice_not_in: [BSC_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_Bundle_orderBy {
  id
  ethPrice
}

type BSC_Burn {
  id: ID!
  transaction: BSC_Transaction!
  timestamp: BigInt!
  pair: BSC_Pair!
  liquidity: BSC_BigDecimal!
  sender: BSC_Bytes
  amount0: BSC_BigDecimal
  amount1: BSC_BigDecimal
  to: BSC_Bytes
  logIndex: BigInt
  amountUSD: BSC_BigDecimal
  complete: Boolean!
  feeTo: BSC_Bytes
  feeLiquidity: BSC_BigDecimal
}

input BSC_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidity: BSC_BigDecimal
  liquidity_not: BSC_BigDecimal
  liquidity_gt: BSC_BigDecimal
  liquidity_lt: BSC_BigDecimal
  liquidity_gte: BSC_BigDecimal
  liquidity_lte: BSC_BigDecimal
  liquidity_in: [BSC_BigDecimal!]
  liquidity_not_in: [BSC_BigDecimal!]
  sender: BSC_Bytes
  sender_not: BSC_Bytes
  sender_in: [BSC_Bytes!]
  sender_not_in: [BSC_Bytes!]
  sender_contains: BSC_Bytes
  sender_not_contains: BSC_Bytes
  amount0: BSC_BigDecimal
  amount0_not: BSC_BigDecimal
  amount0_gt: BSC_BigDecimal
  amount0_lt: BSC_BigDecimal
  amount0_gte: BSC_BigDecimal
  amount0_lte: BSC_BigDecimal
  amount0_in: [BSC_BigDecimal!]
  amount0_not_in: [BSC_BigDecimal!]
  amount1: BSC_BigDecimal
  amount1_not: BSC_BigDecimal
  amount1_gt: BSC_BigDecimal
  amount1_lt: BSC_BigDecimal
  amount1_gte: BSC_BigDecimal
  amount1_lte: BSC_BigDecimal
  amount1_in: [BSC_BigDecimal!]
  amount1_not_in: [BSC_BigDecimal!]
  to: BSC_Bytes
  to_not: BSC_Bytes
  to_in: [BSC_Bytes!]
  to_not_in: [BSC_Bytes!]
  to_contains: BSC_Bytes
  to_not_contains: BSC_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: BSC_BigDecimal
  amountUSD_not: BSC_BigDecimal
  amountUSD_gt: BSC_BigDecimal
  amountUSD_lt: BSC_BigDecimal
  amountUSD_gte: BSC_BigDecimal
  amountUSD_lte: BSC_BigDecimal
  amountUSD_in: [BSC_BigDecimal!]
  amountUSD_not_in: [BSC_BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: BSC_Bytes
  feeTo_not: BSC_Bytes
  feeTo_in: [BSC_Bytes!]
  feeTo_not_in: [BSC_Bytes!]
  feeTo_contains: BSC_Bytes
  feeTo_not_contains: BSC_Bytes
  feeLiquidity: BSC_BigDecimal
  feeLiquidity_not: BSC_BigDecimal
  feeLiquidity_gt: BSC_BigDecimal
  feeLiquidity_lt: BSC_BigDecimal
  feeLiquidity_gte: BSC_BigDecimal
  feeLiquidity_lte: BSC_BigDecimal
  feeLiquidity_in: [BSC_BigDecimal!]
  feeLiquidity_not_in: [BSC_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_Burn_orderBy {
  id
  transaction
  timestamp
  pair
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

scalar BSC_Bytes

type BSC_DayData {
  id: ID!
  date: Int!
  factory: BSC_Factory!
  volumeETH: BSC_BigDecimal!
  volumeUSD: BSC_BigDecimal!
  untrackedVolume: BSC_BigDecimal!
  liquidityETH: BSC_BigDecimal!
  liquidityUSD: BSC_BigDecimal!
  txCount: BigInt!
}

input BSC_DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: BSC_BigDecimal
  volumeETH_not: BSC_BigDecimal
  volumeETH_gt: BSC_BigDecimal
  volumeETH_lt: BSC_BigDecimal
  volumeETH_gte: BSC_BigDecimal
  volumeETH_lte: BSC_BigDecimal
  volumeETH_in: [BSC_BigDecimal!]
  volumeETH_not_in: [BSC_BigDecimal!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  untrackedVolume: BSC_BigDecimal
  untrackedVolume_not: BSC_BigDecimal
  untrackedVolume_gt: BSC_BigDecimal
  untrackedVolume_lt: BSC_BigDecimal
  untrackedVolume_gte: BSC_BigDecimal
  untrackedVolume_lte: BSC_BigDecimal
  untrackedVolume_in: [BSC_BigDecimal!]
  untrackedVolume_not_in: [BSC_BigDecimal!]
  liquidityETH: BSC_BigDecimal
  liquidityETH_not: BSC_BigDecimal
  liquidityETH_gt: BSC_BigDecimal
  liquidityETH_lt: BSC_BigDecimal
  liquidityETH_gte: BSC_BigDecimal
  liquidityETH_lte: BSC_BigDecimal
  liquidityETH_in: [BSC_BigDecimal!]
  liquidityETH_not_in: [BSC_BigDecimal!]
  liquidityUSD: BSC_BigDecimal
  liquidityUSD_not: BSC_BigDecimal
  liquidityUSD_gt: BSC_BigDecimal
  liquidityUSD_lt: BSC_BigDecimal
  liquidityUSD_gte: BSC_BigDecimal
  liquidityUSD_lte: BSC_BigDecimal
  liquidityUSD_in: [BSC_BigDecimal!]
  liquidityUSD_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_DayData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type BSC_Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: BSC_BigDecimal!
  volumeETH: BSC_BigDecimal!
  untrackedVolumeUSD: BSC_BigDecimal!
  liquidityUSD: BSC_BigDecimal!
  liquidityETH: BSC_BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: BSC_Pair_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Pair_filter): [BSC_Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: BSC_Token_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Token_filter): [BSC_Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: BSC_HourData_orderBy, orderDirection: BSC_OrderDirection, where: BSC_HourData_filter): [BSC_HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: BSC_DayData_orderBy, orderDirection: BSC_OrderDirection, where: BSC_DayData_filter): [BSC_DayData!]!
}

input BSC_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  volumeETH: BSC_BigDecimal
  volumeETH_not: BSC_BigDecimal
  volumeETH_gt: BSC_BigDecimal
  volumeETH_lt: BSC_BigDecimal
  volumeETH_gte: BSC_BigDecimal
  volumeETH_lte: BSC_BigDecimal
  volumeETH_in: [BSC_BigDecimal!]
  volumeETH_not_in: [BSC_BigDecimal!]
  untrackedVolumeUSD: BSC_BigDecimal
  untrackedVolumeUSD_not: BSC_BigDecimal
  untrackedVolumeUSD_gt: BSC_BigDecimal
  untrackedVolumeUSD_lt: BSC_BigDecimal
  untrackedVolumeUSD_gte: BSC_BigDecimal
  untrackedVolumeUSD_lte: BSC_BigDecimal
  untrackedVolumeUSD_in: [BSC_BigDecimal!]
  untrackedVolumeUSD_not_in: [BSC_BigDecimal!]
  liquidityUSD: BSC_BigDecimal
  liquidityUSD_not: BSC_BigDecimal
  liquidityUSD_gt: BSC_BigDecimal
  liquidityUSD_lt: BSC_BigDecimal
  liquidityUSD_gte: BSC_BigDecimal
  liquidityUSD_lte: BSC_BigDecimal
  liquidityUSD_in: [BSC_BigDecimal!]
  liquidityUSD_not_in: [BSC_BigDecimal!]
  liquidityETH: BSC_BigDecimal
  liquidityETH_not: BSC_BigDecimal
  liquidityETH_gt: BSC_BigDecimal
  liquidityETH_lt: BSC_BigDecimal
  liquidityETH_gte: BSC_BigDecimal
  liquidityETH_lte: BSC_BigDecimal
  liquidityETH_in: [BSC_BigDecimal!]
  liquidityETH_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
}

type BSC_HourData {
  id: ID!
  date: Int!
  factory: BSC_Factory!
  volumeETH: BSC_BigDecimal!
  volumeUSD: BSC_BigDecimal!
  untrackedVolume: BSC_BigDecimal!
  liquidityETH: BSC_BigDecimal!
  liquidityUSD: BSC_BigDecimal!
  txCount: BigInt!
}

input BSC_HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: BSC_BigDecimal
  volumeETH_not: BSC_BigDecimal
  volumeETH_gt: BSC_BigDecimal
  volumeETH_lt: BSC_BigDecimal
  volumeETH_gte: BSC_BigDecimal
  volumeETH_lte: BSC_BigDecimal
  volumeETH_in: [BSC_BigDecimal!]
  volumeETH_not_in: [BSC_BigDecimal!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  untrackedVolume: BSC_BigDecimal
  untrackedVolume_not: BSC_BigDecimal
  untrackedVolume_gt: BSC_BigDecimal
  untrackedVolume_lt: BSC_BigDecimal
  untrackedVolume_gte: BSC_BigDecimal
  untrackedVolume_lte: BSC_BigDecimal
  untrackedVolume_in: [BSC_BigDecimal!]
  untrackedVolume_not_in: [BSC_BigDecimal!]
  liquidityETH: BSC_BigDecimal
  liquidityETH_not: BSC_BigDecimal
  liquidityETH_gt: BSC_BigDecimal
  liquidityETH_lt: BSC_BigDecimal
  liquidityETH_gte: BSC_BigDecimal
  liquidityETH_lte: BSC_BigDecimal
  liquidityETH_in: [BSC_BigDecimal!]
  liquidityETH_not_in: [BSC_BigDecimal!]
  liquidityUSD: BSC_BigDecimal
  liquidityUSD_not: BSC_BigDecimal
  liquidityUSD_gt: BSC_BigDecimal
  liquidityUSD_lt: BSC_BigDecimal
  liquidityUSD_gte: BSC_BigDecimal
  liquidityUSD_lte: BSC_BigDecimal
  liquidityUSD_in: [BSC_BigDecimal!]
  liquidityUSD_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_HourData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type BSC_LiquidityPosition {
  id: ID!
  user: BSC_User!
  pair: BSC_Pair!
  liquidityTokenBalance: BSC_BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: BSC_LiquidityPositionSnapshot_orderBy, orderDirection: BSC_OrderDirection, where: BSC_LiquidityPositionSnapshot_filter): [BSC_LiquidityPositionSnapshot]!
  block: Int!
  timestamp: Int!
}

type BSC_LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: BSC_LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: BSC_User!
  pair: BSC_Pair!
  token0PriceUSD: BSC_BigDecimal!
  token1PriceUSD: BSC_BigDecimal!
  reserve0: BSC_BigDecimal!
  reserve1: BSC_BigDecimal!
  reserveUSD: BSC_BigDecimal!
  liquidityTokenTotalSupply: BSC_BigDecimal!
  liquidityTokenBalance: BSC_BigDecimal!
}

input BSC_LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0PriceUSD: BSC_BigDecimal
  token0PriceUSD_not: BSC_BigDecimal
  token0PriceUSD_gt: BSC_BigDecimal
  token0PriceUSD_lt: BSC_BigDecimal
  token0PriceUSD_gte: BSC_BigDecimal
  token0PriceUSD_lte: BSC_BigDecimal
  token0PriceUSD_in: [BSC_BigDecimal!]
  token0PriceUSD_not_in: [BSC_BigDecimal!]
  token1PriceUSD: BSC_BigDecimal
  token1PriceUSD_not: BSC_BigDecimal
  token1PriceUSD_gt: BSC_BigDecimal
  token1PriceUSD_lt: BSC_BigDecimal
  token1PriceUSD_gte: BSC_BigDecimal
  token1PriceUSD_lte: BSC_BigDecimal
  token1PriceUSD_in: [BSC_BigDecimal!]
  token1PriceUSD_not_in: [BSC_BigDecimal!]
  reserve0: BSC_BigDecimal
  reserve0_not: BSC_BigDecimal
  reserve0_gt: BSC_BigDecimal
  reserve0_lt: BSC_BigDecimal
  reserve0_gte: BSC_BigDecimal
  reserve0_lte: BSC_BigDecimal
  reserve0_in: [BSC_BigDecimal!]
  reserve0_not_in: [BSC_BigDecimal!]
  reserve1: BSC_BigDecimal
  reserve1_not: BSC_BigDecimal
  reserve1_gt: BSC_BigDecimal
  reserve1_lt: BSC_BigDecimal
  reserve1_gte: BSC_BigDecimal
  reserve1_lte: BSC_BigDecimal
  reserve1_in: [BSC_BigDecimal!]
  reserve1_not_in: [BSC_BigDecimal!]
  reserveUSD: BSC_BigDecimal
  reserveUSD_not: BSC_BigDecimal
  reserveUSD_gt: BSC_BigDecimal
  reserveUSD_lt: BSC_BigDecimal
  reserveUSD_gte: BSC_BigDecimal
  reserveUSD_lte: BSC_BigDecimal
  reserveUSD_in: [BSC_BigDecimal!]
  reserveUSD_not_in: [BSC_BigDecimal!]
  liquidityTokenTotalSupply: BSC_BigDecimal
  liquidityTokenTotalSupply_not: BSC_BigDecimal
  liquidityTokenTotalSupply_gt: BSC_BigDecimal
  liquidityTokenTotalSupply_lt: BSC_BigDecimal
  liquidityTokenTotalSupply_gte: BSC_BigDecimal
  liquidityTokenTotalSupply_lte: BSC_BigDecimal
  liquidityTokenTotalSupply_in: [BSC_BigDecimal!]
  liquidityTokenTotalSupply_not_in: [BSC_BigDecimal!]
  liquidityTokenBalance: BSC_BigDecimal
  liquidityTokenBalance_not: BSC_BigDecimal
  liquidityTokenBalance_gt: BSC_BigDecimal
  liquidityTokenBalance_lt: BSC_BigDecimal
  liquidityTokenBalance_gte: BSC_BigDecimal
  liquidityTokenBalance_lte: BSC_BigDecimal
  liquidityTokenBalance_in: [BSC_BigDecimal!]
  liquidityTokenBalance_not_in: [BSC_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  timestamp
  block
  user
  pair
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input BSC_LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidityTokenBalance: BSC_BigDecimal
  liquidityTokenBalance_not: BSC_BigDecimal
  liquidityTokenBalance_gt: BSC_BigDecimal
  liquidityTokenBalance_lt: BSC_BigDecimal
  liquidityTokenBalance_gte: BSC_BigDecimal
  liquidityTokenBalance_lte: BSC_BigDecimal
  liquidityTokenBalance_in: [BSC_BigDecimal!]
  liquidityTokenBalance_not_in: [BSC_BigDecimal!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_LiquidityPosition_orderBy {
  id
  user
  pair
  liquidityTokenBalance
  snapshots
  block
  timestamp
}

type BSC_Mint {
  id: ID!
  transaction: BSC_Transaction!
  timestamp: BigInt!
  pair: BSC_Pair!
  to: BSC_Bytes!
  liquidity: BSC_BigDecimal!
  sender: BSC_Bytes
  amount0: BSC_BigDecimal
  amount1: BSC_BigDecimal
  logIndex: BigInt
  amountUSD: BSC_BigDecimal
  feeTo: BSC_Bytes
  feeLiquidity: BSC_BigDecimal
}

input BSC_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  to: BSC_Bytes
  to_not: BSC_Bytes
  to_in: [BSC_Bytes!]
  to_not_in: [BSC_Bytes!]
  to_contains: BSC_Bytes
  to_not_contains: BSC_Bytes
  liquidity: BSC_BigDecimal
  liquidity_not: BSC_BigDecimal
  liquidity_gt: BSC_BigDecimal
  liquidity_lt: BSC_BigDecimal
  liquidity_gte: BSC_BigDecimal
  liquidity_lte: BSC_BigDecimal
  liquidity_in: [BSC_BigDecimal!]
  liquidity_not_in: [BSC_BigDecimal!]
  sender: BSC_Bytes
  sender_not: BSC_Bytes
  sender_in: [BSC_Bytes!]
  sender_not_in: [BSC_Bytes!]
  sender_contains: BSC_Bytes
  sender_not_contains: BSC_Bytes
  amount0: BSC_BigDecimal
  amount0_not: BSC_BigDecimal
  amount0_gt: BSC_BigDecimal
  amount0_lt: BSC_BigDecimal
  amount0_gte: BSC_BigDecimal
  amount0_lte: BSC_BigDecimal
  amount0_in: [BSC_BigDecimal!]
  amount0_not_in: [BSC_BigDecimal!]
  amount1: BSC_BigDecimal
  amount1_not: BSC_BigDecimal
  amount1_gt: BSC_BigDecimal
  amount1_lt: BSC_BigDecimal
  amount1_gte: BSC_BigDecimal
  amount1_lte: BSC_BigDecimal
  amount1_in: [BSC_BigDecimal!]
  amount1_not_in: [BSC_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: BSC_BigDecimal
  amountUSD_not: BSC_BigDecimal
  amountUSD_gt: BSC_BigDecimal
  amountUSD_lt: BSC_BigDecimal
  amountUSD_gte: BSC_BigDecimal
  amountUSD_lte: BSC_BigDecimal
  amountUSD_in: [BSC_BigDecimal!]
  amountUSD_not_in: [BSC_BigDecimal!]
  feeTo: BSC_Bytes
  feeTo_not: BSC_Bytes
  feeTo_in: [BSC_Bytes!]
  feeTo_not_in: [BSC_Bytes!]
  feeTo_contains: BSC_Bytes
  feeTo_not_contains: BSC_Bytes
  feeLiquidity: BSC_BigDecimal
  feeLiquidity_not: BSC_BigDecimal
  feeLiquidity_gt: BSC_BigDecimal
  feeLiquidity_lt: BSC_BigDecimal
  feeLiquidity_gte: BSC_BigDecimal
  feeLiquidity_lte: BSC_BigDecimal
  feeLiquidity_in: [BSC_BigDecimal!]
  feeLiquidity_not_in: [BSC_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_Mint_orderBy {
  id
  transaction
  timestamp
  pair
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

"""Defines the order direction, either ascending or descending"""
enum BSC_OrderDirection {
  asc
  desc
}

type BSC_Pair {
  id: ID!
  factory: BSC_Factory!
  name: String!
  token0: BSC_Token!
  token1: BSC_Token!
  reserve0: BSC_BigDecimal!
  reserve1: BSC_BigDecimal!
  totalSupply: BSC_BigDecimal!
  reserveETH: BSC_BigDecimal!
  reserveUSD: BSC_BigDecimal!
  trackedReserveETH: BSC_BigDecimal!
  token0Price: BSC_BigDecimal!
  token1Price: BSC_BigDecimal!
  volumeToken0: BSC_BigDecimal!
  volumeToken1: BSC_BigDecimal!
  volumeUSD: BSC_BigDecimal!
  untrackedVolumeUSD: BSC_BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: BSC_LiquidityPosition_orderBy, orderDirection: BSC_OrderDirection, where: BSC_LiquidityPosition_filter): [BSC_LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: BSC_LiquidityPositionSnapshot_orderBy, orderDirection: BSC_OrderDirection, where: BSC_LiquidityPositionSnapshot_filter): [BSC_LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: BSC_PairDayData_orderBy, orderDirection: BSC_OrderDirection, where: BSC_PairDayData_filter): [BSC_PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: BSC_PairHourData_orderBy, orderDirection: BSC_OrderDirection, where: BSC_PairHourData_filter): [BSC_PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: BSC_Mint_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Mint_filter): [BSC_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: BSC_Burn_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Burn_filter): [BSC_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: BSC_Swap_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Swap_filter): [BSC_Swap!]!
  timestamp: BigInt!
  block: BigInt!
}

type BSC_PairDayData {
  id: ID!
  date: Int!
  pair: BSC_Pair!
  token0: BSC_Token!
  token1: BSC_Token!
  reserve0: BSC_BigDecimal!
  reserve1: BSC_BigDecimal!
  totalSupply: BSC_BigDecimal!
  reserveUSD: BSC_BigDecimal!
  volumeToken0: BSC_BigDecimal!
  volumeToken1: BSC_BigDecimal!
  volumeUSD: BSC_BigDecimal!
  txCount: BigInt!
}

input BSC_PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: BSC_BigDecimal
  reserve0_not: BSC_BigDecimal
  reserve0_gt: BSC_BigDecimal
  reserve0_lt: BSC_BigDecimal
  reserve0_gte: BSC_BigDecimal
  reserve0_lte: BSC_BigDecimal
  reserve0_in: [BSC_BigDecimal!]
  reserve0_not_in: [BSC_BigDecimal!]
  reserve1: BSC_BigDecimal
  reserve1_not: BSC_BigDecimal
  reserve1_gt: BSC_BigDecimal
  reserve1_lt: BSC_BigDecimal
  reserve1_gte: BSC_BigDecimal
  reserve1_lte: BSC_BigDecimal
  reserve1_in: [BSC_BigDecimal!]
  reserve1_not_in: [BSC_BigDecimal!]
  totalSupply: BSC_BigDecimal
  totalSupply_not: BSC_BigDecimal
  totalSupply_gt: BSC_BigDecimal
  totalSupply_lt: BSC_BigDecimal
  totalSupply_gte: BSC_BigDecimal
  totalSupply_lte: BSC_BigDecimal
  totalSupply_in: [BSC_BigDecimal!]
  totalSupply_not_in: [BSC_BigDecimal!]
  reserveUSD: BSC_BigDecimal
  reserveUSD_not: BSC_BigDecimal
  reserveUSD_gt: BSC_BigDecimal
  reserveUSD_lt: BSC_BigDecimal
  reserveUSD_gte: BSC_BigDecimal
  reserveUSD_lte: BSC_BigDecimal
  reserveUSD_in: [BSC_BigDecimal!]
  reserveUSD_not_in: [BSC_BigDecimal!]
  volumeToken0: BSC_BigDecimal
  volumeToken0_not: BSC_BigDecimal
  volumeToken0_gt: BSC_BigDecimal
  volumeToken0_lt: BSC_BigDecimal
  volumeToken0_gte: BSC_BigDecimal
  volumeToken0_lte: BSC_BigDecimal
  volumeToken0_in: [BSC_BigDecimal!]
  volumeToken0_not_in: [BSC_BigDecimal!]
  volumeToken1: BSC_BigDecimal
  volumeToken1_not: BSC_BigDecimal
  volumeToken1_gt: BSC_BigDecimal
  volumeToken1_lt: BSC_BigDecimal
  volumeToken1_gte: BSC_BigDecimal
  volumeToken1_lte: BSC_BigDecimal
  volumeToken1_in: [BSC_BigDecimal!]
  volumeToken1_not_in: [BSC_BigDecimal!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_PairDayData_orderBy {
  id
  date
  pair
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

type BSC_PairHourData {
  id: ID!
  date: Int!
  pair: BSC_Pair!
  reserve0: BSC_BigDecimal!
  reserve1: BSC_BigDecimal!
  reserveUSD: BSC_BigDecimal!
  volumeToken0: BSC_BigDecimal!
  volumeToken1: BSC_BigDecimal!
  volumeUSD: BSC_BigDecimal!
  txCount: BigInt!
}

input BSC_PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  reserve0: BSC_BigDecimal
  reserve0_not: BSC_BigDecimal
  reserve0_gt: BSC_BigDecimal
  reserve0_lt: BSC_BigDecimal
  reserve0_gte: BSC_BigDecimal
  reserve0_lte: BSC_BigDecimal
  reserve0_in: [BSC_BigDecimal!]
  reserve0_not_in: [BSC_BigDecimal!]
  reserve1: BSC_BigDecimal
  reserve1_not: BSC_BigDecimal
  reserve1_gt: BSC_BigDecimal
  reserve1_lt: BSC_BigDecimal
  reserve1_gte: BSC_BigDecimal
  reserve1_lte: BSC_BigDecimal
  reserve1_in: [BSC_BigDecimal!]
  reserve1_not_in: [BSC_BigDecimal!]
  reserveUSD: BSC_BigDecimal
  reserveUSD_not: BSC_BigDecimal
  reserveUSD_gt: BSC_BigDecimal
  reserveUSD_lt: BSC_BigDecimal
  reserveUSD_gte: BSC_BigDecimal
  reserveUSD_lte: BSC_BigDecimal
  reserveUSD_in: [BSC_BigDecimal!]
  reserveUSD_not_in: [BSC_BigDecimal!]
  volumeToken0: BSC_BigDecimal
  volumeToken0_not: BSC_BigDecimal
  volumeToken0_gt: BSC_BigDecimal
  volumeToken0_lt: BSC_BigDecimal
  volumeToken0_gte: BSC_BigDecimal
  volumeToken0_lte: BSC_BigDecimal
  volumeToken0_in: [BSC_BigDecimal!]
  volumeToken0_not_in: [BSC_BigDecimal!]
  volumeToken1: BSC_BigDecimal
  volumeToken1_not: BSC_BigDecimal
  volumeToken1_gt: BSC_BigDecimal
  volumeToken1_lt: BSC_BigDecimal
  volumeToken1_gte: BSC_BigDecimal
  volumeToken1_lte: BSC_BigDecimal
  volumeToken1_in: [BSC_BigDecimal!]
  volumeToken1_not_in: [BSC_BigDecimal!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_PairHourData_orderBy {
  id
  date
  pair
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

input BSC_Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: BSC_BigDecimal
  reserve0_not: BSC_BigDecimal
  reserve0_gt: BSC_BigDecimal
  reserve0_lt: BSC_BigDecimal
  reserve0_gte: BSC_BigDecimal
  reserve0_lte: BSC_BigDecimal
  reserve0_in: [BSC_BigDecimal!]
  reserve0_not_in: [BSC_BigDecimal!]
  reserve1: BSC_BigDecimal
  reserve1_not: BSC_BigDecimal
  reserve1_gt: BSC_BigDecimal
  reserve1_lt: BSC_BigDecimal
  reserve1_gte: BSC_BigDecimal
  reserve1_lte: BSC_BigDecimal
  reserve1_in: [BSC_BigDecimal!]
  reserve1_not_in: [BSC_BigDecimal!]
  totalSupply: BSC_BigDecimal
  totalSupply_not: BSC_BigDecimal
  totalSupply_gt: BSC_BigDecimal
  totalSupply_lt: BSC_BigDecimal
  totalSupply_gte: BSC_BigDecimal
  totalSupply_lte: BSC_BigDecimal
  totalSupply_in: [BSC_BigDecimal!]
  totalSupply_not_in: [BSC_BigDecimal!]
  reserveETH: BSC_BigDecimal
  reserveETH_not: BSC_BigDecimal
  reserveETH_gt: BSC_BigDecimal
  reserveETH_lt: BSC_BigDecimal
  reserveETH_gte: BSC_BigDecimal
  reserveETH_lte: BSC_BigDecimal
  reserveETH_in: [BSC_BigDecimal!]
  reserveETH_not_in: [BSC_BigDecimal!]
  reserveUSD: BSC_BigDecimal
  reserveUSD_not: BSC_BigDecimal
  reserveUSD_gt: BSC_BigDecimal
  reserveUSD_lt: BSC_BigDecimal
  reserveUSD_gte: BSC_BigDecimal
  reserveUSD_lte: BSC_BigDecimal
  reserveUSD_in: [BSC_BigDecimal!]
  reserveUSD_not_in: [BSC_BigDecimal!]
  trackedReserveETH: BSC_BigDecimal
  trackedReserveETH_not: BSC_BigDecimal
  trackedReserveETH_gt: BSC_BigDecimal
  trackedReserveETH_lt: BSC_BigDecimal
  trackedReserveETH_gte: BSC_BigDecimal
  trackedReserveETH_lte: BSC_BigDecimal
  trackedReserveETH_in: [BSC_BigDecimal!]
  trackedReserveETH_not_in: [BSC_BigDecimal!]
  token0Price: BSC_BigDecimal
  token0Price_not: BSC_BigDecimal
  token0Price_gt: BSC_BigDecimal
  token0Price_lt: BSC_BigDecimal
  token0Price_gte: BSC_BigDecimal
  token0Price_lte: BSC_BigDecimal
  token0Price_in: [BSC_BigDecimal!]
  token0Price_not_in: [BSC_BigDecimal!]
  token1Price: BSC_BigDecimal
  token1Price_not: BSC_BigDecimal
  token1Price_gt: BSC_BigDecimal
  token1Price_lt: BSC_BigDecimal
  token1Price_gte: BSC_BigDecimal
  token1Price_lte: BSC_BigDecimal
  token1Price_in: [BSC_BigDecimal!]
  token1Price_not_in: [BSC_BigDecimal!]
  volumeToken0: BSC_BigDecimal
  volumeToken0_not: BSC_BigDecimal
  volumeToken0_gt: BSC_BigDecimal
  volumeToken0_lt: BSC_BigDecimal
  volumeToken0_gte: BSC_BigDecimal
  volumeToken0_lte: BSC_BigDecimal
  volumeToken0_in: [BSC_BigDecimal!]
  volumeToken0_not_in: [BSC_BigDecimal!]
  volumeToken1: BSC_BigDecimal
  volumeToken1_not: BSC_BigDecimal
  volumeToken1_gt: BSC_BigDecimal
  volumeToken1_lt: BSC_BigDecimal
  volumeToken1_gte: BSC_BigDecimal
  volumeToken1_lte: BSC_BigDecimal
  volumeToken1_in: [BSC_BigDecimal!]
  volumeToken1_not_in: [BSC_BigDecimal!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  untrackedVolumeUSD: BSC_BigDecimal
  untrackedVolumeUSD_not: BSC_BigDecimal
  untrackedVolumeUSD_gt: BSC_BigDecimal
  untrackedVolumeUSD_lt: BSC_BigDecimal
  untrackedVolumeUSD_gte: BSC_BigDecimal
  untrackedVolumeUSD_lte: BSC_BigDecimal
  untrackedVolumeUSD_in: [BSC_BigDecimal!]
  untrackedVolumeUSD_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_Pair_orderBy {
  id
  factory
  name
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
}

type Query {
  BSC_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_User
  BSC_users(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_User_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_User!]!
  BSC_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Bundle
  BSC_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Bundle_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Bundle!]!
  BSC_factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Factory @merge(keyField: "id", keyArg: "id")
  BSC_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Factory_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Factory!]!
  BSC_hourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_HourData
  BSC_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_HourData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_HourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_HourData!]!
  BSC_dayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_DayData
  BSC_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_DayData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_DayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_DayData!]!
  BSC_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Token
  BSC_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Token_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Token!]!
  BSC_tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_TokenHourData
  BSC_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_TokenHourData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_TokenHourData!]!
  BSC_tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_TokenDayData
  BSC_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_TokenDayData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_TokenDayData!]!
  BSC_pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Pair
  BSC_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Pair_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Pair!]!
  BSC_pairHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_PairHourData
  BSC_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_PairHourData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_PairHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_PairHourData!]!
  BSC_pairDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_PairDayData
  BSC_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_PairDayData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_PairDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_PairDayData!]!
  BSC_liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_LiquidityPosition
  BSC_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_LiquidityPosition_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_LiquidityPosition!]!
  BSC_liquidityPositionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_LiquidityPositionSnapshot
  BSC_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_LiquidityPositionSnapshot_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_LiquidityPositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_LiquidityPositionSnapshot!]!
  BSC_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Transaction
  BSC_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Transaction_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Transaction!]!
  BSC_mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Mint
  BSC_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Mint_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Mint!]!
  BSC_burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Burn
  BSC_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Burn_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Burn!]!
  BSC_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Swap
  BSC_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Swap_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Swap!]!
  """Access to subgraph metadata"""
  BSC__meta(block: BSC_Block_height): BSC__Meta_
}

type Subscription {
  BSC_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_User
  BSC_users(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_User_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_User!]!
  BSC_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Bundle
  BSC_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Bundle_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Bundle!]!
  BSC_factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Factory
  BSC_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Factory_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Factory!]!
  BSC_hourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_HourData
  BSC_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_HourData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_HourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_HourData!]!
  BSC_dayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_DayData
  BSC_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_DayData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_DayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_DayData!]!
  BSC_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Token
  BSC_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Token_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Token!]!
  BSC_tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_TokenHourData
  BSC_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_TokenHourData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_TokenHourData!]!
  BSC_tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_TokenDayData
  BSC_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_TokenDayData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_TokenDayData!]!
  BSC_pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Pair
  BSC_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Pair_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Pair!]!
  BSC_pairHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_PairHourData
  BSC_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_PairHourData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_PairHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_PairHourData!]!
  BSC_pairDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_PairDayData
  BSC_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_PairDayData_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_PairDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_PairDayData!]!
  BSC_liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_LiquidityPosition
  BSC_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_LiquidityPosition_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_LiquidityPosition!]!
  BSC_liquidityPositionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_LiquidityPositionSnapshot
  BSC_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_LiquidityPositionSnapshot_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_LiquidityPositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_LiquidityPositionSnapshot!]!
  BSC_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Transaction
  BSC_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Transaction_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Transaction!]!
  BSC_mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Mint
  BSC_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Mint_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Mint!]!
  BSC_burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Burn
  BSC_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Burn_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Burn!]!
  BSC_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BSC_Swap
  BSC_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: BSC_Swap_orderBy
    orderDirection: BSC_OrderDirection
    where: BSC_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: BSC_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BSC_Swap!]!
  """Access to subgraph metadata"""
  BSC__meta(block: BSC_Block_height): BSC__Meta_
}

type BSC_Swap {
  id: ID!
  transaction: BSC_Transaction!
  timestamp: BigInt!
  pair: BSC_Pair!
  sender: BSC_Bytes!
  amount0In: BSC_BigDecimal!
  amount1In: BSC_BigDecimal!
  amount0Out: BSC_BigDecimal!
  amount1Out: BSC_BigDecimal!
  to: BSC_Bytes!
  logIndex: BigInt
  amountUSD: BSC_BigDecimal!
}

input BSC_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  sender: BSC_Bytes
  sender_not: BSC_Bytes
  sender_in: [BSC_Bytes!]
  sender_not_in: [BSC_Bytes!]
  sender_contains: BSC_Bytes
  sender_not_contains: BSC_Bytes
  amount0In: BSC_BigDecimal
  amount0In_not: BSC_BigDecimal
  amount0In_gt: BSC_BigDecimal
  amount0In_lt: BSC_BigDecimal
  amount0In_gte: BSC_BigDecimal
  amount0In_lte: BSC_BigDecimal
  amount0In_in: [BSC_BigDecimal!]
  amount0In_not_in: [BSC_BigDecimal!]
  amount1In: BSC_BigDecimal
  amount1In_not: BSC_BigDecimal
  amount1In_gt: BSC_BigDecimal
  amount1In_lt: BSC_BigDecimal
  amount1In_gte: BSC_BigDecimal
  amount1In_lte: BSC_BigDecimal
  amount1In_in: [BSC_BigDecimal!]
  amount1In_not_in: [BSC_BigDecimal!]
  amount0Out: BSC_BigDecimal
  amount0Out_not: BSC_BigDecimal
  amount0Out_gt: BSC_BigDecimal
  amount0Out_lt: BSC_BigDecimal
  amount0Out_gte: BSC_BigDecimal
  amount0Out_lte: BSC_BigDecimal
  amount0Out_in: [BSC_BigDecimal!]
  amount0Out_not_in: [BSC_BigDecimal!]
  amount1Out: BSC_BigDecimal
  amount1Out_not: BSC_BigDecimal
  amount1Out_gt: BSC_BigDecimal
  amount1Out_lt: BSC_BigDecimal
  amount1Out_gte: BSC_BigDecimal
  amount1Out_lte: BSC_BigDecimal
  amount1Out_in: [BSC_BigDecimal!]
  amount1Out_not_in: [BSC_BigDecimal!]
  to: BSC_Bytes
  to_not: BSC_Bytes
  to_in: [BSC_Bytes!]
  to_not_in: [BSC_Bytes!]
  to_contains: BSC_Bytes
  to_not_contains: BSC_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: BSC_BigDecimal
  amountUSD_not: BSC_BigDecimal
  amountUSD_gt: BSC_BigDecimal
  amountUSD_lt: BSC_BigDecimal
  amountUSD_gte: BSC_BigDecimal
  amountUSD_lte: BSC_BigDecimal
  amountUSD_in: [BSC_BigDecimal!]
  amountUSD_not_in: [BSC_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_Swap_orderBy {
  id
  transaction
  timestamp
  pair
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
}

type BSC_Token {
  id: ID!
  factory: BSC_Factory!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: BSC_BigDecimal!
  volumeUSD: BSC_BigDecimal!
  untrackedVolumeUSD: BSC_BigDecimal!
  txCount: BigInt!
  liquidity: BSC_BigDecimal!
  derivedETH: BSC_BigDecimal!
  whitelistPairs(skip: Int = 0, first: Int = 100, orderBy: BSC_Pair_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Pair_filter): [BSC_Pair!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: BSC_TokenHourData_orderBy, orderDirection: BSC_OrderDirection, where: BSC_TokenHourData_filter): [BSC_TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: BSC_TokenDayData_orderBy, orderDirection: BSC_OrderDirection, where: BSC_TokenDayData_filter): [BSC_TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: BSC_Pair_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Pair_filter): [BSC_Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: BSC_Pair_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Pair_filter): [BSC_Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: BSC_PairDayData_orderBy, orderDirection: BSC_OrderDirection, where: BSC_PairDayData_filter): [BSC_PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: BSC_PairDayData_orderBy, orderDirection: BSC_OrderDirection, where: BSC_PairDayData_filter): [BSC_PairDayData!]!
}

type BSC_TokenDayData {
  id: ID!
  date: Int!
  token: BSC_Token!
  volume: BSC_BigDecimal!
  volumeETH: BSC_BigDecimal!
  volumeUSD: BSC_BigDecimal!
  txCount: BigInt!
  liquidity: BSC_BigDecimal!
  liquidityETH: BSC_BigDecimal!
  liquidityUSD: BSC_BigDecimal!
  priceUSD: BSC_BigDecimal!
}

input BSC_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: BSC_BigDecimal
  volume_not: BSC_BigDecimal
  volume_gt: BSC_BigDecimal
  volume_lt: BSC_BigDecimal
  volume_gte: BSC_BigDecimal
  volume_lte: BSC_BigDecimal
  volume_in: [BSC_BigDecimal!]
  volume_not_in: [BSC_BigDecimal!]
  volumeETH: BSC_BigDecimal
  volumeETH_not: BSC_BigDecimal
  volumeETH_gt: BSC_BigDecimal
  volumeETH_lt: BSC_BigDecimal
  volumeETH_gte: BSC_BigDecimal
  volumeETH_lte: BSC_BigDecimal
  volumeETH_in: [BSC_BigDecimal!]
  volumeETH_not_in: [BSC_BigDecimal!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: BSC_BigDecimal
  liquidity_not: BSC_BigDecimal
  liquidity_gt: BSC_BigDecimal
  liquidity_lt: BSC_BigDecimal
  liquidity_gte: BSC_BigDecimal
  liquidity_lte: BSC_BigDecimal
  liquidity_in: [BSC_BigDecimal!]
  liquidity_not_in: [BSC_BigDecimal!]
  liquidityETH: BSC_BigDecimal
  liquidityETH_not: BSC_BigDecimal
  liquidityETH_gt: BSC_BigDecimal
  liquidityETH_lt: BSC_BigDecimal
  liquidityETH_gte: BSC_BigDecimal
  liquidityETH_lte: BSC_BigDecimal
  liquidityETH_in: [BSC_BigDecimal!]
  liquidityETH_not_in: [BSC_BigDecimal!]
  liquidityUSD: BSC_BigDecimal
  liquidityUSD_not: BSC_BigDecimal
  liquidityUSD_gt: BSC_BigDecimal
  liquidityUSD_lt: BSC_BigDecimal
  liquidityUSD_gte: BSC_BigDecimal
  liquidityUSD_lte: BSC_BigDecimal
  liquidityUSD_in: [BSC_BigDecimal!]
  liquidityUSD_not_in: [BSC_BigDecimal!]
  priceUSD: BSC_BigDecimal
  priceUSD_not: BSC_BigDecimal
  priceUSD_gt: BSC_BigDecimal
  priceUSD_lt: BSC_BigDecimal
  priceUSD_gte: BSC_BigDecimal
  priceUSD_lte: BSC_BigDecimal
  priceUSD_in: [BSC_BigDecimal!]
  priceUSD_not_in: [BSC_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_TokenDayData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

type BSC_TokenHourData {
  id: ID!
  date: Int!
  token: BSC_Token!
  volume: BSC_BigDecimal!
  volumeETH: BSC_BigDecimal!
  volumeUSD: BSC_BigDecimal!
  txCount: BigInt!
  liquidity: BSC_BigDecimal!
  liquidityETH: BSC_BigDecimal!
  liquidityUSD: BSC_BigDecimal!
  priceUSD: BSC_BigDecimal!
}

input BSC_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: BSC_BigDecimal
  volume_not: BSC_BigDecimal
  volume_gt: BSC_BigDecimal
  volume_lt: BSC_BigDecimal
  volume_gte: BSC_BigDecimal
  volume_lte: BSC_BigDecimal
  volume_in: [BSC_BigDecimal!]
  volume_not_in: [BSC_BigDecimal!]
  volumeETH: BSC_BigDecimal
  volumeETH_not: BSC_BigDecimal
  volumeETH_gt: BSC_BigDecimal
  volumeETH_lt: BSC_BigDecimal
  volumeETH_gte: BSC_BigDecimal
  volumeETH_lte: BSC_BigDecimal
  volumeETH_in: [BSC_BigDecimal!]
  volumeETH_not_in: [BSC_BigDecimal!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: BSC_BigDecimal
  liquidity_not: BSC_BigDecimal
  liquidity_gt: BSC_BigDecimal
  liquidity_lt: BSC_BigDecimal
  liquidity_gte: BSC_BigDecimal
  liquidity_lte: BSC_BigDecimal
  liquidity_in: [BSC_BigDecimal!]
  liquidity_not_in: [BSC_BigDecimal!]
  liquidityETH: BSC_BigDecimal
  liquidityETH_not: BSC_BigDecimal
  liquidityETH_gt: BSC_BigDecimal
  liquidityETH_lt: BSC_BigDecimal
  liquidityETH_gte: BSC_BigDecimal
  liquidityETH_lte: BSC_BigDecimal
  liquidityETH_in: [BSC_BigDecimal!]
  liquidityETH_not_in: [BSC_BigDecimal!]
  liquidityUSD: BSC_BigDecimal
  liquidityUSD_not: BSC_BigDecimal
  liquidityUSD_gt: BSC_BigDecimal
  liquidityUSD_lt: BSC_BigDecimal
  liquidityUSD_gte: BSC_BigDecimal
  liquidityUSD_lte: BSC_BigDecimal
  liquidityUSD_in: [BSC_BigDecimal!]
  liquidityUSD_not_in: [BSC_BigDecimal!]
  priceUSD: BSC_BigDecimal
  priceUSD_not: BSC_BigDecimal
  priceUSD_gt: BSC_BigDecimal
  priceUSD_lt: BSC_BigDecimal
  priceUSD_gte: BSC_BigDecimal
  priceUSD_lte: BSC_BigDecimal
  priceUSD_in: [BSC_BigDecimal!]
  priceUSD_not_in: [BSC_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_TokenHourData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

input BSC_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: BSC_BigDecimal
  volume_not: BSC_BigDecimal
  volume_gt: BSC_BigDecimal
  volume_lt: BSC_BigDecimal
  volume_gte: BSC_BigDecimal
  volume_lte: BSC_BigDecimal
  volume_in: [BSC_BigDecimal!]
  volume_not_in: [BSC_BigDecimal!]
  volumeUSD: BSC_BigDecimal
  volumeUSD_not: BSC_BigDecimal
  volumeUSD_gt: BSC_BigDecimal
  volumeUSD_lt: BSC_BigDecimal
  volumeUSD_gte: BSC_BigDecimal
  volumeUSD_lte: BSC_BigDecimal
  volumeUSD_in: [BSC_BigDecimal!]
  volumeUSD_not_in: [BSC_BigDecimal!]
  untrackedVolumeUSD: BSC_BigDecimal
  untrackedVolumeUSD_not: BSC_BigDecimal
  untrackedVolumeUSD_gt: BSC_BigDecimal
  untrackedVolumeUSD_lt: BSC_BigDecimal
  untrackedVolumeUSD_gte: BSC_BigDecimal
  untrackedVolumeUSD_lte: BSC_BigDecimal
  untrackedVolumeUSD_in: [BSC_BigDecimal!]
  untrackedVolumeUSD_not_in: [BSC_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: BSC_BigDecimal
  liquidity_not: BSC_BigDecimal
  liquidity_gt: BSC_BigDecimal
  liquidity_lt: BSC_BigDecimal
  liquidity_gte: BSC_BigDecimal
  liquidity_lte: BSC_BigDecimal
  liquidity_in: [BSC_BigDecimal!]
  liquidity_not_in: [BSC_BigDecimal!]
  derivedETH: BSC_BigDecimal
  derivedETH_not: BSC_BigDecimal
  derivedETH_gt: BSC_BigDecimal
  derivedETH_lt: BSC_BigDecimal
  derivedETH_gte: BSC_BigDecimal
  derivedETH_lte: BSC_BigDecimal
  derivedETH_in: [BSC_BigDecimal!]
  derivedETH_not_in: [BSC_BigDecimal!]
  whitelistPairs: [String!]
  whitelistPairs_not: [String!]
  whitelistPairs_contains: [String!]
  whitelistPairs_contains_nocase: [String!]
  whitelistPairs_not_contains: [String!]
  whitelistPairs_not_contains_nocase: [String!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_Token_orderBy {
  id
  factory
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  whitelistPairs
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
}

type BSC_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: BSC_Mint_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Mint_filter): [BSC_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: BSC_Burn_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Burn_filter): [BSC_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: BSC_Swap_orderBy, orderDirection: BSC_OrderDirection, where: BSC_Swap_filter): [BSC_Swap]!
}

input BSC_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
}

type BSC_User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: BSC_LiquidityPosition_orderBy, orderDirection: BSC_OrderDirection, where: BSC_LiquidityPosition_filter): [BSC_LiquidityPosition!]!
}

input BSC_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  """Filter for the block changed event."""
  _change_block: BSC_BlockChangedFilter
}

enum BSC_User_orderBy {
  id
  liquidityPositions
}

type BSC__Block_ {
  """The hash of the block"""
  hash: BSC_Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type BSC__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: BSC__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}