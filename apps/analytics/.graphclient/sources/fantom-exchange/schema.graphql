schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar FANTOM_BigDecimal

scalar BigInt

input FANTOM_BlockChangedFilter {
  number_gte: Int!
}

input FANTOM_Block_height {
  hash: FANTOM_Bytes
  number: Int
  number_gte: Int
}

type FANTOM_Bundle {
  id: ID!
  ethPrice: FANTOM_BigDecimal!
}

input FANTOM_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: FANTOM_BigDecimal
  ethPrice_not: FANTOM_BigDecimal
  ethPrice_gt: FANTOM_BigDecimal
  ethPrice_lt: FANTOM_BigDecimal
  ethPrice_gte: FANTOM_BigDecimal
  ethPrice_lte: FANTOM_BigDecimal
  ethPrice_in: [FANTOM_BigDecimal!]
  ethPrice_not_in: [FANTOM_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_Bundle_orderBy {
  id
  ethPrice
}

type FANTOM_Burn {
  id: ID!
  transaction: FANTOM_Transaction!
  timestamp: BigInt!
  pair: FANTOM_Pair!
  liquidity: FANTOM_BigDecimal!
  sender: FANTOM_Bytes
  amount0: FANTOM_BigDecimal
  amount1: FANTOM_BigDecimal
  to: FANTOM_Bytes
  logIndex: BigInt
  amountUSD: FANTOM_BigDecimal
  complete: Boolean!
  feeTo: FANTOM_Bytes
  feeLiquidity: FANTOM_BigDecimal
}

input FANTOM_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidity: FANTOM_BigDecimal
  liquidity_not: FANTOM_BigDecimal
  liquidity_gt: FANTOM_BigDecimal
  liquidity_lt: FANTOM_BigDecimal
  liquidity_gte: FANTOM_BigDecimal
  liquidity_lte: FANTOM_BigDecimal
  liquidity_in: [FANTOM_BigDecimal!]
  liquidity_not_in: [FANTOM_BigDecimal!]
  sender: FANTOM_Bytes
  sender_not: FANTOM_Bytes
  sender_in: [FANTOM_Bytes!]
  sender_not_in: [FANTOM_Bytes!]
  sender_contains: FANTOM_Bytes
  sender_not_contains: FANTOM_Bytes
  amount0: FANTOM_BigDecimal
  amount0_not: FANTOM_BigDecimal
  amount0_gt: FANTOM_BigDecimal
  amount0_lt: FANTOM_BigDecimal
  amount0_gte: FANTOM_BigDecimal
  amount0_lte: FANTOM_BigDecimal
  amount0_in: [FANTOM_BigDecimal!]
  amount0_not_in: [FANTOM_BigDecimal!]
  amount1: FANTOM_BigDecimal
  amount1_not: FANTOM_BigDecimal
  amount1_gt: FANTOM_BigDecimal
  amount1_lt: FANTOM_BigDecimal
  amount1_gte: FANTOM_BigDecimal
  amount1_lte: FANTOM_BigDecimal
  amount1_in: [FANTOM_BigDecimal!]
  amount1_not_in: [FANTOM_BigDecimal!]
  to: FANTOM_Bytes
  to_not: FANTOM_Bytes
  to_in: [FANTOM_Bytes!]
  to_not_in: [FANTOM_Bytes!]
  to_contains: FANTOM_Bytes
  to_not_contains: FANTOM_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: FANTOM_BigDecimal
  amountUSD_not: FANTOM_BigDecimal
  amountUSD_gt: FANTOM_BigDecimal
  amountUSD_lt: FANTOM_BigDecimal
  amountUSD_gte: FANTOM_BigDecimal
  amountUSD_lte: FANTOM_BigDecimal
  amountUSD_in: [FANTOM_BigDecimal!]
  amountUSD_not_in: [FANTOM_BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: FANTOM_Bytes
  feeTo_not: FANTOM_Bytes
  feeTo_in: [FANTOM_Bytes!]
  feeTo_not_in: [FANTOM_Bytes!]
  feeTo_contains: FANTOM_Bytes
  feeTo_not_contains: FANTOM_Bytes
  feeLiquidity: FANTOM_BigDecimal
  feeLiquidity_not: FANTOM_BigDecimal
  feeLiquidity_gt: FANTOM_BigDecimal
  feeLiquidity_lt: FANTOM_BigDecimal
  feeLiquidity_gte: FANTOM_BigDecimal
  feeLiquidity_lte: FANTOM_BigDecimal
  feeLiquidity_in: [FANTOM_BigDecimal!]
  feeLiquidity_not_in: [FANTOM_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_Burn_orderBy {
  id
  transaction
  timestamp
  pair
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

scalar FANTOM_Bytes

type FANTOM_DayData {
  id: ID!
  date: Int!
  factory: FANTOM_Factory!
  volumeETH: FANTOM_BigDecimal!
  volumeUSD: FANTOM_BigDecimal!
  untrackedVolume: FANTOM_BigDecimal!
  liquidityETH: FANTOM_BigDecimal!
  liquidityUSD: FANTOM_BigDecimal!
  txCount: BigInt!
}

input FANTOM_DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: FANTOM_BigDecimal
  volumeETH_not: FANTOM_BigDecimal
  volumeETH_gt: FANTOM_BigDecimal
  volumeETH_lt: FANTOM_BigDecimal
  volumeETH_gte: FANTOM_BigDecimal
  volumeETH_lte: FANTOM_BigDecimal
  volumeETH_in: [FANTOM_BigDecimal!]
  volumeETH_not_in: [FANTOM_BigDecimal!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  untrackedVolume: FANTOM_BigDecimal
  untrackedVolume_not: FANTOM_BigDecimal
  untrackedVolume_gt: FANTOM_BigDecimal
  untrackedVolume_lt: FANTOM_BigDecimal
  untrackedVolume_gte: FANTOM_BigDecimal
  untrackedVolume_lte: FANTOM_BigDecimal
  untrackedVolume_in: [FANTOM_BigDecimal!]
  untrackedVolume_not_in: [FANTOM_BigDecimal!]
  liquidityETH: FANTOM_BigDecimal
  liquidityETH_not: FANTOM_BigDecimal
  liquidityETH_gt: FANTOM_BigDecimal
  liquidityETH_lt: FANTOM_BigDecimal
  liquidityETH_gte: FANTOM_BigDecimal
  liquidityETH_lte: FANTOM_BigDecimal
  liquidityETH_in: [FANTOM_BigDecimal!]
  liquidityETH_not_in: [FANTOM_BigDecimal!]
  liquidityUSD: FANTOM_BigDecimal
  liquidityUSD_not: FANTOM_BigDecimal
  liquidityUSD_gt: FANTOM_BigDecimal
  liquidityUSD_lt: FANTOM_BigDecimal
  liquidityUSD_gte: FANTOM_BigDecimal
  liquidityUSD_lte: FANTOM_BigDecimal
  liquidityUSD_in: [FANTOM_BigDecimal!]
  liquidityUSD_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_DayData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type FANTOM_Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: FANTOM_BigDecimal!
  volumeETH: FANTOM_BigDecimal!
  untrackedVolumeUSD: FANTOM_BigDecimal!
  liquidityUSD: FANTOM_BigDecimal!
  liquidityETH: FANTOM_BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Pair_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Pair_filter): [FANTOM_Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Token_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Token_filter): [FANTOM_Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: FANTOM_HourData_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_HourData_filter): [FANTOM_HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: FANTOM_DayData_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_DayData_filter): [FANTOM_DayData!]!
}

input FANTOM_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  volumeETH: FANTOM_BigDecimal
  volumeETH_not: FANTOM_BigDecimal
  volumeETH_gt: FANTOM_BigDecimal
  volumeETH_lt: FANTOM_BigDecimal
  volumeETH_gte: FANTOM_BigDecimal
  volumeETH_lte: FANTOM_BigDecimal
  volumeETH_in: [FANTOM_BigDecimal!]
  volumeETH_not_in: [FANTOM_BigDecimal!]
  untrackedVolumeUSD: FANTOM_BigDecimal
  untrackedVolumeUSD_not: FANTOM_BigDecimal
  untrackedVolumeUSD_gt: FANTOM_BigDecimal
  untrackedVolumeUSD_lt: FANTOM_BigDecimal
  untrackedVolumeUSD_gte: FANTOM_BigDecimal
  untrackedVolumeUSD_lte: FANTOM_BigDecimal
  untrackedVolumeUSD_in: [FANTOM_BigDecimal!]
  untrackedVolumeUSD_not_in: [FANTOM_BigDecimal!]
  liquidityUSD: FANTOM_BigDecimal
  liquidityUSD_not: FANTOM_BigDecimal
  liquidityUSD_gt: FANTOM_BigDecimal
  liquidityUSD_lt: FANTOM_BigDecimal
  liquidityUSD_gte: FANTOM_BigDecimal
  liquidityUSD_lte: FANTOM_BigDecimal
  liquidityUSD_in: [FANTOM_BigDecimal!]
  liquidityUSD_not_in: [FANTOM_BigDecimal!]
  liquidityETH: FANTOM_BigDecimal
  liquidityETH_not: FANTOM_BigDecimal
  liquidityETH_gt: FANTOM_BigDecimal
  liquidityETH_lt: FANTOM_BigDecimal
  liquidityETH_gte: FANTOM_BigDecimal
  liquidityETH_lte: FANTOM_BigDecimal
  liquidityETH_in: [FANTOM_BigDecimal!]
  liquidityETH_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
}

type FANTOM_HourData {
  id: ID!
  date: Int!
  factory: FANTOM_Factory!
  volumeETH: FANTOM_BigDecimal!
  volumeUSD: FANTOM_BigDecimal!
  untrackedVolume: FANTOM_BigDecimal!
  liquidityETH: FANTOM_BigDecimal!
  liquidityUSD: FANTOM_BigDecimal!
  txCount: BigInt!
}

input FANTOM_HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: FANTOM_BigDecimal
  volumeETH_not: FANTOM_BigDecimal
  volumeETH_gt: FANTOM_BigDecimal
  volumeETH_lt: FANTOM_BigDecimal
  volumeETH_gte: FANTOM_BigDecimal
  volumeETH_lte: FANTOM_BigDecimal
  volumeETH_in: [FANTOM_BigDecimal!]
  volumeETH_not_in: [FANTOM_BigDecimal!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  untrackedVolume: FANTOM_BigDecimal
  untrackedVolume_not: FANTOM_BigDecimal
  untrackedVolume_gt: FANTOM_BigDecimal
  untrackedVolume_lt: FANTOM_BigDecimal
  untrackedVolume_gte: FANTOM_BigDecimal
  untrackedVolume_lte: FANTOM_BigDecimal
  untrackedVolume_in: [FANTOM_BigDecimal!]
  untrackedVolume_not_in: [FANTOM_BigDecimal!]
  liquidityETH: FANTOM_BigDecimal
  liquidityETH_not: FANTOM_BigDecimal
  liquidityETH_gt: FANTOM_BigDecimal
  liquidityETH_lt: FANTOM_BigDecimal
  liquidityETH_gte: FANTOM_BigDecimal
  liquidityETH_lte: FANTOM_BigDecimal
  liquidityETH_in: [FANTOM_BigDecimal!]
  liquidityETH_not_in: [FANTOM_BigDecimal!]
  liquidityUSD: FANTOM_BigDecimal
  liquidityUSD_not: FANTOM_BigDecimal
  liquidityUSD_gt: FANTOM_BigDecimal
  liquidityUSD_lt: FANTOM_BigDecimal
  liquidityUSD_gte: FANTOM_BigDecimal
  liquidityUSD_lte: FANTOM_BigDecimal
  liquidityUSD_in: [FANTOM_BigDecimal!]
  liquidityUSD_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_HourData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type FANTOM_LiquidityPosition {
  id: ID!
  user: FANTOM_User!
  pair: FANTOM_Pair!
  liquidityTokenBalance: FANTOM_BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: FANTOM_LiquidityPositionSnapshot_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_LiquidityPositionSnapshot_filter): [FANTOM_LiquidityPositionSnapshot]!
  block: Int!
  timestamp: Int!
}

type FANTOM_LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: FANTOM_LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: FANTOM_User!
  pair: FANTOM_Pair!
  token0PriceUSD: FANTOM_BigDecimal!
  token1PriceUSD: FANTOM_BigDecimal!
  reserve0: FANTOM_BigDecimal!
  reserve1: FANTOM_BigDecimal!
  reserveUSD: FANTOM_BigDecimal!
  liquidityTokenTotalSupply: FANTOM_BigDecimal!
  liquidityTokenBalance: FANTOM_BigDecimal!
}

input FANTOM_LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0PriceUSD: FANTOM_BigDecimal
  token0PriceUSD_not: FANTOM_BigDecimal
  token0PriceUSD_gt: FANTOM_BigDecimal
  token0PriceUSD_lt: FANTOM_BigDecimal
  token0PriceUSD_gte: FANTOM_BigDecimal
  token0PriceUSD_lte: FANTOM_BigDecimal
  token0PriceUSD_in: [FANTOM_BigDecimal!]
  token0PriceUSD_not_in: [FANTOM_BigDecimal!]
  token1PriceUSD: FANTOM_BigDecimal
  token1PriceUSD_not: FANTOM_BigDecimal
  token1PriceUSD_gt: FANTOM_BigDecimal
  token1PriceUSD_lt: FANTOM_BigDecimal
  token1PriceUSD_gte: FANTOM_BigDecimal
  token1PriceUSD_lte: FANTOM_BigDecimal
  token1PriceUSD_in: [FANTOM_BigDecimal!]
  token1PriceUSD_not_in: [FANTOM_BigDecimal!]
  reserve0: FANTOM_BigDecimal
  reserve0_not: FANTOM_BigDecimal
  reserve0_gt: FANTOM_BigDecimal
  reserve0_lt: FANTOM_BigDecimal
  reserve0_gte: FANTOM_BigDecimal
  reserve0_lte: FANTOM_BigDecimal
  reserve0_in: [FANTOM_BigDecimal!]
  reserve0_not_in: [FANTOM_BigDecimal!]
  reserve1: FANTOM_BigDecimal
  reserve1_not: FANTOM_BigDecimal
  reserve1_gt: FANTOM_BigDecimal
  reserve1_lt: FANTOM_BigDecimal
  reserve1_gte: FANTOM_BigDecimal
  reserve1_lte: FANTOM_BigDecimal
  reserve1_in: [FANTOM_BigDecimal!]
  reserve1_not_in: [FANTOM_BigDecimal!]
  reserveUSD: FANTOM_BigDecimal
  reserveUSD_not: FANTOM_BigDecimal
  reserveUSD_gt: FANTOM_BigDecimal
  reserveUSD_lt: FANTOM_BigDecimal
  reserveUSD_gte: FANTOM_BigDecimal
  reserveUSD_lte: FANTOM_BigDecimal
  reserveUSD_in: [FANTOM_BigDecimal!]
  reserveUSD_not_in: [FANTOM_BigDecimal!]
  liquidityTokenTotalSupply: FANTOM_BigDecimal
  liquidityTokenTotalSupply_not: FANTOM_BigDecimal
  liquidityTokenTotalSupply_gt: FANTOM_BigDecimal
  liquidityTokenTotalSupply_lt: FANTOM_BigDecimal
  liquidityTokenTotalSupply_gte: FANTOM_BigDecimal
  liquidityTokenTotalSupply_lte: FANTOM_BigDecimal
  liquidityTokenTotalSupply_in: [FANTOM_BigDecimal!]
  liquidityTokenTotalSupply_not_in: [FANTOM_BigDecimal!]
  liquidityTokenBalance: FANTOM_BigDecimal
  liquidityTokenBalance_not: FANTOM_BigDecimal
  liquidityTokenBalance_gt: FANTOM_BigDecimal
  liquidityTokenBalance_lt: FANTOM_BigDecimal
  liquidityTokenBalance_gte: FANTOM_BigDecimal
  liquidityTokenBalance_lte: FANTOM_BigDecimal
  liquidityTokenBalance_in: [FANTOM_BigDecimal!]
  liquidityTokenBalance_not_in: [FANTOM_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  timestamp
  block
  user
  pair
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input FANTOM_LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidityTokenBalance: FANTOM_BigDecimal
  liquidityTokenBalance_not: FANTOM_BigDecimal
  liquidityTokenBalance_gt: FANTOM_BigDecimal
  liquidityTokenBalance_lt: FANTOM_BigDecimal
  liquidityTokenBalance_gte: FANTOM_BigDecimal
  liquidityTokenBalance_lte: FANTOM_BigDecimal
  liquidityTokenBalance_in: [FANTOM_BigDecimal!]
  liquidityTokenBalance_not_in: [FANTOM_BigDecimal!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_LiquidityPosition_orderBy {
  id
  user
  pair
  liquidityTokenBalance
  snapshots
  block
  timestamp
}

type FANTOM_Mint {
  id: ID!
  transaction: FANTOM_Transaction!
  timestamp: BigInt!
  pair: FANTOM_Pair!
  to: FANTOM_Bytes!
  liquidity: FANTOM_BigDecimal!
  sender: FANTOM_Bytes
  amount0: FANTOM_BigDecimal
  amount1: FANTOM_BigDecimal
  logIndex: BigInt
  amountUSD: FANTOM_BigDecimal
  feeTo: FANTOM_Bytes
  feeLiquidity: FANTOM_BigDecimal
}

input FANTOM_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  to: FANTOM_Bytes
  to_not: FANTOM_Bytes
  to_in: [FANTOM_Bytes!]
  to_not_in: [FANTOM_Bytes!]
  to_contains: FANTOM_Bytes
  to_not_contains: FANTOM_Bytes
  liquidity: FANTOM_BigDecimal
  liquidity_not: FANTOM_BigDecimal
  liquidity_gt: FANTOM_BigDecimal
  liquidity_lt: FANTOM_BigDecimal
  liquidity_gte: FANTOM_BigDecimal
  liquidity_lte: FANTOM_BigDecimal
  liquidity_in: [FANTOM_BigDecimal!]
  liquidity_not_in: [FANTOM_BigDecimal!]
  sender: FANTOM_Bytes
  sender_not: FANTOM_Bytes
  sender_in: [FANTOM_Bytes!]
  sender_not_in: [FANTOM_Bytes!]
  sender_contains: FANTOM_Bytes
  sender_not_contains: FANTOM_Bytes
  amount0: FANTOM_BigDecimal
  amount0_not: FANTOM_BigDecimal
  amount0_gt: FANTOM_BigDecimal
  amount0_lt: FANTOM_BigDecimal
  amount0_gte: FANTOM_BigDecimal
  amount0_lte: FANTOM_BigDecimal
  amount0_in: [FANTOM_BigDecimal!]
  amount0_not_in: [FANTOM_BigDecimal!]
  amount1: FANTOM_BigDecimal
  amount1_not: FANTOM_BigDecimal
  amount1_gt: FANTOM_BigDecimal
  amount1_lt: FANTOM_BigDecimal
  amount1_gte: FANTOM_BigDecimal
  amount1_lte: FANTOM_BigDecimal
  amount1_in: [FANTOM_BigDecimal!]
  amount1_not_in: [FANTOM_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: FANTOM_BigDecimal
  amountUSD_not: FANTOM_BigDecimal
  amountUSD_gt: FANTOM_BigDecimal
  amountUSD_lt: FANTOM_BigDecimal
  amountUSD_gte: FANTOM_BigDecimal
  amountUSD_lte: FANTOM_BigDecimal
  amountUSD_in: [FANTOM_BigDecimal!]
  amountUSD_not_in: [FANTOM_BigDecimal!]
  feeTo: FANTOM_Bytes
  feeTo_not: FANTOM_Bytes
  feeTo_in: [FANTOM_Bytes!]
  feeTo_not_in: [FANTOM_Bytes!]
  feeTo_contains: FANTOM_Bytes
  feeTo_not_contains: FANTOM_Bytes
  feeLiquidity: FANTOM_BigDecimal
  feeLiquidity_not: FANTOM_BigDecimal
  feeLiquidity_gt: FANTOM_BigDecimal
  feeLiquidity_lt: FANTOM_BigDecimal
  feeLiquidity_gte: FANTOM_BigDecimal
  feeLiquidity_lte: FANTOM_BigDecimal
  feeLiquidity_in: [FANTOM_BigDecimal!]
  feeLiquidity_not_in: [FANTOM_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_Mint_orderBy {
  id
  transaction
  timestamp
  pair
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

"""Defines the order direction, either ascending or descending"""
enum FANTOM_OrderDirection {
  asc
  desc
}

type FANTOM_Pair {
  id: ID!
  factory: FANTOM_Factory!
  name: String!
  token0: FANTOM_Token!
  token1: FANTOM_Token!
  reserve0: FANTOM_BigDecimal!
  reserve1: FANTOM_BigDecimal!
  totalSupply: FANTOM_BigDecimal!
  reserveETH: FANTOM_BigDecimal!
  reserveUSD: FANTOM_BigDecimal!
  trackedReserveETH: FANTOM_BigDecimal!
  token0Price: FANTOM_BigDecimal!
  token1Price: FANTOM_BigDecimal!
  volumeToken0: FANTOM_BigDecimal!
  volumeToken1: FANTOM_BigDecimal!
  volumeUSD: FANTOM_BigDecimal!
  untrackedVolumeUSD: FANTOM_BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: FANTOM_LiquidityPosition_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_LiquidityPosition_filter): [FANTOM_LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: FANTOM_LiquidityPositionSnapshot_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_LiquidityPositionSnapshot_filter): [FANTOM_LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: FANTOM_PairDayData_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_PairDayData_filter): [FANTOM_PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: FANTOM_PairHourData_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_PairHourData_filter): [FANTOM_PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Mint_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Mint_filter): [FANTOM_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Burn_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Burn_filter): [FANTOM_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Swap_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Swap_filter): [FANTOM_Swap!]!
  timestamp: BigInt!
  block: BigInt!
}

type FANTOM_PairDayData {
  id: ID!
  date: Int!
  pair: FANTOM_Pair!
  token0: FANTOM_Token!
  token1: FANTOM_Token!
  reserve0: FANTOM_BigDecimal!
  reserve1: FANTOM_BigDecimal!
  totalSupply: FANTOM_BigDecimal!
  reserveUSD: FANTOM_BigDecimal!
  volumeToken0: FANTOM_BigDecimal!
  volumeToken1: FANTOM_BigDecimal!
  volumeUSD: FANTOM_BigDecimal!
  txCount: BigInt!
}

input FANTOM_PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: FANTOM_BigDecimal
  reserve0_not: FANTOM_BigDecimal
  reserve0_gt: FANTOM_BigDecimal
  reserve0_lt: FANTOM_BigDecimal
  reserve0_gte: FANTOM_BigDecimal
  reserve0_lte: FANTOM_BigDecimal
  reserve0_in: [FANTOM_BigDecimal!]
  reserve0_not_in: [FANTOM_BigDecimal!]
  reserve1: FANTOM_BigDecimal
  reserve1_not: FANTOM_BigDecimal
  reserve1_gt: FANTOM_BigDecimal
  reserve1_lt: FANTOM_BigDecimal
  reserve1_gte: FANTOM_BigDecimal
  reserve1_lte: FANTOM_BigDecimal
  reserve1_in: [FANTOM_BigDecimal!]
  reserve1_not_in: [FANTOM_BigDecimal!]
  totalSupply: FANTOM_BigDecimal
  totalSupply_not: FANTOM_BigDecimal
  totalSupply_gt: FANTOM_BigDecimal
  totalSupply_lt: FANTOM_BigDecimal
  totalSupply_gte: FANTOM_BigDecimal
  totalSupply_lte: FANTOM_BigDecimal
  totalSupply_in: [FANTOM_BigDecimal!]
  totalSupply_not_in: [FANTOM_BigDecimal!]
  reserveUSD: FANTOM_BigDecimal
  reserveUSD_not: FANTOM_BigDecimal
  reserveUSD_gt: FANTOM_BigDecimal
  reserveUSD_lt: FANTOM_BigDecimal
  reserveUSD_gte: FANTOM_BigDecimal
  reserveUSD_lte: FANTOM_BigDecimal
  reserveUSD_in: [FANTOM_BigDecimal!]
  reserveUSD_not_in: [FANTOM_BigDecimal!]
  volumeToken0: FANTOM_BigDecimal
  volumeToken0_not: FANTOM_BigDecimal
  volumeToken0_gt: FANTOM_BigDecimal
  volumeToken0_lt: FANTOM_BigDecimal
  volumeToken0_gte: FANTOM_BigDecimal
  volumeToken0_lte: FANTOM_BigDecimal
  volumeToken0_in: [FANTOM_BigDecimal!]
  volumeToken0_not_in: [FANTOM_BigDecimal!]
  volumeToken1: FANTOM_BigDecimal
  volumeToken1_not: FANTOM_BigDecimal
  volumeToken1_gt: FANTOM_BigDecimal
  volumeToken1_lt: FANTOM_BigDecimal
  volumeToken1_gte: FANTOM_BigDecimal
  volumeToken1_lte: FANTOM_BigDecimal
  volumeToken1_in: [FANTOM_BigDecimal!]
  volumeToken1_not_in: [FANTOM_BigDecimal!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_PairDayData_orderBy {
  id
  date
  pair
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

type FANTOM_PairHourData {
  id: ID!
  date: Int!
  pair: FANTOM_Pair!
  reserve0: FANTOM_BigDecimal!
  reserve1: FANTOM_BigDecimal!
  reserveUSD: FANTOM_BigDecimal!
  volumeToken0: FANTOM_BigDecimal!
  volumeToken1: FANTOM_BigDecimal!
  volumeUSD: FANTOM_BigDecimal!
  txCount: BigInt!
}

input FANTOM_PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  reserve0: FANTOM_BigDecimal
  reserve0_not: FANTOM_BigDecimal
  reserve0_gt: FANTOM_BigDecimal
  reserve0_lt: FANTOM_BigDecimal
  reserve0_gte: FANTOM_BigDecimal
  reserve0_lte: FANTOM_BigDecimal
  reserve0_in: [FANTOM_BigDecimal!]
  reserve0_not_in: [FANTOM_BigDecimal!]
  reserve1: FANTOM_BigDecimal
  reserve1_not: FANTOM_BigDecimal
  reserve1_gt: FANTOM_BigDecimal
  reserve1_lt: FANTOM_BigDecimal
  reserve1_gte: FANTOM_BigDecimal
  reserve1_lte: FANTOM_BigDecimal
  reserve1_in: [FANTOM_BigDecimal!]
  reserve1_not_in: [FANTOM_BigDecimal!]
  reserveUSD: FANTOM_BigDecimal
  reserveUSD_not: FANTOM_BigDecimal
  reserveUSD_gt: FANTOM_BigDecimal
  reserveUSD_lt: FANTOM_BigDecimal
  reserveUSD_gte: FANTOM_BigDecimal
  reserveUSD_lte: FANTOM_BigDecimal
  reserveUSD_in: [FANTOM_BigDecimal!]
  reserveUSD_not_in: [FANTOM_BigDecimal!]
  volumeToken0: FANTOM_BigDecimal
  volumeToken0_not: FANTOM_BigDecimal
  volumeToken0_gt: FANTOM_BigDecimal
  volumeToken0_lt: FANTOM_BigDecimal
  volumeToken0_gte: FANTOM_BigDecimal
  volumeToken0_lte: FANTOM_BigDecimal
  volumeToken0_in: [FANTOM_BigDecimal!]
  volumeToken0_not_in: [FANTOM_BigDecimal!]
  volumeToken1: FANTOM_BigDecimal
  volumeToken1_not: FANTOM_BigDecimal
  volumeToken1_gt: FANTOM_BigDecimal
  volumeToken1_lt: FANTOM_BigDecimal
  volumeToken1_gte: FANTOM_BigDecimal
  volumeToken1_lte: FANTOM_BigDecimal
  volumeToken1_in: [FANTOM_BigDecimal!]
  volumeToken1_not_in: [FANTOM_BigDecimal!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_PairHourData_orderBy {
  id
  date
  pair
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

input FANTOM_Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: FANTOM_BigDecimal
  reserve0_not: FANTOM_BigDecimal
  reserve0_gt: FANTOM_BigDecimal
  reserve0_lt: FANTOM_BigDecimal
  reserve0_gte: FANTOM_BigDecimal
  reserve0_lte: FANTOM_BigDecimal
  reserve0_in: [FANTOM_BigDecimal!]
  reserve0_not_in: [FANTOM_BigDecimal!]
  reserve1: FANTOM_BigDecimal
  reserve1_not: FANTOM_BigDecimal
  reserve1_gt: FANTOM_BigDecimal
  reserve1_lt: FANTOM_BigDecimal
  reserve1_gte: FANTOM_BigDecimal
  reserve1_lte: FANTOM_BigDecimal
  reserve1_in: [FANTOM_BigDecimal!]
  reserve1_not_in: [FANTOM_BigDecimal!]
  totalSupply: FANTOM_BigDecimal
  totalSupply_not: FANTOM_BigDecimal
  totalSupply_gt: FANTOM_BigDecimal
  totalSupply_lt: FANTOM_BigDecimal
  totalSupply_gte: FANTOM_BigDecimal
  totalSupply_lte: FANTOM_BigDecimal
  totalSupply_in: [FANTOM_BigDecimal!]
  totalSupply_not_in: [FANTOM_BigDecimal!]
  reserveETH: FANTOM_BigDecimal
  reserveETH_not: FANTOM_BigDecimal
  reserveETH_gt: FANTOM_BigDecimal
  reserveETH_lt: FANTOM_BigDecimal
  reserveETH_gte: FANTOM_BigDecimal
  reserveETH_lte: FANTOM_BigDecimal
  reserveETH_in: [FANTOM_BigDecimal!]
  reserveETH_not_in: [FANTOM_BigDecimal!]
  reserveUSD: FANTOM_BigDecimal
  reserveUSD_not: FANTOM_BigDecimal
  reserveUSD_gt: FANTOM_BigDecimal
  reserveUSD_lt: FANTOM_BigDecimal
  reserveUSD_gte: FANTOM_BigDecimal
  reserveUSD_lte: FANTOM_BigDecimal
  reserveUSD_in: [FANTOM_BigDecimal!]
  reserveUSD_not_in: [FANTOM_BigDecimal!]
  trackedReserveETH: FANTOM_BigDecimal
  trackedReserveETH_not: FANTOM_BigDecimal
  trackedReserveETH_gt: FANTOM_BigDecimal
  trackedReserveETH_lt: FANTOM_BigDecimal
  trackedReserveETH_gte: FANTOM_BigDecimal
  trackedReserveETH_lte: FANTOM_BigDecimal
  trackedReserveETH_in: [FANTOM_BigDecimal!]
  trackedReserveETH_not_in: [FANTOM_BigDecimal!]
  token0Price: FANTOM_BigDecimal
  token0Price_not: FANTOM_BigDecimal
  token0Price_gt: FANTOM_BigDecimal
  token0Price_lt: FANTOM_BigDecimal
  token0Price_gte: FANTOM_BigDecimal
  token0Price_lte: FANTOM_BigDecimal
  token0Price_in: [FANTOM_BigDecimal!]
  token0Price_not_in: [FANTOM_BigDecimal!]
  token1Price: FANTOM_BigDecimal
  token1Price_not: FANTOM_BigDecimal
  token1Price_gt: FANTOM_BigDecimal
  token1Price_lt: FANTOM_BigDecimal
  token1Price_gte: FANTOM_BigDecimal
  token1Price_lte: FANTOM_BigDecimal
  token1Price_in: [FANTOM_BigDecimal!]
  token1Price_not_in: [FANTOM_BigDecimal!]
  volumeToken0: FANTOM_BigDecimal
  volumeToken0_not: FANTOM_BigDecimal
  volumeToken0_gt: FANTOM_BigDecimal
  volumeToken0_lt: FANTOM_BigDecimal
  volumeToken0_gte: FANTOM_BigDecimal
  volumeToken0_lte: FANTOM_BigDecimal
  volumeToken0_in: [FANTOM_BigDecimal!]
  volumeToken0_not_in: [FANTOM_BigDecimal!]
  volumeToken1: FANTOM_BigDecimal
  volumeToken1_not: FANTOM_BigDecimal
  volumeToken1_gt: FANTOM_BigDecimal
  volumeToken1_lt: FANTOM_BigDecimal
  volumeToken1_gte: FANTOM_BigDecimal
  volumeToken1_lte: FANTOM_BigDecimal
  volumeToken1_in: [FANTOM_BigDecimal!]
  volumeToken1_not_in: [FANTOM_BigDecimal!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  untrackedVolumeUSD: FANTOM_BigDecimal
  untrackedVolumeUSD_not: FANTOM_BigDecimal
  untrackedVolumeUSD_gt: FANTOM_BigDecimal
  untrackedVolumeUSD_lt: FANTOM_BigDecimal
  untrackedVolumeUSD_gte: FANTOM_BigDecimal
  untrackedVolumeUSD_lte: FANTOM_BigDecimal
  untrackedVolumeUSD_in: [FANTOM_BigDecimal!]
  untrackedVolumeUSD_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_Pair_orderBy {
  id
  factory
  name
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
}

type Query {
  FANTOM_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_User
  FANTOM_users(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_User_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_User!]!
  FANTOM_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Bundle
  FANTOM_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Bundle_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Bundle!]!
  FANTOM_factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Factory @merge(keyField: "id", keyArg: "id")
  FANTOM_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Factory_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Factory!]!
  FANTOM_hourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_HourData
  FANTOM_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_HourData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_HourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_HourData!]!
  FANTOM_dayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_DayData
  FANTOM_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_DayData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_DayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_DayData!]!
  FANTOM_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Token
  FANTOM_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Token_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Token!]!
  FANTOM_tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_TokenHourData
  FANTOM_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_TokenHourData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_TokenHourData!]!
  FANTOM_tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_TokenDayData
  FANTOM_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_TokenDayData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_TokenDayData!]!
  FANTOM_pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Pair
  FANTOM_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Pair_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Pair!]!
  FANTOM_pairHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_PairHourData
  FANTOM_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_PairHourData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_PairHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_PairHourData!]!
  FANTOM_pairDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_PairDayData
  FANTOM_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_PairDayData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_PairDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_PairDayData!]!
  FANTOM_liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_LiquidityPosition
  FANTOM_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_LiquidityPosition_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_LiquidityPosition!]!
  FANTOM_liquidityPositionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_LiquidityPositionSnapshot
  FANTOM_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_LiquidityPositionSnapshot_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_LiquidityPositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_LiquidityPositionSnapshot!]!
  FANTOM_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Transaction
  FANTOM_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Transaction_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Transaction!]!
  FANTOM_mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Mint
  FANTOM_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Mint_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Mint!]!
  FANTOM_burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Burn
  FANTOM_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Burn_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Burn!]!
  FANTOM_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Swap
  FANTOM_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Swap_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Swap!]!
  """Access to subgraph metadata"""
  FANTOM__meta(block: FANTOM_Block_height): FANTOM__Meta_
}

type Subscription {
  FANTOM_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_User
  FANTOM_users(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_User_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_User!]!
  FANTOM_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Bundle
  FANTOM_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Bundle_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Bundle!]!
  FANTOM_factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Factory
  FANTOM_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Factory_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Factory!]!
  FANTOM_hourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_HourData
  FANTOM_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_HourData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_HourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_HourData!]!
  FANTOM_dayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_DayData
  FANTOM_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_DayData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_DayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_DayData!]!
  FANTOM_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Token
  FANTOM_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Token_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Token!]!
  FANTOM_tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_TokenHourData
  FANTOM_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_TokenHourData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_TokenHourData!]!
  FANTOM_tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_TokenDayData
  FANTOM_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_TokenDayData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_TokenDayData!]!
  FANTOM_pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Pair
  FANTOM_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Pair_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Pair!]!
  FANTOM_pairHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_PairHourData
  FANTOM_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_PairHourData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_PairHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_PairHourData!]!
  FANTOM_pairDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_PairDayData
  FANTOM_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_PairDayData_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_PairDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_PairDayData!]!
  FANTOM_liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_LiquidityPosition
  FANTOM_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_LiquidityPosition_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_LiquidityPosition!]!
  FANTOM_liquidityPositionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_LiquidityPositionSnapshot
  FANTOM_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_LiquidityPositionSnapshot_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_LiquidityPositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_LiquidityPositionSnapshot!]!
  FANTOM_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Transaction
  FANTOM_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Transaction_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Transaction!]!
  FANTOM_mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Mint
  FANTOM_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Mint_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Mint!]!
  FANTOM_burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Burn
  FANTOM_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Burn_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Burn!]!
  FANTOM_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FANTOM_Swap
  FANTOM_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: FANTOM_Swap_orderBy
    orderDirection: FANTOM_OrderDirection
    where: FANTOM_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FANTOM_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FANTOM_Swap!]!
  """Access to subgraph metadata"""
  FANTOM__meta(block: FANTOM_Block_height): FANTOM__Meta_
}

type FANTOM_Swap {
  id: ID!
  transaction: FANTOM_Transaction!
  timestamp: BigInt!
  pair: FANTOM_Pair!
  sender: FANTOM_Bytes!
  amount0In: FANTOM_BigDecimal!
  amount1In: FANTOM_BigDecimal!
  amount0Out: FANTOM_BigDecimal!
  amount1Out: FANTOM_BigDecimal!
  to: FANTOM_Bytes!
  logIndex: BigInt
  amountUSD: FANTOM_BigDecimal!
}

input FANTOM_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  sender: FANTOM_Bytes
  sender_not: FANTOM_Bytes
  sender_in: [FANTOM_Bytes!]
  sender_not_in: [FANTOM_Bytes!]
  sender_contains: FANTOM_Bytes
  sender_not_contains: FANTOM_Bytes
  amount0In: FANTOM_BigDecimal
  amount0In_not: FANTOM_BigDecimal
  amount0In_gt: FANTOM_BigDecimal
  amount0In_lt: FANTOM_BigDecimal
  amount0In_gte: FANTOM_BigDecimal
  amount0In_lte: FANTOM_BigDecimal
  amount0In_in: [FANTOM_BigDecimal!]
  amount0In_not_in: [FANTOM_BigDecimal!]
  amount1In: FANTOM_BigDecimal
  amount1In_not: FANTOM_BigDecimal
  amount1In_gt: FANTOM_BigDecimal
  amount1In_lt: FANTOM_BigDecimal
  amount1In_gte: FANTOM_BigDecimal
  amount1In_lte: FANTOM_BigDecimal
  amount1In_in: [FANTOM_BigDecimal!]
  amount1In_not_in: [FANTOM_BigDecimal!]
  amount0Out: FANTOM_BigDecimal
  amount0Out_not: FANTOM_BigDecimal
  amount0Out_gt: FANTOM_BigDecimal
  amount0Out_lt: FANTOM_BigDecimal
  amount0Out_gte: FANTOM_BigDecimal
  amount0Out_lte: FANTOM_BigDecimal
  amount0Out_in: [FANTOM_BigDecimal!]
  amount0Out_not_in: [FANTOM_BigDecimal!]
  amount1Out: FANTOM_BigDecimal
  amount1Out_not: FANTOM_BigDecimal
  amount1Out_gt: FANTOM_BigDecimal
  amount1Out_lt: FANTOM_BigDecimal
  amount1Out_gte: FANTOM_BigDecimal
  amount1Out_lte: FANTOM_BigDecimal
  amount1Out_in: [FANTOM_BigDecimal!]
  amount1Out_not_in: [FANTOM_BigDecimal!]
  to: FANTOM_Bytes
  to_not: FANTOM_Bytes
  to_in: [FANTOM_Bytes!]
  to_not_in: [FANTOM_Bytes!]
  to_contains: FANTOM_Bytes
  to_not_contains: FANTOM_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: FANTOM_BigDecimal
  amountUSD_not: FANTOM_BigDecimal
  amountUSD_gt: FANTOM_BigDecimal
  amountUSD_lt: FANTOM_BigDecimal
  amountUSD_gte: FANTOM_BigDecimal
  amountUSD_lte: FANTOM_BigDecimal
  amountUSD_in: [FANTOM_BigDecimal!]
  amountUSD_not_in: [FANTOM_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_Swap_orderBy {
  id
  transaction
  timestamp
  pair
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
}

type FANTOM_Token {
  id: ID!
  factory: FANTOM_Factory!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: FANTOM_BigDecimal!
  volumeUSD: FANTOM_BigDecimal!
  untrackedVolumeUSD: FANTOM_BigDecimal!
  txCount: BigInt!
  liquidity: FANTOM_BigDecimal!
  derivedETH: FANTOM_BigDecimal!
  hourData(skip: Int = 0, first: Int = 100, orderBy: FANTOM_TokenHourData_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_TokenHourData_filter): [FANTOM_TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: FANTOM_TokenDayData_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_TokenDayData_filter): [FANTOM_TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Pair_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Pair_filter): [FANTOM_Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Pair_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Pair_filter): [FANTOM_Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: FANTOM_PairDayData_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_PairDayData_filter): [FANTOM_PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: FANTOM_PairDayData_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_PairDayData_filter): [FANTOM_PairDayData!]!
}

type FANTOM_TokenDayData {
  id: ID!
  date: Int!
  token: FANTOM_Token!
  volume: FANTOM_BigDecimal!
  volumeETH: FANTOM_BigDecimal!
  volumeUSD: FANTOM_BigDecimal!
  txCount: BigInt!
  liquidity: FANTOM_BigDecimal!
  liquidityETH: FANTOM_BigDecimal!
  liquidityUSD: FANTOM_BigDecimal!
  priceUSD: FANTOM_BigDecimal!
}

input FANTOM_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: FANTOM_BigDecimal
  volume_not: FANTOM_BigDecimal
  volume_gt: FANTOM_BigDecimal
  volume_lt: FANTOM_BigDecimal
  volume_gte: FANTOM_BigDecimal
  volume_lte: FANTOM_BigDecimal
  volume_in: [FANTOM_BigDecimal!]
  volume_not_in: [FANTOM_BigDecimal!]
  volumeETH: FANTOM_BigDecimal
  volumeETH_not: FANTOM_BigDecimal
  volumeETH_gt: FANTOM_BigDecimal
  volumeETH_lt: FANTOM_BigDecimal
  volumeETH_gte: FANTOM_BigDecimal
  volumeETH_lte: FANTOM_BigDecimal
  volumeETH_in: [FANTOM_BigDecimal!]
  volumeETH_not_in: [FANTOM_BigDecimal!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: FANTOM_BigDecimal
  liquidity_not: FANTOM_BigDecimal
  liquidity_gt: FANTOM_BigDecimal
  liquidity_lt: FANTOM_BigDecimal
  liquidity_gte: FANTOM_BigDecimal
  liquidity_lte: FANTOM_BigDecimal
  liquidity_in: [FANTOM_BigDecimal!]
  liquidity_not_in: [FANTOM_BigDecimal!]
  liquidityETH: FANTOM_BigDecimal
  liquidityETH_not: FANTOM_BigDecimal
  liquidityETH_gt: FANTOM_BigDecimal
  liquidityETH_lt: FANTOM_BigDecimal
  liquidityETH_gte: FANTOM_BigDecimal
  liquidityETH_lte: FANTOM_BigDecimal
  liquidityETH_in: [FANTOM_BigDecimal!]
  liquidityETH_not_in: [FANTOM_BigDecimal!]
  liquidityUSD: FANTOM_BigDecimal
  liquidityUSD_not: FANTOM_BigDecimal
  liquidityUSD_gt: FANTOM_BigDecimal
  liquidityUSD_lt: FANTOM_BigDecimal
  liquidityUSD_gte: FANTOM_BigDecimal
  liquidityUSD_lte: FANTOM_BigDecimal
  liquidityUSD_in: [FANTOM_BigDecimal!]
  liquidityUSD_not_in: [FANTOM_BigDecimal!]
  priceUSD: FANTOM_BigDecimal
  priceUSD_not: FANTOM_BigDecimal
  priceUSD_gt: FANTOM_BigDecimal
  priceUSD_lt: FANTOM_BigDecimal
  priceUSD_gte: FANTOM_BigDecimal
  priceUSD_lte: FANTOM_BigDecimal
  priceUSD_in: [FANTOM_BigDecimal!]
  priceUSD_not_in: [FANTOM_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_TokenDayData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

type FANTOM_TokenHourData {
  id: ID!
  date: Int!
  token: FANTOM_Token!
  volume: FANTOM_BigDecimal!
  volumeETH: FANTOM_BigDecimal!
  volumeUSD: FANTOM_BigDecimal!
  txCount: BigInt!
  liquidity: FANTOM_BigDecimal!
  liquidityETH: FANTOM_BigDecimal!
  liquidityUSD: FANTOM_BigDecimal!
  priceUSD: FANTOM_BigDecimal!
}

input FANTOM_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: FANTOM_BigDecimal
  volume_not: FANTOM_BigDecimal
  volume_gt: FANTOM_BigDecimal
  volume_lt: FANTOM_BigDecimal
  volume_gte: FANTOM_BigDecimal
  volume_lte: FANTOM_BigDecimal
  volume_in: [FANTOM_BigDecimal!]
  volume_not_in: [FANTOM_BigDecimal!]
  volumeETH: FANTOM_BigDecimal
  volumeETH_not: FANTOM_BigDecimal
  volumeETH_gt: FANTOM_BigDecimal
  volumeETH_lt: FANTOM_BigDecimal
  volumeETH_gte: FANTOM_BigDecimal
  volumeETH_lte: FANTOM_BigDecimal
  volumeETH_in: [FANTOM_BigDecimal!]
  volumeETH_not_in: [FANTOM_BigDecimal!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: FANTOM_BigDecimal
  liquidity_not: FANTOM_BigDecimal
  liquidity_gt: FANTOM_BigDecimal
  liquidity_lt: FANTOM_BigDecimal
  liquidity_gte: FANTOM_BigDecimal
  liquidity_lte: FANTOM_BigDecimal
  liquidity_in: [FANTOM_BigDecimal!]
  liquidity_not_in: [FANTOM_BigDecimal!]
  liquidityETH: FANTOM_BigDecimal
  liquidityETH_not: FANTOM_BigDecimal
  liquidityETH_gt: FANTOM_BigDecimal
  liquidityETH_lt: FANTOM_BigDecimal
  liquidityETH_gte: FANTOM_BigDecimal
  liquidityETH_lte: FANTOM_BigDecimal
  liquidityETH_in: [FANTOM_BigDecimal!]
  liquidityETH_not_in: [FANTOM_BigDecimal!]
  liquidityUSD: FANTOM_BigDecimal
  liquidityUSD_not: FANTOM_BigDecimal
  liquidityUSD_gt: FANTOM_BigDecimal
  liquidityUSD_lt: FANTOM_BigDecimal
  liquidityUSD_gte: FANTOM_BigDecimal
  liquidityUSD_lte: FANTOM_BigDecimal
  liquidityUSD_in: [FANTOM_BigDecimal!]
  liquidityUSD_not_in: [FANTOM_BigDecimal!]
  priceUSD: FANTOM_BigDecimal
  priceUSD_not: FANTOM_BigDecimal
  priceUSD_gt: FANTOM_BigDecimal
  priceUSD_lt: FANTOM_BigDecimal
  priceUSD_gte: FANTOM_BigDecimal
  priceUSD_lte: FANTOM_BigDecimal
  priceUSD_in: [FANTOM_BigDecimal!]
  priceUSD_not_in: [FANTOM_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_TokenHourData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

input FANTOM_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: FANTOM_BigDecimal
  volume_not: FANTOM_BigDecimal
  volume_gt: FANTOM_BigDecimal
  volume_lt: FANTOM_BigDecimal
  volume_gte: FANTOM_BigDecimal
  volume_lte: FANTOM_BigDecimal
  volume_in: [FANTOM_BigDecimal!]
  volume_not_in: [FANTOM_BigDecimal!]
  volumeUSD: FANTOM_BigDecimal
  volumeUSD_not: FANTOM_BigDecimal
  volumeUSD_gt: FANTOM_BigDecimal
  volumeUSD_lt: FANTOM_BigDecimal
  volumeUSD_gte: FANTOM_BigDecimal
  volumeUSD_lte: FANTOM_BigDecimal
  volumeUSD_in: [FANTOM_BigDecimal!]
  volumeUSD_not_in: [FANTOM_BigDecimal!]
  untrackedVolumeUSD: FANTOM_BigDecimal
  untrackedVolumeUSD_not: FANTOM_BigDecimal
  untrackedVolumeUSD_gt: FANTOM_BigDecimal
  untrackedVolumeUSD_lt: FANTOM_BigDecimal
  untrackedVolumeUSD_gte: FANTOM_BigDecimal
  untrackedVolumeUSD_lte: FANTOM_BigDecimal
  untrackedVolumeUSD_in: [FANTOM_BigDecimal!]
  untrackedVolumeUSD_not_in: [FANTOM_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: FANTOM_BigDecimal
  liquidity_not: FANTOM_BigDecimal
  liquidity_gt: FANTOM_BigDecimal
  liquidity_lt: FANTOM_BigDecimal
  liquidity_gte: FANTOM_BigDecimal
  liquidity_lte: FANTOM_BigDecimal
  liquidity_in: [FANTOM_BigDecimal!]
  liquidity_not_in: [FANTOM_BigDecimal!]
  derivedETH: FANTOM_BigDecimal
  derivedETH_not: FANTOM_BigDecimal
  derivedETH_gt: FANTOM_BigDecimal
  derivedETH_lt: FANTOM_BigDecimal
  derivedETH_gte: FANTOM_BigDecimal
  derivedETH_lte: FANTOM_BigDecimal
  derivedETH_in: [FANTOM_BigDecimal!]
  derivedETH_not_in: [FANTOM_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_Token_orderBy {
  id
  factory
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
}

type FANTOM_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Mint_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Mint_filter): [FANTOM_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Burn_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Burn_filter): [FANTOM_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: FANTOM_Swap_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_Swap_filter): [FANTOM_Swap]!
}

input FANTOM_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
}

type FANTOM_User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: FANTOM_LiquidityPosition_orderBy, orderDirection: FANTOM_OrderDirection, where: FANTOM_LiquidityPosition_filter): [FANTOM_LiquidityPosition!]!
}

input FANTOM_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  """Filter for the block changed event."""
  _change_block: FANTOM_BlockChangedFilter
}

enum FANTOM_User_orderBy {
  id
  liquidityPositions
}

type FANTOM__Block_ {
  """The hash of the block"""
  hash: FANTOM_Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type FANTOM__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: FANTOM__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}