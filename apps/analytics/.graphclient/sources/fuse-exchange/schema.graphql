schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar FUSE_BigDecimal

scalar BigInt

"""The block at which the query should be executed."""
input FUSE_Block_height {
  """Value containing a block hash"""
  hash: FUSE_Bytes
  """Value containing a block number"""
  number: Int
  """
  Value containing the minimum block number. 
  In the case of `number_gte`, the query will be executed on the latest block only if
  the subgraph has progressed to or past the minimum block number.
  Defaults to the latest block when omitted.
  
  """
  number_gte: Int
}

type FUSE_Bundle {
  id: ID!
  ethPrice: FUSE_BigDecimal!
}

input FUSE_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: FUSE_BigDecimal
  ethPrice_not: FUSE_BigDecimal
  ethPrice_gt: FUSE_BigDecimal
  ethPrice_lt: FUSE_BigDecimal
  ethPrice_gte: FUSE_BigDecimal
  ethPrice_lte: FUSE_BigDecimal
  ethPrice_in: [FUSE_BigDecimal!]
  ethPrice_not_in: [FUSE_BigDecimal!]
}

enum FUSE_Bundle_orderBy {
  id
  ethPrice
}

type FUSE_Burn {
  id: ID!
  transaction: FUSE_Transaction!
  timestamp: BigInt!
  pair: FUSE_Pair!
  liquidity: FUSE_BigDecimal!
  sender: FUSE_Bytes
  amount0: FUSE_BigDecimal
  amount1: FUSE_BigDecimal
  to: FUSE_Bytes
  logIndex: BigInt
  amountUSD: FUSE_BigDecimal
  complete: Boolean!
  feeTo: FUSE_Bytes
  feeLiquidity: FUSE_BigDecimal
}

input FUSE_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidity: FUSE_BigDecimal
  liquidity_not: FUSE_BigDecimal
  liquidity_gt: FUSE_BigDecimal
  liquidity_lt: FUSE_BigDecimal
  liquidity_gte: FUSE_BigDecimal
  liquidity_lte: FUSE_BigDecimal
  liquidity_in: [FUSE_BigDecimal!]
  liquidity_not_in: [FUSE_BigDecimal!]
  sender: FUSE_Bytes
  sender_not: FUSE_Bytes
  sender_in: [FUSE_Bytes!]
  sender_not_in: [FUSE_Bytes!]
  sender_contains: FUSE_Bytes
  sender_not_contains: FUSE_Bytes
  amount0: FUSE_BigDecimal
  amount0_not: FUSE_BigDecimal
  amount0_gt: FUSE_BigDecimal
  amount0_lt: FUSE_BigDecimal
  amount0_gte: FUSE_BigDecimal
  amount0_lte: FUSE_BigDecimal
  amount0_in: [FUSE_BigDecimal!]
  amount0_not_in: [FUSE_BigDecimal!]
  amount1: FUSE_BigDecimal
  amount1_not: FUSE_BigDecimal
  amount1_gt: FUSE_BigDecimal
  amount1_lt: FUSE_BigDecimal
  amount1_gte: FUSE_BigDecimal
  amount1_lte: FUSE_BigDecimal
  amount1_in: [FUSE_BigDecimal!]
  amount1_not_in: [FUSE_BigDecimal!]
  to: FUSE_Bytes
  to_not: FUSE_Bytes
  to_in: [FUSE_Bytes!]
  to_not_in: [FUSE_Bytes!]
  to_contains: FUSE_Bytes
  to_not_contains: FUSE_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: FUSE_BigDecimal
  amountUSD_not: FUSE_BigDecimal
  amountUSD_gt: FUSE_BigDecimal
  amountUSD_lt: FUSE_BigDecimal
  amountUSD_gte: FUSE_BigDecimal
  amountUSD_lte: FUSE_BigDecimal
  amountUSD_in: [FUSE_BigDecimal!]
  amountUSD_not_in: [FUSE_BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: FUSE_Bytes
  feeTo_not: FUSE_Bytes
  feeTo_in: [FUSE_Bytes!]
  feeTo_not_in: [FUSE_Bytes!]
  feeTo_contains: FUSE_Bytes
  feeTo_not_contains: FUSE_Bytes
  feeLiquidity: FUSE_BigDecimal
  feeLiquidity_not: FUSE_BigDecimal
  feeLiquidity_gt: FUSE_BigDecimal
  feeLiquidity_lt: FUSE_BigDecimal
  feeLiquidity_gte: FUSE_BigDecimal
  feeLiquidity_lte: FUSE_BigDecimal
  feeLiquidity_in: [FUSE_BigDecimal!]
  feeLiquidity_not_in: [FUSE_BigDecimal!]
}

enum FUSE_Burn_orderBy {
  id
  transaction
  timestamp
  pair
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

scalar FUSE_Bytes

type FUSE_DayData {
  id: ID!
  date: Int!
  factory: FUSE_Factory!
  volumeETH: FUSE_BigDecimal!
  volumeUSD: FUSE_BigDecimal!
  untrackedVolume: FUSE_BigDecimal!
  liquidityETH: FUSE_BigDecimal!
  liquidityUSD: FUSE_BigDecimal!
  txCount: BigInt!
}

input FUSE_DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: FUSE_BigDecimal
  volumeETH_not: FUSE_BigDecimal
  volumeETH_gt: FUSE_BigDecimal
  volumeETH_lt: FUSE_BigDecimal
  volumeETH_gte: FUSE_BigDecimal
  volumeETH_lte: FUSE_BigDecimal
  volumeETH_in: [FUSE_BigDecimal!]
  volumeETH_not_in: [FUSE_BigDecimal!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  untrackedVolume: FUSE_BigDecimal
  untrackedVolume_not: FUSE_BigDecimal
  untrackedVolume_gt: FUSE_BigDecimal
  untrackedVolume_lt: FUSE_BigDecimal
  untrackedVolume_gte: FUSE_BigDecimal
  untrackedVolume_lte: FUSE_BigDecimal
  untrackedVolume_in: [FUSE_BigDecimal!]
  untrackedVolume_not_in: [FUSE_BigDecimal!]
  liquidityETH: FUSE_BigDecimal
  liquidityETH_not: FUSE_BigDecimal
  liquidityETH_gt: FUSE_BigDecimal
  liquidityETH_lt: FUSE_BigDecimal
  liquidityETH_gte: FUSE_BigDecimal
  liquidityETH_lte: FUSE_BigDecimal
  liquidityETH_in: [FUSE_BigDecimal!]
  liquidityETH_not_in: [FUSE_BigDecimal!]
  liquidityUSD: FUSE_BigDecimal
  liquidityUSD_not: FUSE_BigDecimal
  liquidityUSD_gt: FUSE_BigDecimal
  liquidityUSD_lt: FUSE_BigDecimal
  liquidityUSD_gte: FUSE_BigDecimal
  liquidityUSD_lte: FUSE_BigDecimal
  liquidityUSD_in: [FUSE_BigDecimal!]
  liquidityUSD_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
}

enum FUSE_DayData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type FUSE_Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: FUSE_BigDecimal!
  volumeETH: FUSE_BigDecimal!
  untrackedVolumeUSD: FUSE_BigDecimal!
  liquidityUSD: FUSE_BigDecimal!
  liquidityETH: FUSE_BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: FUSE_Pair_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Pair_filter): [FUSE_Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: FUSE_Token_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Token_filter): [FUSE_Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: FUSE_HourData_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_HourData_filter): [FUSE_HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: FUSE_DayData_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_DayData_filter): [FUSE_DayData!]!
}

input FUSE_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  volumeETH: FUSE_BigDecimal
  volumeETH_not: FUSE_BigDecimal
  volumeETH_gt: FUSE_BigDecimal
  volumeETH_lt: FUSE_BigDecimal
  volumeETH_gte: FUSE_BigDecimal
  volumeETH_lte: FUSE_BigDecimal
  volumeETH_in: [FUSE_BigDecimal!]
  volumeETH_not_in: [FUSE_BigDecimal!]
  untrackedVolumeUSD: FUSE_BigDecimal
  untrackedVolumeUSD_not: FUSE_BigDecimal
  untrackedVolumeUSD_gt: FUSE_BigDecimal
  untrackedVolumeUSD_lt: FUSE_BigDecimal
  untrackedVolumeUSD_gte: FUSE_BigDecimal
  untrackedVolumeUSD_lte: FUSE_BigDecimal
  untrackedVolumeUSD_in: [FUSE_BigDecimal!]
  untrackedVolumeUSD_not_in: [FUSE_BigDecimal!]
  liquidityUSD: FUSE_BigDecimal
  liquidityUSD_not: FUSE_BigDecimal
  liquidityUSD_gt: FUSE_BigDecimal
  liquidityUSD_lt: FUSE_BigDecimal
  liquidityUSD_gte: FUSE_BigDecimal
  liquidityUSD_lte: FUSE_BigDecimal
  liquidityUSD_in: [FUSE_BigDecimal!]
  liquidityUSD_not_in: [FUSE_BigDecimal!]
  liquidityETH: FUSE_BigDecimal
  liquidityETH_not: FUSE_BigDecimal
  liquidityETH_gt: FUSE_BigDecimal
  liquidityETH_lt: FUSE_BigDecimal
  liquidityETH_gte: FUSE_BigDecimal
  liquidityETH_lte: FUSE_BigDecimal
  liquidityETH_in: [FUSE_BigDecimal!]
  liquidityETH_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
}

enum FUSE_Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
}

type FUSE_HourData {
  id: ID!
  date: Int!
  factory: FUSE_Factory!
  volumeETH: FUSE_BigDecimal!
  volumeUSD: FUSE_BigDecimal!
  untrackedVolume: FUSE_BigDecimal!
  liquidityETH: FUSE_BigDecimal!
  liquidityUSD: FUSE_BigDecimal!
  txCount: BigInt!
}

input FUSE_HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: FUSE_BigDecimal
  volumeETH_not: FUSE_BigDecimal
  volumeETH_gt: FUSE_BigDecimal
  volumeETH_lt: FUSE_BigDecimal
  volumeETH_gte: FUSE_BigDecimal
  volumeETH_lte: FUSE_BigDecimal
  volumeETH_in: [FUSE_BigDecimal!]
  volumeETH_not_in: [FUSE_BigDecimal!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  untrackedVolume: FUSE_BigDecimal
  untrackedVolume_not: FUSE_BigDecimal
  untrackedVolume_gt: FUSE_BigDecimal
  untrackedVolume_lt: FUSE_BigDecimal
  untrackedVolume_gte: FUSE_BigDecimal
  untrackedVolume_lte: FUSE_BigDecimal
  untrackedVolume_in: [FUSE_BigDecimal!]
  untrackedVolume_not_in: [FUSE_BigDecimal!]
  liquidityETH: FUSE_BigDecimal
  liquidityETH_not: FUSE_BigDecimal
  liquidityETH_gt: FUSE_BigDecimal
  liquidityETH_lt: FUSE_BigDecimal
  liquidityETH_gte: FUSE_BigDecimal
  liquidityETH_lte: FUSE_BigDecimal
  liquidityETH_in: [FUSE_BigDecimal!]
  liquidityETH_not_in: [FUSE_BigDecimal!]
  liquidityUSD: FUSE_BigDecimal
  liquidityUSD_not: FUSE_BigDecimal
  liquidityUSD_gt: FUSE_BigDecimal
  liquidityUSD_lt: FUSE_BigDecimal
  liquidityUSD_gte: FUSE_BigDecimal
  liquidityUSD_lte: FUSE_BigDecimal
  liquidityUSD_in: [FUSE_BigDecimal!]
  liquidityUSD_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
}

enum FUSE_HourData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type FUSE_LiquidityPosition {
  id: ID!
  user: FUSE_User!
  pair: FUSE_Pair!
  liquidityTokenBalance: FUSE_BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: FUSE_LiquidityPositionSnapshot_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_LiquidityPositionSnapshot_filter): [FUSE_LiquidityPositionSnapshot]!
  block: Int!
  timestamp: Int!
}

type FUSE_LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: FUSE_LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: FUSE_User!
  pair: FUSE_Pair!
  token0PriceUSD: FUSE_BigDecimal!
  token1PriceUSD: FUSE_BigDecimal!
  reserve0: FUSE_BigDecimal!
  reserve1: FUSE_BigDecimal!
  reserveUSD: FUSE_BigDecimal!
  liquidityTokenTotalSupply: FUSE_BigDecimal!
  liquidityTokenBalance: FUSE_BigDecimal!
}

input FUSE_LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0PriceUSD: FUSE_BigDecimal
  token0PriceUSD_not: FUSE_BigDecimal
  token0PriceUSD_gt: FUSE_BigDecimal
  token0PriceUSD_lt: FUSE_BigDecimal
  token0PriceUSD_gte: FUSE_BigDecimal
  token0PriceUSD_lte: FUSE_BigDecimal
  token0PriceUSD_in: [FUSE_BigDecimal!]
  token0PriceUSD_not_in: [FUSE_BigDecimal!]
  token1PriceUSD: FUSE_BigDecimal
  token1PriceUSD_not: FUSE_BigDecimal
  token1PriceUSD_gt: FUSE_BigDecimal
  token1PriceUSD_lt: FUSE_BigDecimal
  token1PriceUSD_gte: FUSE_BigDecimal
  token1PriceUSD_lte: FUSE_BigDecimal
  token1PriceUSD_in: [FUSE_BigDecimal!]
  token1PriceUSD_not_in: [FUSE_BigDecimal!]
  reserve0: FUSE_BigDecimal
  reserve0_not: FUSE_BigDecimal
  reserve0_gt: FUSE_BigDecimal
  reserve0_lt: FUSE_BigDecimal
  reserve0_gte: FUSE_BigDecimal
  reserve0_lte: FUSE_BigDecimal
  reserve0_in: [FUSE_BigDecimal!]
  reserve0_not_in: [FUSE_BigDecimal!]
  reserve1: FUSE_BigDecimal
  reserve1_not: FUSE_BigDecimal
  reserve1_gt: FUSE_BigDecimal
  reserve1_lt: FUSE_BigDecimal
  reserve1_gte: FUSE_BigDecimal
  reserve1_lte: FUSE_BigDecimal
  reserve1_in: [FUSE_BigDecimal!]
  reserve1_not_in: [FUSE_BigDecimal!]
  reserveUSD: FUSE_BigDecimal
  reserveUSD_not: FUSE_BigDecimal
  reserveUSD_gt: FUSE_BigDecimal
  reserveUSD_lt: FUSE_BigDecimal
  reserveUSD_gte: FUSE_BigDecimal
  reserveUSD_lte: FUSE_BigDecimal
  reserveUSD_in: [FUSE_BigDecimal!]
  reserveUSD_not_in: [FUSE_BigDecimal!]
  liquidityTokenTotalSupply: FUSE_BigDecimal
  liquidityTokenTotalSupply_not: FUSE_BigDecimal
  liquidityTokenTotalSupply_gt: FUSE_BigDecimal
  liquidityTokenTotalSupply_lt: FUSE_BigDecimal
  liquidityTokenTotalSupply_gte: FUSE_BigDecimal
  liquidityTokenTotalSupply_lte: FUSE_BigDecimal
  liquidityTokenTotalSupply_in: [FUSE_BigDecimal!]
  liquidityTokenTotalSupply_not_in: [FUSE_BigDecimal!]
  liquidityTokenBalance: FUSE_BigDecimal
  liquidityTokenBalance_not: FUSE_BigDecimal
  liquidityTokenBalance_gt: FUSE_BigDecimal
  liquidityTokenBalance_lt: FUSE_BigDecimal
  liquidityTokenBalance_gte: FUSE_BigDecimal
  liquidityTokenBalance_lte: FUSE_BigDecimal
  liquidityTokenBalance_in: [FUSE_BigDecimal!]
  liquidityTokenBalance_not_in: [FUSE_BigDecimal!]
}

enum FUSE_LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  timestamp
  block
  user
  pair
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input FUSE_LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidityTokenBalance: FUSE_BigDecimal
  liquidityTokenBalance_not: FUSE_BigDecimal
  liquidityTokenBalance_gt: FUSE_BigDecimal
  liquidityTokenBalance_lt: FUSE_BigDecimal
  liquidityTokenBalance_gte: FUSE_BigDecimal
  liquidityTokenBalance_lte: FUSE_BigDecimal
  liquidityTokenBalance_in: [FUSE_BigDecimal!]
  liquidityTokenBalance_not_in: [FUSE_BigDecimal!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
}

enum FUSE_LiquidityPosition_orderBy {
  id
  user
  pair
  liquidityTokenBalance
  snapshots
  block
  timestamp
}

type FUSE_Mint {
  id: ID!
  transaction: FUSE_Transaction!
  timestamp: BigInt!
  pair: FUSE_Pair!
  to: FUSE_Bytes!
  liquidity: FUSE_BigDecimal!
  sender: FUSE_Bytes
  amount0: FUSE_BigDecimal
  amount1: FUSE_BigDecimal
  logIndex: BigInt
  amountUSD: FUSE_BigDecimal
  feeTo: FUSE_Bytes
  feeLiquidity: FUSE_BigDecimal
}

input FUSE_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  to: FUSE_Bytes
  to_not: FUSE_Bytes
  to_in: [FUSE_Bytes!]
  to_not_in: [FUSE_Bytes!]
  to_contains: FUSE_Bytes
  to_not_contains: FUSE_Bytes
  liquidity: FUSE_BigDecimal
  liquidity_not: FUSE_BigDecimal
  liquidity_gt: FUSE_BigDecimal
  liquidity_lt: FUSE_BigDecimal
  liquidity_gte: FUSE_BigDecimal
  liquidity_lte: FUSE_BigDecimal
  liquidity_in: [FUSE_BigDecimal!]
  liquidity_not_in: [FUSE_BigDecimal!]
  sender: FUSE_Bytes
  sender_not: FUSE_Bytes
  sender_in: [FUSE_Bytes!]
  sender_not_in: [FUSE_Bytes!]
  sender_contains: FUSE_Bytes
  sender_not_contains: FUSE_Bytes
  amount0: FUSE_BigDecimal
  amount0_not: FUSE_BigDecimal
  amount0_gt: FUSE_BigDecimal
  amount0_lt: FUSE_BigDecimal
  amount0_gte: FUSE_BigDecimal
  amount0_lte: FUSE_BigDecimal
  amount0_in: [FUSE_BigDecimal!]
  amount0_not_in: [FUSE_BigDecimal!]
  amount1: FUSE_BigDecimal
  amount1_not: FUSE_BigDecimal
  amount1_gt: FUSE_BigDecimal
  amount1_lt: FUSE_BigDecimal
  amount1_gte: FUSE_BigDecimal
  amount1_lte: FUSE_BigDecimal
  amount1_in: [FUSE_BigDecimal!]
  amount1_not_in: [FUSE_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: FUSE_BigDecimal
  amountUSD_not: FUSE_BigDecimal
  amountUSD_gt: FUSE_BigDecimal
  amountUSD_lt: FUSE_BigDecimal
  amountUSD_gte: FUSE_BigDecimal
  amountUSD_lte: FUSE_BigDecimal
  amountUSD_in: [FUSE_BigDecimal!]
  amountUSD_not_in: [FUSE_BigDecimal!]
  feeTo: FUSE_Bytes
  feeTo_not: FUSE_Bytes
  feeTo_in: [FUSE_Bytes!]
  feeTo_not_in: [FUSE_Bytes!]
  feeTo_contains: FUSE_Bytes
  feeTo_not_contains: FUSE_Bytes
  feeLiquidity: FUSE_BigDecimal
  feeLiquidity_not: FUSE_BigDecimal
  feeLiquidity_gt: FUSE_BigDecimal
  feeLiquidity_lt: FUSE_BigDecimal
  feeLiquidity_gte: FUSE_BigDecimal
  feeLiquidity_lte: FUSE_BigDecimal
  feeLiquidity_in: [FUSE_BigDecimal!]
  feeLiquidity_not_in: [FUSE_BigDecimal!]
}

enum FUSE_Mint_orderBy {
  id
  transaction
  timestamp
  pair
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

"""Defines the order direction, either ascending or descending"""
enum FUSE_OrderDirection {
  asc
  desc
}

type FUSE_Pair {
  id: ID!
  factory: FUSE_Factory!
  name: String!
  token0: FUSE_Token!
  token1: FUSE_Token!
  reserve0: FUSE_BigDecimal!
  reserve1: FUSE_BigDecimal!
  totalSupply: FUSE_BigDecimal!
  reserveETH: FUSE_BigDecimal!
  reserveUSD: FUSE_BigDecimal!
  trackedReserveETH: FUSE_BigDecimal!
  token0Price: FUSE_BigDecimal!
  token1Price: FUSE_BigDecimal!
  volumeToken0: FUSE_BigDecimal!
  volumeToken1: FUSE_BigDecimal!
  volumeUSD: FUSE_BigDecimal!
  untrackedVolumeUSD: FUSE_BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: FUSE_LiquidityPosition_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_LiquidityPosition_filter): [FUSE_LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: FUSE_LiquidityPositionSnapshot_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_LiquidityPositionSnapshot_filter): [FUSE_LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: FUSE_PairDayData_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_PairDayData_filter): [FUSE_PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: FUSE_PairHourData_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_PairHourData_filter): [FUSE_PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: FUSE_Mint_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Mint_filter): [FUSE_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: FUSE_Burn_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Burn_filter): [FUSE_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: FUSE_Swap_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Swap_filter): [FUSE_Swap!]!
  timestamp: BigInt!
  block: BigInt!
}

type FUSE_PairDayData {
  id: ID!
  date: Int!
  pair: FUSE_Pair!
  token0: FUSE_Token!
  token1: FUSE_Token!
  reserve0: FUSE_BigDecimal!
  reserve1: FUSE_BigDecimal!
  totalSupply: FUSE_BigDecimal!
  reserveUSD: FUSE_BigDecimal!
  volumeToken0: FUSE_BigDecimal!
  volumeToken1: FUSE_BigDecimal!
  volumeUSD: FUSE_BigDecimal!
  txCount: BigInt!
}

input FUSE_PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: FUSE_BigDecimal
  reserve0_not: FUSE_BigDecimal
  reserve0_gt: FUSE_BigDecimal
  reserve0_lt: FUSE_BigDecimal
  reserve0_gte: FUSE_BigDecimal
  reserve0_lte: FUSE_BigDecimal
  reserve0_in: [FUSE_BigDecimal!]
  reserve0_not_in: [FUSE_BigDecimal!]
  reserve1: FUSE_BigDecimal
  reserve1_not: FUSE_BigDecimal
  reserve1_gt: FUSE_BigDecimal
  reserve1_lt: FUSE_BigDecimal
  reserve1_gte: FUSE_BigDecimal
  reserve1_lte: FUSE_BigDecimal
  reserve1_in: [FUSE_BigDecimal!]
  reserve1_not_in: [FUSE_BigDecimal!]
  totalSupply: FUSE_BigDecimal
  totalSupply_not: FUSE_BigDecimal
  totalSupply_gt: FUSE_BigDecimal
  totalSupply_lt: FUSE_BigDecimal
  totalSupply_gte: FUSE_BigDecimal
  totalSupply_lte: FUSE_BigDecimal
  totalSupply_in: [FUSE_BigDecimal!]
  totalSupply_not_in: [FUSE_BigDecimal!]
  reserveUSD: FUSE_BigDecimal
  reserveUSD_not: FUSE_BigDecimal
  reserveUSD_gt: FUSE_BigDecimal
  reserveUSD_lt: FUSE_BigDecimal
  reserveUSD_gte: FUSE_BigDecimal
  reserveUSD_lte: FUSE_BigDecimal
  reserveUSD_in: [FUSE_BigDecimal!]
  reserveUSD_not_in: [FUSE_BigDecimal!]
  volumeToken0: FUSE_BigDecimal
  volumeToken0_not: FUSE_BigDecimal
  volumeToken0_gt: FUSE_BigDecimal
  volumeToken0_lt: FUSE_BigDecimal
  volumeToken0_gte: FUSE_BigDecimal
  volumeToken0_lte: FUSE_BigDecimal
  volumeToken0_in: [FUSE_BigDecimal!]
  volumeToken0_not_in: [FUSE_BigDecimal!]
  volumeToken1: FUSE_BigDecimal
  volumeToken1_not: FUSE_BigDecimal
  volumeToken1_gt: FUSE_BigDecimal
  volumeToken1_lt: FUSE_BigDecimal
  volumeToken1_gte: FUSE_BigDecimal
  volumeToken1_lte: FUSE_BigDecimal
  volumeToken1_in: [FUSE_BigDecimal!]
  volumeToken1_not_in: [FUSE_BigDecimal!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
}

enum FUSE_PairDayData_orderBy {
  id
  date
  pair
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

type FUSE_PairHourData {
  id: ID!
  date: Int!
  pair: FUSE_Pair!
  reserve0: FUSE_BigDecimal!
  reserve1: FUSE_BigDecimal!
  reserveUSD: FUSE_BigDecimal!
  volumeToken0: FUSE_BigDecimal!
  volumeToken1: FUSE_BigDecimal!
  volumeUSD: FUSE_BigDecimal!
  txCount: BigInt!
}

input FUSE_PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  reserve0: FUSE_BigDecimal
  reserve0_not: FUSE_BigDecimal
  reserve0_gt: FUSE_BigDecimal
  reserve0_lt: FUSE_BigDecimal
  reserve0_gte: FUSE_BigDecimal
  reserve0_lte: FUSE_BigDecimal
  reserve0_in: [FUSE_BigDecimal!]
  reserve0_not_in: [FUSE_BigDecimal!]
  reserve1: FUSE_BigDecimal
  reserve1_not: FUSE_BigDecimal
  reserve1_gt: FUSE_BigDecimal
  reserve1_lt: FUSE_BigDecimal
  reserve1_gte: FUSE_BigDecimal
  reserve1_lte: FUSE_BigDecimal
  reserve1_in: [FUSE_BigDecimal!]
  reserve1_not_in: [FUSE_BigDecimal!]
  reserveUSD: FUSE_BigDecimal
  reserveUSD_not: FUSE_BigDecimal
  reserveUSD_gt: FUSE_BigDecimal
  reserveUSD_lt: FUSE_BigDecimal
  reserveUSD_gte: FUSE_BigDecimal
  reserveUSD_lte: FUSE_BigDecimal
  reserveUSD_in: [FUSE_BigDecimal!]
  reserveUSD_not_in: [FUSE_BigDecimal!]
  volumeToken0: FUSE_BigDecimal
  volumeToken0_not: FUSE_BigDecimal
  volumeToken0_gt: FUSE_BigDecimal
  volumeToken0_lt: FUSE_BigDecimal
  volumeToken0_gte: FUSE_BigDecimal
  volumeToken0_lte: FUSE_BigDecimal
  volumeToken0_in: [FUSE_BigDecimal!]
  volumeToken0_not_in: [FUSE_BigDecimal!]
  volumeToken1: FUSE_BigDecimal
  volumeToken1_not: FUSE_BigDecimal
  volumeToken1_gt: FUSE_BigDecimal
  volumeToken1_lt: FUSE_BigDecimal
  volumeToken1_gte: FUSE_BigDecimal
  volumeToken1_lte: FUSE_BigDecimal
  volumeToken1_in: [FUSE_BigDecimal!]
  volumeToken1_not_in: [FUSE_BigDecimal!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
}

enum FUSE_PairHourData_orderBy {
  id
  date
  pair
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

input FUSE_Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: FUSE_BigDecimal
  reserve0_not: FUSE_BigDecimal
  reserve0_gt: FUSE_BigDecimal
  reserve0_lt: FUSE_BigDecimal
  reserve0_gte: FUSE_BigDecimal
  reserve0_lte: FUSE_BigDecimal
  reserve0_in: [FUSE_BigDecimal!]
  reserve0_not_in: [FUSE_BigDecimal!]
  reserve1: FUSE_BigDecimal
  reserve1_not: FUSE_BigDecimal
  reserve1_gt: FUSE_BigDecimal
  reserve1_lt: FUSE_BigDecimal
  reserve1_gte: FUSE_BigDecimal
  reserve1_lte: FUSE_BigDecimal
  reserve1_in: [FUSE_BigDecimal!]
  reserve1_not_in: [FUSE_BigDecimal!]
  totalSupply: FUSE_BigDecimal
  totalSupply_not: FUSE_BigDecimal
  totalSupply_gt: FUSE_BigDecimal
  totalSupply_lt: FUSE_BigDecimal
  totalSupply_gte: FUSE_BigDecimal
  totalSupply_lte: FUSE_BigDecimal
  totalSupply_in: [FUSE_BigDecimal!]
  totalSupply_not_in: [FUSE_BigDecimal!]
  reserveETH: FUSE_BigDecimal
  reserveETH_not: FUSE_BigDecimal
  reserveETH_gt: FUSE_BigDecimal
  reserveETH_lt: FUSE_BigDecimal
  reserveETH_gte: FUSE_BigDecimal
  reserveETH_lte: FUSE_BigDecimal
  reserveETH_in: [FUSE_BigDecimal!]
  reserveETH_not_in: [FUSE_BigDecimal!]
  reserveUSD: FUSE_BigDecimal
  reserveUSD_not: FUSE_BigDecimal
  reserveUSD_gt: FUSE_BigDecimal
  reserveUSD_lt: FUSE_BigDecimal
  reserveUSD_gte: FUSE_BigDecimal
  reserveUSD_lte: FUSE_BigDecimal
  reserveUSD_in: [FUSE_BigDecimal!]
  reserveUSD_not_in: [FUSE_BigDecimal!]
  trackedReserveETH: FUSE_BigDecimal
  trackedReserveETH_not: FUSE_BigDecimal
  trackedReserveETH_gt: FUSE_BigDecimal
  trackedReserveETH_lt: FUSE_BigDecimal
  trackedReserveETH_gte: FUSE_BigDecimal
  trackedReserveETH_lte: FUSE_BigDecimal
  trackedReserveETH_in: [FUSE_BigDecimal!]
  trackedReserveETH_not_in: [FUSE_BigDecimal!]
  token0Price: FUSE_BigDecimal
  token0Price_not: FUSE_BigDecimal
  token0Price_gt: FUSE_BigDecimal
  token0Price_lt: FUSE_BigDecimal
  token0Price_gte: FUSE_BigDecimal
  token0Price_lte: FUSE_BigDecimal
  token0Price_in: [FUSE_BigDecimal!]
  token0Price_not_in: [FUSE_BigDecimal!]
  token1Price: FUSE_BigDecimal
  token1Price_not: FUSE_BigDecimal
  token1Price_gt: FUSE_BigDecimal
  token1Price_lt: FUSE_BigDecimal
  token1Price_gte: FUSE_BigDecimal
  token1Price_lte: FUSE_BigDecimal
  token1Price_in: [FUSE_BigDecimal!]
  token1Price_not_in: [FUSE_BigDecimal!]
  volumeToken0: FUSE_BigDecimal
  volumeToken0_not: FUSE_BigDecimal
  volumeToken0_gt: FUSE_BigDecimal
  volumeToken0_lt: FUSE_BigDecimal
  volumeToken0_gte: FUSE_BigDecimal
  volumeToken0_lte: FUSE_BigDecimal
  volumeToken0_in: [FUSE_BigDecimal!]
  volumeToken0_not_in: [FUSE_BigDecimal!]
  volumeToken1: FUSE_BigDecimal
  volumeToken1_not: FUSE_BigDecimal
  volumeToken1_gt: FUSE_BigDecimal
  volumeToken1_lt: FUSE_BigDecimal
  volumeToken1_gte: FUSE_BigDecimal
  volumeToken1_lte: FUSE_BigDecimal
  volumeToken1_in: [FUSE_BigDecimal!]
  volumeToken1_not_in: [FUSE_BigDecimal!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  untrackedVolumeUSD: FUSE_BigDecimal
  untrackedVolumeUSD_not: FUSE_BigDecimal
  untrackedVolumeUSD_gt: FUSE_BigDecimal
  untrackedVolumeUSD_lt: FUSE_BigDecimal
  untrackedVolumeUSD_gte: FUSE_BigDecimal
  untrackedVolumeUSD_lte: FUSE_BigDecimal
  untrackedVolumeUSD_in: [FUSE_BigDecimal!]
  untrackedVolumeUSD_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
}

enum FUSE_Pair_orderBy {
  id
  factory
  name
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
}

type Query {
  FUSE_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_User
  FUSE_users(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_User_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_User!]!
  FUSE_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Bundle
  FUSE_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Bundle_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Bundle!]!
  FUSE_factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Factory @merge(keyField: "id", keyArg: "id")
  FUSE_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Factory_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Factory!]!
  FUSE_hourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_HourData
  FUSE_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_HourData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_HourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_HourData!]!
  FUSE_dayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_DayData
  FUSE_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_DayData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_DayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_DayData!]!
  FUSE_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Token
  FUSE_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Token_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Token!]!
  FUSE_tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_TokenHourData
  FUSE_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_TokenHourData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_TokenHourData!]!
  FUSE_tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_TokenDayData
  FUSE_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_TokenDayData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_TokenDayData!]!
  FUSE_pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Pair
  FUSE_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Pair_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Pair!]!
  FUSE_pairHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_PairHourData
  FUSE_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_PairHourData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_PairHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_PairHourData!]!
  FUSE_pairDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_PairDayData
  FUSE_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_PairDayData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_PairDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_PairDayData!]!
  FUSE_liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_LiquidityPosition
  FUSE_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_LiquidityPosition_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_LiquidityPosition!]!
  FUSE_liquidityPositionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_LiquidityPositionSnapshot
  FUSE_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_LiquidityPositionSnapshot_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_LiquidityPositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_LiquidityPositionSnapshot!]!
  FUSE_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Transaction
  FUSE_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Transaction_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Transaction!]!
  FUSE_mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Mint
  FUSE_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Mint_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Mint!]!
  FUSE_burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Burn
  FUSE_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Burn_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Burn!]!
  FUSE_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Swap
  FUSE_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Swap_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Swap!]!
  """Access to subgraph metadata"""
  FUSE__meta(block: FUSE_Block_height): FUSE__Meta_
}

type Subscription {
  FUSE_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_User
  FUSE_users(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_User_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_User!]!
  FUSE_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Bundle
  FUSE_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Bundle_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Bundle!]!
  FUSE_factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Factory
  FUSE_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Factory_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Factory!]!
  FUSE_hourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_HourData
  FUSE_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_HourData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_HourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_HourData!]!
  FUSE_dayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_DayData
  FUSE_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_DayData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_DayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_DayData!]!
  FUSE_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Token
  FUSE_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Token_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Token!]!
  FUSE_tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_TokenHourData
  FUSE_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_TokenHourData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_TokenHourData!]!
  FUSE_tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_TokenDayData
  FUSE_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_TokenDayData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_TokenDayData!]!
  FUSE_pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Pair
  FUSE_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Pair_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Pair!]!
  FUSE_pairHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_PairHourData
  FUSE_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_PairHourData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_PairHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_PairHourData!]!
  FUSE_pairDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_PairDayData
  FUSE_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_PairDayData_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_PairDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_PairDayData!]!
  FUSE_liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_LiquidityPosition
  FUSE_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_LiquidityPosition_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_LiquidityPosition!]!
  FUSE_liquidityPositionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_LiquidityPositionSnapshot
  FUSE_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_LiquidityPositionSnapshot_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_LiquidityPositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_LiquidityPositionSnapshot!]!
  FUSE_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Transaction
  FUSE_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Transaction_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Transaction!]!
  FUSE_mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Mint
  FUSE_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Mint_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Mint!]!
  FUSE_burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Burn
  FUSE_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Burn_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Burn!]!
  FUSE_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FUSE_Swap
  FUSE_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: FUSE_Swap_orderBy
    orderDirection: FUSE_OrderDirection
    where: FUSE_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: FUSE_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FUSE_Swap!]!
  """Access to subgraph metadata"""
  FUSE__meta(block: FUSE_Block_height): FUSE__Meta_
}

type FUSE_Swap {
  id: ID!
  transaction: FUSE_Transaction!
  timestamp: BigInt!
  pair: FUSE_Pair!
  sender: FUSE_Bytes!
  amount0In: FUSE_BigDecimal!
  amount1In: FUSE_BigDecimal!
  amount0Out: FUSE_BigDecimal!
  amount1Out: FUSE_BigDecimal!
  to: FUSE_Bytes!
  logIndex: BigInt
  amountUSD: FUSE_BigDecimal!
}

input FUSE_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  sender: FUSE_Bytes
  sender_not: FUSE_Bytes
  sender_in: [FUSE_Bytes!]
  sender_not_in: [FUSE_Bytes!]
  sender_contains: FUSE_Bytes
  sender_not_contains: FUSE_Bytes
  amount0In: FUSE_BigDecimal
  amount0In_not: FUSE_BigDecimal
  amount0In_gt: FUSE_BigDecimal
  amount0In_lt: FUSE_BigDecimal
  amount0In_gte: FUSE_BigDecimal
  amount0In_lte: FUSE_BigDecimal
  amount0In_in: [FUSE_BigDecimal!]
  amount0In_not_in: [FUSE_BigDecimal!]
  amount1In: FUSE_BigDecimal
  amount1In_not: FUSE_BigDecimal
  amount1In_gt: FUSE_BigDecimal
  amount1In_lt: FUSE_BigDecimal
  amount1In_gte: FUSE_BigDecimal
  amount1In_lte: FUSE_BigDecimal
  amount1In_in: [FUSE_BigDecimal!]
  amount1In_not_in: [FUSE_BigDecimal!]
  amount0Out: FUSE_BigDecimal
  amount0Out_not: FUSE_BigDecimal
  amount0Out_gt: FUSE_BigDecimal
  amount0Out_lt: FUSE_BigDecimal
  amount0Out_gte: FUSE_BigDecimal
  amount0Out_lte: FUSE_BigDecimal
  amount0Out_in: [FUSE_BigDecimal!]
  amount0Out_not_in: [FUSE_BigDecimal!]
  amount1Out: FUSE_BigDecimal
  amount1Out_not: FUSE_BigDecimal
  amount1Out_gt: FUSE_BigDecimal
  amount1Out_lt: FUSE_BigDecimal
  amount1Out_gte: FUSE_BigDecimal
  amount1Out_lte: FUSE_BigDecimal
  amount1Out_in: [FUSE_BigDecimal!]
  amount1Out_not_in: [FUSE_BigDecimal!]
  to: FUSE_Bytes
  to_not: FUSE_Bytes
  to_in: [FUSE_Bytes!]
  to_not_in: [FUSE_Bytes!]
  to_contains: FUSE_Bytes
  to_not_contains: FUSE_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: FUSE_BigDecimal
  amountUSD_not: FUSE_BigDecimal
  amountUSD_gt: FUSE_BigDecimal
  amountUSD_lt: FUSE_BigDecimal
  amountUSD_gte: FUSE_BigDecimal
  amountUSD_lte: FUSE_BigDecimal
  amountUSD_in: [FUSE_BigDecimal!]
  amountUSD_not_in: [FUSE_BigDecimal!]
}

enum FUSE_Swap_orderBy {
  id
  transaction
  timestamp
  pair
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
}

type FUSE_Token {
  id: ID!
  factory: FUSE_Factory!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: FUSE_BigDecimal!
  volumeUSD: FUSE_BigDecimal!
  untrackedVolumeUSD: FUSE_BigDecimal!
  txCount: BigInt!
  liquidity: FUSE_BigDecimal!
  derivedETH: FUSE_BigDecimal!
  whitelistPairs(skip: Int = 0, first: Int = 100, orderBy: FUSE_Pair_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Pair_filter): [FUSE_Pair!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: FUSE_TokenHourData_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_TokenHourData_filter): [FUSE_TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: FUSE_TokenDayData_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_TokenDayData_filter): [FUSE_TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: FUSE_Pair_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Pair_filter): [FUSE_Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: FUSE_Pair_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Pair_filter): [FUSE_Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: FUSE_PairDayData_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_PairDayData_filter): [FUSE_PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: FUSE_PairDayData_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_PairDayData_filter): [FUSE_PairDayData!]!
}

type FUSE_TokenDayData {
  id: ID!
  date: Int!
  token: FUSE_Token!
  volume: FUSE_BigDecimal!
  volumeETH: FUSE_BigDecimal!
  volumeUSD: FUSE_BigDecimal!
  txCount: BigInt!
  liquidity: FUSE_BigDecimal!
  liquidityETH: FUSE_BigDecimal!
  liquidityUSD: FUSE_BigDecimal!
  priceUSD: FUSE_BigDecimal!
}

input FUSE_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: FUSE_BigDecimal
  volume_not: FUSE_BigDecimal
  volume_gt: FUSE_BigDecimal
  volume_lt: FUSE_BigDecimal
  volume_gte: FUSE_BigDecimal
  volume_lte: FUSE_BigDecimal
  volume_in: [FUSE_BigDecimal!]
  volume_not_in: [FUSE_BigDecimal!]
  volumeETH: FUSE_BigDecimal
  volumeETH_not: FUSE_BigDecimal
  volumeETH_gt: FUSE_BigDecimal
  volumeETH_lt: FUSE_BigDecimal
  volumeETH_gte: FUSE_BigDecimal
  volumeETH_lte: FUSE_BigDecimal
  volumeETH_in: [FUSE_BigDecimal!]
  volumeETH_not_in: [FUSE_BigDecimal!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: FUSE_BigDecimal
  liquidity_not: FUSE_BigDecimal
  liquidity_gt: FUSE_BigDecimal
  liquidity_lt: FUSE_BigDecimal
  liquidity_gte: FUSE_BigDecimal
  liquidity_lte: FUSE_BigDecimal
  liquidity_in: [FUSE_BigDecimal!]
  liquidity_not_in: [FUSE_BigDecimal!]
  liquidityETH: FUSE_BigDecimal
  liquidityETH_not: FUSE_BigDecimal
  liquidityETH_gt: FUSE_BigDecimal
  liquidityETH_lt: FUSE_BigDecimal
  liquidityETH_gte: FUSE_BigDecimal
  liquidityETH_lte: FUSE_BigDecimal
  liquidityETH_in: [FUSE_BigDecimal!]
  liquidityETH_not_in: [FUSE_BigDecimal!]
  liquidityUSD: FUSE_BigDecimal
  liquidityUSD_not: FUSE_BigDecimal
  liquidityUSD_gt: FUSE_BigDecimal
  liquidityUSD_lt: FUSE_BigDecimal
  liquidityUSD_gte: FUSE_BigDecimal
  liquidityUSD_lte: FUSE_BigDecimal
  liquidityUSD_in: [FUSE_BigDecimal!]
  liquidityUSD_not_in: [FUSE_BigDecimal!]
  priceUSD: FUSE_BigDecimal
  priceUSD_not: FUSE_BigDecimal
  priceUSD_gt: FUSE_BigDecimal
  priceUSD_lt: FUSE_BigDecimal
  priceUSD_gte: FUSE_BigDecimal
  priceUSD_lte: FUSE_BigDecimal
  priceUSD_in: [FUSE_BigDecimal!]
  priceUSD_not_in: [FUSE_BigDecimal!]
}

enum FUSE_TokenDayData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

type FUSE_TokenHourData {
  id: ID!
  date: Int!
  token: FUSE_Token!
  volume: FUSE_BigDecimal!
  volumeETH: FUSE_BigDecimal!
  volumeUSD: FUSE_BigDecimal!
  txCount: BigInt!
  liquidity: FUSE_BigDecimal!
  liquidityETH: FUSE_BigDecimal!
  liquidityUSD: FUSE_BigDecimal!
  priceUSD: FUSE_BigDecimal!
}

input FUSE_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: FUSE_BigDecimal
  volume_not: FUSE_BigDecimal
  volume_gt: FUSE_BigDecimal
  volume_lt: FUSE_BigDecimal
  volume_gte: FUSE_BigDecimal
  volume_lte: FUSE_BigDecimal
  volume_in: [FUSE_BigDecimal!]
  volume_not_in: [FUSE_BigDecimal!]
  volumeETH: FUSE_BigDecimal
  volumeETH_not: FUSE_BigDecimal
  volumeETH_gt: FUSE_BigDecimal
  volumeETH_lt: FUSE_BigDecimal
  volumeETH_gte: FUSE_BigDecimal
  volumeETH_lte: FUSE_BigDecimal
  volumeETH_in: [FUSE_BigDecimal!]
  volumeETH_not_in: [FUSE_BigDecimal!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: FUSE_BigDecimal
  liquidity_not: FUSE_BigDecimal
  liquidity_gt: FUSE_BigDecimal
  liquidity_lt: FUSE_BigDecimal
  liquidity_gte: FUSE_BigDecimal
  liquidity_lte: FUSE_BigDecimal
  liquidity_in: [FUSE_BigDecimal!]
  liquidity_not_in: [FUSE_BigDecimal!]
  liquidityETH: FUSE_BigDecimal
  liquidityETH_not: FUSE_BigDecimal
  liquidityETH_gt: FUSE_BigDecimal
  liquidityETH_lt: FUSE_BigDecimal
  liquidityETH_gte: FUSE_BigDecimal
  liquidityETH_lte: FUSE_BigDecimal
  liquidityETH_in: [FUSE_BigDecimal!]
  liquidityETH_not_in: [FUSE_BigDecimal!]
  liquidityUSD: FUSE_BigDecimal
  liquidityUSD_not: FUSE_BigDecimal
  liquidityUSD_gt: FUSE_BigDecimal
  liquidityUSD_lt: FUSE_BigDecimal
  liquidityUSD_gte: FUSE_BigDecimal
  liquidityUSD_lte: FUSE_BigDecimal
  liquidityUSD_in: [FUSE_BigDecimal!]
  liquidityUSD_not_in: [FUSE_BigDecimal!]
  priceUSD: FUSE_BigDecimal
  priceUSD_not: FUSE_BigDecimal
  priceUSD_gt: FUSE_BigDecimal
  priceUSD_lt: FUSE_BigDecimal
  priceUSD_gte: FUSE_BigDecimal
  priceUSD_lte: FUSE_BigDecimal
  priceUSD_in: [FUSE_BigDecimal!]
  priceUSD_not_in: [FUSE_BigDecimal!]
}

enum FUSE_TokenHourData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

input FUSE_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: FUSE_BigDecimal
  volume_not: FUSE_BigDecimal
  volume_gt: FUSE_BigDecimal
  volume_lt: FUSE_BigDecimal
  volume_gte: FUSE_BigDecimal
  volume_lte: FUSE_BigDecimal
  volume_in: [FUSE_BigDecimal!]
  volume_not_in: [FUSE_BigDecimal!]
  volumeUSD: FUSE_BigDecimal
  volumeUSD_not: FUSE_BigDecimal
  volumeUSD_gt: FUSE_BigDecimal
  volumeUSD_lt: FUSE_BigDecimal
  volumeUSD_gte: FUSE_BigDecimal
  volumeUSD_lte: FUSE_BigDecimal
  volumeUSD_in: [FUSE_BigDecimal!]
  volumeUSD_not_in: [FUSE_BigDecimal!]
  untrackedVolumeUSD: FUSE_BigDecimal
  untrackedVolumeUSD_not: FUSE_BigDecimal
  untrackedVolumeUSD_gt: FUSE_BigDecimal
  untrackedVolumeUSD_lt: FUSE_BigDecimal
  untrackedVolumeUSD_gte: FUSE_BigDecimal
  untrackedVolumeUSD_lte: FUSE_BigDecimal
  untrackedVolumeUSD_in: [FUSE_BigDecimal!]
  untrackedVolumeUSD_not_in: [FUSE_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: FUSE_BigDecimal
  liquidity_not: FUSE_BigDecimal
  liquidity_gt: FUSE_BigDecimal
  liquidity_lt: FUSE_BigDecimal
  liquidity_gte: FUSE_BigDecimal
  liquidity_lte: FUSE_BigDecimal
  liquidity_in: [FUSE_BigDecimal!]
  liquidity_not_in: [FUSE_BigDecimal!]
  derivedETH: FUSE_BigDecimal
  derivedETH_not: FUSE_BigDecimal
  derivedETH_gt: FUSE_BigDecimal
  derivedETH_lt: FUSE_BigDecimal
  derivedETH_gte: FUSE_BigDecimal
  derivedETH_lte: FUSE_BigDecimal
  derivedETH_in: [FUSE_BigDecimal!]
  derivedETH_not_in: [FUSE_BigDecimal!]
  whitelistPairs: [String!]
  whitelistPairs_not: [String!]
  whitelistPairs_contains: [String!]
  whitelistPairs_contains_nocase: [String!]
  whitelistPairs_not_contains: [String!]
  whitelistPairs_not_contains_nocase: [String!]
}

enum FUSE_Token_orderBy {
  id
  factory
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  whitelistPairs
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
}

type FUSE_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: FUSE_Mint_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Mint_filter): [FUSE_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: FUSE_Burn_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Burn_filter): [FUSE_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: FUSE_Swap_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_Swap_filter): [FUSE_Swap]!
}

input FUSE_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]
}

enum FUSE_Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
}

type FUSE_User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: FUSE_LiquidityPosition_orderBy, orderDirection: FUSE_OrderDirection, where: FUSE_LiquidityPosition_filter): [FUSE_LiquidityPosition!]!
}

input FUSE_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
}

enum FUSE_User_orderBy {
  id
  liquidityPositions
}

type FUSE__Block_ {
  """The hash of the block"""
  hash: FUSE_Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type FUSE__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: FUSE__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}