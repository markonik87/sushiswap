schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar MOONRIVER_BigDecimal

scalar BigInt

"""The block at which the query should be executed."""
input MOONRIVER_Block_height {
  """Value containing a block hash"""
  hash: MOONRIVER_Bytes
  """Value containing a block number"""
  number: Int
  """
  Value containing the minimum block number. 
  In the case of `number_gte`, the query will be executed on the latest block only if
  the subgraph has progressed to or past the minimum block number.
  Defaults to the latest block when omitted.
  
  """
  number_gte: Int
}

type MOONRIVER_Bundle {
  id: ID!
  ethPrice: MOONRIVER_BigDecimal!
}

input MOONRIVER_Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ethPrice: MOONRIVER_BigDecimal
  ethPrice_not: MOONRIVER_BigDecimal
  ethPrice_gt: MOONRIVER_BigDecimal
  ethPrice_lt: MOONRIVER_BigDecimal
  ethPrice_gte: MOONRIVER_BigDecimal
  ethPrice_lte: MOONRIVER_BigDecimal
  ethPrice_in: [MOONRIVER_BigDecimal!]
  ethPrice_not_in: [MOONRIVER_BigDecimal!]
}

enum MOONRIVER_Bundle_orderBy {
  id
  ethPrice
}

type MOONRIVER_Burn {
  id: ID!
  transaction: MOONRIVER_Transaction!
  timestamp: BigInt!
  pair: MOONRIVER_Pair!
  liquidity: MOONRIVER_BigDecimal!
  sender: MOONRIVER_Bytes
  amount0: MOONRIVER_BigDecimal
  amount1: MOONRIVER_BigDecimal
  to: MOONRIVER_Bytes
  logIndex: BigInt
  amountUSD: MOONRIVER_BigDecimal
  complete: Boolean!
  feeTo: MOONRIVER_Bytes
  feeLiquidity: MOONRIVER_BigDecimal
}

input MOONRIVER_Burn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidity: MOONRIVER_BigDecimal
  liquidity_not: MOONRIVER_BigDecimal
  liquidity_gt: MOONRIVER_BigDecimal
  liquidity_lt: MOONRIVER_BigDecimal
  liquidity_gte: MOONRIVER_BigDecimal
  liquidity_lte: MOONRIVER_BigDecimal
  liquidity_in: [MOONRIVER_BigDecimal!]
  liquidity_not_in: [MOONRIVER_BigDecimal!]
  sender: MOONRIVER_Bytes
  sender_not: MOONRIVER_Bytes
  sender_in: [MOONRIVER_Bytes!]
  sender_not_in: [MOONRIVER_Bytes!]
  sender_contains: MOONRIVER_Bytes
  sender_not_contains: MOONRIVER_Bytes
  amount0: MOONRIVER_BigDecimal
  amount0_not: MOONRIVER_BigDecimal
  amount0_gt: MOONRIVER_BigDecimal
  amount0_lt: MOONRIVER_BigDecimal
  amount0_gte: MOONRIVER_BigDecimal
  amount0_lte: MOONRIVER_BigDecimal
  amount0_in: [MOONRIVER_BigDecimal!]
  amount0_not_in: [MOONRIVER_BigDecimal!]
  amount1: MOONRIVER_BigDecimal
  amount1_not: MOONRIVER_BigDecimal
  amount1_gt: MOONRIVER_BigDecimal
  amount1_lt: MOONRIVER_BigDecimal
  amount1_gte: MOONRIVER_BigDecimal
  amount1_lte: MOONRIVER_BigDecimal
  amount1_in: [MOONRIVER_BigDecimal!]
  amount1_not_in: [MOONRIVER_BigDecimal!]
  to: MOONRIVER_Bytes
  to_not: MOONRIVER_Bytes
  to_in: [MOONRIVER_Bytes!]
  to_not_in: [MOONRIVER_Bytes!]
  to_contains: MOONRIVER_Bytes
  to_not_contains: MOONRIVER_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: MOONRIVER_BigDecimal
  amountUSD_not: MOONRIVER_BigDecimal
  amountUSD_gt: MOONRIVER_BigDecimal
  amountUSD_lt: MOONRIVER_BigDecimal
  amountUSD_gte: MOONRIVER_BigDecimal
  amountUSD_lte: MOONRIVER_BigDecimal
  amountUSD_in: [MOONRIVER_BigDecimal!]
  amountUSD_not_in: [MOONRIVER_BigDecimal!]
  complete: Boolean
  complete_not: Boolean
  complete_in: [Boolean!]
  complete_not_in: [Boolean!]
  feeTo: MOONRIVER_Bytes
  feeTo_not: MOONRIVER_Bytes
  feeTo_in: [MOONRIVER_Bytes!]
  feeTo_not_in: [MOONRIVER_Bytes!]
  feeTo_contains: MOONRIVER_Bytes
  feeTo_not_contains: MOONRIVER_Bytes
  feeLiquidity: MOONRIVER_BigDecimal
  feeLiquidity_not: MOONRIVER_BigDecimal
  feeLiquidity_gt: MOONRIVER_BigDecimal
  feeLiquidity_lt: MOONRIVER_BigDecimal
  feeLiquidity_gte: MOONRIVER_BigDecimal
  feeLiquidity_lte: MOONRIVER_BigDecimal
  feeLiquidity_in: [MOONRIVER_BigDecimal!]
  feeLiquidity_not_in: [MOONRIVER_BigDecimal!]
}

enum MOONRIVER_Burn_orderBy {
  id
  transaction
  timestamp
  pair
  liquidity
  sender
  amount0
  amount1
  to
  logIndex
  amountUSD
  complete
  feeTo
  feeLiquidity
}

scalar MOONRIVER_Bytes

type MOONRIVER_DayData {
  id: ID!
  date: Int!
  factory: MOONRIVER_Factory!
  volumeETH: MOONRIVER_BigDecimal!
  volumeUSD: MOONRIVER_BigDecimal!
  untrackedVolume: MOONRIVER_BigDecimal!
  liquidityETH: MOONRIVER_BigDecimal!
  liquidityUSD: MOONRIVER_BigDecimal!
  txCount: BigInt!
}

input MOONRIVER_DayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: MOONRIVER_BigDecimal
  volumeETH_not: MOONRIVER_BigDecimal
  volumeETH_gt: MOONRIVER_BigDecimal
  volumeETH_lt: MOONRIVER_BigDecimal
  volumeETH_gte: MOONRIVER_BigDecimal
  volumeETH_lte: MOONRIVER_BigDecimal
  volumeETH_in: [MOONRIVER_BigDecimal!]
  volumeETH_not_in: [MOONRIVER_BigDecimal!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  untrackedVolume: MOONRIVER_BigDecimal
  untrackedVolume_not: MOONRIVER_BigDecimal
  untrackedVolume_gt: MOONRIVER_BigDecimal
  untrackedVolume_lt: MOONRIVER_BigDecimal
  untrackedVolume_gte: MOONRIVER_BigDecimal
  untrackedVolume_lte: MOONRIVER_BigDecimal
  untrackedVolume_in: [MOONRIVER_BigDecimal!]
  untrackedVolume_not_in: [MOONRIVER_BigDecimal!]
  liquidityETH: MOONRIVER_BigDecimal
  liquidityETH_not: MOONRIVER_BigDecimal
  liquidityETH_gt: MOONRIVER_BigDecimal
  liquidityETH_lt: MOONRIVER_BigDecimal
  liquidityETH_gte: MOONRIVER_BigDecimal
  liquidityETH_lte: MOONRIVER_BigDecimal
  liquidityETH_in: [MOONRIVER_BigDecimal!]
  liquidityETH_not_in: [MOONRIVER_BigDecimal!]
  liquidityUSD: MOONRIVER_BigDecimal
  liquidityUSD_not: MOONRIVER_BigDecimal
  liquidityUSD_gt: MOONRIVER_BigDecimal
  liquidityUSD_lt: MOONRIVER_BigDecimal
  liquidityUSD_gte: MOONRIVER_BigDecimal
  liquidityUSD_lte: MOONRIVER_BigDecimal
  liquidityUSD_in: [MOONRIVER_BigDecimal!]
  liquidityUSD_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
}

enum MOONRIVER_DayData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type MOONRIVER_Factory {
  id: ID!
  pairCount: BigInt!
  volumeUSD: MOONRIVER_BigDecimal!
  volumeETH: MOONRIVER_BigDecimal!
  untrackedVolumeUSD: MOONRIVER_BigDecimal!
  liquidityUSD: MOONRIVER_BigDecimal!
  liquidityETH: MOONRIVER_BigDecimal!
  txCount: BigInt!
  tokenCount: BigInt!
  userCount: BigInt!
  pairs(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Pair_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Pair_filter): [MOONRIVER_Pair!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Token_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Token_filter): [MOONRIVER_Token!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_HourData_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_HourData_filter): [MOONRIVER_HourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_DayData_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_DayData_filter): [MOONRIVER_DayData!]!
}

input MOONRIVER_Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pairCount: BigInt
  pairCount_not: BigInt
  pairCount_gt: BigInt
  pairCount_lt: BigInt
  pairCount_gte: BigInt
  pairCount_lte: BigInt
  pairCount_in: [BigInt!]
  pairCount_not_in: [BigInt!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  volumeETH: MOONRIVER_BigDecimal
  volumeETH_not: MOONRIVER_BigDecimal
  volumeETH_gt: MOONRIVER_BigDecimal
  volumeETH_lt: MOONRIVER_BigDecimal
  volumeETH_gte: MOONRIVER_BigDecimal
  volumeETH_lte: MOONRIVER_BigDecimal
  volumeETH_in: [MOONRIVER_BigDecimal!]
  volumeETH_not_in: [MOONRIVER_BigDecimal!]
  untrackedVolumeUSD: MOONRIVER_BigDecimal
  untrackedVolumeUSD_not: MOONRIVER_BigDecimal
  untrackedVolumeUSD_gt: MOONRIVER_BigDecimal
  untrackedVolumeUSD_lt: MOONRIVER_BigDecimal
  untrackedVolumeUSD_gte: MOONRIVER_BigDecimal
  untrackedVolumeUSD_lte: MOONRIVER_BigDecimal
  untrackedVolumeUSD_in: [MOONRIVER_BigDecimal!]
  untrackedVolumeUSD_not_in: [MOONRIVER_BigDecimal!]
  liquidityUSD: MOONRIVER_BigDecimal
  liquidityUSD_not: MOONRIVER_BigDecimal
  liquidityUSD_gt: MOONRIVER_BigDecimal
  liquidityUSD_lt: MOONRIVER_BigDecimal
  liquidityUSD_gte: MOONRIVER_BigDecimal
  liquidityUSD_lte: MOONRIVER_BigDecimal
  liquidityUSD_in: [MOONRIVER_BigDecimal!]
  liquidityUSD_not_in: [MOONRIVER_BigDecimal!]
  liquidityETH: MOONRIVER_BigDecimal
  liquidityETH_not: MOONRIVER_BigDecimal
  liquidityETH_gt: MOONRIVER_BigDecimal
  liquidityETH_lt: MOONRIVER_BigDecimal
  liquidityETH_gte: MOONRIVER_BigDecimal
  liquidityETH_lte: MOONRIVER_BigDecimal
  liquidityETH_in: [MOONRIVER_BigDecimal!]
  liquidityETH_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  tokenCount: BigInt
  tokenCount_not: BigInt
  tokenCount_gt: BigInt
  tokenCount_lt: BigInt
  tokenCount_gte: BigInt
  tokenCount_lte: BigInt
  tokenCount_in: [BigInt!]
  tokenCount_not_in: [BigInt!]
  userCount: BigInt
  userCount_not: BigInt
  userCount_gt: BigInt
  userCount_lt: BigInt
  userCount_gte: BigInt
  userCount_lte: BigInt
  userCount_in: [BigInt!]
  userCount_not_in: [BigInt!]
}

enum MOONRIVER_Factory_orderBy {
  id
  pairCount
  volumeUSD
  volumeETH
  untrackedVolumeUSD
  liquidityUSD
  liquidityETH
  txCount
  tokenCount
  userCount
  pairs
  tokens
  hourData
  dayData
}

type MOONRIVER_HourData {
  id: ID!
  date: Int!
  factory: MOONRIVER_Factory!
  volumeETH: MOONRIVER_BigDecimal!
  volumeUSD: MOONRIVER_BigDecimal!
  untrackedVolume: MOONRIVER_BigDecimal!
  liquidityETH: MOONRIVER_BigDecimal!
  liquidityUSD: MOONRIVER_BigDecimal!
  txCount: BigInt!
}

input MOONRIVER_HourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  volumeETH: MOONRIVER_BigDecimal
  volumeETH_not: MOONRIVER_BigDecimal
  volumeETH_gt: MOONRIVER_BigDecimal
  volumeETH_lt: MOONRIVER_BigDecimal
  volumeETH_gte: MOONRIVER_BigDecimal
  volumeETH_lte: MOONRIVER_BigDecimal
  volumeETH_in: [MOONRIVER_BigDecimal!]
  volumeETH_not_in: [MOONRIVER_BigDecimal!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  untrackedVolume: MOONRIVER_BigDecimal
  untrackedVolume_not: MOONRIVER_BigDecimal
  untrackedVolume_gt: MOONRIVER_BigDecimal
  untrackedVolume_lt: MOONRIVER_BigDecimal
  untrackedVolume_gte: MOONRIVER_BigDecimal
  untrackedVolume_lte: MOONRIVER_BigDecimal
  untrackedVolume_in: [MOONRIVER_BigDecimal!]
  untrackedVolume_not_in: [MOONRIVER_BigDecimal!]
  liquidityETH: MOONRIVER_BigDecimal
  liquidityETH_not: MOONRIVER_BigDecimal
  liquidityETH_gt: MOONRIVER_BigDecimal
  liquidityETH_lt: MOONRIVER_BigDecimal
  liquidityETH_gte: MOONRIVER_BigDecimal
  liquidityETH_lte: MOONRIVER_BigDecimal
  liquidityETH_in: [MOONRIVER_BigDecimal!]
  liquidityETH_not_in: [MOONRIVER_BigDecimal!]
  liquidityUSD: MOONRIVER_BigDecimal
  liquidityUSD_not: MOONRIVER_BigDecimal
  liquidityUSD_gt: MOONRIVER_BigDecimal
  liquidityUSD_lt: MOONRIVER_BigDecimal
  liquidityUSD_gte: MOONRIVER_BigDecimal
  liquidityUSD_lte: MOONRIVER_BigDecimal
  liquidityUSD_in: [MOONRIVER_BigDecimal!]
  liquidityUSD_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
}

enum MOONRIVER_HourData_orderBy {
  id
  date
  factory
  volumeETH
  volumeUSD
  untrackedVolume
  liquidityETH
  liquidityUSD
  txCount
}

type MOONRIVER_LiquidityPosition {
  id: ID!
  user: MOONRIVER_User!
  pair: MOONRIVER_Pair!
  liquidityTokenBalance: MOONRIVER_BigDecimal!
  snapshots(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_LiquidityPositionSnapshot_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_LiquidityPositionSnapshot_filter): [MOONRIVER_LiquidityPositionSnapshot]!
  block: Int!
  timestamp: Int!
}

type MOONRIVER_LiquidityPositionSnapshot {
  id: ID!
  liquidityPosition: MOONRIVER_LiquidityPosition!
  timestamp: Int!
  block: Int!
  user: MOONRIVER_User!
  pair: MOONRIVER_Pair!
  token0PriceUSD: MOONRIVER_BigDecimal!
  token1PriceUSD: MOONRIVER_BigDecimal!
  reserve0: MOONRIVER_BigDecimal!
  reserve1: MOONRIVER_BigDecimal!
  reserveUSD: MOONRIVER_BigDecimal!
  liquidityTokenTotalSupply: MOONRIVER_BigDecimal!
  liquidityTokenBalance: MOONRIVER_BigDecimal!
}

input MOONRIVER_LiquidityPositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  liquidityPosition: String
  liquidityPosition_not: String
  liquidityPosition_gt: String
  liquidityPosition_lt: String
  liquidityPosition_gte: String
  liquidityPosition_lte: String
  liquidityPosition_in: [String!]
  liquidityPosition_not_in: [String!]
  liquidityPosition_contains: String
  liquidityPosition_contains_nocase: String
  liquidityPosition_not_contains: String
  liquidityPosition_not_contains_nocase: String
  liquidityPosition_starts_with: String
  liquidityPosition_starts_with_nocase: String
  liquidityPosition_not_starts_with: String
  liquidityPosition_not_starts_with_nocase: String
  liquidityPosition_ends_with: String
  liquidityPosition_ends_with_nocase: String
  liquidityPosition_not_ends_with: String
  liquidityPosition_not_ends_with_nocase: String
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0PriceUSD: MOONRIVER_BigDecimal
  token0PriceUSD_not: MOONRIVER_BigDecimal
  token0PriceUSD_gt: MOONRIVER_BigDecimal
  token0PriceUSD_lt: MOONRIVER_BigDecimal
  token0PriceUSD_gte: MOONRIVER_BigDecimal
  token0PriceUSD_lte: MOONRIVER_BigDecimal
  token0PriceUSD_in: [MOONRIVER_BigDecimal!]
  token0PriceUSD_not_in: [MOONRIVER_BigDecimal!]
  token1PriceUSD: MOONRIVER_BigDecimal
  token1PriceUSD_not: MOONRIVER_BigDecimal
  token1PriceUSD_gt: MOONRIVER_BigDecimal
  token1PriceUSD_lt: MOONRIVER_BigDecimal
  token1PriceUSD_gte: MOONRIVER_BigDecimal
  token1PriceUSD_lte: MOONRIVER_BigDecimal
  token1PriceUSD_in: [MOONRIVER_BigDecimal!]
  token1PriceUSD_not_in: [MOONRIVER_BigDecimal!]
  reserve0: MOONRIVER_BigDecimal
  reserve0_not: MOONRIVER_BigDecimal
  reserve0_gt: MOONRIVER_BigDecimal
  reserve0_lt: MOONRIVER_BigDecimal
  reserve0_gte: MOONRIVER_BigDecimal
  reserve0_lte: MOONRIVER_BigDecimal
  reserve0_in: [MOONRIVER_BigDecimal!]
  reserve0_not_in: [MOONRIVER_BigDecimal!]
  reserve1: MOONRIVER_BigDecimal
  reserve1_not: MOONRIVER_BigDecimal
  reserve1_gt: MOONRIVER_BigDecimal
  reserve1_lt: MOONRIVER_BigDecimal
  reserve1_gte: MOONRIVER_BigDecimal
  reserve1_lte: MOONRIVER_BigDecimal
  reserve1_in: [MOONRIVER_BigDecimal!]
  reserve1_not_in: [MOONRIVER_BigDecimal!]
  reserveUSD: MOONRIVER_BigDecimal
  reserveUSD_not: MOONRIVER_BigDecimal
  reserveUSD_gt: MOONRIVER_BigDecimal
  reserveUSD_lt: MOONRIVER_BigDecimal
  reserveUSD_gte: MOONRIVER_BigDecimal
  reserveUSD_lte: MOONRIVER_BigDecimal
  reserveUSD_in: [MOONRIVER_BigDecimal!]
  reserveUSD_not_in: [MOONRIVER_BigDecimal!]
  liquidityTokenTotalSupply: MOONRIVER_BigDecimal
  liquidityTokenTotalSupply_not: MOONRIVER_BigDecimal
  liquidityTokenTotalSupply_gt: MOONRIVER_BigDecimal
  liquidityTokenTotalSupply_lt: MOONRIVER_BigDecimal
  liquidityTokenTotalSupply_gte: MOONRIVER_BigDecimal
  liquidityTokenTotalSupply_lte: MOONRIVER_BigDecimal
  liquidityTokenTotalSupply_in: [MOONRIVER_BigDecimal!]
  liquidityTokenTotalSupply_not_in: [MOONRIVER_BigDecimal!]
  liquidityTokenBalance: MOONRIVER_BigDecimal
  liquidityTokenBalance_not: MOONRIVER_BigDecimal
  liquidityTokenBalance_gt: MOONRIVER_BigDecimal
  liquidityTokenBalance_lt: MOONRIVER_BigDecimal
  liquidityTokenBalance_gte: MOONRIVER_BigDecimal
  liquidityTokenBalance_lte: MOONRIVER_BigDecimal
  liquidityTokenBalance_in: [MOONRIVER_BigDecimal!]
  liquidityTokenBalance_not_in: [MOONRIVER_BigDecimal!]
}

enum MOONRIVER_LiquidityPositionSnapshot_orderBy {
  id
  liquidityPosition
  timestamp
  block
  user
  pair
  token0PriceUSD
  token1PriceUSD
  reserve0
  reserve1
  reserveUSD
  liquidityTokenTotalSupply
  liquidityTokenBalance
}

input MOONRIVER_LiquidityPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  liquidityTokenBalance: MOONRIVER_BigDecimal
  liquidityTokenBalance_not: MOONRIVER_BigDecimal
  liquidityTokenBalance_gt: MOONRIVER_BigDecimal
  liquidityTokenBalance_lt: MOONRIVER_BigDecimal
  liquidityTokenBalance_gte: MOONRIVER_BigDecimal
  liquidityTokenBalance_lte: MOONRIVER_BigDecimal
  liquidityTokenBalance_in: [MOONRIVER_BigDecimal!]
  liquidityTokenBalance_not_in: [MOONRIVER_BigDecimal!]
  block: Int
  block_not: Int
  block_gt: Int
  block_lt: Int
  block_gte: Int
  block_lte: Int
  block_in: [Int!]
  block_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
}

enum MOONRIVER_LiquidityPosition_orderBy {
  id
  user
  pair
  liquidityTokenBalance
  snapshots
  block
  timestamp
}

type MOONRIVER_Mint {
  id: ID!
  transaction: MOONRIVER_Transaction!
  timestamp: BigInt!
  pair: MOONRIVER_Pair!
  to: MOONRIVER_Bytes!
  liquidity: MOONRIVER_BigDecimal!
  sender: MOONRIVER_Bytes
  amount0: MOONRIVER_BigDecimal
  amount1: MOONRIVER_BigDecimal
  logIndex: BigInt
  amountUSD: MOONRIVER_BigDecimal
  feeTo: MOONRIVER_Bytes
  feeLiquidity: MOONRIVER_BigDecimal
}

input MOONRIVER_Mint_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  to: MOONRIVER_Bytes
  to_not: MOONRIVER_Bytes
  to_in: [MOONRIVER_Bytes!]
  to_not_in: [MOONRIVER_Bytes!]
  to_contains: MOONRIVER_Bytes
  to_not_contains: MOONRIVER_Bytes
  liquidity: MOONRIVER_BigDecimal
  liquidity_not: MOONRIVER_BigDecimal
  liquidity_gt: MOONRIVER_BigDecimal
  liquidity_lt: MOONRIVER_BigDecimal
  liquidity_gte: MOONRIVER_BigDecimal
  liquidity_lte: MOONRIVER_BigDecimal
  liquidity_in: [MOONRIVER_BigDecimal!]
  liquidity_not_in: [MOONRIVER_BigDecimal!]
  sender: MOONRIVER_Bytes
  sender_not: MOONRIVER_Bytes
  sender_in: [MOONRIVER_Bytes!]
  sender_not_in: [MOONRIVER_Bytes!]
  sender_contains: MOONRIVER_Bytes
  sender_not_contains: MOONRIVER_Bytes
  amount0: MOONRIVER_BigDecimal
  amount0_not: MOONRIVER_BigDecimal
  amount0_gt: MOONRIVER_BigDecimal
  amount0_lt: MOONRIVER_BigDecimal
  amount0_gte: MOONRIVER_BigDecimal
  amount0_lte: MOONRIVER_BigDecimal
  amount0_in: [MOONRIVER_BigDecimal!]
  amount0_not_in: [MOONRIVER_BigDecimal!]
  amount1: MOONRIVER_BigDecimal
  amount1_not: MOONRIVER_BigDecimal
  amount1_gt: MOONRIVER_BigDecimal
  amount1_lt: MOONRIVER_BigDecimal
  amount1_gte: MOONRIVER_BigDecimal
  amount1_lte: MOONRIVER_BigDecimal
  amount1_in: [MOONRIVER_BigDecimal!]
  amount1_not_in: [MOONRIVER_BigDecimal!]
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: MOONRIVER_BigDecimal
  amountUSD_not: MOONRIVER_BigDecimal
  amountUSD_gt: MOONRIVER_BigDecimal
  amountUSD_lt: MOONRIVER_BigDecimal
  amountUSD_gte: MOONRIVER_BigDecimal
  amountUSD_lte: MOONRIVER_BigDecimal
  amountUSD_in: [MOONRIVER_BigDecimal!]
  amountUSD_not_in: [MOONRIVER_BigDecimal!]
  feeTo: MOONRIVER_Bytes
  feeTo_not: MOONRIVER_Bytes
  feeTo_in: [MOONRIVER_Bytes!]
  feeTo_not_in: [MOONRIVER_Bytes!]
  feeTo_contains: MOONRIVER_Bytes
  feeTo_not_contains: MOONRIVER_Bytes
  feeLiquidity: MOONRIVER_BigDecimal
  feeLiquidity_not: MOONRIVER_BigDecimal
  feeLiquidity_gt: MOONRIVER_BigDecimal
  feeLiquidity_lt: MOONRIVER_BigDecimal
  feeLiquidity_gte: MOONRIVER_BigDecimal
  feeLiquidity_lte: MOONRIVER_BigDecimal
  feeLiquidity_in: [MOONRIVER_BigDecimal!]
  feeLiquidity_not_in: [MOONRIVER_BigDecimal!]
}

enum MOONRIVER_Mint_orderBy {
  id
  transaction
  timestamp
  pair
  to
  liquidity
  sender
  amount0
  amount1
  logIndex
  amountUSD
  feeTo
  feeLiquidity
}

"""Defines the order direction, either ascending or descending"""
enum MOONRIVER_OrderDirection {
  asc
  desc
}

type MOONRIVER_Pair {
  id: ID!
  factory: MOONRIVER_Factory!
  name: String!
  token0: MOONRIVER_Token!
  token1: MOONRIVER_Token!
  reserve0: MOONRIVER_BigDecimal!
  reserve1: MOONRIVER_BigDecimal!
  totalSupply: MOONRIVER_BigDecimal!
  reserveETH: MOONRIVER_BigDecimal!
  reserveUSD: MOONRIVER_BigDecimal!
  trackedReserveETH: MOONRIVER_BigDecimal!
  token0Price: MOONRIVER_BigDecimal!
  token1Price: MOONRIVER_BigDecimal!
  volumeToken0: MOONRIVER_BigDecimal!
  volumeToken1: MOONRIVER_BigDecimal!
  volumeUSD: MOONRIVER_BigDecimal!
  untrackedVolumeUSD: MOONRIVER_BigDecimal!
  txCount: BigInt!
  liquidityProviderCount: BigInt!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_LiquidityPosition_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_LiquidityPosition_filter): [MOONRIVER_LiquidityPosition!]!
  liquidityPositionSnapshots(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_LiquidityPositionSnapshot_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_LiquidityPositionSnapshot_filter): [MOONRIVER_LiquidityPositionSnapshot!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_PairDayData_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_PairDayData_filter): [MOONRIVER_PairDayData!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_PairHourData_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_PairHourData_filter): [MOONRIVER_PairHourData!]!
  mints(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Mint_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Mint_filter): [MOONRIVER_Mint!]!
  burns(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Burn_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Burn_filter): [MOONRIVER_Burn!]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Swap_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Swap_filter): [MOONRIVER_Swap!]!
  timestamp: BigInt!
  block: BigInt!
}

type MOONRIVER_PairDayData {
  id: ID!
  date: Int!
  pair: MOONRIVER_Pair!
  token0: MOONRIVER_Token!
  token1: MOONRIVER_Token!
  reserve0: MOONRIVER_BigDecimal!
  reserve1: MOONRIVER_BigDecimal!
  totalSupply: MOONRIVER_BigDecimal!
  reserveUSD: MOONRIVER_BigDecimal!
  volumeToken0: MOONRIVER_BigDecimal!
  volumeToken1: MOONRIVER_BigDecimal!
  volumeUSD: MOONRIVER_BigDecimal!
  txCount: BigInt!
}

input MOONRIVER_PairDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: MOONRIVER_BigDecimal
  reserve0_not: MOONRIVER_BigDecimal
  reserve0_gt: MOONRIVER_BigDecimal
  reserve0_lt: MOONRIVER_BigDecimal
  reserve0_gte: MOONRIVER_BigDecimal
  reserve0_lte: MOONRIVER_BigDecimal
  reserve0_in: [MOONRIVER_BigDecimal!]
  reserve0_not_in: [MOONRIVER_BigDecimal!]
  reserve1: MOONRIVER_BigDecimal
  reserve1_not: MOONRIVER_BigDecimal
  reserve1_gt: MOONRIVER_BigDecimal
  reserve1_lt: MOONRIVER_BigDecimal
  reserve1_gte: MOONRIVER_BigDecimal
  reserve1_lte: MOONRIVER_BigDecimal
  reserve1_in: [MOONRIVER_BigDecimal!]
  reserve1_not_in: [MOONRIVER_BigDecimal!]
  totalSupply: MOONRIVER_BigDecimal
  totalSupply_not: MOONRIVER_BigDecimal
  totalSupply_gt: MOONRIVER_BigDecimal
  totalSupply_lt: MOONRIVER_BigDecimal
  totalSupply_gte: MOONRIVER_BigDecimal
  totalSupply_lte: MOONRIVER_BigDecimal
  totalSupply_in: [MOONRIVER_BigDecimal!]
  totalSupply_not_in: [MOONRIVER_BigDecimal!]
  reserveUSD: MOONRIVER_BigDecimal
  reserveUSD_not: MOONRIVER_BigDecimal
  reserveUSD_gt: MOONRIVER_BigDecimal
  reserveUSD_lt: MOONRIVER_BigDecimal
  reserveUSD_gte: MOONRIVER_BigDecimal
  reserveUSD_lte: MOONRIVER_BigDecimal
  reserveUSD_in: [MOONRIVER_BigDecimal!]
  reserveUSD_not_in: [MOONRIVER_BigDecimal!]
  volumeToken0: MOONRIVER_BigDecimal
  volumeToken0_not: MOONRIVER_BigDecimal
  volumeToken0_gt: MOONRIVER_BigDecimal
  volumeToken0_lt: MOONRIVER_BigDecimal
  volumeToken0_gte: MOONRIVER_BigDecimal
  volumeToken0_lte: MOONRIVER_BigDecimal
  volumeToken0_in: [MOONRIVER_BigDecimal!]
  volumeToken0_not_in: [MOONRIVER_BigDecimal!]
  volumeToken1: MOONRIVER_BigDecimal
  volumeToken1_not: MOONRIVER_BigDecimal
  volumeToken1_gt: MOONRIVER_BigDecimal
  volumeToken1_lt: MOONRIVER_BigDecimal
  volumeToken1_gte: MOONRIVER_BigDecimal
  volumeToken1_lte: MOONRIVER_BigDecimal
  volumeToken1_in: [MOONRIVER_BigDecimal!]
  volumeToken1_not_in: [MOONRIVER_BigDecimal!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
}

enum MOONRIVER_PairDayData_orderBy {
  id
  date
  pair
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

type MOONRIVER_PairHourData {
  id: ID!
  date: Int!
  pair: MOONRIVER_Pair!
  reserve0: MOONRIVER_BigDecimal!
  reserve1: MOONRIVER_BigDecimal!
  reserveUSD: MOONRIVER_BigDecimal!
  volumeToken0: MOONRIVER_BigDecimal!
  volumeToken1: MOONRIVER_BigDecimal!
  volumeUSD: MOONRIVER_BigDecimal!
  txCount: BigInt!
}

input MOONRIVER_PairHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  reserve0: MOONRIVER_BigDecimal
  reserve0_not: MOONRIVER_BigDecimal
  reserve0_gt: MOONRIVER_BigDecimal
  reserve0_lt: MOONRIVER_BigDecimal
  reserve0_gte: MOONRIVER_BigDecimal
  reserve0_lte: MOONRIVER_BigDecimal
  reserve0_in: [MOONRIVER_BigDecimal!]
  reserve0_not_in: [MOONRIVER_BigDecimal!]
  reserve1: MOONRIVER_BigDecimal
  reserve1_not: MOONRIVER_BigDecimal
  reserve1_gt: MOONRIVER_BigDecimal
  reserve1_lt: MOONRIVER_BigDecimal
  reserve1_gte: MOONRIVER_BigDecimal
  reserve1_lte: MOONRIVER_BigDecimal
  reserve1_in: [MOONRIVER_BigDecimal!]
  reserve1_not_in: [MOONRIVER_BigDecimal!]
  reserveUSD: MOONRIVER_BigDecimal
  reserveUSD_not: MOONRIVER_BigDecimal
  reserveUSD_gt: MOONRIVER_BigDecimal
  reserveUSD_lt: MOONRIVER_BigDecimal
  reserveUSD_gte: MOONRIVER_BigDecimal
  reserveUSD_lte: MOONRIVER_BigDecimal
  reserveUSD_in: [MOONRIVER_BigDecimal!]
  reserveUSD_not_in: [MOONRIVER_BigDecimal!]
  volumeToken0: MOONRIVER_BigDecimal
  volumeToken0_not: MOONRIVER_BigDecimal
  volumeToken0_gt: MOONRIVER_BigDecimal
  volumeToken0_lt: MOONRIVER_BigDecimal
  volumeToken0_gte: MOONRIVER_BigDecimal
  volumeToken0_lte: MOONRIVER_BigDecimal
  volumeToken0_in: [MOONRIVER_BigDecimal!]
  volumeToken0_not_in: [MOONRIVER_BigDecimal!]
  volumeToken1: MOONRIVER_BigDecimal
  volumeToken1_not: MOONRIVER_BigDecimal
  volumeToken1_gt: MOONRIVER_BigDecimal
  volumeToken1_lt: MOONRIVER_BigDecimal
  volumeToken1_gte: MOONRIVER_BigDecimal
  volumeToken1_lte: MOONRIVER_BigDecimal
  volumeToken1_in: [MOONRIVER_BigDecimal!]
  volumeToken1_not_in: [MOONRIVER_BigDecimal!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
}

enum MOONRIVER_PairHourData_orderBy {
  id
  date
  pair
  reserve0
  reserve1
  reserveUSD
  volumeToken0
  volumeToken1
  volumeUSD
  txCount
}

input MOONRIVER_Pair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  token0: String
  token0_not: String
  token0_gt: String
  token0_lt: String
  token0_gte: String
  token0_lte: String
  token0_in: [String!]
  token0_not_in: [String!]
  token0_contains: String
  token0_contains_nocase: String
  token0_not_contains: String
  token0_not_contains_nocase: String
  token0_starts_with: String
  token0_starts_with_nocase: String
  token0_not_starts_with: String
  token0_not_starts_with_nocase: String
  token0_ends_with: String
  token0_ends_with_nocase: String
  token0_not_ends_with: String
  token0_not_ends_with_nocase: String
  token1: String
  token1_not: String
  token1_gt: String
  token1_lt: String
  token1_gte: String
  token1_lte: String
  token1_in: [String!]
  token1_not_in: [String!]
  token1_contains: String
  token1_contains_nocase: String
  token1_not_contains: String
  token1_not_contains_nocase: String
  token1_starts_with: String
  token1_starts_with_nocase: String
  token1_not_starts_with: String
  token1_not_starts_with_nocase: String
  token1_ends_with: String
  token1_ends_with_nocase: String
  token1_not_ends_with: String
  token1_not_ends_with_nocase: String
  reserve0: MOONRIVER_BigDecimal
  reserve0_not: MOONRIVER_BigDecimal
  reserve0_gt: MOONRIVER_BigDecimal
  reserve0_lt: MOONRIVER_BigDecimal
  reserve0_gte: MOONRIVER_BigDecimal
  reserve0_lte: MOONRIVER_BigDecimal
  reserve0_in: [MOONRIVER_BigDecimal!]
  reserve0_not_in: [MOONRIVER_BigDecimal!]
  reserve1: MOONRIVER_BigDecimal
  reserve1_not: MOONRIVER_BigDecimal
  reserve1_gt: MOONRIVER_BigDecimal
  reserve1_lt: MOONRIVER_BigDecimal
  reserve1_gte: MOONRIVER_BigDecimal
  reserve1_lte: MOONRIVER_BigDecimal
  reserve1_in: [MOONRIVER_BigDecimal!]
  reserve1_not_in: [MOONRIVER_BigDecimal!]
  totalSupply: MOONRIVER_BigDecimal
  totalSupply_not: MOONRIVER_BigDecimal
  totalSupply_gt: MOONRIVER_BigDecimal
  totalSupply_lt: MOONRIVER_BigDecimal
  totalSupply_gte: MOONRIVER_BigDecimal
  totalSupply_lte: MOONRIVER_BigDecimal
  totalSupply_in: [MOONRIVER_BigDecimal!]
  totalSupply_not_in: [MOONRIVER_BigDecimal!]
  reserveETH: MOONRIVER_BigDecimal
  reserveETH_not: MOONRIVER_BigDecimal
  reserveETH_gt: MOONRIVER_BigDecimal
  reserveETH_lt: MOONRIVER_BigDecimal
  reserveETH_gte: MOONRIVER_BigDecimal
  reserveETH_lte: MOONRIVER_BigDecimal
  reserveETH_in: [MOONRIVER_BigDecimal!]
  reserveETH_not_in: [MOONRIVER_BigDecimal!]
  reserveUSD: MOONRIVER_BigDecimal
  reserveUSD_not: MOONRIVER_BigDecimal
  reserveUSD_gt: MOONRIVER_BigDecimal
  reserveUSD_lt: MOONRIVER_BigDecimal
  reserveUSD_gte: MOONRIVER_BigDecimal
  reserveUSD_lte: MOONRIVER_BigDecimal
  reserveUSD_in: [MOONRIVER_BigDecimal!]
  reserveUSD_not_in: [MOONRIVER_BigDecimal!]
  trackedReserveETH: MOONRIVER_BigDecimal
  trackedReserveETH_not: MOONRIVER_BigDecimal
  trackedReserveETH_gt: MOONRIVER_BigDecimal
  trackedReserveETH_lt: MOONRIVER_BigDecimal
  trackedReserveETH_gte: MOONRIVER_BigDecimal
  trackedReserveETH_lte: MOONRIVER_BigDecimal
  trackedReserveETH_in: [MOONRIVER_BigDecimal!]
  trackedReserveETH_not_in: [MOONRIVER_BigDecimal!]
  token0Price: MOONRIVER_BigDecimal
  token0Price_not: MOONRIVER_BigDecimal
  token0Price_gt: MOONRIVER_BigDecimal
  token0Price_lt: MOONRIVER_BigDecimal
  token0Price_gte: MOONRIVER_BigDecimal
  token0Price_lte: MOONRIVER_BigDecimal
  token0Price_in: [MOONRIVER_BigDecimal!]
  token0Price_not_in: [MOONRIVER_BigDecimal!]
  token1Price: MOONRIVER_BigDecimal
  token1Price_not: MOONRIVER_BigDecimal
  token1Price_gt: MOONRIVER_BigDecimal
  token1Price_lt: MOONRIVER_BigDecimal
  token1Price_gte: MOONRIVER_BigDecimal
  token1Price_lte: MOONRIVER_BigDecimal
  token1Price_in: [MOONRIVER_BigDecimal!]
  token1Price_not_in: [MOONRIVER_BigDecimal!]
  volumeToken0: MOONRIVER_BigDecimal
  volumeToken0_not: MOONRIVER_BigDecimal
  volumeToken0_gt: MOONRIVER_BigDecimal
  volumeToken0_lt: MOONRIVER_BigDecimal
  volumeToken0_gte: MOONRIVER_BigDecimal
  volumeToken0_lte: MOONRIVER_BigDecimal
  volumeToken0_in: [MOONRIVER_BigDecimal!]
  volumeToken0_not_in: [MOONRIVER_BigDecimal!]
  volumeToken1: MOONRIVER_BigDecimal
  volumeToken1_not: MOONRIVER_BigDecimal
  volumeToken1_gt: MOONRIVER_BigDecimal
  volumeToken1_lt: MOONRIVER_BigDecimal
  volumeToken1_gte: MOONRIVER_BigDecimal
  volumeToken1_lte: MOONRIVER_BigDecimal
  volumeToken1_in: [MOONRIVER_BigDecimal!]
  volumeToken1_not_in: [MOONRIVER_BigDecimal!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  untrackedVolumeUSD: MOONRIVER_BigDecimal
  untrackedVolumeUSD_not: MOONRIVER_BigDecimal
  untrackedVolumeUSD_gt: MOONRIVER_BigDecimal
  untrackedVolumeUSD_lt: MOONRIVER_BigDecimal
  untrackedVolumeUSD_gte: MOONRIVER_BigDecimal
  untrackedVolumeUSD_lte: MOONRIVER_BigDecimal
  untrackedVolumeUSD_in: [MOONRIVER_BigDecimal!]
  untrackedVolumeUSD_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidityProviderCount: BigInt
  liquidityProviderCount_not: BigInt
  liquidityProviderCount_gt: BigInt
  liquidityProviderCount_lt: BigInt
  liquidityProviderCount_gte: BigInt
  liquidityProviderCount_lte: BigInt
  liquidityProviderCount_in: [BigInt!]
  liquidityProviderCount_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
}

enum MOONRIVER_Pair_orderBy {
  id
  factory
  name
  token0
  token1
  reserve0
  reserve1
  totalSupply
  reserveETH
  reserveUSD
  trackedReserveETH
  token0Price
  token1Price
  volumeToken0
  volumeToken1
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidityProviderCount
  liquidityPositions
  liquidityPositionSnapshots
  dayData
  hourData
  mints
  burns
  swaps
  timestamp
  block
}

type Query {
  MOONRIVER_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_User
  MOONRIVER_users(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_User_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_User!]!
  MOONRIVER_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Bundle
  MOONRIVER_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Bundle_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Bundle!]!
  MOONRIVER_factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Factory @merge(keyField: "id", keyArg: "id")
  MOONRIVER_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Factory_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Factory!]!
  MOONRIVER_hourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_HourData
  MOONRIVER_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_HourData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_HourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_HourData!]!
  MOONRIVER_dayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_DayData
  MOONRIVER_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_DayData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_DayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_DayData!]!
  MOONRIVER_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Token
  MOONRIVER_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Token_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Token!]!
  MOONRIVER_tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_TokenHourData
  MOONRIVER_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_TokenHourData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_TokenHourData!]!
  MOONRIVER_tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_TokenDayData
  MOONRIVER_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_TokenDayData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_TokenDayData!]!
  MOONRIVER_pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Pair
  MOONRIVER_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Pair_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Pair!]!
  MOONRIVER_pairHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_PairHourData
  MOONRIVER_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_PairHourData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_PairHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_PairHourData!]!
  MOONRIVER_pairDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_PairDayData
  MOONRIVER_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_PairDayData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_PairDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_PairDayData!]!
  MOONRIVER_liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_LiquidityPosition
  MOONRIVER_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_LiquidityPosition_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_LiquidityPosition!]!
  MOONRIVER_liquidityPositionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_LiquidityPositionSnapshot
  MOONRIVER_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_LiquidityPositionSnapshot_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_LiquidityPositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_LiquidityPositionSnapshot!]!
  MOONRIVER_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Transaction
  MOONRIVER_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Transaction_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Transaction!]!
  MOONRIVER_mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Mint
  MOONRIVER_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Mint_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Mint!]!
  MOONRIVER_burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Burn
  MOONRIVER_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Burn_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Burn!]!
  MOONRIVER_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Swap
  MOONRIVER_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Swap_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Swap!]!
  """Access to subgraph metadata"""
  MOONRIVER__meta(block: MOONRIVER_Block_height): MOONRIVER__Meta_
}

type Subscription {
  MOONRIVER_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_User
  MOONRIVER_users(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_User_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_User!]!
  MOONRIVER_bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Bundle
  MOONRIVER_bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Bundle_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Bundle!]!
  MOONRIVER_factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Factory
  MOONRIVER_factories(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Factory_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Factory!]!
  MOONRIVER_hourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_HourData
  MOONRIVER_hourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_HourData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_HourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_HourData!]!
  MOONRIVER_dayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_DayData
  MOONRIVER_dayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_DayData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_DayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_DayData!]!
  MOONRIVER_token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Token
  MOONRIVER_tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Token_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Token!]!
  MOONRIVER_tokenHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_TokenHourData
  MOONRIVER_tokenHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_TokenHourData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_TokenHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_TokenHourData!]!
  MOONRIVER_tokenDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_TokenDayData
  MOONRIVER_tokenDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_TokenDayData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_TokenDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_TokenDayData!]!
  MOONRIVER_pair(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Pair
  MOONRIVER_pairs(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Pair_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Pair_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Pair!]!
  MOONRIVER_pairHourData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_PairHourData
  MOONRIVER_pairHourDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_PairHourData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_PairHourData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_PairHourData!]!
  MOONRIVER_pairDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_PairDayData
  MOONRIVER_pairDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_PairDayData_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_PairDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_PairDayData!]!
  MOONRIVER_liquidityPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_LiquidityPosition
  MOONRIVER_liquidityPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_LiquidityPosition_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_LiquidityPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_LiquidityPosition!]!
  MOONRIVER_liquidityPositionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_LiquidityPositionSnapshot
  MOONRIVER_liquidityPositionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_LiquidityPositionSnapshot_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_LiquidityPositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_LiquidityPositionSnapshot!]!
  MOONRIVER_transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Transaction
  MOONRIVER_transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Transaction_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Transaction!]!
  MOONRIVER_mint(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Mint
  MOONRIVER_mints(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Mint_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Mint_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Mint!]!
  MOONRIVER_burn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Burn
  MOONRIVER_burns(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Burn_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Burn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Burn!]!
  MOONRIVER_swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MOONRIVER_Swap
  MOONRIVER_swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: MOONRIVER_Swap_orderBy
    orderDirection: MOONRIVER_OrderDirection
    where: MOONRIVER_Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: MOONRIVER_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MOONRIVER_Swap!]!
  """Access to subgraph metadata"""
  MOONRIVER__meta(block: MOONRIVER_Block_height): MOONRIVER__Meta_
}

type MOONRIVER_Swap {
  id: ID!
  transaction: MOONRIVER_Transaction!
  timestamp: BigInt!
  pair: MOONRIVER_Pair!
  sender: MOONRIVER_Bytes!
  amount0In: MOONRIVER_BigDecimal!
  amount1In: MOONRIVER_BigDecimal!
  amount0Out: MOONRIVER_BigDecimal!
  amount1Out: MOONRIVER_BigDecimal!
  to: MOONRIVER_Bytes!
  logIndex: BigInt
  amountUSD: MOONRIVER_BigDecimal!
}

input MOONRIVER_Swap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pair: String
  pair_not: String
  pair_gt: String
  pair_lt: String
  pair_gte: String
  pair_lte: String
  pair_in: [String!]
  pair_not_in: [String!]
  pair_contains: String
  pair_contains_nocase: String
  pair_not_contains: String
  pair_not_contains_nocase: String
  pair_starts_with: String
  pair_starts_with_nocase: String
  pair_not_starts_with: String
  pair_not_starts_with_nocase: String
  pair_ends_with: String
  pair_ends_with_nocase: String
  pair_not_ends_with: String
  pair_not_ends_with_nocase: String
  sender: MOONRIVER_Bytes
  sender_not: MOONRIVER_Bytes
  sender_in: [MOONRIVER_Bytes!]
  sender_not_in: [MOONRIVER_Bytes!]
  sender_contains: MOONRIVER_Bytes
  sender_not_contains: MOONRIVER_Bytes
  amount0In: MOONRIVER_BigDecimal
  amount0In_not: MOONRIVER_BigDecimal
  amount0In_gt: MOONRIVER_BigDecimal
  amount0In_lt: MOONRIVER_BigDecimal
  amount0In_gte: MOONRIVER_BigDecimal
  amount0In_lte: MOONRIVER_BigDecimal
  amount0In_in: [MOONRIVER_BigDecimal!]
  amount0In_not_in: [MOONRIVER_BigDecimal!]
  amount1In: MOONRIVER_BigDecimal
  amount1In_not: MOONRIVER_BigDecimal
  amount1In_gt: MOONRIVER_BigDecimal
  amount1In_lt: MOONRIVER_BigDecimal
  amount1In_gte: MOONRIVER_BigDecimal
  amount1In_lte: MOONRIVER_BigDecimal
  amount1In_in: [MOONRIVER_BigDecimal!]
  amount1In_not_in: [MOONRIVER_BigDecimal!]
  amount0Out: MOONRIVER_BigDecimal
  amount0Out_not: MOONRIVER_BigDecimal
  amount0Out_gt: MOONRIVER_BigDecimal
  amount0Out_lt: MOONRIVER_BigDecimal
  amount0Out_gte: MOONRIVER_BigDecimal
  amount0Out_lte: MOONRIVER_BigDecimal
  amount0Out_in: [MOONRIVER_BigDecimal!]
  amount0Out_not_in: [MOONRIVER_BigDecimal!]
  amount1Out: MOONRIVER_BigDecimal
  amount1Out_not: MOONRIVER_BigDecimal
  amount1Out_gt: MOONRIVER_BigDecimal
  amount1Out_lt: MOONRIVER_BigDecimal
  amount1Out_gte: MOONRIVER_BigDecimal
  amount1Out_lte: MOONRIVER_BigDecimal
  amount1Out_in: [MOONRIVER_BigDecimal!]
  amount1Out_not_in: [MOONRIVER_BigDecimal!]
  to: MOONRIVER_Bytes
  to_not: MOONRIVER_Bytes
  to_in: [MOONRIVER_Bytes!]
  to_not_in: [MOONRIVER_Bytes!]
  to_contains: MOONRIVER_Bytes
  to_not_contains: MOONRIVER_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  amountUSD: MOONRIVER_BigDecimal
  amountUSD_not: MOONRIVER_BigDecimal
  amountUSD_gt: MOONRIVER_BigDecimal
  amountUSD_lt: MOONRIVER_BigDecimal
  amountUSD_gte: MOONRIVER_BigDecimal
  amountUSD_lte: MOONRIVER_BigDecimal
  amountUSD_in: [MOONRIVER_BigDecimal!]
  amountUSD_not_in: [MOONRIVER_BigDecimal!]
}

enum MOONRIVER_Swap_orderBy {
  id
  transaction
  timestamp
  pair
  sender
  amount0In
  amount1In
  amount0Out
  amount1Out
  to
  logIndex
  amountUSD
}

type MOONRIVER_Token {
  id: ID!
  factory: MOONRIVER_Factory!
  symbol: String!
  name: String!
  decimals: BigInt!
  totalSupply: BigInt!
  volume: MOONRIVER_BigDecimal!
  volumeUSD: MOONRIVER_BigDecimal!
  untrackedVolumeUSD: MOONRIVER_BigDecimal!
  txCount: BigInt!
  liquidity: MOONRIVER_BigDecimal!
  derivedETH: MOONRIVER_BigDecimal!
  whitelistPairs(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Pair_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Pair_filter): [MOONRIVER_Pair!]!
  hourData(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_TokenHourData_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_TokenHourData_filter): [MOONRIVER_TokenHourData!]!
  dayData(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_TokenDayData_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_TokenDayData_filter): [MOONRIVER_TokenDayData!]!
  basePairs(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Pair_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Pair_filter): [MOONRIVER_Pair!]!
  quotePairs(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Pair_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Pair_filter): [MOONRIVER_Pair!]!
  basePairsDayData(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_PairDayData_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_PairDayData_filter): [MOONRIVER_PairDayData!]!
  quotePairsDayData(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_PairDayData_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_PairDayData_filter): [MOONRIVER_PairDayData!]!
}

type MOONRIVER_TokenDayData {
  id: ID!
  date: Int!
  token: MOONRIVER_Token!
  volume: MOONRIVER_BigDecimal!
  volumeETH: MOONRIVER_BigDecimal!
  volumeUSD: MOONRIVER_BigDecimal!
  txCount: BigInt!
  liquidity: MOONRIVER_BigDecimal!
  liquidityETH: MOONRIVER_BigDecimal!
  liquidityUSD: MOONRIVER_BigDecimal!
  priceUSD: MOONRIVER_BigDecimal!
}

input MOONRIVER_TokenDayData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: MOONRIVER_BigDecimal
  volume_not: MOONRIVER_BigDecimal
  volume_gt: MOONRIVER_BigDecimal
  volume_lt: MOONRIVER_BigDecimal
  volume_gte: MOONRIVER_BigDecimal
  volume_lte: MOONRIVER_BigDecimal
  volume_in: [MOONRIVER_BigDecimal!]
  volume_not_in: [MOONRIVER_BigDecimal!]
  volumeETH: MOONRIVER_BigDecimal
  volumeETH_not: MOONRIVER_BigDecimal
  volumeETH_gt: MOONRIVER_BigDecimal
  volumeETH_lt: MOONRIVER_BigDecimal
  volumeETH_gte: MOONRIVER_BigDecimal
  volumeETH_lte: MOONRIVER_BigDecimal
  volumeETH_in: [MOONRIVER_BigDecimal!]
  volumeETH_not_in: [MOONRIVER_BigDecimal!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: MOONRIVER_BigDecimal
  liquidity_not: MOONRIVER_BigDecimal
  liquidity_gt: MOONRIVER_BigDecimal
  liquidity_lt: MOONRIVER_BigDecimal
  liquidity_gte: MOONRIVER_BigDecimal
  liquidity_lte: MOONRIVER_BigDecimal
  liquidity_in: [MOONRIVER_BigDecimal!]
  liquidity_not_in: [MOONRIVER_BigDecimal!]
  liquidityETH: MOONRIVER_BigDecimal
  liquidityETH_not: MOONRIVER_BigDecimal
  liquidityETH_gt: MOONRIVER_BigDecimal
  liquidityETH_lt: MOONRIVER_BigDecimal
  liquidityETH_gte: MOONRIVER_BigDecimal
  liquidityETH_lte: MOONRIVER_BigDecimal
  liquidityETH_in: [MOONRIVER_BigDecimal!]
  liquidityETH_not_in: [MOONRIVER_BigDecimal!]
  liquidityUSD: MOONRIVER_BigDecimal
  liquidityUSD_not: MOONRIVER_BigDecimal
  liquidityUSD_gt: MOONRIVER_BigDecimal
  liquidityUSD_lt: MOONRIVER_BigDecimal
  liquidityUSD_gte: MOONRIVER_BigDecimal
  liquidityUSD_lte: MOONRIVER_BigDecimal
  liquidityUSD_in: [MOONRIVER_BigDecimal!]
  liquidityUSD_not_in: [MOONRIVER_BigDecimal!]
  priceUSD: MOONRIVER_BigDecimal
  priceUSD_not: MOONRIVER_BigDecimal
  priceUSD_gt: MOONRIVER_BigDecimal
  priceUSD_lt: MOONRIVER_BigDecimal
  priceUSD_gte: MOONRIVER_BigDecimal
  priceUSD_lte: MOONRIVER_BigDecimal
  priceUSD_in: [MOONRIVER_BigDecimal!]
  priceUSD_not_in: [MOONRIVER_BigDecimal!]
}

enum MOONRIVER_TokenDayData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

type MOONRIVER_TokenHourData {
  id: ID!
  date: Int!
  token: MOONRIVER_Token!
  volume: MOONRIVER_BigDecimal!
  volumeETH: MOONRIVER_BigDecimal!
  volumeUSD: MOONRIVER_BigDecimal!
  txCount: BigInt!
  liquidity: MOONRIVER_BigDecimal!
  liquidityETH: MOONRIVER_BigDecimal!
  liquidityUSD: MOONRIVER_BigDecimal!
  priceUSD: MOONRIVER_BigDecimal!
}

input MOONRIVER_TokenHourData_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  volume: MOONRIVER_BigDecimal
  volume_not: MOONRIVER_BigDecimal
  volume_gt: MOONRIVER_BigDecimal
  volume_lt: MOONRIVER_BigDecimal
  volume_gte: MOONRIVER_BigDecimal
  volume_lte: MOONRIVER_BigDecimal
  volume_in: [MOONRIVER_BigDecimal!]
  volume_not_in: [MOONRIVER_BigDecimal!]
  volumeETH: MOONRIVER_BigDecimal
  volumeETH_not: MOONRIVER_BigDecimal
  volumeETH_gt: MOONRIVER_BigDecimal
  volumeETH_lt: MOONRIVER_BigDecimal
  volumeETH_gte: MOONRIVER_BigDecimal
  volumeETH_lte: MOONRIVER_BigDecimal
  volumeETH_in: [MOONRIVER_BigDecimal!]
  volumeETH_not_in: [MOONRIVER_BigDecimal!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: MOONRIVER_BigDecimal
  liquidity_not: MOONRIVER_BigDecimal
  liquidity_gt: MOONRIVER_BigDecimal
  liquidity_lt: MOONRIVER_BigDecimal
  liquidity_gte: MOONRIVER_BigDecimal
  liquidity_lte: MOONRIVER_BigDecimal
  liquidity_in: [MOONRIVER_BigDecimal!]
  liquidity_not_in: [MOONRIVER_BigDecimal!]
  liquidityETH: MOONRIVER_BigDecimal
  liquidityETH_not: MOONRIVER_BigDecimal
  liquidityETH_gt: MOONRIVER_BigDecimal
  liquidityETH_lt: MOONRIVER_BigDecimal
  liquidityETH_gte: MOONRIVER_BigDecimal
  liquidityETH_lte: MOONRIVER_BigDecimal
  liquidityETH_in: [MOONRIVER_BigDecimal!]
  liquidityETH_not_in: [MOONRIVER_BigDecimal!]
  liquidityUSD: MOONRIVER_BigDecimal
  liquidityUSD_not: MOONRIVER_BigDecimal
  liquidityUSD_gt: MOONRIVER_BigDecimal
  liquidityUSD_lt: MOONRIVER_BigDecimal
  liquidityUSD_gte: MOONRIVER_BigDecimal
  liquidityUSD_lte: MOONRIVER_BigDecimal
  liquidityUSD_in: [MOONRIVER_BigDecimal!]
  liquidityUSD_not_in: [MOONRIVER_BigDecimal!]
  priceUSD: MOONRIVER_BigDecimal
  priceUSD_not: MOONRIVER_BigDecimal
  priceUSD_gt: MOONRIVER_BigDecimal
  priceUSD_lt: MOONRIVER_BigDecimal
  priceUSD_gte: MOONRIVER_BigDecimal
  priceUSD_lte: MOONRIVER_BigDecimal
  priceUSD_in: [MOONRIVER_BigDecimal!]
  priceUSD_not_in: [MOONRIVER_BigDecimal!]
}

enum MOONRIVER_TokenHourData_orderBy {
  id
  date
  token
  volume
  volumeETH
  volumeUSD
  txCount
  liquidity
  liquidityETH
  liquidityUSD
  priceUSD
}

input MOONRIVER_Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  volume: MOONRIVER_BigDecimal
  volume_not: MOONRIVER_BigDecimal
  volume_gt: MOONRIVER_BigDecimal
  volume_lt: MOONRIVER_BigDecimal
  volume_gte: MOONRIVER_BigDecimal
  volume_lte: MOONRIVER_BigDecimal
  volume_in: [MOONRIVER_BigDecimal!]
  volume_not_in: [MOONRIVER_BigDecimal!]
  volumeUSD: MOONRIVER_BigDecimal
  volumeUSD_not: MOONRIVER_BigDecimal
  volumeUSD_gt: MOONRIVER_BigDecimal
  volumeUSD_lt: MOONRIVER_BigDecimal
  volumeUSD_gte: MOONRIVER_BigDecimal
  volumeUSD_lte: MOONRIVER_BigDecimal
  volumeUSD_in: [MOONRIVER_BigDecimal!]
  volumeUSD_not_in: [MOONRIVER_BigDecimal!]
  untrackedVolumeUSD: MOONRIVER_BigDecimal
  untrackedVolumeUSD_not: MOONRIVER_BigDecimal
  untrackedVolumeUSD_gt: MOONRIVER_BigDecimal
  untrackedVolumeUSD_lt: MOONRIVER_BigDecimal
  untrackedVolumeUSD_gte: MOONRIVER_BigDecimal
  untrackedVolumeUSD_lte: MOONRIVER_BigDecimal
  untrackedVolumeUSD_in: [MOONRIVER_BigDecimal!]
  untrackedVolumeUSD_not_in: [MOONRIVER_BigDecimal!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  liquidity: MOONRIVER_BigDecimal
  liquidity_not: MOONRIVER_BigDecimal
  liquidity_gt: MOONRIVER_BigDecimal
  liquidity_lt: MOONRIVER_BigDecimal
  liquidity_gte: MOONRIVER_BigDecimal
  liquidity_lte: MOONRIVER_BigDecimal
  liquidity_in: [MOONRIVER_BigDecimal!]
  liquidity_not_in: [MOONRIVER_BigDecimal!]
  derivedETH: MOONRIVER_BigDecimal
  derivedETH_not: MOONRIVER_BigDecimal
  derivedETH_gt: MOONRIVER_BigDecimal
  derivedETH_lt: MOONRIVER_BigDecimal
  derivedETH_gte: MOONRIVER_BigDecimal
  derivedETH_lte: MOONRIVER_BigDecimal
  derivedETH_in: [MOONRIVER_BigDecimal!]
  derivedETH_not_in: [MOONRIVER_BigDecimal!]
  whitelistPairs: [String!]
  whitelistPairs_not: [String!]
  whitelistPairs_contains: [String!]
  whitelistPairs_contains_nocase: [String!]
  whitelistPairs_not_contains: [String!]
  whitelistPairs_not_contains_nocase: [String!]
}

enum MOONRIVER_Token_orderBy {
  id
  factory
  symbol
  name
  decimals
  totalSupply
  volume
  volumeUSD
  untrackedVolumeUSD
  txCount
  liquidity
  derivedETH
  whitelistPairs
  hourData
  dayData
  basePairs
  quotePairs
  basePairsDayData
  quotePairsDayData
}

type MOONRIVER_Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  mints(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Mint_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Mint_filter): [MOONRIVER_Mint]!
  burns(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Burn_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Burn_filter): [MOONRIVER_Burn]!
  swaps(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_Swap_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_Swap_filter): [MOONRIVER_Swap]!
}

input MOONRIVER_Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  mints: [String!]
  mints_not: [String!]
  mints_contains: [String!]
  mints_contains_nocase: [String!]
  mints_not_contains: [String!]
  mints_not_contains_nocase: [String!]
  burns: [String!]
  burns_not: [String!]
  burns_contains: [String!]
  burns_contains_nocase: [String!]
  burns_not_contains: [String!]
  burns_not_contains_nocase: [String!]
  swaps: [String!]
  swaps_not: [String!]
  swaps_contains: [String!]
  swaps_contains_nocase: [String!]
  swaps_not_contains: [String!]
  swaps_not_contains_nocase: [String!]
}

enum MOONRIVER_Transaction_orderBy {
  id
  blockNumber
  timestamp
  mints
  burns
  swaps
}

type MOONRIVER_User {
  id: ID!
  liquidityPositions(skip: Int = 0, first: Int = 100, orderBy: MOONRIVER_LiquidityPosition_orderBy, orderDirection: MOONRIVER_OrderDirection, where: MOONRIVER_LiquidityPosition_filter): [MOONRIVER_LiquidityPosition!]!
}

input MOONRIVER_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
}

enum MOONRIVER_User_orderBy {
  id
  liquidityPositions
}

type MOONRIVER__Block_ {
  """The hash of the block"""
  hash: MOONRIVER_Bytes
  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type MOONRIVER__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: MOONRIVER__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}