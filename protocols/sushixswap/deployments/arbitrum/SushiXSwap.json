{
  "address": "0x7A4af156379f512DE147ed3b96393047226d923F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBentoBoxMinimal",
          "name": "_bentoBox",
          "type": "address"
        },
        {
          "internalType": "contract IStargateRouter",
          "name": "_stargateRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_pairCodeHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "TooLittleReceived",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "approveToStargateRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBoxMinimal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "actions",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        }
      ],
      "name": "cook",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "sgReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateRouter",
      "outputs": [
        {
          "internalType": "contract IStargateRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x58c6594235d3a295c73c924eff91ee39a82a5a568490c587db136f1a2f5a2d07",
  "receipt": {
    "to": null,
    "from": "0xf87BC5535602077d340806D71f805EA9907a843D",
    "contractAddress": "0x7A4af156379f512DE147ed3b96393047226d923F",
    "transactionIndex": 0,
    "gasUsed": "57967078",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000008000000000000000002000000000000000010000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000010000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000",
    "blockHash": "0xd732405f329d9a691bc6c3db20d3e4e83a4881b2da10097f2c44ac168f36f55f",
    "transactionHash": "0x58c6594235d3a295c73c924eff91ee39a82a5a568490c587db136f1a2f5a2d07",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12430159,
        "transactionHash": "0x58c6594235d3a295c73c924eff91ee39a82a5a568490c587db136f1a2f5a2d07",
        "address": "0x74c764D41B77DBbb4fe771daB1939B00b146894A",
        "topics": [
          "0xdfb44ffabf0d3a8f650d3ce43eff98f6d050e7ea1a396d5794f014e7dadabacb",
          "0x0000000000000000000000007a4af156379f512de147ed3b96393047226d923f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd732405f329d9a691bc6c3db20d3e4e83a4881b2da10097f2c44ac168f36f55f"
      }
    ],
    "blockNumber": 12430159,
    "cumulativeGasUsed": "27944718",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x74c764D41B77DBbb4fe771daB1939B00b146894A",
    "0x53Bf833A5d6c4ddA888F69c22C88C9f356a41614",
    "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
    "0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303"
  ],
  "numDeployments": 2,
  "solcInputHash": "ac25f8d333bea94a97556309e3402169",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"_bentoBox\",\"type\":\"address\"},{\"internalType\":\"contract IStargateRouter\",\"name\":\"_stargateRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_pairCodeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TooLittleReceived\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveToStargateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"cook\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouter\",\"outputs\":[{\"internalType\":\"contract IStargateRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SushiXSwap.sol\":\"SushiXSwap\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"contracts/SushiXSwap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./interfaces/ISushiXSwap.sol\\\";\\n\\ncontract SushiXSwap is\\n    ISushiXSwap,\\n    BentoAdapter,\\n    TokenAdapter,\\n    SushiLegacyAdapter,\\n    TridentSwapAdapter,\\n    StargateAdapter\\n{\\n    constructor(\\n        IBentoBoxMinimal _bentoBox,\\n        IStargateRouter _stargateRouter,\\n        address _factory,\\n        bytes32 _pairCodeHash\\n    ) ImmutableState(_bentoBox, _stargateRouter, _factory, _pairCodeHash) {\\n        _bentoBox.registerProtocol();\\n    }\\n\\n    // ACTION_LIST\\n    uint8 constant MASTER_CONTRACT_APPROVAL = 0;\\n    uint8 constant SRC_DEPOSIT_TO_BENTOBOX = 1;\\n    uint8 constant SRC_TRANSFER_FROM_BENTOBOX = 2;\\n    uint8 constant DST_DEPOSIT_TO_BENTOBOX = 3;\\n    uint8 constant DST_WITHDRAW_TOKEN = 4;\\n    uint8 constant DST_WITHDRAW_BENTO = 5;\\n    uint8 constant UNWRAP_AND_TRANSFER = 6;\\n    uint8 constant LEGACY_SWAP = 7;\\n    uint8 constant TRIDENT_SWAP = 8;\\n    uint8 constant TRIDENT_COMPLEX_PATH_SWAP = 9;\\n    uint8 constant STARGATE_TELEPORT = 10;\\n\\n    function cook(\\n        uint8[] memory actions,\\n        uint256[] memory values,\\n        bytes[] memory datas\\n    ) public payable override {\\n        for (uint256 i = 0; i < actions.length; i++) {\\n            uint8 action = actions[i];\\n            // update for total amounts in contract?\\n            if (action == MASTER_CONTRACT_APPROVAL) {\\n                (\\n                    address user,\\n                    bool approved,\\n                    uint8 v,\\n                    bytes32 r,\\n                    bytes32 s\\n                ) = abi.decode(\\n                        datas[i],\\n                        (address, bool, uint8, bytes32, bytes32)\\n                    );\\n\\n                bentoBox.setMasterContractApproval(\\n                    user,\\n                    address(this),\\n                    approved,\\n                    v,\\n                    r,\\n                    s\\n                );\\n            } else if (action == SRC_DEPOSIT_TO_BENTOBOX) {\\n                (address token, address to, uint256 amount, uint256 share) = abi\\n                    .decode(datas[i], (address, address, uint256, uint256));\\n                _depositToBentoBox(\\n                    token,\\n                    msg.sender,\\n                    to,\\n                    amount,\\n                    share,\\n                    values[i]\\n                );\\n            } else if (action == SRC_TRANSFER_FROM_BENTOBOX) {\\n                (\\n                    address token,\\n                    address to,\\n                    uint256 amount,\\n                    uint256 share,\\n                    bool unwrapBento\\n                ) = abi.decode(\\n                        datas[i],\\n                        (address, address, uint256, uint256, bool)\\n                    );\\n                _transferFromBentoBox(\\n                    token,\\n                    msg.sender,\\n                    to,\\n                    amount,\\n                    share,\\n                    unwrapBento\\n                );\\n            } else if (action == DST_DEPOSIT_TO_BENTOBOX) {\\n                (address token, address to, uint256 amount, uint256 share) = abi\\n                    .decode(datas[i], (address, address, uint256, uint256));\\n\\n                if (amount == 0) {\\n                    amount = IERC20(token).balanceOf(address(this));\\n                    // left values not updates intentionally\\n                }\\n\\n                _transferTokens(IERC20(token), address(bentoBox), amount);\\n\\n                _depositToBentoBox(\\n                    token,\\n                    address(bentoBox),\\n                    to,\\n                    amount,\\n                    share,\\n                    values[i]\\n                );\\n            } else if (action == DST_WITHDRAW_TOKEN) {\\n                (address token, address to, uint256 amount) = abi.decode(\\n                    datas[i],\\n                    (address, address, uint256)\\n                );\\n                if (amount == 0) {\\n                    if (token != address(0)) {\\n                        amount = IERC20(token).balanceOf(address(this));\\n                    } else {\\n                        amount = address(this).balance;\\n                    }\\n                }\\n                _transferTokens(IERC20(token), to, amount);\\n            } else if (action == DST_WITHDRAW_BENTO) {\\n                (\\n                    address token,\\n                    address to,\\n                    uint256 amount,\\n                    uint256 share,\\n                    bool unwrapBento\\n                ) = abi.decode(\\n                        datas[i],\\n                        (address, address, uint256, uint256, bool)\\n                    );\\n                if (amount == 0) {\\n                    amount = IERC20(token).balanceOf(address(this));\\n                }\\n                _transferFromBentoBox(\\n                    token,\\n                    address(this),\\n                    to,\\n                    amount,\\n                    share,\\n                    unwrapBento\\n                );\\n            } else if (action == UNWRAP_AND_TRANSFER) {\\n                (address token, address to) = abi.decode(\\n                    datas[i],\\n                    (address, address)\\n                );\\n\\n                _unwrapTransfer(token, to);\\n            } else if (action == LEGACY_SWAP) {\\n                (\\n                    uint256 amountIn,\\n                    uint256 amountOutMin,\\n                    address[] memory path,\\n                    address to\\n                ) = abi.decode(\\n                        datas[i],\\n                        (uint256, uint256, address[], address)\\n                    );\\n                bool sendTokens;\\n                if (amountIn == 0) {\\n                    amountIn = IERC20(path[0]).balanceOf(address(this));\\n                    sendTokens = true;\\n                }\\n                _swapExactTokensForTokens(\\n                    amountIn,\\n                    amountOutMin,\\n                    path,\\n                    to,\\n                    sendTokens\\n                );\\n            } else if (action == TRIDENT_SWAP) {\\n                ExactInputParams memory params = abi.decode(\\n                    datas[i],\\n                    (ExactInputParams)\\n                );\\n\\n                _exactInput(params);\\n            } else if (action == TRIDENT_COMPLEX_PATH_SWAP) {\\n                ComplexPathParams memory params = abi.decode(\\n                    datas[i],\\n                    (ComplexPathParams)\\n                );\\n\\n                _complexPath(params);\\n            } else if (action == STARGATE_TELEPORT) {\\n                (\\n                    TeleportParams memory params,\\n                    uint8[] memory actionsDST,\\n                    uint256[] memory valuesDST,\\n                    bytes[] memory datasDST\\n                ) = abi.decode(\\n                        datas[i],\\n                        (TeleportParams, uint8[], uint256[], bytes[])\\n                    );\\n\\n                _stargateTeleport(params, actionsDST, valuesDST, datasDST);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0e4d423ae59b00bf7d01f7f6b5ba3f84f1d5f7e1b194fcbd5683340ef86712d7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/BentoAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IBentoBoxMinimal.sol\\\";\\nimport \\\"../base/ImmutableState.sol\\\";\\n\\nabstract contract BentoAdapter is ImmutableState {\\n    function _depositToBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        uint256 value\\n    ) internal {\\n        bentoBox.deposit{value: value}(token, from, to, amount, share);\\n    }\\n\\n    function _transferFromBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            bentoBox.withdraw(token, from, to, amount, share);\\n        } else {\\n            bentoBox.transfer(token, from, to, share);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7cb48664db608accbb6fdfc93e04975454b5e76ac70b846b1fe0bf33a2f476f1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/StargateAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/stargate/IStargateAdapter.sol\\\";\\n\\nabstract contract StargateAdapter is ImmutableState, IStargateReceiver {\\n    using SafeERC20 for IERC20;\\n\\n    struct TeleportParams {\\n        uint16 dstChainId;\\n        address token;\\n        uint256 srcPoolId;\\n        uint256 dstPoolId;\\n        uint256 amount;\\n        uint256 amountMin;\\n        uint256 dustAmount;\\n        address receiver;\\n        address to;\\n        uint256 gas;\\n    }\\n\\n    function approveToStargateRouter(IERC20 token) external {\\n        token.safeApprove(address(stargateRouter), type(uint256).max);\\n    }\\n\\n    function _stargateTeleport(\\n        TeleportParams memory params,\\n        uint8[] memory actions,\\n        uint256[] memory values,\\n        bytes[] memory datas\\n    ) internal {\\n        bytes memory payload = abi.encode(params.to, actions, values, datas);\\n\\n        stargateRouter.swap{value: address(this).balance}(\\n            params.dstChainId,\\n            params.srcPoolId,\\n            params.dstPoolId,\\n            payable(msg.sender),\\n            params.amount != 0\\n                ? params.amount\\n                : IERC20(params.token).balanceOf(address(this)),\\n            params.amountMin,\\n            IStargateRouter.lzTxObj(\\n                params.gas,\\n                params.dustAmount,\\n                abi.encodePacked(params.receiver)\\n            ),\\n            abi.encodePacked(params.receiver),\\n            payload\\n        );\\n    }\\n\\n    function sgReceive(\\n        uint16,\\n        bytes memory,\\n        uint256,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external override {\\n        require(\\n            msg.sender == address(stargateRouter),\\n            \\\"Caller not Stargate Router\\\"\\n        );\\n\\n        (\\n            address to,\\n            uint8[] memory actions,\\n            uint256[] memory values,\\n            bytes[] memory datas\\n        ) = abi.decode(payload, (address, uint8[], uint256[], bytes[]));\\n\\n        try\\n            ISushiXSwap(payable(address(this))).cook(actions, values, datas)\\n        {} catch (bytes memory) {\\n            IERC20(_token).transfer(to, amountLD);\\n        }\\n\\n        if (address(this).balance > 0)\\n            payable(to).transfer(address(this).balance);\\n    }\\n}\\n\",\"keccak256\":\"0xe4d82b1a7c4e67557d2b7d3a24658fc2a9a433438e0c62ada09f3c663d38f1c4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/SushiLegacyAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../libraries/UniswapV2Library.sol\\\";\\nimport \\\"../base/ImmutableState.sol\\\";\\n\\nabstract contract SushiLegacyAdapter is ImmutableState {\\n    using SafeERC20 for IERC20;\\n\\n    function _swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        bool sendTokens\\n    ) internal returns (uint256 amountOut) {\\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(\\n            factory,\\n            amountIn,\\n            path,\\n            pairCodeHash\\n        );\\n        amountOut = amounts[amounts.length - 1];\\n\\n        require(amountOut >= amountOutMin, \\\"insufficient-amount-out\\\");\\n\\n        if (sendTokens) {\\n            IERC20(path[0]).safeTransfer(\\n                UniswapV2Library.pairFor(\\n                    factory,\\n                    path[0],\\n                    path[1],\\n                    pairCodeHash\\n                ),\\n                IERC20(path[0]).balanceOf(address(this))\\n            );\\n        }\\n        _swap(amounts, path, to);\\n    }\\n\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < path.length - 2\\n                ? UniswapV2Library.pairFor(\\n                    factory,\\n                    output,\\n                    path[i + 2],\\n                    pairCodeHash\\n                )\\n                : _to;\\n            IUniswapV2Pair(\\n                UniswapV2Library.pairFor(factory, input, output, pairCodeHash)\\n            ).swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbd15d7f531f448fc9b1f2b93fd543a24404ef227661459a07b18deb5021fa6ea\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/TokenAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nabstract contract TokenAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    function _transferTokens(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) != address(0)) {\\n            token.safeTransfer(to, amount);\\n        } else {\\n            payable(to).transfer(amount);\\n        }\\n    }\\n\\n    function _unwrapTransfer(address token, address to) internal {\\n        IWETH(token).withdraw(IERC20(token).balanceOf(address(this)));\\n        _transferTokens(IERC20(address(0)), to, address(this).balance);\\n    }\\n}\\n\",\"keccak256\":\"0x83d1606dc4b9396c17206949f14780e2cef6ca6d207063c5814beb0cb022191d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/TridentSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/trident/ITridentSwapAdapter.sol\\\";\\n\\nabstract contract TridentSwapAdapter is\\n    ITridentRouter,\\n    ImmutableState,\\n    BentoAdapter\\n{\\n    // Custom Error\\n    error TooLittleReceived();\\n\\n    function _exactInput(ExactInputParams memory params)\\n        internal\\n        returns (uint256 amountOut)\\n    {\\n        if (params.amountIn == 0) {\\n            // Pay the first pool directly.\\n            (, params.amountIn) = bentoBox.deposit(\\n                params.tokenIn,\\n                address(this),\\n                params.path[0].pool,\\n                IERC20(params.tokenIn).balanceOf(address(this)),\\n                0\\n            );\\n        }\\n\\n        // Call every pool in the path.\\n        // Pool `N` should transfer its output tokens to pool `N+1` directly.\\n        // The last pool should transfer its output tokens to the user.\\n        // If the user wants to unwrap `wETH`, the final destination should be this contract and\\n        // a batch call should be made to `unwrapWETH`.\\n        uint256 n = params.path.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            amountOut = IPool(params.path[i].pool).swap(params.path[i].data);\\n        }\\n        // Ensure that the slippage wasn't too much. This assumes that the pool is honest.\\n        if (amountOut < params.amountOutMinimum) revert TooLittleReceived();\\n    }\\n\\n    function _complexPath(ComplexPathParams memory params) internal {\\n        // Deposit all initial tokens to respective pools and initiate the swaps.\\n        // Input tokens come from the user - output goes to following pools.\\n        uint256 n = params.initialPath.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            bentoBox.transfer(\\n                params.initialPath[i].tokenIn,\\n                address(this),\\n                params.initialPath[i].pool,\\n                params.initialPath[i].amount\\n            );\\n\\n            IPool(params.initialPath[i].pool).swap(params.initialPath[i].data);\\n        }\\n        // Do all the middle swaps. Input comes from previous pools.\\n        n = params.percentagePath.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            uint256 balanceShares = bentoBox.balanceOf(\\n                params.percentagePath[i].tokenIn,\\n                address(this)\\n            );\\n            uint256 transferShares = (balanceShares *\\n                params.percentagePath[i].balancePercentage) / uint256(10)**8;\\n            bentoBox.transfer(\\n                params.percentagePath[i].tokenIn,\\n                address(this),\\n                params.percentagePath[i].pool,\\n                transferShares\\n            );\\n            IPool(params.percentagePath[i].pool).swap(\\n                params.percentagePath[i].data\\n            );\\n        }\\n        // Ensure enough was received and transfer the ouput to the recipient.\\n        n = params.output.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            uint256 balanceShares = bentoBox.balanceOf(\\n                params.output[i].token,\\n                address(this)\\n            );\\n            if (balanceShares < params.output[i].minAmount)\\n                revert TooLittleReceived();\\n\\n            bentoBox.transfer(\\n                params.output[i].token,\\n                address(this),\\n                params.output[i].to,\\n                balanceShares\\n            );\\n        }\\n    }\\n\\n    function _increment(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return i + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xca01915e903f295d0d2d934bb3dd0705c4912dd0ccfc04b4373c4cebabc839dc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/ImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IImmutableState.sol\\\";\\n\\nabstract contract ImmutableState is IImmutableState {\\n    IBentoBoxMinimal public immutable override bentoBox;\\n    IStargateRouter public immutable override stargateRouter;\\n    address public immutable override factory;\\n    bytes32 public immutable override pairCodeHash;\\n\\n    constructor(\\n        IBentoBoxMinimal _bentoBox,\\n        IStargateRouter _stargateRouter,\\n        address _factory,\\n        bytes32 _pairCodeHash\\n    ) {\\n        bentoBox = _bentoBox;\\n        stargateRouter = _stargateRouter;\\n        factory = _factory;\\n        pairCodeHash = _pairCodeHash;\\n    }\\n}\\n\",\"keccak256\":\"0x0053d0a17c7189e35886b4200538bfdb00d797b52653ee1d7b0455be35cc3374\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10e7cae69fb9f7b679e51b5999e1b8789055f88fed108d59f5343d3558d5f404\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IBentoBoxMinimal.sol\\\";\\nimport \\\"./stargate/IStargateRouter.sol\\\";\\n\\ninterface IImmutableState {\\n    function bentoBox() external view returns (IBentoBoxMinimal);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function factory() external view returns (address);\\n\\n    function pairCodeHash() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x37c0a3266e4bbbceabbde15454f91b1e39da098ae0854b9c9968b77cd0b9057c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ISushiXSwap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../adapters/BentoAdapter.sol\\\";\\nimport \\\"../adapters/TokenAdapter.sol\\\";\\nimport \\\"../adapters/SushiLegacyAdapter.sol\\\";\\nimport \\\"../adapters/TridentSwapAdapter.sol\\\";\\nimport \\\"../adapters/StargateAdapter.sol\\\";\\n\\ninterface ISushiXSwap {\\n    function cook(\\n        uint8[] memory actions,\\n        uint256[] memory values,\\n        bytes[] memory datas\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x031d1ac7c0fb74176c763b351a9a12202943fe3278b433facc4489210bcea917\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x9c6001ce90e61c145c4a27c8a9efb0df9af6a78c1241776def4de24185ee3c18\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/stargate/IStargateAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../base/ImmutableState.sol\\\";\\nimport \\\"../ISushiXSwap.sol\\\";\\nimport \\\"./IStargateReceiver.sol\\\";\\n\\ninterface IStargateAdapter {}\\n\",\"keccak256\":\"0x306c729a82db4dc5aef1e10faa633171661d04e814d6b8ccaa3b30db282cb609\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\",\"keccak256\":\"0x18653b2aaf84bbf532839384ec9a735fc5f32decb1f994c57f9492eddac97e2f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateRouter {\\n\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0x38e259fba8c70dca855c1e7618754d43ccd75b09b73c675830e20d93b58825e3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/trident/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data)\\n        external\\n        returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data)\\n        external\\n        returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\n    function getAmountIn(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountIn);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(\\n        address indexed recipient,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\\n\",\"keccak256\":\"0xaf01c5c8d64c48642680c0db78118cf06a488c160b91da8708da5d67535a63bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IPool.sol\\\";\\nimport \\\"../IBentoBoxMinimal.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/// @notice Trident pool router interface.\\ninterface ITridentRouter {\\n    struct Path {\\n        address pool;\\n        bytes data;\\n    }\\n\\n    struct ExactInputSingleParams {\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        address pool;\\n        address tokenIn;\\n        bytes data;\\n    }\\n\\n    struct ExactInputParams {\\n        address tokenIn;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        Path[] path;\\n    }\\n\\n    struct TokenInput {\\n        address token;\\n        bool native;\\n        uint256 amount;\\n    }\\n\\n    struct InitialPath {\\n        address tokenIn;\\n        address pool;\\n        bool native;\\n        uint256 amount;\\n        bytes data;\\n    }\\n\\n    struct PercentagePath {\\n        address tokenIn;\\n        address pool;\\n        uint64 balancePercentage; // Multiplied by 10^6. 100% = 100_000_000\\n        bytes data;\\n    }\\n\\n    struct Output {\\n        address token;\\n        address to;\\n        bool unwrapBento;\\n        uint256 minAmount;\\n    }\\n\\n    struct ComplexPathParams {\\n        InitialPath[] initialPath;\\n        PercentagePath[] percentagePath;\\n        Output[] output;\\n    }\\n}\\n\",\"keccak256\":\"0x3c3a827a48cdad00a6996d353fef61ec3b8a0b1448c19c9541841fff245cdca3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ITridentRouter.sol\\\";\\nimport \\\"../../adapters/BentoAdapter.sol\\\";\\nimport \\\"../../base/ImmutableState.sol\\\";\\n\\ninterface ITridentSwapAdapter {}\\n\",\"keccak256\":\"0x95065aa47ac47617dad30d86e794b4594d6b41b7aa6b990358d86223024cf115\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathUniswap {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\",\"keccak256\":\"0x8992c26baf30eb4a743dbe6d2a9cb27625fb783347b06283ce9664ffad83c411\",\"license\":\"GPL-3.0\"},\"contracts/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMathUniswap for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            pairCodeHash // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n            pairFor(factory, tokenA, tokenB, pairCodeHash)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1],\\n                pairCodeHash\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i],\\n                pairCodeHash\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\",\"keccak256\":\"0x1c40987526aeba050176dc98589ed9211959422b07f5085af035471d900178b7\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162004690380380620046908339810160408190526200003591620000ca565b6001600160a01b03808516608081905281851660a05290831660c05260e08290526040805163577268d960e11b8152905163aee4d1b29160048082019260009290919082900301818387803b1580156200008e57600080fd5b505af1158015620000a3573d6000803e3d6000fd5b505050505050505062000124565b6001600160a01b0381168114620000c757600080fd5b50565b60008060008060808587031215620000e157600080fd5b8451620000ee81620000b1565b60208601519094506200010181620000b1565b60408601519093506200011481620000b1565b6060959095015193969295505050565b60805160a05160c05160e05161449a620001f66000396000818160fa0152818161108e015281816111ac01526126300152600081816101900152818161106b01528181611155015281816125ca015261260d01526000818161013c015281816109d001528181610c2d0152611dbb015260008181609c015281816102b7015281816104e00152818161050b01528181610cd801528181610db901528181610e88015281816112e3015281816115b8015281816117cf0152818161191301528181611b130152611c61015261449a6000f3fe6080604052600436106100705760003560e01c8063a9e56f3c1161004e578063a9e56f3c1461012a578063ab8236f31461015e578063c45a01551461017e578063d1ac3535146101b257600080fd5b8063656f3d64146100755780636b2ace871461008a5780639aab9248146100e8575b600080fd5b6100886100833660046131f9565b6101d2565b005b34801561009657600080fd5b506100be7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100f457600080fd5b5061011c7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100df565b34801561013657600080fd5b506100be7f000000000000000000000000000000000000000000000000000000000000000081565b34801561016a57600080fd5b50610088610179366004613311565b6109b8565b34801561018a57600080fd5b506100be7f000000000000000000000000000000000000000000000000000000000000000081565b3480156101be57600080fd5b506100886101cd3660046133ae565b610c11565b60005b83518110156109b25760008482815181106101f2576101f26133cb565b60200260200101519050600060ff168160ff16141561031f576000806000806000878781518110610225576102256133cb565b6020026020010151806020019051810190610240919061341a565b6040517fc0a47c9300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152306024830152851515604483015260ff851660648301526084820184905260a48201839052959a50939850919650945092507f00000000000000000000000000000000000000000000000000000000000000009091169063c0a47c939060c401600060405180830381600087803b1580156102fd57600080fd5b505af1158015610311573d6000803e3d6000fd5b50505050505050505061099f565b60ff81166001141561039657600080600080868681518110610343576103436133cb565b602002602001015180602001905181019061035e9190613474565b935093509350935061038d84338585858d8c81518110610380576103806133cb565b6020026020010151610c75565b5050505061099f565b60ff8116600214156103f95760008060008060008787815181106103bc576103bc6133cb565b60200260200101518060200190518101906103d791906134bc565b945094509450945094506103ef853386868686610d50565b505050505061099f565b60ff81166003141561053f5760008060008086868151811061041d5761041d6133cb565b60200260200101518060200190518101906104389190613474565b935093509350935081600014156104da576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa1580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d79190613519565b91505b610505847f000000000000000000000000000000000000000000000000000000000000000084610ee8565b61038d847f00000000000000000000000000000000000000000000000000000000000000008585858d8c81518110610380576103806133cb565b60ff811660041415610653576000806000858581518110610562576105626133cb565b602002602001015180602001905181019061057d9190613532565b92509250925080600014156106405773ffffffffffffffffffffffffffffffffffffffff83161561063d576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106369190613519565b9050610640565b50475b61064b838383610ee8565b50505061099f565b60ff811660051415610746576000806000806000878781518110610679576106796133cb565b602002602001015180602001905181019061069491906134bc565b945094509450945094508260001415610738576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015610711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190613519565b92505b6103ef853086868686610d50565b60ff81166006141561079757600080848481518110610767576107676133cb565b60200260200101518060200190518101906107829190613575565b915091506107908282610f6d565b505061099f565b60ff8116600714156108b5576000806000808686815181106107bb576107bb6133cb565b60200260200101518060200190518101906107d691906135af565b93509350935093506000846000141561089d57826000815181106107fc576107fc6133cb565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610872573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108969190613519565b9450600190505b6108aa8585858585611063565b50505050505061099f565b60ff8116600814156108fb5760008383815181106108d5576108d56133cb565b60200260200101518060200190518101906108f091906136e8565b9050610790816112d2565b60ff81166009141561094757600083838151811061091b5761091b6133cb565b60200260200101518060200190518101906109369190613a15565b9050610941816115a8565b5061099f565b60ff8116600a141561099f5760008060008086868151811061096b5761096b6133cb565b60200260200101518060200190518101906109869190613d12565b935093509350935061099a84848484611d8a565b505050505b50806109aa81613e6a565b9150506101d5565b50505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610a5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616c6c6572206e6f7420537461726761746520526f7574657200000000000060448201526064015b60405180910390fd5b60008060008084806020019051810190610a769190613ea3565b6040517f656f3d6400000000000000000000000000000000000000000000000000000000815293975091955093509150309063656f3d6490610ac090869086908690600401614033565b600060405180830381600087803b158015610ada57600080fd5b505af1925050508015610aeb575060015b610bbb573d808015610b19576040519150601f19603f3d011682016040523d82523d6000602084013e610b1e565b606091505b506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526024820189905289169063a9059cbb906044016020604051808303816000875af1158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb89190614076565b50505b4715610c055760405173ffffffffffffffffffffffffffffffffffffffff8516904780156108fc02916000818181858888f19350505050158015610c03573d6000803e3d6000fd5b505b50505050505050505050565b610c7273ffffffffffffffffffffffffffffffffffffffff82167f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611fb6565b50565b6040517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152858116604483015260648201859052608482018490527f000000000000000000000000000000000000000000000000000000000000000016906302b9446c90839060a401604080518083038185885af1158015610d21573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610d469190614091565b5050505050505050565b8015610e2c576040517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152858116604483015260648201859052608482018490527f000000000000000000000000000000000000000000000000000000000000000016906397da6d309060a40160408051808303816000875af1158015610e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e259190614091565b5050610ee0565b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015286811660248301528581166044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b158015610ecc57600080fd5b505af1158015610c05573d6000803e3d6000fd5b505050505050565b73ffffffffffffffffffffffffffffffffffffffff831615610f2a57610f2573ffffffffffffffffffffffffffffffffffffffff841683836121b6565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f193505050501580156109b2573d6000803e3d6000fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff831690632e1a7d4d9082906370a0823190602401602060405180830381865afa158015610fdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110039190613519565b6040518263ffffffff1660e01b815260040161102191815260200190565b600060405180830381600087803b15801561103b57600080fd5b505af115801561104f573d6000803e3d6000fd5b5050505061105f60008247610ee8565b5050565b6000806110b27f000000000000000000000000000000000000000000000000000000000000000088877f000000000000000000000000000000000000000000000000000000000000000061220c565b905080600182516110c391906140b5565b815181106110d3576110d36133cb565b6020026020010151915085821015611147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f696e73756666696369656e742d616d6f756e742d6f75740000000000000000006044820152606401610a53565b82156112bd576112bd6111d07f000000000000000000000000000000000000000000000000000000000000000087600081518110611187576111876133cb565b6020026020010151886001815181106111a2576111a26133cb565b60200260200101517f00000000000000000000000000000000000000000000000000000000000000006123b3565b866000815181106111e3576111e36133cb565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127d9190613519565b87600081518110611290576112906133cb565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166121b69092919063ffffffff16565b6112c88186866124cd565b5095945050505050565b600081602001516000141561148a577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166302b9446c836000015130856060015160008151811061133a5761133a6133cb565b60209081029190910101515186516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156113b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d79190613519565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff948516600482015292841660248401529216604482015260648101919091526000608482015260a40160408051808303816000875af115801561145f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114839190614091565b6020840152505b60608201515160005b8181101561156357836060015181815181106114b1576114b16133cb565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a856060015183815181106114ee576114ee6133cb565b6020026020010151602001516040518263ffffffff1660e01b815260040161151691906140cc565b6020604051808303816000875af1158015611535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115599190613519565b9250600101611493565b5082604001518210156115a2576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b80515160005b818110156117b8577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc84600001518381518110611608576116086133cb565b602002602001015160000151308660000151858151811061162b5761162b6133cb565b6020026020010151602001518760000151868151811061164d5761164d6133cb565b6020908102919091010151606001516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152921660448201526064810191909152608401600060405180830381600087803b1580156116d957600080fd5b505af11580156116ed573d6000803e3d6000fd5b5050505082600001518181518110611707576117076133cb565b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a84600001518381518110611744576117446133cb565b6020026020010151608001516040518263ffffffff1660e01b815260040161176c91906140cc565b6020604051808303816000875af115801561178b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117af9190613519565b506001016115ae565b505060208101515160005b81811015611afc5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec8560200151848151811061181f5761181f6133cb565b6020908102919091010151516040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa15801561189a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118be9190613519565b905060006118ce6008600a6141ff565b856020015184815181106118e4576118e46133cb565b60200260200101516040015167ffffffffffffffff1683611905919061420e565b61190f919061424b565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc86602001518581518110611963576119636133cb565b6020026020010151600001513088602001518781518110611986576119866133cb565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015291909116604482015260648101849052608401600060405180830381600087803b158015611a1257600080fd5b505af1158015611a26573d6000803e3d6000fd5b5050505084602001518381518110611a4057611a406133cb565b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a86602001518581518110611a7d57611a7d6133cb565b6020026020010151606001516040518263ffffffff1660e01b8152600401611aa591906140cc565b6020604051808303816000875af1158015611ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae89190613519565b505050611af58160010190565b90506117c3565b505060408101515160005b81811015610f255760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec85604001518481518110611b6357611b636133cb565b6020908102919091010151516040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa158015611bde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c029190613519565b905083604001518281518110611c1a57611c1a6133cb565b602002602001015160600151811015611c5f576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc85604001518481518110611cb157611cb16133cb565b6020026020010151600001513087604001518681518110611cd457611cd46133cb565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015291909116604482015260648101849052608401600060405180830381600087803b158015611d6057600080fd5b505af1158015611d74573d6000803e3d6000fd5b5050505050611d838160010190565b9050611b07565b6000846101000151848484604051602001611da89493929190614286565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639fbf10fc47876000015188604001518960600151338b6080015160001415611eac5760208c01516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea79190613519565b611eb2565b8b608001515b8c60a0015160405180606001604052808f610120015181526020018f60c0015181526020018f60e00151604051602001611f17919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040528152508e60e00151604051602001611f69919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040528b6040518b63ffffffff1660e01b8152600401611f9d999897969594939291906142db565b6000604051808303818588803b158015610ecc57600080fd5b80158061205657506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120549190613519565b155b6120e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610a53565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610f259084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261270a565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610f259084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612134565b606060028351101561227a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f5041544800006044820152606401610a53565b825167ffffffffffffffff81111561229457612294612f10565b6040519080825280602002602001820160405280156122bd578160200160208202803683370190505b50905083816000815181106122d4576122d46133cb565b60200260200101818152505060005b600184516122f191906140b5565b8110156123aa5760008061234588878581518110612311576123116133cb565b6020026020010151888660016123279190614387565b81518110612337576123376133cb565b602002602001015188612816565b9150915061236d84848151811061235e5761235e6133cb565b60200260200101518383612917565b84612379856001614387565b81518110612389576123896133cb565b602002602001018181525050505080806123a290613e6a565b9150506122e3565b50949350505050565b60008060006123c28686612a91565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b16603482015291935091508790604801604051602081830303815290604052805190602001208560405160200161248c939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830191909152603582015260550190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120979650505050505050565b60005b600183516124de91906140b5565b8110156109b2576000808483815181106124fa576124fa6133cb565b6020026020010151858460016125109190614387565b81518110612520576125206133cb565b60200260200101519150915060006125388383612a91565b509050600087612549866001614387565b81518110612559576125596133cb565b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146125a1578260006125a5565b6000835b91509150600060028a516125b991906140b5565b88106125c55788612606565b6126067f0000000000000000000000000000000000000000000000000000000000000000878c6125f68c6002614387565b815181106111a2576111a26133cb565b90506126547f000000000000000000000000000000000000000000000000000000000000000088887f00000000000000000000000000000000000000000000000000000000000000006123b3565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84848460006040519080825280601f01601f19166020018201604052801561269e576020820181803683370190505b506040518563ffffffff1660e01b81526004016126be949392919061439f565b600060405180830381600087803b1580156126d857600080fd5b505af11580156126ec573d6000803e3d6000fd5b5050505050505050505050808061270290613e6a565b9150506124d0565b600061276c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612c169092919063ffffffff16565b805190915015610f25578080602001905181019061278a9190614076565b610f25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a53565b60008060006128258686612a91565b509050600080612837898989896123b3565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a591906143f8565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508273ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614612904578082612907565b81815b909a909950975050505050505050565b60008084116129a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152608401610a53565b6000831180156129b85750600082115b612a44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f49515549444954590000000000000000000000000000000000000000000000006064820152608401610a53565b6000612a52856103e5612c2f565b90506000612a608285612c2f565b90506000612a7a83612a74886103e8612c2f565b90612cbf565b9050612a86818361424b565b979650505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612b50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152608401610a53565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610612b8a578284612b8d565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216612c0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606401610a53565b9250929050565b6060612c258484600085612d37565b90505b9392505050565b6000811580612c5357508282612c45818361420e565b9250612c51908361424b565b145b612cb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006044820152606401610a53565b92915050565b600082612ccc8382614387565b9150811015612cb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606401610a53565b606082471015612dc9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a53565b73ffffffffffffffffffffffffffffffffffffffff85163b612e47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a53565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e709190614448565b60006040518083038185875af1925050503d8060008114612ead576040519150601f19603f3d011682016040523d82523d6000602084013e612eb2565b606091505b5091509150612a8682828660608315612ecc575081612c28565b825115612edc5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5391906140cc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715612f6257612f62612f10565b60405290565b6040805190810167ffffffffffffffff81118282101715612f6257612f62612f10565b6040516060810167ffffffffffffffff81118282101715612f6257612f62612f10565b60405160a0810167ffffffffffffffff81118282101715612f6257612f62612f10565b604051610140810167ffffffffffffffff81118282101715612f6257612f62612f10565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561303c5761303c612f10565b604052919050565b600067ffffffffffffffff82111561305e5761305e612f10565b5060051b60200190565b60ff81168114610c7257600080fd5b600082601f83011261308857600080fd5b8135602061309d61309883613044565b612ff5565b82815260059290921b840181019181810190868411156130bc57600080fd5b8286015b848110156130d757803583529183019183016130c0565b509695505050505050565b600067ffffffffffffffff8211156130fc576130fc612f10565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261313957600080fd5b8135613147613098826130e2565b81815284602083860101111561315c57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261318a57600080fd5b8135602061319a61309883613044565b82815260059290921b840181019181810190868411156131b957600080fd5b8286015b848110156130d757803567ffffffffffffffff8111156131dd5760008081fd5b6131eb8986838b0101613128565b8452509183019183016131bd565b60008060006060848603121561320e57600080fd5b833567ffffffffffffffff8082111561322657600080fd5b818601915086601f83011261323a57600080fd5b8135602061324a61309883613044565b82815260059290921b8401810191818101908a84111561326957600080fd5b948201945b8386101561329057853561328181613068565b8252948201949082019061326e565b975050870135925050808211156132a657600080fd5b6132b287838801613077565b935060408601359150808211156132c857600080fd5b506132d586828701613179565b9150509250925092565b61ffff81168114610c7257600080fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610c7257600080fd5b60008060008060008060c0878903121561332a57600080fd5b8635613335816132df565b9550602087013567ffffffffffffffff8082111561335257600080fd5b61335e8a838b01613128565b96506040890135955060608901359150613377826132ef565b9093506080880135925060a0880135908082111561339457600080fd5b506133a189828a01613128565b9150509295509295509295565b6000602082840312156133c057600080fd5b8135612c28816132ef565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8051613405816132ef565b919050565b8051801515811461340557600080fd5b600080600080600060a0868803121561343257600080fd5b855161343d816132ef565b945061344b6020870161340a565b9350604086015161345b81613068565b6060870151608090970151959894975095949392505050565b6000806000806080858703121561348a57600080fd5b8451613495816132ef565b60208601519094506134a6816132ef565b6040860151606090960151949790965092505050565b600080600080600060a086880312156134d457600080fd5b85516134df816132ef565b60208701519095506134f0816132ef565b604087015160608801519195509350915061350d6080870161340a565b90509295509295909350565b60006020828403121561352b57600080fd5b5051919050565b60008060006060848603121561354757600080fd5b8351613552816132ef565b6020850151909350613563816132ef565b80925050604084015190509250925092565b6000806040838503121561358857600080fd5b8251613593816132ef565b60208401519092506135a4816132ef565b809150509250929050565b600080600080608085870312156135c557600080fd5b845193506020808601519350604086015167ffffffffffffffff8111156135eb57600080fd5b8601601f810188136135fc57600080fd5b805161360a61309882613044565b81815260059190911b8201830190838101908a83111561362957600080fd5b928401925b82841015613650578351613641816132ef565b8252928401929084019061362e565b8096505050505050613664606086016133fa565b905092959194509250565b60005b8381101561368a578181015183820152602001613672565b838111156109b25750506000910152565b600082601f8301126136ac57600080fd5b81516136ba613098826130e2565b8181528460208386010111156136cf57600080fd5b6136e082602083016020870161366f565b949350505050565b600060208083850312156136fb57600080fd5b825167ffffffffffffffff8082111561371357600080fd5b908401906080828703121561372757600080fd5b61372f612f3f565b825161373a816132ef565b815282840151848201526040808401518183015260608401518381111561376057600080fd5b80850194505087601f85011261377557600080fd5b835161378361309882613044565b81815260059190911b8501860190868101908a8311156137a257600080fd5b8787015b8381101561383c578051878111156137be5760008081fd5b8801808d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018613156137f25760008081fd5b6137fa612f68565b8a820151613807816132ef565b8152818701518981111561381b5760008081fd5b6138298f8d8386010161369b565b828d0152508452509188019188016137a6565b506060850152509198975050505050505050565b600082601f83011261386157600080fd5b8151602061387161309883613044565b82815260059290921b8401810191818101908684111561389057600080fd5b8286015b848110156130d757805167ffffffffffffffff808211156138b55760008081fd5b81890191506080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d030112156138ee5760008081fd5b6138f6612f3f565b87840151613903816132ef565b8152604084810151613914816132ef565b828a0152606085810151858116811461392d5760008081fd5b8383015292850151928484111561394657600091508182fd5b6139548e8b8689010161369b565b90830152508652505050918301918301613894565b600082601f83011261397a57600080fd5b8151602061398a61309883613044565b82815260079290921b840181019181810190868411156139a957600080fd5b8286015b848110156130d757608081890312156139c65760008081fd5b6139ce612f3f565b81516139d9816132ef565b8152818501516139e8816132ef565b8186015260406139f983820161340a565b90820152606082810151908201528352918301916080016139ad565b60006020808385031215613a2857600080fd5b825167ffffffffffffffff80821115613a4057600080fd5b9084019060608287031215613a5457600080fd5b613a5c612f8b565b825182811115613a6b57600080fd5b8301601f81018813613a7c57600080fd5b8051613a8a61309882613044565b81815260059190911b8201860190868101908a831115613aa957600080fd5b8784015b83811015613b7157805187811115613ac457600080fd5b850160a0818e037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0011215613af857600080fd5b613b00612fae565b8a820151613b0d816132ef565b81526040820151613b1d816132ef565b818c0152613b2d6060830161340a565b60408201526080820151606082015260a082015189811115613b4f5760008081fd5b613b5d8f8d8386010161369b565b608083015250845250918801918801613aad565b5084525050508284015182811115613b8857600080fd5b613b9488828601613850565b85830152506040830151935081841115613bad57600080fd5b613bb987858501613969565b60408201529695505050505050565b8051613405816132df565b600082601f830112613be457600080fd5b81516020613bf461309883613044565b82815260059290921b84018101918181019086841115613c1357600080fd5b8286015b848110156130d7578051613c2a81613068565b8352918301918301613c17565b600082601f830112613c4857600080fd5b81516020613c5861309883613044565b82815260059290921b84018101918181019086841115613c7757600080fd5b8286015b848110156130d75780518352918301918301613c7b565b600082601f830112613ca357600080fd5b81516020613cb361309883613044565b82815260059290921b84018101918181019086841115613cd257600080fd5b8286015b848110156130d757805167ffffffffffffffff811115613cf65760008081fd5b613d048986838b010161369b565b845250918301918301613cd6565b6000806000808486036101a0811215613d2a57600080fd5b61014080821215613d3a57600080fd5b613d42612fd1565b9150613d4d87613bc8565b8252613d5b602088016133fa565b602083015260408701516040830152606087015160608301526080870151608083015260a087015160a083015260c087015160c0830152613d9e60e088016133fa565b60e0830152610100613db18189016133fa565b90830152610120878101519083015286015190945067ffffffffffffffff80821115613ddc57600080fd5b613de888838901613bd3565b9450610160870151915080821115613dff57600080fd5b613e0b88838901613c37565b9350610180870151915080821115613e2257600080fd5b50613e2f87828801613c92565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e9c57613e9c613e3b565b5060010190565b60008060008060808587031215613eb957600080fd5b8451613ec4816132ef565b602086015190945067ffffffffffffffff80821115613ee257600080fd5b613eee88838901613bd3565b94506040870151915080821115613f0457600080fd5b613f1088838901613c37565b93506060870151915080821115613e2257600080fd5b600081518084526020808501945080840160005b83811015613f5957815160ff1687529582019590820190600101613f3a565b509495945050505050565b600081518084526020808501945080840160005b83811015613f5957815187529582019590820190600101613f78565b60008151808452613fac81602086016020860161366f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015614026578284038952614014848351613f94565b98850198935090840190600101613ffc565b5091979650505050505050565b6060815260006140466060830186613f26565b82810360208401526140588186613f64565b9050828103604084015261406c8185613fde565b9695505050505050565b60006020828403121561408857600080fd5b612c288261340a565b600080604083850312156140a457600080fd5b505080516020909101519092909150565b6000828210156140c7576140c7613e3b565b500390565b602081526000612c286020830184613f94565b600181815b8085111561413857817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561411e5761411e613e3b565b8085161561412b57918102915b93841c93908002906140e4565b509250929050565b60008261414f57506001612cb9565b8161415c57506000612cb9565b8160018114614172576002811461417c57614198565b6001915050612cb9565b60ff84111561418d5761418d613e3b565b50506001821b612cb9565b5060208310610133831016604e8410600b84101617156141bb575081810a612cb9565b6141c583836140df565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156141f7576141f7613e3b565b029392505050565b6000612c2860ff841683614140565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561424657614246613e3b565b500290565b600082614281577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b73ffffffffffffffffffffffffffffffffffffffff851681526080602082015260006142b56080830186613f26565b82810360408401526142c78186613f64565b90508281036060840152612a868185613fde565b600061012061ffff8c1683528a602084015289604084015273ffffffffffffffffffffffffffffffffffffffff891660608401528760808401528660a08401528060c08401528551818401525060208501516101408301526040850151606061016084015261434e610180840182613f94565b905082810360e08401526143628186613f94565b90508281036101008401526143778185613f94565b9c9b505050505050505050505050565b6000821982111561439a5761439a613e3b565b500190565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff8316604082015260806060820152600061406c6080830184613f94565b80516dffffffffffffffffffffffffffff8116811461340557600080fd5b60008060006060848603121561440d57600080fd5b614416846143da565b9250614424602085016143da565b9150604084015163ffffffff8116811461443d57600080fd5b809150509250925092565b6000825161445a81846020870161366f565b919091019291505056fea264697066735822122076437f8c0170a088ea621a407c9ddcdacb4ea4435b971c8f5db8bf45ffa4eb8764736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063a9e56f3c1161004e578063a9e56f3c1461012a578063ab8236f31461015e578063c45a01551461017e578063d1ac3535146101b257600080fd5b8063656f3d64146100755780636b2ace871461008a5780639aab9248146100e8575b600080fd5b6100886100833660046131f9565b6101d2565b005b34801561009657600080fd5b506100be7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100f457600080fd5b5061011c7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100df565b34801561013657600080fd5b506100be7f000000000000000000000000000000000000000000000000000000000000000081565b34801561016a57600080fd5b50610088610179366004613311565b6109b8565b34801561018a57600080fd5b506100be7f000000000000000000000000000000000000000000000000000000000000000081565b3480156101be57600080fd5b506100886101cd3660046133ae565b610c11565b60005b83518110156109b25760008482815181106101f2576101f26133cb565b60200260200101519050600060ff168160ff16141561031f576000806000806000878781518110610225576102256133cb565b6020026020010151806020019051810190610240919061341a565b6040517fc0a47c9300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152306024830152851515604483015260ff851660648301526084820184905260a48201839052959a50939850919650945092507f00000000000000000000000000000000000000000000000000000000000000009091169063c0a47c939060c401600060405180830381600087803b1580156102fd57600080fd5b505af1158015610311573d6000803e3d6000fd5b50505050505050505061099f565b60ff81166001141561039657600080600080868681518110610343576103436133cb565b602002602001015180602001905181019061035e9190613474565b935093509350935061038d84338585858d8c81518110610380576103806133cb565b6020026020010151610c75565b5050505061099f565b60ff8116600214156103f95760008060008060008787815181106103bc576103bc6133cb565b60200260200101518060200190518101906103d791906134bc565b945094509450945094506103ef853386868686610d50565b505050505061099f565b60ff81166003141561053f5760008060008086868151811061041d5761041d6133cb565b60200260200101518060200190518101906104389190613474565b935093509350935081600014156104da576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa1580156104b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d79190613519565b91505b610505847f000000000000000000000000000000000000000000000000000000000000000084610ee8565b61038d847f00000000000000000000000000000000000000000000000000000000000000008585858d8c81518110610380576103806133cb565b60ff811660041415610653576000806000858581518110610562576105626133cb565b602002602001015180602001905181019061057d9190613532565b92509250925080600014156106405773ffffffffffffffffffffffffffffffffffffffff83161561063d576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106369190613519565b9050610640565b50475b61064b838383610ee8565b50505061099f565b60ff811660051415610746576000806000806000878781518110610679576106796133cb565b602002602001015180602001905181019061069491906134bc565b945094509450945094508260001415610738576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015610711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190613519565b92505b6103ef853086868686610d50565b60ff81166006141561079757600080848481518110610767576107676133cb565b60200260200101518060200190518101906107829190613575565b915091506107908282610f6d565b505061099f565b60ff8116600714156108b5576000806000808686815181106107bb576107bb6133cb565b60200260200101518060200190518101906107d691906135af565b93509350935093506000846000141561089d57826000815181106107fc576107fc6133cb565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610872573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108969190613519565b9450600190505b6108aa8585858585611063565b50505050505061099f565b60ff8116600814156108fb5760008383815181106108d5576108d56133cb565b60200260200101518060200190518101906108f091906136e8565b9050610790816112d2565b60ff81166009141561094757600083838151811061091b5761091b6133cb565b60200260200101518060200190518101906109369190613a15565b9050610941816115a8565b5061099f565b60ff8116600a141561099f5760008060008086868151811061096b5761096b6133cb565b60200260200101518060200190518101906109869190613d12565b935093509350935061099a84848484611d8a565b505050505b50806109aa81613e6a565b9150506101d5565b50505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610a5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616c6c6572206e6f7420537461726761746520526f7574657200000000000060448201526064015b60405180910390fd5b60008060008084806020019051810190610a769190613ea3565b6040517f656f3d6400000000000000000000000000000000000000000000000000000000815293975091955093509150309063656f3d6490610ac090869086908690600401614033565b600060405180830381600087803b158015610ada57600080fd5b505af1925050508015610aeb575060015b610bbb573d808015610b19576040519150601f19603f3d011682016040523d82523d6000602084013e610b1e565b606091505b506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526024820189905289169063a9059cbb906044016020604051808303816000875af1158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb89190614076565b50505b4715610c055760405173ffffffffffffffffffffffffffffffffffffffff8516904780156108fc02916000818181858888f19350505050158015610c03573d6000803e3d6000fd5b505b50505050505050505050565b610c7273ffffffffffffffffffffffffffffffffffffffff82167f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611fb6565b50565b6040517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152858116604483015260648201859052608482018490527f000000000000000000000000000000000000000000000000000000000000000016906302b9446c90839060a401604080518083038185885af1158015610d21573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610d469190614091565b5050505050505050565b8015610e2c576040517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152858116604483015260648201859052608482018490527f000000000000000000000000000000000000000000000000000000000000000016906397da6d309060a40160408051808303816000875af1158015610e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e259190614091565b5050610ee0565b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015286811660248301528581166044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b158015610ecc57600080fd5b505af1158015610c05573d6000803e3d6000fd5b505050505050565b73ffffffffffffffffffffffffffffffffffffffff831615610f2a57610f2573ffffffffffffffffffffffffffffffffffffffff841683836121b6565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f193505050501580156109b2573d6000803e3d6000fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff831690632e1a7d4d9082906370a0823190602401602060405180830381865afa158015610fdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110039190613519565b6040518263ffffffff1660e01b815260040161102191815260200190565b600060405180830381600087803b15801561103b57600080fd5b505af115801561104f573d6000803e3d6000fd5b5050505061105f60008247610ee8565b5050565b6000806110b27f000000000000000000000000000000000000000000000000000000000000000088877f000000000000000000000000000000000000000000000000000000000000000061220c565b905080600182516110c391906140b5565b815181106110d3576110d36133cb565b6020026020010151915085821015611147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f696e73756666696369656e742d616d6f756e742d6f75740000000000000000006044820152606401610a53565b82156112bd576112bd6111d07f000000000000000000000000000000000000000000000000000000000000000087600081518110611187576111876133cb565b6020026020010151886001815181106111a2576111a26133cb565b60200260200101517f00000000000000000000000000000000000000000000000000000000000000006123b3565b866000815181106111e3576111e36133cb565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127d9190613519565b87600081518110611290576112906133cb565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166121b69092919063ffffffff16565b6112c88186866124cd565b5095945050505050565b600081602001516000141561148a577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166302b9446c836000015130856060015160008151811061133a5761133a6133cb565b60209081029190910101515186516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156113b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d79190613519565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff948516600482015292841660248401529216604482015260648101919091526000608482015260a40160408051808303816000875af115801561145f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114839190614091565b6020840152505b60608201515160005b8181101561156357836060015181815181106114b1576114b16133cb565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a856060015183815181106114ee576114ee6133cb565b6020026020010151602001516040518263ffffffff1660e01b815260040161151691906140cc565b6020604051808303816000875af1158015611535573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115599190613519565b9250600101611493565b5082604001518210156115a2576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b80515160005b818110156117b8577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc84600001518381518110611608576116086133cb565b602002602001015160000151308660000151858151811061162b5761162b6133cb565b6020026020010151602001518760000151868151811061164d5761164d6133cb565b6020908102919091010151606001516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152921660448201526064810191909152608401600060405180830381600087803b1580156116d957600080fd5b505af11580156116ed573d6000803e3d6000fd5b5050505082600001518181518110611707576117076133cb565b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a84600001518381518110611744576117446133cb565b6020026020010151608001516040518263ffffffff1660e01b815260040161176c91906140cc565b6020604051808303816000875af115801561178b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117af9190613519565b506001016115ae565b505060208101515160005b81811015611afc5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec8560200151848151811061181f5761181f6133cb565b6020908102919091010151516040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa15801561189a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118be9190613519565b905060006118ce6008600a6141ff565b856020015184815181106118e4576118e46133cb565b60200260200101516040015167ffffffffffffffff1683611905919061420e565b61190f919061424b565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc86602001518581518110611963576119636133cb565b6020026020010151600001513088602001518781518110611986576119866133cb565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015291909116604482015260648101849052608401600060405180830381600087803b158015611a1257600080fd5b505af1158015611a26573d6000803e3d6000fd5b5050505084602001518381518110611a4057611a406133cb565b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a86602001518581518110611a7d57611a7d6133cb565b6020026020010151606001516040518263ffffffff1660e01b8152600401611aa591906140cc565b6020604051808303816000875af1158015611ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae89190613519565b505050611af58160010190565b90506117c3565b505060408101515160005b81811015610f255760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec85604001518481518110611b6357611b636133cb565b6020908102919091010151516040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa158015611bde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c029190613519565b905083604001518281518110611c1a57611c1a6133cb565b602002602001015160600151811015611c5f576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc85604001518481518110611cb157611cb16133cb565b6020026020010151600001513087604001518681518110611cd457611cd46133cb565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015291909116604482015260648101849052608401600060405180830381600087803b158015611d6057600080fd5b505af1158015611d74573d6000803e3d6000fd5b5050505050611d838160010190565b9050611b07565b6000846101000151848484604051602001611da89493929190614286565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639fbf10fc47876000015188604001518960600151338b6080015160001415611eac5760208c01516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea79190613519565b611eb2565b8b608001515b8c60a0015160405180606001604052808f610120015181526020018f60c0015181526020018f60e00151604051602001611f17919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040528152508e60e00151604051602001611f69919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040528b6040518b63ffffffff1660e01b8152600401611f9d999897969594939291906142db565b6000604051808303818588803b158015610ecc57600080fd5b80158061205657506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120549190613519565b155b6120e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610a53565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610f259084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261270a565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610f259084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612134565b606060028351101561227a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f5041544800006044820152606401610a53565b825167ffffffffffffffff81111561229457612294612f10565b6040519080825280602002602001820160405280156122bd578160200160208202803683370190505b50905083816000815181106122d4576122d46133cb565b60200260200101818152505060005b600184516122f191906140b5565b8110156123aa5760008061234588878581518110612311576123116133cb565b6020026020010151888660016123279190614387565b81518110612337576123376133cb565b602002602001015188612816565b9150915061236d84848151811061235e5761235e6133cb565b60200260200101518383612917565b84612379856001614387565b81518110612389576123896133cb565b602002602001018181525050505080806123a290613e6a565b9150506122e3565b50949350505050565b60008060006123c28686612a91565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b16603482015291935091508790604801604051602081830303815290604052805190602001208560405160200161248c939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830191909152603582015260550190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120979650505050505050565b60005b600183516124de91906140b5565b8110156109b2576000808483815181106124fa576124fa6133cb565b6020026020010151858460016125109190614387565b81518110612520576125206133cb565b60200260200101519150915060006125388383612a91565b509050600087612549866001614387565b81518110612559576125596133cb565b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146125a1578260006125a5565b6000835b91509150600060028a516125b991906140b5565b88106125c55788612606565b6126067f0000000000000000000000000000000000000000000000000000000000000000878c6125f68c6002614387565b815181106111a2576111a26133cb565b90506126547f000000000000000000000000000000000000000000000000000000000000000088887f00000000000000000000000000000000000000000000000000000000000000006123b3565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84848460006040519080825280601f01601f19166020018201604052801561269e576020820181803683370190505b506040518563ffffffff1660e01b81526004016126be949392919061439f565b600060405180830381600087803b1580156126d857600080fd5b505af11580156126ec573d6000803e3d6000fd5b5050505050505050505050808061270290613e6a565b9150506124d0565b600061276c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612c169092919063ffffffff16565b805190915015610f25578080602001905181019061278a9190614076565b610f25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a53565b60008060006128258686612a91565b509050600080612837898989896123b3565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a591906143f8565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508273ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614612904578082612907565b81815b909a909950975050505050505050565b60008084116129a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152608401610a53565b6000831180156129b85750600082115b612a44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f49515549444954590000000000000000000000000000000000000000000000006064820152608401610a53565b6000612a52856103e5612c2f565b90506000612a608285612c2f565b90506000612a7a83612a74886103e8612c2f565b90612cbf565b9050612a86818361424b565b979650505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612b50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152608401610a53565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610612b8a578284612b8d565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216612c0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606401610a53565b9250929050565b6060612c258484600085612d37565b90505b9392505050565b6000811580612c5357508282612c45818361420e565b9250612c51908361424b565b145b612cb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006044820152606401610a53565b92915050565b600082612ccc8382614387565b9150811015612cb9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606401610a53565b606082471015612dc9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a53565b73ffffffffffffffffffffffffffffffffffffffff85163b612e47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a53565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e709190614448565b60006040518083038185875af1925050503d8060008114612ead576040519150601f19603f3d011682016040523d82523d6000602084013e612eb2565b606091505b5091509150612a8682828660608315612ecc575081612c28565b825115612edc5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5391906140cc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715612f6257612f62612f10565b60405290565b6040805190810167ffffffffffffffff81118282101715612f6257612f62612f10565b6040516060810167ffffffffffffffff81118282101715612f6257612f62612f10565b60405160a0810167ffffffffffffffff81118282101715612f6257612f62612f10565b604051610140810167ffffffffffffffff81118282101715612f6257612f62612f10565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561303c5761303c612f10565b604052919050565b600067ffffffffffffffff82111561305e5761305e612f10565b5060051b60200190565b60ff81168114610c7257600080fd5b600082601f83011261308857600080fd5b8135602061309d61309883613044565b612ff5565b82815260059290921b840181019181810190868411156130bc57600080fd5b8286015b848110156130d757803583529183019183016130c0565b509695505050505050565b600067ffffffffffffffff8211156130fc576130fc612f10565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261313957600080fd5b8135613147613098826130e2565b81815284602083860101111561315c57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261318a57600080fd5b8135602061319a61309883613044565b82815260059290921b840181019181810190868411156131b957600080fd5b8286015b848110156130d757803567ffffffffffffffff8111156131dd5760008081fd5b6131eb8986838b0101613128565b8452509183019183016131bd565b60008060006060848603121561320e57600080fd5b833567ffffffffffffffff8082111561322657600080fd5b818601915086601f83011261323a57600080fd5b8135602061324a61309883613044565b82815260059290921b8401810191818101908a84111561326957600080fd5b948201945b8386101561329057853561328181613068565b8252948201949082019061326e565b975050870135925050808211156132a657600080fd5b6132b287838801613077565b935060408601359150808211156132c857600080fd5b506132d586828701613179565b9150509250925092565b61ffff81168114610c7257600080fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610c7257600080fd5b60008060008060008060c0878903121561332a57600080fd5b8635613335816132df565b9550602087013567ffffffffffffffff8082111561335257600080fd5b61335e8a838b01613128565b96506040890135955060608901359150613377826132ef565b9093506080880135925060a0880135908082111561339457600080fd5b506133a189828a01613128565b9150509295509295509295565b6000602082840312156133c057600080fd5b8135612c28816132ef565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8051613405816132ef565b919050565b8051801515811461340557600080fd5b600080600080600060a0868803121561343257600080fd5b855161343d816132ef565b945061344b6020870161340a565b9350604086015161345b81613068565b6060870151608090970151959894975095949392505050565b6000806000806080858703121561348a57600080fd5b8451613495816132ef565b60208601519094506134a6816132ef565b6040860151606090960151949790965092505050565b600080600080600060a086880312156134d457600080fd5b85516134df816132ef565b60208701519095506134f0816132ef565b604087015160608801519195509350915061350d6080870161340a565b90509295509295909350565b60006020828403121561352b57600080fd5b5051919050565b60008060006060848603121561354757600080fd5b8351613552816132ef565b6020850151909350613563816132ef565b80925050604084015190509250925092565b6000806040838503121561358857600080fd5b8251613593816132ef565b60208401519092506135a4816132ef565b809150509250929050565b600080600080608085870312156135c557600080fd5b845193506020808601519350604086015167ffffffffffffffff8111156135eb57600080fd5b8601601f810188136135fc57600080fd5b805161360a61309882613044565b81815260059190911b8201830190838101908a83111561362957600080fd5b928401925b82841015613650578351613641816132ef565b8252928401929084019061362e565b8096505050505050613664606086016133fa565b905092959194509250565b60005b8381101561368a578181015183820152602001613672565b838111156109b25750506000910152565b600082601f8301126136ac57600080fd5b81516136ba613098826130e2565b8181528460208386010111156136cf57600080fd5b6136e082602083016020870161366f565b949350505050565b600060208083850312156136fb57600080fd5b825167ffffffffffffffff8082111561371357600080fd5b908401906080828703121561372757600080fd5b61372f612f3f565b825161373a816132ef565b815282840151848201526040808401518183015260608401518381111561376057600080fd5b80850194505087601f85011261377557600080fd5b835161378361309882613044565b81815260059190911b8501860190868101908a8311156137a257600080fd5b8787015b8381101561383c578051878111156137be5760008081fd5b8801808d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018613156137f25760008081fd5b6137fa612f68565b8a820151613807816132ef565b8152818701518981111561381b5760008081fd5b6138298f8d8386010161369b565b828d0152508452509188019188016137a6565b506060850152509198975050505050505050565b600082601f83011261386157600080fd5b8151602061387161309883613044565b82815260059290921b8401810191818101908684111561389057600080fd5b8286015b848110156130d757805167ffffffffffffffff808211156138b55760008081fd5b81890191506080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d030112156138ee5760008081fd5b6138f6612f3f565b87840151613903816132ef565b8152604084810151613914816132ef565b828a0152606085810151858116811461392d5760008081fd5b8383015292850151928484111561394657600091508182fd5b6139548e8b8689010161369b565b90830152508652505050918301918301613894565b600082601f83011261397a57600080fd5b8151602061398a61309883613044565b82815260079290921b840181019181810190868411156139a957600080fd5b8286015b848110156130d757608081890312156139c65760008081fd5b6139ce612f3f565b81516139d9816132ef565b8152818501516139e8816132ef565b8186015260406139f983820161340a565b90820152606082810151908201528352918301916080016139ad565b60006020808385031215613a2857600080fd5b825167ffffffffffffffff80821115613a4057600080fd5b9084019060608287031215613a5457600080fd5b613a5c612f8b565b825182811115613a6b57600080fd5b8301601f81018813613a7c57600080fd5b8051613a8a61309882613044565b81815260059190911b8201860190868101908a831115613aa957600080fd5b8784015b83811015613b7157805187811115613ac457600080fd5b850160a0818e037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0011215613af857600080fd5b613b00612fae565b8a820151613b0d816132ef565b81526040820151613b1d816132ef565b818c0152613b2d6060830161340a565b60408201526080820151606082015260a082015189811115613b4f5760008081fd5b613b5d8f8d8386010161369b565b608083015250845250918801918801613aad565b5084525050508284015182811115613b8857600080fd5b613b9488828601613850565b85830152506040830151935081841115613bad57600080fd5b613bb987858501613969565b60408201529695505050505050565b8051613405816132df565b600082601f830112613be457600080fd5b81516020613bf461309883613044565b82815260059290921b84018101918181019086841115613c1357600080fd5b8286015b848110156130d7578051613c2a81613068565b8352918301918301613c17565b600082601f830112613c4857600080fd5b81516020613c5861309883613044565b82815260059290921b84018101918181019086841115613c7757600080fd5b8286015b848110156130d75780518352918301918301613c7b565b600082601f830112613ca357600080fd5b81516020613cb361309883613044565b82815260059290921b84018101918181019086841115613cd257600080fd5b8286015b848110156130d757805167ffffffffffffffff811115613cf65760008081fd5b613d048986838b010161369b565b845250918301918301613cd6565b6000806000808486036101a0811215613d2a57600080fd5b61014080821215613d3a57600080fd5b613d42612fd1565b9150613d4d87613bc8565b8252613d5b602088016133fa565b602083015260408701516040830152606087015160608301526080870151608083015260a087015160a083015260c087015160c0830152613d9e60e088016133fa565b60e0830152610100613db18189016133fa565b90830152610120878101519083015286015190945067ffffffffffffffff80821115613ddc57600080fd5b613de888838901613bd3565b9450610160870151915080821115613dff57600080fd5b613e0b88838901613c37565b9350610180870151915080821115613e2257600080fd5b50613e2f87828801613c92565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e9c57613e9c613e3b565b5060010190565b60008060008060808587031215613eb957600080fd5b8451613ec4816132ef565b602086015190945067ffffffffffffffff80821115613ee257600080fd5b613eee88838901613bd3565b94506040870151915080821115613f0457600080fd5b613f1088838901613c37565b93506060870151915080821115613e2257600080fd5b600081518084526020808501945080840160005b83811015613f5957815160ff1687529582019590820190600101613f3a565b509495945050505050565b600081518084526020808501945080840160005b83811015613f5957815187529582019590820190600101613f78565b60008151808452613fac81602086016020860161366f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015614026578284038952614014848351613f94565b98850198935090840190600101613ffc565b5091979650505050505050565b6060815260006140466060830186613f26565b82810360208401526140588186613f64565b9050828103604084015261406c8185613fde565b9695505050505050565b60006020828403121561408857600080fd5b612c288261340a565b600080604083850312156140a457600080fd5b505080516020909101519092909150565b6000828210156140c7576140c7613e3b565b500390565b602081526000612c286020830184613f94565b600181815b8085111561413857817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561411e5761411e613e3b565b8085161561412b57918102915b93841c93908002906140e4565b509250929050565b60008261414f57506001612cb9565b8161415c57506000612cb9565b8160018114614172576002811461417c57614198565b6001915050612cb9565b60ff84111561418d5761418d613e3b565b50506001821b612cb9565b5060208310610133831016604e8410600b84101617156141bb575081810a612cb9565b6141c583836140df565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156141f7576141f7613e3b565b029392505050565b6000612c2860ff841683614140565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561424657614246613e3b565b500290565b600082614281577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b73ffffffffffffffffffffffffffffffffffffffff851681526080602082015260006142b56080830186613f26565b82810360408401526142c78186613f64565b90508281036060840152612a868185613fde565b600061012061ffff8c1683528a602084015289604084015273ffffffffffffffffffffffffffffffffffffffff891660608401528760808401528660a08401528060c08401528551818401525060208501516101408301526040850151606061016084015261434e610180840182613f94565b905082810360e08401526143628186613f94565b90508281036101008401526143778185613f94565b9c9b505050505050505050505050565b6000821982111561439a5761439a613e3b565b500190565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff8316604082015260806060820152600061406c6080830184613f94565b80516dffffffffffffffffffffffffffff8116811461340557600080fd5b60008060006060848603121561440d57600080fd5b614416846143da565b9250614424602085016143da565b9150604084015163ffffffff8116811461443d57600080fd5b809150509250925092565b6000825161445a81846020870161366f565b919091019291505056fea264697066735822122076437f8c0170a088ea621a407c9ddcdacb4ea4435b971c8f5db8bf45ffa4eb8764736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}