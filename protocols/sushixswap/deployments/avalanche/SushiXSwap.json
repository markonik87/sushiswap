{
  "address": "0x5629CE74DdCAD7Cc72b3Ea30444dA7172AD851D9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBentoBoxMinimal",
          "name": "_bentoBox",
          "type": "address"
        },
        {
          "internalType": "contract IStargateRouter",
          "name": "_stargateRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_pairCodeHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotStargateRouter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooLittleReceived",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "approveToStargateRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBoxMinimal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "actions",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        }
      ],
      "name": "cook",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "_functionType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dustAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "sgReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateRouter",
      "outputs": [
        {
          "internalType": "contract IStargateRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x741c32608aa2348a5ac26b1c88b065054be03a658e69294e3457c47bf92a463f",
  "receipt": {
    "to": null,
    "from": "0xf87BC5535602077d340806D71f805EA9907a843D",
    "contractAddress": "0x5629CE74DdCAD7Cc72b3Ea30444dA7172AD851D9",
    "transactionIndex": 0,
    "gasUsed": "4148911",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080080020000000000000000000000000000000000000000000000200000000000000000000000000000080002000000000000000000000000000",
    "blockHash": "0x994c23bdeccc90e8f0275f2a95c97c2b2769b02ec3fe415232c4f638f583a596",
    "transactionHash": "0x741c32608aa2348a5ac26b1c88b065054be03a658e69294e3457c47bf92a463f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15386965,
        "transactionHash": "0x741c32608aa2348a5ac26b1c88b065054be03a658e69294e3457c47bf92a463f",
        "address": "0x0711B6026068f736bae6B213031fCE978D48E026",
        "topics": [
          "0xdfb44ffabf0d3a8f650d3ce43eff98f6d050e7ea1a396d5794f014e7dadabacb",
          "0x0000000000000000000000005629ce74ddcad7cc72b3ea30444da7172ad851d9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x994c23bdeccc90e8f0275f2a95c97c2b2769b02ec3fe415232c4f638f583a596"
      }
    ],
    "blockNumber": 15386965,
    "cumulativeGasUsed": "4148911",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0711B6026068f736bae6B213031fCE978D48E026",
    "0x45A01E4e04F14f7A4a6702c74187c5F6222033cd",
    "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
    "0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303"
  ],
  "numDeployments": 1,
  "solcInputHash": "0047df5f856e4ad587efef43d51d3936",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"_bentoBox\",\"type\":\"address\"},{\"internalType\":\"contract IStargateRouter\",\"name\":\"_stargateRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_pairCodeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotStargateRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooLittleReceived\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveToStargateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"cook\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_functionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dustAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouter\",\"outputs\":[{\"internalType\":\"contract IStargateRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Supports both BentoBox and Wallet. Supports both Trident and Legacy AMM. Uses Stargate as bridge.\",\"kind\":\"dev\",\"methods\":{\"approveToStargateRouter(address)\":{\"params\":{\"token\":\"token to approve\"}},\"cook(uint8[],uint256[],bytes[])\":{\"details\":\"The function gets invoked both at the src and dst chain.\",\"params\":{\"actions\":\"An array with a sequence of actions to execute (see ACTION_ declarations).\",\"datas\":\"A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\",\"values\":\"A one-to-one mapped array to `actions`. Native token amount to send along action.\"}},\"getFee(uint16,uint8,address,uint256,uint256,bytes)\":{\"params\":{\"_dstChainId\":\"stargate dst chainId\",\"_dustAmount\":\"dust amount to be received at the dst chain\",\"_functionType\":\"stargate Function type 1 for swap. See more at https://stargateprotocol.gitbook.io/stargate/developers/function-types\",\"_gas\":\"extra gas being sent\",\"_payload\":\"payload being sent at the dst chain\",\"_receiver\":\"sushiXswap on the dst chain\"}},\"sgReceive(uint16,bytes,uint256,address,uint256,bytes)\":{\"params\":{\"_token\":\"bridge token received\",\"amountLD\":\"amount received\",\"payload\":\"ABI-Encoded data received from src chain\"}}},\"title\":\"SushiXSwap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveToStargateRouter(address)\":{\"notice\":\"Approves token to the Stargate Router\"},\"bentoBox()\":{\"notice\":\"BentoBox token vault\"},\"cook(uint8[],uint256[],bytes[])\":{\"notice\":\"Executes a set of actions and allows composability (contract calls) to other contracts.\"},\"factory()\":{\"notice\":\"Sushiswap Legacy AMM Factory\"},\"getFee(uint16,uint8,address,uint256,uint256,bytes)\":{\"notice\":\"Get the fees to be paid in native token for the swap\"},\"pairCodeHash()\":{\"notice\":\"Sushiswap Legacy AMM PairCodeHash\"},\"sgReceive(uint16,bytes,uint256,address,uint256,bytes)\":{\"notice\":\"Receiver function on dst chain\"},\"stargateRouter()\":{\"notice\":\"Stargate Router for cross chain interaction\"}},\"notice\":\"Enables cross chain swap for sushiswap.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SushiXSwap.sol\":\"SushiXSwap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"contracts/SushiXSwap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./interfaces/ISushiXSwap.sol\\\";\\n\\n/// @title SushiXSwap\\n/// @notice Enables cross chain swap for sushiswap.\\n/// @dev Supports both BentoBox and Wallet. Supports both Trident and Legacy AMM. Uses Stargate as bridge.\\ncontract SushiXSwap is\\n    ISushiXSwap,\\n    BentoAdapter,\\n    TokenAdapter,\\n    SushiLegacyAdapter,\\n    TridentSwapAdapter,\\n    StargateAdapter\\n{\\n    constructor(\\n        IBentoBoxMinimal _bentoBox,\\n        IStargateRouter _stargateRouter,\\n        address _factory,\\n        bytes32 _pairCodeHash\\n    ) ImmutableState(_bentoBox, _stargateRouter, _factory, _pairCodeHash) {\\n        // Register to BentoBox\\n        _bentoBox.registerProtocol();\\n    }\\n\\n    /// @notice List of ACTIONS supported by the `cook()`.\\n\\n    // Bento and Token Operations\\n    uint8 internal constant ACTION_MASTER_CONTRACT_APPROVAL = 0;\\n    uint8 internal constant ACTION_SRC_DEPOSIT_TO_BENTOBOX = 1;\\n    uint8 internal constant ACTION_SRC_TRANSFER_FROM_BENTOBOX = 2;\\n    uint8 internal constant ACTION_DST_DEPOSIT_TO_BENTOBOX = 3;\\n    uint8 internal constant ACTION_DST_WITHDRAW_TOKEN = 4;\\n    uint8 internal constant ACTION_DST_WITHDRAW_FROM_BENTOBOX = 5;\\n    uint8 internal constant ACTION_UNWRAP_AND_TRANSFER = 6;\\n\\n    // Swap Operations\\n    uint8 internal constant ACTION_LEGACY_SWAP = 7;\\n    uint8 internal constant ACTION_TRIDENT_SWAP = 8;\\n    uint8 internal constant ACTION_TRIDENT_COMPLEX_PATH_SWAP = 9;\\n\\n    // Bridge Operations\\n    uint8 internal constant ACTION_STARGATE_TELEPORT = 10;\\n\\n    uint8 internal constant ACTION_SRC_TOKEN_TRANSFER = 11;\\n\\n    /// @notice Executes a set of actions and allows composability (contract calls) to other contracts.\\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\\n    /// @param values A one-to-one mapped array to `actions`. Native token amount to send along action.\\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\\n    /// @dev The function gets invoked both at the src and dst chain.\\n    function cook(\\n        uint8[] memory actions,\\n        uint256[] memory values,\\n        bytes[] memory datas\\n    ) public payable override {\\n        uint256 actionLength = actions.length;\\n        for (uint256 i; i < actionLength; i = _increment(i)) {\\n            uint8 action = actions[i];\\n            // update for total amounts in contract?\\n            if (action == ACTION_MASTER_CONTRACT_APPROVAL) {\\n                (\\n                    address user,\\n                    bool approved,\\n                    uint8 v,\\n                    bytes32 r,\\n                    bytes32 s\\n                ) = abi.decode(\\n                        datas[i],\\n                        (address, bool, uint8, bytes32, bytes32)\\n                    );\\n\\n                bentoBox.setMasterContractApproval(\\n                    user,\\n                    address(this),\\n                    approved,\\n                    v,\\n                    r,\\n                    s\\n                );\\n            } else if (action == ACTION_SRC_DEPOSIT_TO_BENTOBOX) {\\n                (address token, address to, uint256 amount, uint256 share) = abi\\n                    .decode(datas[i], (address, address, uint256, uint256));\\n                _depositToBentoBox(\\n                    token,\\n                    msg.sender,\\n                    to,\\n                    amount,\\n                    share,\\n                    values[i]\\n                );\\n            } else if (action == ACTION_SRC_TRANSFER_FROM_BENTOBOX) {\\n                (\\n                    address token,\\n                    address to,\\n                    uint256 amount,\\n                    uint256 share,\\n                    bool unwrapBento\\n                ) = abi.decode(\\n                        datas[i],\\n                        (address, address, uint256, uint256, bool)\\n                    );\\n                _transferFromBentoBox(\\n                    token,\\n                    msg.sender,\\n                    to,\\n                    amount,\\n                    share,\\n                    unwrapBento\\n                );\\n            } else if (action == ACTION_SRC_TOKEN_TRANSFER) {\\n                (address token, address to, uint256 amount) = abi.decode(\\n                    datas[i],\\n                    (address, address, uint256)\\n                );\\n\\n                _transferFromToken(IERC20(token), to, amount);\\n            } else if (action == ACTION_DST_DEPOSIT_TO_BENTOBOX) {\\n                (address token, address to, uint256 amount, uint256 share) = abi\\n                    .decode(datas[i], (address, address, uint256, uint256));\\n\\n                if (amount == 0) {\\n                    amount = IERC20(token).balanceOf(address(this));\\n                    // Stargate Router doesn't support value? Should we update it anyway?\\n                    // values[i] = address(this).balance;\\n                }\\n\\n                _transferTokens(IERC20(token), address(bentoBox), amount);\\n\\n                _depositToBentoBox(\\n                    token,\\n                    address(bentoBox),\\n                    to,\\n                    amount,\\n                    share,\\n                    values[i]\\n                );\\n            } else if (action == ACTION_DST_WITHDRAW_TOKEN) {\\n                (address token, address to, uint256 amount) = abi.decode(\\n                    datas[i],\\n                    (address, address, uint256)\\n                );\\n                if (amount == 0) {\\n                    if (token != address(0)) {\\n                        amount = IERC20(token).balanceOf(address(this));\\n                    } else {\\n                        amount = address(this).balance;\\n                    }\\n                }\\n                _transferTokens(IERC20(token), to, amount);\\n            } else if (action == ACTION_DST_WITHDRAW_FROM_BENTOBOX) {\\n                (\\n                    address token,\\n                    address to,\\n                    uint256 amount,\\n                    uint256 share,\\n                    bool unwrapBento\\n                ) = abi.decode(\\n                        datas[i],\\n                        (address, address, uint256, uint256, bool)\\n                    );\\n                if (amount == 0) {\\n                    amount = IERC20(token).balanceOf(address(this));\\n                }\\n                _transferFromBentoBox(\\n                    token,\\n                    address(this),\\n                    to,\\n                    amount,\\n                    share,\\n                    unwrapBento\\n                );\\n            } else if (action == ACTION_UNWRAP_AND_TRANSFER) {\\n                (address token, address to) = abi.decode(\\n                    datas[i],\\n                    (address, address)\\n                );\\n\\n                _unwrapTransfer(token, to);\\n            } else if (action == ACTION_LEGACY_SWAP) {\\n                (\\n                    uint256 amountIn,\\n                    uint256 amountOutMin,\\n                    address[] memory path,\\n                    address to\\n                ) = abi.decode(\\n                        datas[i],\\n                        (uint256, uint256, address[], address)\\n                    );\\n                bool sendTokens;\\n                if (amountIn == 0) {\\n                    amountIn = IERC20(path[0]).balanceOf(address(this));\\n                    sendTokens = true;\\n                }\\n                _swapExactTokensForTokens(\\n                    amountIn,\\n                    amountOutMin,\\n                    path,\\n                    to,\\n                    sendTokens\\n                );\\n            } else if (action == ACTION_TRIDENT_SWAP) {\\n                ExactInputParams memory params = abi.decode(\\n                    datas[i],\\n                    (ExactInputParams)\\n                );\\n\\n                _exactInput(params);\\n            } else if (action == ACTION_TRIDENT_COMPLEX_PATH_SWAP) {\\n                ComplexPathParams memory params = abi.decode(\\n                    datas[i],\\n                    (ComplexPathParams)\\n                );\\n\\n                _complexPath(params);\\n            } else if (action == ACTION_STARGATE_TELEPORT) {\\n                (\\n                    StargateTeleportParams memory params,\\n                    uint8[] memory actionsDST,\\n                    uint256[] memory valuesDST,\\n                    bytes[] memory datasDST\\n                ) = abi.decode(\\n                        datas[i],\\n                        (StargateTeleportParams, uint8[], uint256[], bytes[])\\n                    );\\n\\n                _stargateTeleport(params, actionsDST, valuesDST, datasDST);\\n            }\\n        }\\n    }\\n\\n    /// @notice Allows the contract to receive Native tokens\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x05ed01ed552473126707013d74e30728bee47fec90b38ea62e0c7778f5f9fee3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/BentoAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IBentoBoxMinimal.sol\\\";\\nimport \\\"../base/ImmutableState.sol\\\";\\n\\n/// @title BentoAdapter\\n/// @notice Adapter which provides all functions of BentoBox require by this contract.\\n/// @dev These are generic functions, make sure, only msg.sender, address(this) and address(bentoBox)\\n/// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\nabstract contract BentoAdapter is ImmutableState {\\n    /// @notice Deposits the token from users wallet into the BentoBox.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to deposit. Use token as address(0) when depositing native token\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to be deposited\\n    /// @param share share to be deposited\\n    /// @param value native token value to be deposited. Only use when token address is address(0)\\n    function _depositToBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        uint256 value\\n    ) internal {\\n        bentoBox.deposit{value: value}(token, from, to, amount, share);\\n    }\\n\\n    /// @notice Transfers the token from bentobox user to another or withdraw it to another address.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to transfer. For native tokens, use wnative token address\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    /// @param share share to transfer\\n    /// @param unwrapBento use true for withdraw and false for transfer\\n    function _transferFromBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            bentoBox.withdraw(token, from, to, amount, share);\\n        } else {\\n            if (amount > 0) {\\n                share = bentoBox.toShare(token, amount, false);\\n            }\\n            bentoBox.transfer(token, from, to, share);\\n        }\\n    }\\n}\",\"keccak256\":\"0x4d2bcdca572d865f27fb5479733973b463b88514e96d8ee4ee03914f6f42852c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/StargateAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/stargate/IStargateAdapter.sol\\\";\\n\\n/// @title StargateAdapter\\n/// @notice Adapter for function used by Stargate Bridge\\nabstract contract StargateAdapter is ImmutableState, IStargateReceiver {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom Error\\n    error NotStargateRouter();\\n\\n    struct StargateTeleportParams {\\n        uint16 dstChainId; // stargate dst chain id\\n        address token; // token getting bridged\\n        uint256 srcPoolId; // stargate src pool id\\n        uint256 dstPoolId; // stargate dst pool id\\n        uint256 amount; // amount to bridge\\n        uint256 amountMin; // amount to bridge minimum\\n        uint256 dustAmount; // native token to be received on dst chain\\n        address receiver; // sushiXswap on dst chain\\n        address to; // receiver bridge token incase of transaction reverts on dst chain\\n        uint256 gas; // extra gas to be sent for dst chain operations\\n    }\\n\\n    /// @notice Approves token to the Stargate Router\\n    /// @param token token to approve\\n    function approveToStargateRouter(IERC20 token) external {\\n        token.safeApprove(address(stargateRouter), type(uint256).max);\\n    }\\n\\n    /// @notice Bridges the token to dst chain using Stargate Router\\n    /// @dev It is hardcoded to use all the contract balance. Only call this as the last step.\\n    /// The refund address for extra fees sent it msg.sender.\\n    /// @param params required by the Stargate, can be found at StargateTeleportParams struct.\\n    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\\n    /// @param values A one-to-one mapped array to `actions`. Native token amount to send along action.\\n    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\\n    function _stargateTeleport(\\n        StargateTeleportParams memory params,\\n        uint8[] memory actions,\\n        uint256[] memory values,\\n        bytes[] memory datas\\n    ) internal {\\n        bytes memory payload = abi.encode(params.to, actions, values, datas);\\n\\n        stargateRouter.swap{value: address(this).balance}(\\n            params.dstChainId,\\n            params.srcPoolId,\\n            params.dstPoolId,\\n            payable(msg.sender), // refund address\\n            params.amount != 0\\n                ? params.amount\\n                : IERC20(params.token).balanceOf(address(this)),\\n            params.amountMin,\\n            IStargateRouter.lzTxObj(\\n                params.gas, // extra gas to be sent for dst execution\\n                params.dustAmount,\\n                abi.encodePacked(params.receiver)\\n            ),\\n            abi.encodePacked(params.receiver), // sushiXswap on the dst chain\\n            payload\\n        );\\n    }\\n\\n    /// @notice Get the fees to be paid in native token for the swap\\n    /// @param _dstChainId stargate dst chainId\\n    /// @param _functionType stargate Function type 1 for swap.\\n    /// See more at https://stargateprotocol.gitbook.io/stargate/developers/function-types\\n    /// @param _receiver sushiXswap on the dst chain\\n    /// @param _gas extra gas being sent\\n    /// @param _dustAmount dust amount to be received at the dst chain\\n    /// @param _payload payload being sent at the dst chain\\n    function getFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        address _receiver,\\n        uint256 _gas,\\n        uint256 _dustAmount,\\n        bytes memory _payload\\n    ) external view returns (uint256 a, uint256 b) {\\n        (a, b) = stargateRouter.quoteLayerZeroFee(\\n            _dstChainId,\\n            _functionType,\\n            abi.encodePacked(_receiver),\\n            abi.encode(_payload),\\n            IStargateRouter.lzTxObj(\\n                _gas,\\n                _dustAmount,\\n                abi.encodePacked(_receiver)\\n            )\\n        );\\n    }\\n\\n    /// @notice Receiver function on dst chain\\n    /// @param _token bridge token received\\n    /// @param amountLD amount received\\n    /// @param payload ABI-Encoded data received from src chain\\n    function sgReceive(\\n        uint16,\\n        bytes memory,\\n        uint256,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external override {\\n        if (msg.sender != address(stargateRouter)) revert NotStargateRouter();\\n\\n        (\\n            address to,\\n            uint8[] memory actions,\\n            uint256[] memory values,\\n            bytes[] memory datas\\n        ) = abi.decode(payload, (address, uint8[], uint256[], bytes[]));\\n\\n        /// @dev incase the actions fail, transfer bridge token to the to address\\n        try\\n            ISushiXSwap(payable(address(this))).cook(actions, values, datas)\\n        {} catch (bytes memory) {\\n            IERC20(_token).transfer(to, amountLD);\\n        }\\n\\n        /// @dev transfer any native token received as dust to the to address\\n        if (address(this).balance > 0)\\n            payable(to).transfer(address(this).balance);\\n    }\\n}\",\"keccak256\":\"0x76774bd888ee61a797cb5cddbf97a7d4290fb666a10e9b837e66ce3a62896830\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/SushiLegacyAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../libraries/UniswapV2Library.sol\\\";\\nimport \\\"../base/ImmutableState.sol\\\";\\n\\n/// @title SushiLegacyAdapter\\n/// @notice Adapter for functions used to swap using Sushiswap Legacy AMM.\\nabstract contract SushiLegacyAdapter is ImmutableState {\\n    using SafeERC20 for IERC20;\\n\\n    function _swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        bool sendTokens\\n    ) internal returns (uint256 amountOut) {\\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(\\n            factory,\\n            amountIn,\\n            path,\\n            pairCodeHash\\n        );\\n        amountOut = amounts[amounts.length - 1];\\n\\n        require(amountOut >= amountOutMin, \\\"insufficient-amount-out\\\");\\n\\n        /// @dev force sends token to the first pair if not already sent\\n        if (sendTokens) {\\n            IERC20(path[0]).safeTransfer(\\n                UniswapV2Library.pairFor(\\n                    factory,\\n                    path[0],\\n                    path[1],\\n                    pairCodeHash\\n                ),\\n                IERC20(path[0]).balanceOf(address(this))\\n            );\\n        }\\n        _swap(amounts, path, to);\\n    }\\n\\n    /// @dev requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < path.length - 2\\n                ? UniswapV2Library.pairFor(\\n                    factory,\\n                    output,\\n                    path[i + 2],\\n                    pairCodeHash\\n                )\\n                : _to;\\n            IUniswapV2Pair(\\n                UniswapV2Library.pairFor(factory, input, output, pairCodeHash)\\n            ).swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n}\",\"keccak256\":\"0xe63e60dee8e6a23dc70f31697e82048b62058e403c26e852e441ac8810b9e30f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/TokenAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\n/// @title TokenAdapter\\n/// @notice Adapter for all token operations\\nabstract contract TokenAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Function to transfer tokens from address(this)\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    function _transferTokens(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) != address(0)) {\\n            token.safeTransfer(to, amount);\\n        } else {\\n            payable(to).transfer(amount);\\n        }\\n    }\\n\\n    /// @notice Function to transfer tokens from user to the to address\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    function _transferFromToken(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        token.safeTransferFrom(msg.sender, to, amount);\\n    }\\n\\n    /// @notice Unwraps the wrapper native into native and sends it to the receiver.\\n    /// @param token token to transfer\\n    /// @param to receiver\\n    function _unwrapTransfer(address token, address to) internal {\\n        IWETH(token).withdraw(IERC20(token).balanceOf(address(this)));\\n        _transferTokens(IERC20(address(0)), to, address(this).balance);\\n    }\\n}\",\"keccak256\":\"0x29e37a33308265ec7a8c807086973fd005a69750745f4a7a4cf012ad13f031b1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/adapters/TridentSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/trident/ITridentSwapAdapter.sol\\\";\\n\\n/// @title TridentSwapAdapter\\n/// @notice Adapter for all Trident based Swaps\\n\\nabstract contract TridentSwapAdapter is\\n    ITridentRouter,\\n    ImmutableState,\\n    BentoAdapter\\n{\\n    // Custom Error\\n    error TooLittleReceived();\\n\\n    /// @notice Swaps token A to token B directly. Swaps are done on `bento` tokens.\\n    /// @param params This includes the address of token A, pool, amount of token A to swap,\\n    /// minimum amount of token B after the swap and data required by the pool for the swap.\\n    /// @dev Ensure that the pool is trusted before calling this function. The pool can steal users' tokens.\\n    function _exactInput(ExactInputParams memory params)\\n        internal\\n        returns (uint256 amountOut)\\n    {\\n        if (params.amountIn == 0) {\\n            // Pay the first pool directly.\\n            (, params.amountIn) = bentoBox.deposit(\\n                params.tokenIn,\\n                address(this),\\n                params.path[0].pool,\\n                IERC20(params.tokenIn).balanceOf(address(this)),\\n                0\\n            );\\n        }\\n\\n        // Call every pool in the path.\\n        // Pool `N` should transfer its output tokens to pool `N+1` directly.\\n        // The last pool should transfer its output tokens to the user.\\n        // If the user wants to unwrap `wETH`, the final destination should be this contract and\\n        // a batch call should be made to `unwrapWETH`.\\n        uint256 n = params.path.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            amountOut = IPool(params.path[i].pool).swap(params.path[i].data);\\n        }\\n        // Ensure that the slippage wasn't too much. This assumes that the pool is honest.\\n        if (amountOut < params.amountOutMinimum) revert TooLittleReceived();\\n    }\\n\\n    /// @notice Swaps multiple input tokens to multiple output tokens using multiple paths, in different percentages.\\n    /// For example, you can swap 50 DAI + 100 USDC into 60% ETH and 40% BTC.\\n    /// @param params This includes everything needed for the swap.\\n    /// Look at the `ComplexPathParams` struct for more details.\\n    /// @dev This function is not optimized for single swaps and should only be used in complex cases where\\n    /// the amounts are large enough that minimizing slippage by using multiple paths is worth the extra gas.\\n    function _complexPath(ComplexPathParams memory params) internal {\\n        // Deposit all initial tokens to respective pools and initiate the swaps.\\n        // Input tokens come from the user - output goes to following pools.\\n        uint256 n = params.initialPath.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            bentoBox.transfer(\\n                params.initialPath[i].tokenIn,\\n                address(this),\\n                params.initialPath[i].pool,\\n                params.initialPath[i].amount\\n            );\\n\\n            IPool(params.initialPath[i].pool).swap(params.initialPath[i].data);\\n        }\\n        // Do all the middle swaps. Input comes from previous pools.\\n        n = params.percentagePath.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            uint256 balanceShares = bentoBox.balanceOf(\\n                params.percentagePath[i].tokenIn,\\n                address(this)\\n            );\\n            uint256 transferShares = (balanceShares *\\n                params.percentagePath[i].balancePercentage) / uint256(10)**8;\\n            bentoBox.transfer(\\n                params.percentagePath[i].tokenIn,\\n                address(this),\\n                params.percentagePath[i].pool,\\n                transferShares\\n            );\\n            IPool(params.percentagePath[i].pool).swap(\\n                params.percentagePath[i].data\\n            );\\n        }\\n        // Ensure enough was received and transfer the ouput to the recipient.\\n        n = params.output.length;\\n        for (uint256 i = 0; i < n; i = _increment(i)) {\\n            uint256 balanceShares = bentoBox.balanceOf(\\n                params.output[i].token,\\n                address(this)\\n            );\\n            if (balanceShares < params.output[i].minAmount)\\n                revert TooLittleReceived();\\n            if (params.output[i].unwrapBento) {\\n                bentoBox.withdraw(\\n                    params.output[i].token,\\n                    address(this),\\n                    params.output[i].to,\\n                    0,\\n                    balanceShares\\n                );\\n            } else {\\n                bentoBox.transfer(\\n                    params.output[i].token,\\n                    address(this),\\n                    params.output[i].to,\\n                    balanceShares\\n                );\\n            }\\n        }\\n    }\\n\\n    function _increment(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return i + 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0x6b853d6b95fbc9669d1f47b9c9a510c2a94df77e0f8200b3de57ce9af1dd439c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/base/ImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../interfaces/IImmutableState.sol\\\";\\n\\n/// @title ImmutableState\\n/// @notice Stores the immutable state\\nabstract contract ImmutableState is IImmutableState {\\n    /// @notice BentoBox token vault\\n    IBentoBoxMinimal public immutable override bentoBox;\\n\\n    /// @notice Stargate Router for cross chain interaction\\n    IStargateRouter public immutable override stargateRouter;\\n\\n    /// @notice Sushiswap Legacy AMM Factory\\n    address public immutable override factory;\\n\\n    /// @notice Sushiswap Legacy AMM PairCodeHash\\n    bytes32 public immutable override pairCodeHash;\\n\\n    constructor(\\n        IBentoBoxMinimal _bentoBox,\\n        IStargateRouter _stargateRouter,\\n        address _factory,\\n        bytes32 _pairCodeHash\\n    ) {\\n        bentoBox = _bentoBox;\\n        stargateRouter = _stargateRouter;\\n        factory = _factory;\\n        pairCodeHash = _pairCodeHash;\\n    }\\n}\",\"keccak256\":\"0xc3185fc578b177349e02428d279596bc02cf9063a88fc07141325ae31558072f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10e7cae69fb9f7b679e51b5999e1b8789055f88fed108d59f5343d3558d5f404\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IBentoBoxMinimal.sol\\\";\\nimport \\\"./stargate/IStargateRouter.sol\\\";\\n\\ninterface IImmutableState {\\n    function bentoBox() external view returns (IBentoBoxMinimal);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function factory() external view returns (address);\\n\\n    function pairCodeHash() external view returns (bytes32);\\n}\",\"keccak256\":\"0xc16ec9058bd8b57a2481412c5b4005869f041f88716548657944f1e829a3704d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ISushiXSwap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../adapters/BentoAdapter.sol\\\";\\nimport \\\"../adapters/TokenAdapter.sol\\\";\\nimport \\\"../adapters/SushiLegacyAdapter.sol\\\";\\nimport \\\"../adapters/TridentSwapAdapter.sol\\\";\\nimport \\\"../adapters/StargateAdapter.sol\\\";\\n\\ninterface ISushiXSwap {\\n    function cook(\\n        uint8[] memory actions,\\n        uint256[] memory values,\\n        bytes[] memory datas\\n    ) external payable;\\n}\",\"keccak256\":\"0xad4ffa10c491b6ebf199199976d0c00684235dd76f234dd9380f7306895539c2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\",\"keccak256\":\"0x08174fdf25e2267c319ad9507b0fe106b786a5184075c057455c400cfb65e5dc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/stargate/IStargateAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../base/ImmutableState.sol\\\";\\nimport \\\"../ISushiXSwap.sol\\\";\\nimport \\\"./IStargateReceiver.sol\\\";\\n\\ninterface IStargateAdapter {}\",\"keccak256\":\"0xefe8f6d4c56a29fb437620ec271dc7be56daa2d5ba3fc6944bfc189c5cfd1c00\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\",\"keccak256\":\"0x18653b2aaf84bbf532839384ec9a735fc5f32decb1f994c57f9492eddac97e2f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/stargate/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.11;\\n\\ninterface IStargateRouter {\\n\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\",\"keccak256\":\"0x38e259fba8c70dca855c1e7618754d43ccd75b09b73c675830e20d93b58825e3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/trident/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\n/// @notice Trident pool interface.\\ninterface IPool {\\n    /// @notice Executes a swap from one token to another.\\n    /// @dev The input tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function swap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Executes a swap from one token to another with a callback.\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\n    function flashSwap(bytes calldata data)\\n        external\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Mints liquidity tokens.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\n\\n    /// @notice Burns liquidity tokens.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\n    function burn(bytes calldata data)\\n        external\\n        returns (TokenAmount[] memory withdrawnAmounts);\\n\\n    /// @notice Burns liquidity tokens for a single output token.\\n    /// @dev The input LP tokens must've already been sent to the pool.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\n    function burnSingle(bytes calldata data)\\n        external\\n        returns (uint256 amountOut);\\n\\n    /// @return A unique identifier for the pool type.\\n    function poolIdentifier() external pure returns (bytes32);\\n\\n    /// @return An array of tokens supported by the pool.\\n    function getAssets() external view returns (address[] memory);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\n    function getAmountOut(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountOut);\\n\\n    /// @notice Simulates a trade and returns the expected output.\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\n    /// @param data ABI-encoded params that the pool requires.\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\n    function getAmountIn(bytes calldata data)\\n        external\\n        view\\n        returns (uint256 finalAmountIn);\\n\\n    /// @dev This event must be emitted on all swaps.\\n    event Swap(\\n        address indexed recipient,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /// @dev This struct frames output tokens for burns.\\n    struct TokenAmount {\\n        address token;\\n        uint256 amount;\\n    }\\n}\",\"keccak256\":\"0x40cff14f725681fad1ef4977a5d07ae1c89c2b400b9d01b7149b77e10ccb4025\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./IPool.sol\\\";\\nimport \\\"../IBentoBoxMinimal.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/// @notice Trident pool router interface.\\ninterface ITridentRouter {\\n    struct Path {\\n        address pool;\\n        bytes data;\\n    }\\n\\n    struct ExactInputSingleParams {\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        address pool;\\n        address tokenIn;\\n        bytes data;\\n    }\\n\\n    struct ExactInputParams {\\n        address tokenIn;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        Path[] path;\\n    }\\n\\n    struct TokenInput {\\n        address token;\\n        bool native;\\n        uint256 amount;\\n    }\\n\\n    struct InitialPath {\\n        address tokenIn;\\n        address pool;\\n        bool native;\\n        uint256 amount;\\n        bytes data;\\n    }\\n\\n    struct PercentagePath {\\n        address tokenIn;\\n        address pool;\\n        uint64 balancePercentage; // Multiplied by 10^6. 100% = 100_000_000\\n        bytes data;\\n    }\\n\\n    struct Output {\\n        address token;\\n        address to;\\n        bool unwrapBento;\\n        uint256 minAmount;\\n    }\\n\\n    struct ComplexPathParams {\\n        InitialPath[] initialPath;\\n        PercentagePath[] percentagePath;\\n        Output[] output;\\n    }\\n}\",\"keccak256\":\"0xc0509d17bb53d2ff9ded9d43022ff84473791f86258a2bcfb1eb3a9966f766d0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/trident/ITridentSwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ITridentRouter.sol\\\";\\nimport \\\"../../adapters/BentoAdapter.sol\\\";\\nimport \\\"../../base/ImmutableState.sol\\\";\\n\\ninterface ITridentSwapAdapter {}\",\"keccak256\":\"0xdf17cd84132e1aac5d6e6f1e38566ac7e3d72883f50c714b45a9cdbcdba3c9c3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathUniswap {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\",\"keccak256\":\"0x8992c26baf30eb4a743dbe6d2a9cb27625fb783347b06283ce9664ffad83c411\",\"license\":\"GPL-3.0\"},\"contracts/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMathUniswap for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            pairCodeHash // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n            pairFor(factory, tokenA, tokenB, pairCodeHash)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1],\\n                pairCodeHash\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path,\\n        bytes32 pairCodeHash\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i],\\n                pairCodeHash\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\",\"keccak256\":\"0x1c40987526aeba050176dc98589ed9211959422b07f5085af035471d900178b7\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162004c0238038062004c028339810160408190526200003591620000ca565b6001600160a01b03808516608081905281851660a05290831660c05260e08290526040805163577268d960e11b8152905163aee4d1b29160048082019260009290919082900301818387803b1580156200008e57600080fd5b505af1158015620000a3573d6000803e3d6000fd5b505050505050505062000124565b6001600160a01b0381168114620000c757600080fd5b50565b60008060008060808587031215620000e157600080fd5b8451620000ee81620000b1565b60208601519094506200010181620000b1565b60408601519093506200011481620000b1565b6060959095015193969295505050565b60805160a05160c05160e0516149f66200020c600039600081816101450152818161135a0152818161147d0152612ab50152600081816101db015281816113370152818161142601528181612a4f0152612a9201526000818161018701528181610a4f01528181610be201528181610e0a01526121e201526000818160b20152818161030301528181610583015281816105ae01528181610eb501528181610f96015281816110620152818161112c015281816115b40152818161188901528181611aa001528181611be401528181611de401528181611f59015261209001526149f66000f3fe60806040526004361061007f5760003560e01c8063a9e56f3c1161004e578063a9e56f3c14610175578063ab8236f3146101a9578063c45a0155146101c9578063d1ac3535146101fd57600080fd5b8063656f3d641461008b5780636b2ace87146100a05780636ce4fe03146100fe5780639aab92481461013357600080fd5b3661008657005b600080fd5b61009e61009936600461367e565b61021d565b005b3480156100ac57600080fd5b506100d47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561010a57600080fd5b5061011e610119366004613796565b610a4a565b604080519283526020830191909152016100f5565b34801561013f57600080fd5b506101677f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100f5565b34801561018157600080fd5b506100d47f000000000000000000000000000000000000000000000000000000000000000081565b3480156101b557600080fd5b5061009e6101c436600461381d565b610bca565b3480156101d557600080fd5b506100d47f000000000000000000000000000000000000000000000000000000000000000081565b34801561020957600080fd5b5061009e6102183660046138ad565b610dee565b825160005b81811015610a4357600085828151811061023e5761023e6138ca565b60200260200101519050600060ff168160ff16141561036b576000806000806000888781518110610271576102716138ca565b602002602001015180602001905181019061028c9190613919565b6040517fc0a47c9300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152306024830152851515604483015260ff851660648301526084820184905260a48201839052959a50939850919650945092507f00000000000000000000000000000000000000000000000000000000000000009091169063c0a47c939060c401600060405180830381600087803b15801561034957600080fd5b505af115801561035d573d6000803e3d6000fd5b505050505050505050610a3a565b60ff8116600114156103e25760008060008087868151811061038f5761038f6138ca565b60200260200101518060200190518101906103aa9190613973565b93509350935093506103d984338585858e8c815181106103cc576103cc6138ca565b6020026020010151610e52565b50505050610a3a565b60ff811660021415610445576000806000806000888781518110610408576104086138ca565b602002602001015180602001905181019061042391906139bb565b9450945094509450945061043b853386868686610f2d565b5050505050610a3a565b60ff8116600b141561049c576000806000868581518110610468576104686138ca565b60200260200101518060200190518101906104839190613a18565b92509250925061049483838361118c565b505050610a3a565b60ff8116600314156105e2576000806000808786815181106104c0576104c06138ca565b60200260200101518060200190518101906104db9190613973565b9350935093509350816000141561057d576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015610556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057a9190613a5b565b91505b6105a8847f0000000000000000000000000000000000000000000000000000000000000000846111b3565b6103d9847f00000000000000000000000000000000000000000000000000000000000000008585858e8c815181106103cc576103cc6138ca565b60ff8116600414156106ee576000806000868581518110610605576106056138ca565b60200260200101518060200190518101906106209190613a18565b92509250925080600014156106e35773ffffffffffffffffffffffffffffffffffffffff8316156106e0576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156106b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d99190613a5b565b90506106e3565b50475b6104948383836111b3565b60ff8116600514156107e1576000806000806000888781518110610714576107146138ca565b602002602001015180602001905181019061072f91906139bb565b9450945094509450945082600014156107d3576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa1580156107ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d09190613a5b565b92505b61043b853086868686610f2d565b60ff81166006141561083257600080858481518110610802576108026138ca565b602002602001015180602001905181019061081d9190613a74565b9150915061082b8282611239565b5050610a3a565b60ff81166007141561095057600080600080878681518110610856576108566138ca565b60200260200101518060200190518101906108719190613aae565b9350935093509350600084600014156109385782600081518110610897576108976138ca565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561090d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109319190613a5b565b9450600190505b610945858585858561132f565b505050505050610a3a565b60ff811660081415610996576000848381518110610970576109706138ca565b602002602001015180602001905181019061098b9190613be7565b905061082b816115a3565b60ff8116600914156109e25760008483815181106109b6576109b66138ca565b60200260200101518060200190518101906109d19190613f14565b90506109dc81611879565b50610a3a565b60ff8116600a1415610a3a57600080600080878681518110610a0657610a066138ca565b6020026020010151806020019051810190610a219190614211565b9350935093509350610a35848484846121b1565b505050505b50600101610222565b5050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630a512369898989604051602001610ac7919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b60405160208183030381529060405287604051602001610ae79190614384565b60405160208183030381529060405260405180606001604052808c81526020018b81526020018d604051602001610b49919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040528152506040518663ffffffff1660e01b8152600401610b7b9594939291906143c0565b6040805180830381865afa158015610b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbb9190614418565b90999098509650505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610c39576040517f8c66bf5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008084806020019051810190610c53919061443c565b6040517f656f3d6400000000000000000000000000000000000000000000000000000000815293975091955093509150309063656f3d6490610c9d9086908690869060040161457f565b600060405180830381600087803b158015610cb757600080fd5b505af1925050508015610cc8575060015b610d98573d808015610cf6576040519150601f19603f3d011682016040523d82523d6000602084013e610cfb565b606091505b506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526024820189905289169063a9059cbb906044016020604051808303816000875af1158015610d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9591906145c2565b50505b4715610de25760405173ffffffffffffffffffffffffffffffffffffffff8516904780156108fc02916000818181858888f19350505050158015610de0573d6000803e3d6000fd5b505b50505050505050505050565b610e4f73ffffffffffffffffffffffffffffffffffffffff82167f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6123dd565b50565b6040517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152858116604483015260648201859052608482018490527f000000000000000000000000000000000000000000000000000000000000000016906302b9446c90839060a401604080518083038185885af1158015610efe573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610f239190614418565b5050505050505050565b8015611009576040517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152858116604483015260648201859052608482018490527f000000000000000000000000000000000000000000000000000000000000000016906397da6d309060a40160408051808303816000875af1158015610fde573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110029190614418565b5050611184565b82156110d0576040517fda5139ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015260248201859052600060448301527f0000000000000000000000000000000000000000000000000000000000000000169063da5139ca90606401602060405180830381865afa1580156110a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cd9190613a5b565b91505b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015286811660248301528581166044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b15801561117057600080fd5b505af1158015610de2573d6000803e3d6000fd5b505050505050565b6111ae73ffffffffffffffffffffffffffffffffffffffff84163384846125dd565b505050565b73ffffffffffffffffffffffffffffffffffffffff8316156111f0576111ae73ffffffffffffffffffffffffffffffffffffffff8416838361263b565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015611233573d6000803e3d6000fd5b50505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff831690632e1a7d4d9082906370a0823190602401602060405180830381865afa1580156112ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cf9190613a5b565b6040518263ffffffff1660e01b81526004016112ed91815260200190565b600060405180830381600087803b15801561130757600080fd5b505af115801561131b573d6000803e3d6000fd5b5050505061132b600082476111b3565b5050565b60008061137e7f000000000000000000000000000000000000000000000000000000000000000088877f0000000000000000000000000000000000000000000000000000000000000000612691565b9050806001825161138f919061460c565b8151811061139f5761139f6138ca565b6020026020010151915085821015611418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f696e73756666696369656e742d616d6f756e742d6f757400000000000000000060448201526064015b60405180910390fd5b821561158e5761158e6114a17f000000000000000000000000000000000000000000000000000000000000000087600081518110611458576114586138ca565b602002602001015188600181518110611473576114736138ca565b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000612838565b866000815181106114b4576114b46138ca565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561152a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154e9190613a5b565b87600081518110611561576115616138ca565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661263b9092919063ffffffff16565b611599818686612952565b5095945050505050565b600081602001516000141561175b577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166302b9446c836000015130856060015160008151811061160b5761160b6138ca565b60209081029190910101515186516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a89190613a5b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff948516600482015292841660248401529216604482015260648101919091526000608482015260a40160408051808303816000875af1158015611730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117549190614418565b6020840152505b60608201515160005b818110156118345783606001518181518110611782576117826138ca565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a856060015183815181106117bf576117bf6138ca565b6020026020010151602001516040518263ffffffff1660e01b81526004016117e79190614384565b6020604051808303816000875af1158015611806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182a9190613a5b565b9250600101611764565b508260400151821015611873576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b80515160005b81811015611a89577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc846000015183815181106118d9576118d96138ca565b60200260200101516000015130866000015185815181106118fc576118fc6138ca565b6020026020010151602001518760000151868151811061191e5761191e6138ca565b6020908102919091010151606001516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152921660448201526064810191909152608401600060405180830381600087803b1580156119aa57600080fd5b505af11580156119be573d6000803e3d6000fd5b50505050826000015181815181106119d8576119d86138ca565b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a84600001518381518110611a1557611a156138ca565b6020026020010151608001516040518263ffffffff1660e01b8152600401611a3d9190614384565b6020604051808303816000875af1158015611a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a809190613a5b565b5060010161187f565b505060208101515160005b81811015611dcd5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec85602001518481518110611af057611af06138ca565b6020908102919091010151516040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa158015611b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8f9190613a5b565b90506000611b9f6008600a614743565b85602001518481518110611bb557611bb56138ca565b60200260200101516040015167ffffffffffffffff1683611bd69190614752565b611be0919061478f565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc86602001518581518110611c3457611c346138ca565b6020026020010151600001513088602001518781518110611c5757611c576138ca565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015291909116604482015260648101849052608401600060405180830381600087803b158015611ce357600080fd5b505af1158015611cf7573d6000803e3d6000fd5b5050505084602001518381518110611d1157611d116138ca565b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a86602001518581518110611d4e57611d4e6138ca565b6020026020010151606001516040518263ffffffff1660e01b8152600401611d769190614384565b6020604051808303816000875af1158015611d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db99190613a5b565b505050611dc68160010190565b9050611a94565b505060408101515160005b818110156111ae5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec85604001518481518110611e3457611e346138ca565b6020908102919091010151516040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa158015611eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed39190613a5b565b905083604001518281518110611eeb57611eeb6138ca565b602002602001015160600151811015611f30576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83604001518281518110611f4657611f466138ca565b6020026020010151604001511561208e577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166397da6d3085604001518481518110611fa957611fa96138ca565b6020026020010151600001513087604001518681518110611fcc57611fcc6138ca565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152919091166044820152600060648201526084810184905260a40160408051808303816000875af1158015612063573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120879190614418565b50506121a8565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc856040015184815181106120e0576120e06138ca565b6020026020010151600001513087604001518681518110612103576121036138ca565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015291909116604482015260648101849052608401600060405180830381600087803b15801561218f57600080fd5b505af11580156121a3573d6000803e3d6000fd5b505050505b50600101611dd8565b60008461010001518484846040516020016121cf94939291906147ca565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639fbf10fc47876000015188604001518960600151338b60800151600014156122d35760208c01516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156122aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ce9190613a5b565b6122d9565b8b608001515b8c60a0015160405180606001604052808f610120015181526020018f60c0015181526020018f60e0015160405160200161233e919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040528152508e60e00151604051602001612390919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040528b6040518b63ffffffff1660e01b81526004016123c49998979695949392919061481f565b6000604051808303818588803b15801561117057600080fd5b80158061247d57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247b9190613a5b565b155b612509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161140f565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526111ae9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612b8f565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526112339085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161255b565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526111ae9084907fa9059cbb000000000000000000000000000000000000000000000000000000009060640161255b565b60606002835110156126ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015260640161140f565b825167ffffffffffffffff81111561271957612719613395565b604051908082528060200260200182016040528015612742578160200160208202803683370190505b5090508381600081518110612759576127596138ca565b60200260200101818152505060005b60018451612776919061460c565b81101561282f576000806127ca88878581518110612796576127966138ca565b6020026020010151888660016127ac91906148aa565b815181106127bc576127bc6138ca565b602002602001015188612c9b565b915091506127f28484815181106127e3576127e36138ca565b60200260200101518383612d9c565b846127fe8560016148aa565b8151811061280e5761280e6138ca565b60200260200101818152505050508080612827906148c2565b915050612768565b50949350505050565b60008060006128478686612f16565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b166034820152919350915087906048016040516020818303038152906040528051906020012085604051602001612911939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830191909152603582015260550190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120979650505050505050565b60005b60018351612963919061460c565b8110156112335760008084838151811061297f5761297f6138ca565b60200260200101518584600161299591906148aa565b815181106129a5576129a56138ca565b60200260200101519150915060006129bd8383612f16565b5090506000876129ce8660016148aa565b815181106129de576129de6138ca565b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614612a2657826000612a2a565b6000835b91509150600060028a51612a3e919061460c565b8810612a4a5788612a8b565b612a8b7f0000000000000000000000000000000000000000000000000000000000000000878c612a7b8c60026148aa565b81518110611473576114736138ca565b9050612ad97f000000000000000000000000000000000000000000000000000000000000000088887f0000000000000000000000000000000000000000000000000000000000000000612838565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612b23576020820181803683370190505b506040518563ffffffff1660e01b8152600401612b4394939291906148fb565b600060405180830381600087803b158015612b5d57600080fd5b505af1158015612b71573d6000803e3d6000fd5b50505050505050505050508080612b87906148c2565b915050612955565b6000612bf1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661309b9092919063ffffffff16565b8051909150156111ae5780806020019051810190612c0f91906145c2565b6111ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161140f565b6000806000612caa8686612f16565b509050600080612cbc89898989612838565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612d06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2a9190614954565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508273ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614612d89578082612d8c565b81815b909a909950975050505050505050565b6000808411612e2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000606482015260840161140f565b600083118015612e3d5750600082115b612ec9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f4951554944495459000000000000000000000000000000000000000000000000606482015260840161140f565b6000612ed7856103e56130b4565b90506000612ee582856130b4565b90506000612eff83612ef9886103e86130b4565b90613144565b9050612f0b818361478f565b979650505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612fd5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f4553534553000000000000000000000000000000000000000000000000000000606482015260840161140f565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161061300f578284613012565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216613094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015260640161140f565b9250929050565b60606130aa84846000856131bc565b90505b9392505050565b60008115806130d8575082826130ca8183614752565b92506130d6908361478f565b145b61313e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015260640161140f565b92915050565b60008261315183826148aa565b915081101561313e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015260640161140f565b60608247101561324e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161140f565b73ffffffffffffffffffffffffffffffffffffffff85163b6132cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161140f565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516132f591906149a4565b60006040518083038185875af1925050503d8060008114613332576040519150601f19603f3d011682016040523d82523d6000602084013e613337565b606091505b5091509150612f0b828286606083156133515750816130ad565b8251156133615782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140f9190614384565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156133e7576133e7613395565b60405290565b6040805190810167ffffffffffffffff811182821017156133e7576133e7613395565b6040516060810167ffffffffffffffff811182821017156133e7576133e7613395565b60405160a0810167ffffffffffffffff811182821017156133e7576133e7613395565b604051610140810167ffffffffffffffff811182821017156133e7576133e7613395565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156134c1576134c1613395565b604052919050565b600067ffffffffffffffff8211156134e3576134e3613395565b5060051b60200190565b60ff81168114610e4f57600080fd5b600082601f83011261350d57600080fd5b8135602061352261351d836134c9565b61347a565b82815260059290921b8401810191818101908684111561354157600080fd5b8286015b8481101561355c5780358352918301918301613545565b509695505050505050565b600067ffffffffffffffff82111561358157613581613395565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126135be57600080fd5b81356135cc61351d82613567565b8181528460208386010111156135e157600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261360f57600080fd5b8135602061361f61351d836134c9565b82815260059290921b8401810191818101908684111561363e57600080fd5b8286015b8481101561355c57803567ffffffffffffffff8111156136625760008081fd5b6136708986838b01016135ad565b845250918301918301613642565b60008060006060848603121561369357600080fd5b833567ffffffffffffffff808211156136ab57600080fd5b818601915086601f8301126136bf57600080fd5b813560206136cf61351d836134c9565b82815260059290921b8401810191818101908a8411156136ee57600080fd5b948201945b83861015613715578535613706816134ed565b825294820194908201906136f3565b9750508701359250508082111561372b57600080fd5b613737878388016134fc565b9350604086013591508082111561374d57600080fd5b5061375a868287016135fe565b9150509250925092565b61ffff81168114610e4f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610e4f57600080fd5b60008060008060008060c087890312156137af57600080fd5b86356137ba81613764565b955060208701356137ca816134ed565b945060408701356137da81613774565b9350606087013592506080870135915060a087013567ffffffffffffffff81111561380457600080fd5b61381089828a016135ad565b9150509295509295509295565b60008060008060008060c0878903121561383657600080fd5b863561384181613764565b9550602087013567ffffffffffffffff8082111561385e57600080fd5b61386a8a838b016135ad565b9650604089013595506060890135915061388382613774565b9093506080880135925060a088013590808211156138a057600080fd5b5061381089828a016135ad565b6000602082840312156138bf57600080fd5b81356130ad81613774565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b805161390481613774565b919050565b8051801515811461390457600080fd5b600080600080600060a0868803121561393157600080fd5b855161393c81613774565b945061394a60208701613909565b9350604086015161395a816134ed565b6060870151608090970151959894975095949392505050565b6000806000806080858703121561398957600080fd5b845161399481613774565b60208601519094506139a581613774565b6040860151606090960151949790965092505050565b600080600080600060a086880312156139d357600080fd5b85516139de81613774565b60208701519095506139ef81613774565b6040870151606088015191955093509150613a0c60808701613909565b90509295509295909350565b600080600060608486031215613a2d57600080fd5b8351613a3881613774565b6020850151909350613a4981613774565b80925050604084015190509250925092565b600060208284031215613a6d57600080fd5b5051919050565b60008060408385031215613a8757600080fd5b8251613a9281613774565b6020840151909250613aa381613774565b809150509250929050565b60008060008060808587031215613ac457600080fd5b845193506020808601519350604086015167ffffffffffffffff811115613aea57600080fd5b8601601f81018813613afb57600080fd5b8051613b0961351d826134c9565b81815260059190911b8201830190838101908a831115613b2857600080fd5b928401925b82841015613b4f578351613b4081613774565b82529284019290840190613b2d565b8096505050505050613b63606086016138f9565b905092959194509250565b60005b83811015613b89578181015183820152602001613b71565b838111156112335750506000910152565b600082601f830112613bab57600080fd5b8151613bb961351d82613567565b818152846020838601011115613bce57600080fd5b613bdf826020830160208701613b6e565b949350505050565b60006020808385031215613bfa57600080fd5b825167ffffffffffffffff80821115613c1257600080fd5b9084019060808287031215613c2657600080fd5b613c2e6133c4565b8251613c3981613774565b8152828401518482015260408084015181830152606084015183811115613c5f57600080fd5b80850194505087601f850112613c7457600080fd5b8351613c8261351d826134c9565b81815260059190911b8501860190868101908a831115613ca157600080fd5b8787015b83811015613d3b57805187811115613cbd5760008081fd5b8801808d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001861315613cf15760008081fd5b613cf96133ed565b8a820151613d0681613774565b81528187015189811115613d1a5760008081fd5b613d288f8d83860101613b9a565b828d015250845250918801918801613ca5565b506060850152509198975050505050505050565b600082601f830112613d6057600080fd5b81516020613d7061351d836134c9565b82815260059290921b84018101918181019086841115613d8f57600080fd5b8286015b8481101561355c57805167ffffffffffffffff80821115613db45760008081fd5b81890191506080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d03011215613ded5760008081fd5b613df56133c4565b87840151613e0281613774565b8152604084810151613e1381613774565b828a01526060858101518581168114613e2c5760008081fd5b83830152928501519284841115613e4557600091508182fd5b613e538e8b86890101613b9a565b90830152508652505050918301918301613d93565b600082601f830112613e7957600080fd5b81516020613e8961351d836134c9565b82815260079290921b84018101918181019086841115613ea857600080fd5b8286015b8481101561355c5760808189031215613ec55760008081fd5b613ecd6133c4565b8151613ed881613774565b815281850151613ee781613774565b818601526040613ef8838201613909565b9082015260608281015190820152835291830191608001613eac565b60006020808385031215613f2757600080fd5b825167ffffffffffffffff80821115613f3f57600080fd5b9084019060608287031215613f5357600080fd5b613f5b613410565b825182811115613f6a57600080fd5b8301601f81018813613f7b57600080fd5b8051613f8961351d826134c9565b81815260059190911b8201860190868101908a831115613fa857600080fd5b8784015b8381101561407057805187811115613fc357600080fd5b850160a0818e037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0011215613ff757600080fd5b613fff613433565b8a82015161400c81613774565b8152604082015161401c81613774565b818c015261402c60608301613909565b60408201526080820151606082015260a08201518981111561404e5760008081fd5b61405c8f8d83860101613b9a565b608083015250845250918801918801613fac565b508452505050828401518281111561408757600080fd5b61409388828601613d4f565b858301525060408301519350818411156140ac57600080fd5b6140b887858501613e68565b60408201529695505050505050565b805161390481613764565b600082601f8301126140e357600080fd5b815160206140f361351d836134c9565b82815260059290921b8401810191818101908684111561411257600080fd5b8286015b8481101561355c578051614129816134ed565b8352918301918301614116565b600082601f83011261414757600080fd5b8151602061415761351d836134c9565b82815260059290921b8401810191818101908684111561417657600080fd5b8286015b8481101561355c578051835291830191830161417a565b600082601f8301126141a257600080fd5b815160206141b261351d836134c9565b82815260059290921b840181019181810190868411156141d157600080fd5b8286015b8481101561355c57805167ffffffffffffffff8111156141f55760008081fd5b6142038986838b0101613b9a565b8452509183019183016141d5565b6000806000808486036101a081121561422957600080fd5b6101408082121561423957600080fd5b614241613456565b915061424c876140c7565b825261425a602088016138f9565b602083015260408701516040830152606087015160608301526080870151608083015260a087015160a083015260c087015160c083015261429d60e088016138f9565b60e08301526101006142b08189016138f9565b90830152610120878101519083015286015190945067ffffffffffffffff808211156142db57600080fd5b6142e7888389016140d2565b94506101608701519150808211156142fe57600080fd5b61430a88838901614136565b935061018087015191508082111561432157600080fd5b5061432e87828801614191565b91505092959194509250565b60008151808452614352816020860160208601613b6e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006130ad602083018461433a565b80518252602081015160208301526000604082015160606040850152613bdf606085018261433a565b61ffff8616815260ff8516602082015260a0604082015260006143e660a083018661433a565b82810360608401526143f8818661433a565b9050828103608084015261440c8185614397565b98975050505050505050565b6000806040838503121561442b57600080fd5b505080516020909101519092909150565b6000806000806080858703121561445257600080fd5b845161445d81613774565b602086015190945067ffffffffffffffff8082111561447b57600080fd5b614487888389016140d2565b9450604087015191508082111561449d57600080fd5b6144a988838901614136565b9350606087015191508082111561432157600080fd5b600081518084526020808501945080840160005b838110156144f257815160ff16875295820195908201906001016144d3565b509495945050505050565b600081518084526020808501945080840160005b838110156144f257815187529582019590820190600101614511565b6000815180845260208085019450848260051b860182860160005b8581101561457257838303895261456083835161433a565b98850198925090840190600101614548565b5090979650505050505050565b60608152600061459260608301866144bf565b82810360208401526145a481866144fd565b905082810360408401526145b8818561452d565b9695505050505050565b6000602082840312156145d457600080fd5b6130ad82613909565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561461e5761461e6145dd565b500390565b600181815b8085111561467c57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115614662576146626145dd565b8085161561466f57918102915b93841c9390800290614628565b509250929050565b6000826146935750600161313e565b816146a05750600061313e565b81600181146146b657600281146146c0576146dc565b600191505061313e565b60ff8411156146d1576146d16145dd565b50506001821b61313e565b5060208310610133831016604e8410600b84101617156146ff575081810a61313e565b6147098383614623565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561473b5761473b6145dd565b029392505050565b60006130ad60ff841683614684565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561478a5761478a6145dd565b500290565b6000826147c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b73ffffffffffffffffffffffffffffffffffffffff851681526080602082015260006147f960808301866144bf565b828103604084015261480b81866144fd565b90508281036060840152612f0b818561452d565b600061012061ffff8c1683528a602084015289604084015273ffffffffffffffffffffffffffffffffffffffff891660608401528760808401528660a08401528060c084015261487181840187614397565b905082810360e0840152614885818661433a565b905082810361010084015261489a818561433a565b9c9b505050505050505050505050565b600082198211156148bd576148bd6145dd565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156148f4576148f46145dd565b5060010190565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff831660408201526080606082015260006145b8608083018461433a565b80516dffffffffffffffffffffffffffff8116811461390457600080fd5b60008060006060848603121561496957600080fd5b61497284614936565b925061498060208501614936565b9150604084015163ffffffff8116811461499957600080fd5b809150509250925092565b600082516149b6818460208701613b6e565b919091019291505056fea264697066735822122039a50691651eac28e7d3e4fd13d06abd5a919070cc3734a2f823bfceccdb067c64736f6c634300080b0033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063a9e56f3c1161004e578063a9e56f3c14610175578063ab8236f3146101a9578063c45a0155146101c9578063d1ac3535146101fd57600080fd5b8063656f3d641461008b5780636b2ace87146100a05780636ce4fe03146100fe5780639aab92481461013357600080fd5b3661008657005b600080fd5b61009e61009936600461367e565b61021d565b005b3480156100ac57600080fd5b506100d47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561010a57600080fd5b5061011e610119366004613796565b610a4a565b604080519283526020830191909152016100f5565b34801561013f57600080fd5b506101677f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100f5565b34801561018157600080fd5b506100d47f000000000000000000000000000000000000000000000000000000000000000081565b3480156101b557600080fd5b5061009e6101c436600461381d565b610bca565b3480156101d557600080fd5b506100d47f000000000000000000000000000000000000000000000000000000000000000081565b34801561020957600080fd5b5061009e6102183660046138ad565b610dee565b825160005b81811015610a4357600085828151811061023e5761023e6138ca565b60200260200101519050600060ff168160ff16141561036b576000806000806000888781518110610271576102716138ca565b602002602001015180602001905181019061028c9190613919565b6040517fc0a47c9300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152306024830152851515604483015260ff851660648301526084820184905260a48201839052959a50939850919650945092507f00000000000000000000000000000000000000000000000000000000000000009091169063c0a47c939060c401600060405180830381600087803b15801561034957600080fd5b505af115801561035d573d6000803e3d6000fd5b505050505050505050610a3a565b60ff8116600114156103e25760008060008087868151811061038f5761038f6138ca565b60200260200101518060200190518101906103aa9190613973565b93509350935093506103d984338585858e8c815181106103cc576103cc6138ca565b6020026020010151610e52565b50505050610a3a565b60ff811660021415610445576000806000806000888781518110610408576104086138ca565b602002602001015180602001905181019061042391906139bb565b9450945094509450945061043b853386868686610f2d565b5050505050610a3a565b60ff8116600b141561049c576000806000868581518110610468576104686138ca565b60200260200101518060200190518101906104839190613a18565b92509250925061049483838361118c565b505050610a3a565b60ff8116600314156105e2576000806000808786815181106104c0576104c06138ca565b60200260200101518060200190518101906104db9190613973565b9350935093509350816000141561057d576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015610556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057a9190613a5b565b91505b6105a8847f0000000000000000000000000000000000000000000000000000000000000000846111b3565b6103d9847f00000000000000000000000000000000000000000000000000000000000000008585858e8c815181106103cc576103cc6138ca565b60ff8116600414156106ee576000806000868581518110610605576106056138ca565b60200260200101518060200190518101906106209190613a18565b92509250925080600014156106e35773ffffffffffffffffffffffffffffffffffffffff8316156106e0576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156106b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d99190613a5b565b90506106e3565b50475b6104948383836111b3565b60ff8116600514156107e1576000806000806000888781518110610714576107146138ca565b602002602001015180602001905181019061072f91906139bb565b9450945094509450945082600014156107d3576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa1580156107ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d09190613a5b565b92505b61043b853086868686610f2d565b60ff81166006141561083257600080858481518110610802576108026138ca565b602002602001015180602001905181019061081d9190613a74565b9150915061082b8282611239565b5050610a3a565b60ff81166007141561095057600080600080878681518110610856576108566138ca565b60200260200101518060200190518101906108719190613aae565b9350935093509350600084600014156109385782600081518110610897576108976138ca565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561090d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109319190613a5b565b9450600190505b610945858585858561132f565b505050505050610a3a565b60ff811660081415610996576000848381518110610970576109706138ca565b602002602001015180602001905181019061098b9190613be7565b905061082b816115a3565b60ff8116600914156109e25760008483815181106109b6576109b66138ca565b60200260200101518060200190518101906109d19190613f14565b90506109dc81611879565b50610a3a565b60ff8116600a1415610a3a57600080600080878681518110610a0657610a066138ca565b6020026020010151806020019051810190610a219190614211565b9350935093509350610a35848484846121b1565b505050505b50600101610222565b5050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630a512369898989604051602001610ac7919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b60405160208183030381529060405287604051602001610ae79190614384565b60405160208183030381529060405260405180606001604052808c81526020018b81526020018d604051602001610b49919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040528152506040518663ffffffff1660e01b8152600401610b7b9594939291906143c0565b6040805180830381865afa158015610b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbb9190614418565b90999098509650505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610c39576040517f8c66bf5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060008084806020019051810190610c53919061443c565b6040517f656f3d6400000000000000000000000000000000000000000000000000000000815293975091955093509150309063656f3d6490610c9d9086908690869060040161457f565b600060405180830381600087803b158015610cb757600080fd5b505af1925050508015610cc8575060015b610d98573d808015610cf6576040519150601f19603f3d011682016040523d82523d6000602084013e610cfb565b606091505b506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526024820189905289169063a9059cbb906044016020604051808303816000875af1158015610d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9591906145c2565b50505b4715610de25760405173ffffffffffffffffffffffffffffffffffffffff8516904780156108fc02916000818181858888f19350505050158015610de0573d6000803e3d6000fd5b505b50505050505050505050565b610e4f73ffffffffffffffffffffffffffffffffffffffff82167f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6123dd565b50565b6040517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152858116604483015260648201859052608482018490527f000000000000000000000000000000000000000000000000000000000000000016906302b9446c90839060a401604080518083038185885af1158015610efe573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610f239190614418565b5050505050505050565b8015611009576040517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152858116604483015260648201859052608482018490527f000000000000000000000000000000000000000000000000000000000000000016906397da6d309060a40160408051808303816000875af1158015610fde573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110029190614418565b5050611184565b82156110d0576040517fda5139ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015260248201859052600060448301527f0000000000000000000000000000000000000000000000000000000000000000169063da5139ca90606401602060405180830381865afa1580156110a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cd9190613a5b565b91505b6040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015286811660248301528581166044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063f18d03cc90608401600060405180830381600087803b15801561117057600080fd5b505af1158015610de2573d6000803e3d6000fd5b505050505050565b6111ae73ffffffffffffffffffffffffffffffffffffffff84163384846125dd565b505050565b73ffffffffffffffffffffffffffffffffffffffff8316156111f0576111ae73ffffffffffffffffffffffffffffffffffffffff8416838361263b565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015611233573d6000803e3d6000fd5b50505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff831690632e1a7d4d9082906370a0823190602401602060405180830381865afa1580156112ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cf9190613a5b565b6040518263ffffffff1660e01b81526004016112ed91815260200190565b600060405180830381600087803b15801561130757600080fd5b505af115801561131b573d6000803e3d6000fd5b5050505061132b600082476111b3565b5050565b60008061137e7f000000000000000000000000000000000000000000000000000000000000000088877f0000000000000000000000000000000000000000000000000000000000000000612691565b9050806001825161138f919061460c565b8151811061139f5761139f6138ca565b6020026020010151915085821015611418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f696e73756666696369656e742d616d6f756e742d6f757400000000000000000060448201526064015b60405180910390fd5b821561158e5761158e6114a17f000000000000000000000000000000000000000000000000000000000000000087600081518110611458576114586138ca565b602002602001015188600181518110611473576114736138ca565b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000612838565b866000815181106114b4576114b46138ca565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561152a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154e9190613a5b565b87600081518110611561576115616138ca565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661263b9092919063ffffffff16565b611599818686612952565b5095945050505050565b600081602001516000141561175b577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166302b9446c836000015130856060015160008151811061160b5761160b6138ca565b60209081029190910101515186516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a89190613a5b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff948516600482015292841660248401529216604482015260648101919091526000608482015260a40160408051808303816000875af1158015611730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117549190614418565b6020840152505b60608201515160005b818110156118345783606001518181518110611782576117826138ca565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a856060015183815181106117bf576117bf6138ca565b6020026020010151602001516040518263ffffffff1660e01b81526004016117e79190614384565b6020604051808303816000875af1158015611806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182a9190613a5b565b9250600101611764565b508260400151821015611873576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b80515160005b81811015611a89577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc846000015183815181106118d9576118d96138ca565b60200260200101516000015130866000015185815181106118fc576118fc6138ca565b6020026020010151602001518760000151868151811061191e5761191e6138ca565b6020908102919091010151606001516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff94851660048201529284166024840152921660448201526064810191909152608401600060405180830381600087803b1580156119aa57600080fd5b505af11580156119be573d6000803e3d6000fd5b50505050826000015181815181106119d8576119d86138ca565b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a84600001518381518110611a1557611a156138ca565b6020026020010151608001516040518263ffffffff1660e01b8152600401611a3d9190614384565b6020604051808303816000875af1158015611a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a809190613a5b565b5060010161187f565b505060208101515160005b81811015611dcd5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec85602001518481518110611af057611af06138ca565b6020908102919091010151516040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa158015611b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8f9190613a5b565b90506000611b9f6008600a614743565b85602001518481518110611bb557611bb56138ca565b60200260200101516040015167ffffffffffffffff1683611bd69190614752565b611be0919061478f565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc86602001518581518110611c3457611c346138ca565b6020026020010151600001513088602001518781518110611c5757611c576138ca565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015291909116604482015260648101849052608401600060405180830381600087803b158015611ce357600080fd5b505af1158015611cf7573d6000803e3d6000fd5b5050505084602001518381518110611d1157611d116138ca565b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1663627dd56a86602001518581518110611d4e57611d4e6138ca565b6020026020010151606001516040518263ffffffff1660e01b8152600401611d769190614384565b6020604051808303816000875af1158015611d95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db99190613a5b565b505050611dc68160010190565b9050611a94565b505060408101515160005b818110156111ae5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec85604001518481518110611e3457611e346138ca565b6020908102919091010151516040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa158015611eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed39190613a5b565b905083604001518281518110611eeb57611eeb6138ca565b602002602001015160600151811015611f30576040517fc9f52c7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83604001518281518110611f4657611f466138ca565b6020026020010151604001511561208e577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166397da6d3085604001518481518110611fa957611fa96138ca565b6020026020010151600001513087604001518681518110611fcc57611fcc6138ca565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152919091166044820152600060648201526084810184905260a40160408051808303816000875af1158015612063573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120879190614418565b50506121a8565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f18d03cc856040015184815181106120e0576120e06138ca565b6020026020010151600001513087604001518681518110612103576121036138ca565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015291909116604482015260648101849052608401600060405180830381600087803b15801561218f57600080fd5b505af11580156121a3573d6000803e3d6000fd5b505050505b50600101611dd8565b60008461010001518484846040516020016121cf94939291906147ca565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639fbf10fc47876000015188604001518960600151338b60800151600014156122d35760208c01516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156122aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ce9190613a5b565b6122d9565b8b608001515b8c60a0015160405180606001604052808f610120015181526020018f60c0015181526020018f60e0015160405160200161233e919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040528152508e60e00151604051602001612390919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040528b6040518b63ffffffff1660e01b81526004016123c49998979695949392919061481f565b6000604051808303818588803b15801561117057600080fd5b80158061247d57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247b9190613a5b565b155b612509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161140f565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526111ae9084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612b8f565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526112339085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161255b565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526111ae9084907fa9059cbb000000000000000000000000000000000000000000000000000000009060640161255b565b60606002835110156126ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604482015260640161140f565b825167ffffffffffffffff81111561271957612719613395565b604051908082528060200260200182016040528015612742578160200160208202803683370190505b5090508381600081518110612759576127596138ca565b60200260200101818152505060005b60018451612776919061460c565b81101561282f576000806127ca88878581518110612796576127966138ca565b6020026020010151888660016127ac91906148aa565b815181106127bc576127bc6138ca565b602002602001015188612c9b565b915091506127f28484815181106127e3576127e36138ca565b60200260200101518383612d9c565b846127fe8560016148aa565b8151811061280e5761280e6138ca565b60200260200101818152505050508080612827906148c2565b915050612768565b50949350505050565b60008060006128478686612f16565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b166034820152919350915087906048016040516020818303038152906040528051906020012085604051602001612911939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830191909152603582015260550190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120979650505050505050565b60005b60018351612963919061460c565b8110156112335760008084838151811061297f5761297f6138ca565b60200260200101518584600161299591906148aa565b815181106129a5576129a56138ca565b60200260200101519150915060006129bd8383612f16565b5090506000876129ce8660016148aa565b815181106129de576129de6138ca565b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614612a2657826000612a2a565b6000835b91509150600060028a51612a3e919061460c565b8810612a4a5788612a8b565b612a8b7f0000000000000000000000000000000000000000000000000000000000000000878c612a7b8c60026148aa565b81518110611473576114736138ca565b9050612ad97f000000000000000000000000000000000000000000000000000000000000000088887f0000000000000000000000000000000000000000000000000000000000000000612838565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612b23576020820181803683370190505b506040518563ffffffff1660e01b8152600401612b4394939291906148fb565b600060405180830381600087803b158015612b5d57600080fd5b505af1158015612b71573d6000803e3d6000fd5b50505050505050505050508080612b87906148c2565b915050612955565b6000612bf1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661309b9092919063ffffffff16565b8051909150156111ae5780806020019051810190612c0f91906145c2565b6111ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161140f565b6000806000612caa8686612f16565b509050600080612cbc89898989612838565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612d06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2a9190614954565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508273ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614612d89578082612d8c565b81815b909a909950975050505050505050565b6000808411612e2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000606482015260840161140f565b600083118015612e3d5750600082115b612ec9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f4951554944495459000000000000000000000000000000000000000000000000606482015260840161140f565b6000612ed7856103e56130b4565b90506000612ee582856130b4565b90506000612eff83612ef9886103e86130b4565b90613144565b9050612f0b818361478f565b979650505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612fd5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f4553534553000000000000000000000000000000000000000000000000000000606482015260840161140f565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161061300f578284613012565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216613094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015260640161140f565b9250929050565b60606130aa84846000856131bc565b90505b9392505050565b60008115806130d8575082826130ca8183614752565b92506130d6908361478f565b145b61313e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015260640161140f565b92915050565b60008261315183826148aa565b915081101561313e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015260640161140f565b60608247101561324e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161140f565b73ffffffffffffffffffffffffffffffffffffffff85163b6132cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161140f565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516132f591906149a4565b60006040518083038185875af1925050503d8060008114613332576040519150601f19603f3d011682016040523d82523d6000602084013e613337565b606091505b5091509150612f0b828286606083156133515750816130ad565b8251156133615782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140f9190614384565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156133e7576133e7613395565b60405290565b6040805190810167ffffffffffffffff811182821017156133e7576133e7613395565b6040516060810167ffffffffffffffff811182821017156133e7576133e7613395565b60405160a0810167ffffffffffffffff811182821017156133e7576133e7613395565b604051610140810167ffffffffffffffff811182821017156133e7576133e7613395565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156134c1576134c1613395565b604052919050565b600067ffffffffffffffff8211156134e3576134e3613395565b5060051b60200190565b60ff81168114610e4f57600080fd5b600082601f83011261350d57600080fd5b8135602061352261351d836134c9565b61347a565b82815260059290921b8401810191818101908684111561354157600080fd5b8286015b8481101561355c5780358352918301918301613545565b509695505050505050565b600067ffffffffffffffff82111561358157613581613395565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126135be57600080fd5b81356135cc61351d82613567565b8181528460208386010111156135e157600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261360f57600080fd5b8135602061361f61351d836134c9565b82815260059290921b8401810191818101908684111561363e57600080fd5b8286015b8481101561355c57803567ffffffffffffffff8111156136625760008081fd5b6136708986838b01016135ad565b845250918301918301613642565b60008060006060848603121561369357600080fd5b833567ffffffffffffffff808211156136ab57600080fd5b818601915086601f8301126136bf57600080fd5b813560206136cf61351d836134c9565b82815260059290921b8401810191818101908a8411156136ee57600080fd5b948201945b83861015613715578535613706816134ed565b825294820194908201906136f3565b9750508701359250508082111561372b57600080fd5b613737878388016134fc565b9350604086013591508082111561374d57600080fd5b5061375a868287016135fe565b9150509250925092565b61ffff81168114610e4f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610e4f57600080fd5b60008060008060008060c087890312156137af57600080fd5b86356137ba81613764565b955060208701356137ca816134ed565b945060408701356137da81613774565b9350606087013592506080870135915060a087013567ffffffffffffffff81111561380457600080fd5b61381089828a016135ad565b9150509295509295509295565b60008060008060008060c0878903121561383657600080fd5b863561384181613764565b9550602087013567ffffffffffffffff8082111561385e57600080fd5b61386a8a838b016135ad565b9650604089013595506060890135915061388382613774565b9093506080880135925060a088013590808211156138a057600080fd5b5061381089828a016135ad565b6000602082840312156138bf57600080fd5b81356130ad81613774565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b805161390481613774565b919050565b8051801515811461390457600080fd5b600080600080600060a0868803121561393157600080fd5b855161393c81613774565b945061394a60208701613909565b9350604086015161395a816134ed565b6060870151608090970151959894975095949392505050565b6000806000806080858703121561398957600080fd5b845161399481613774565b60208601519094506139a581613774565b6040860151606090960151949790965092505050565b600080600080600060a086880312156139d357600080fd5b85516139de81613774565b60208701519095506139ef81613774565b6040870151606088015191955093509150613a0c60808701613909565b90509295509295909350565b600080600060608486031215613a2d57600080fd5b8351613a3881613774565b6020850151909350613a4981613774565b80925050604084015190509250925092565b600060208284031215613a6d57600080fd5b5051919050565b60008060408385031215613a8757600080fd5b8251613a9281613774565b6020840151909250613aa381613774565b809150509250929050565b60008060008060808587031215613ac457600080fd5b845193506020808601519350604086015167ffffffffffffffff811115613aea57600080fd5b8601601f81018813613afb57600080fd5b8051613b0961351d826134c9565b81815260059190911b8201830190838101908a831115613b2857600080fd5b928401925b82841015613b4f578351613b4081613774565b82529284019290840190613b2d565b8096505050505050613b63606086016138f9565b905092959194509250565b60005b83811015613b89578181015183820152602001613b71565b838111156112335750506000910152565b600082601f830112613bab57600080fd5b8151613bb961351d82613567565b818152846020838601011115613bce57600080fd5b613bdf826020830160208701613b6e565b949350505050565b60006020808385031215613bfa57600080fd5b825167ffffffffffffffff80821115613c1257600080fd5b9084019060808287031215613c2657600080fd5b613c2e6133c4565b8251613c3981613774565b8152828401518482015260408084015181830152606084015183811115613c5f57600080fd5b80850194505087601f850112613c7457600080fd5b8351613c8261351d826134c9565b81815260059190911b8501860190868101908a831115613ca157600080fd5b8787015b83811015613d3b57805187811115613cbd5760008081fd5b8801808d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001861315613cf15760008081fd5b613cf96133ed565b8a820151613d0681613774565b81528187015189811115613d1a5760008081fd5b613d288f8d83860101613b9a565b828d015250845250918801918801613ca5565b506060850152509198975050505050505050565b600082601f830112613d6057600080fd5b81516020613d7061351d836134c9565b82815260059290921b84018101918181019086841115613d8f57600080fd5b8286015b8481101561355c57805167ffffffffffffffff80821115613db45760008081fd5b81890191506080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d03011215613ded5760008081fd5b613df56133c4565b87840151613e0281613774565b8152604084810151613e1381613774565b828a01526060858101518581168114613e2c5760008081fd5b83830152928501519284841115613e4557600091508182fd5b613e538e8b86890101613b9a565b90830152508652505050918301918301613d93565b600082601f830112613e7957600080fd5b81516020613e8961351d836134c9565b82815260079290921b84018101918181019086841115613ea857600080fd5b8286015b8481101561355c5760808189031215613ec55760008081fd5b613ecd6133c4565b8151613ed881613774565b815281850151613ee781613774565b818601526040613ef8838201613909565b9082015260608281015190820152835291830191608001613eac565b60006020808385031215613f2757600080fd5b825167ffffffffffffffff80821115613f3f57600080fd5b9084019060608287031215613f5357600080fd5b613f5b613410565b825182811115613f6a57600080fd5b8301601f81018813613f7b57600080fd5b8051613f8961351d826134c9565b81815260059190911b8201860190868101908a831115613fa857600080fd5b8784015b8381101561407057805187811115613fc357600080fd5b850160a0818e037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0011215613ff757600080fd5b613fff613433565b8a82015161400c81613774565b8152604082015161401c81613774565b818c015261402c60608301613909565b60408201526080820151606082015260a08201518981111561404e5760008081fd5b61405c8f8d83860101613b9a565b608083015250845250918801918801613fac565b508452505050828401518281111561408757600080fd5b61409388828601613d4f565b858301525060408301519350818411156140ac57600080fd5b6140b887858501613e68565b60408201529695505050505050565b805161390481613764565b600082601f8301126140e357600080fd5b815160206140f361351d836134c9565b82815260059290921b8401810191818101908684111561411257600080fd5b8286015b8481101561355c578051614129816134ed565b8352918301918301614116565b600082601f83011261414757600080fd5b8151602061415761351d836134c9565b82815260059290921b8401810191818101908684111561417657600080fd5b8286015b8481101561355c578051835291830191830161417a565b600082601f8301126141a257600080fd5b815160206141b261351d836134c9565b82815260059290921b840181019181810190868411156141d157600080fd5b8286015b8481101561355c57805167ffffffffffffffff8111156141f55760008081fd5b6142038986838b0101613b9a565b8452509183019183016141d5565b6000806000808486036101a081121561422957600080fd5b6101408082121561423957600080fd5b614241613456565b915061424c876140c7565b825261425a602088016138f9565b602083015260408701516040830152606087015160608301526080870151608083015260a087015160a083015260c087015160c083015261429d60e088016138f9565b60e08301526101006142b08189016138f9565b90830152610120878101519083015286015190945067ffffffffffffffff808211156142db57600080fd5b6142e7888389016140d2565b94506101608701519150808211156142fe57600080fd5b61430a88838901614136565b935061018087015191508082111561432157600080fd5b5061432e87828801614191565b91505092959194509250565b60008151808452614352816020860160208601613b6e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006130ad602083018461433a565b80518252602081015160208301526000604082015160606040850152613bdf606085018261433a565b61ffff8616815260ff8516602082015260a0604082015260006143e660a083018661433a565b82810360608401526143f8818661433a565b9050828103608084015261440c8185614397565b98975050505050505050565b6000806040838503121561442b57600080fd5b505080516020909101519092909150565b6000806000806080858703121561445257600080fd5b845161445d81613774565b602086015190945067ffffffffffffffff8082111561447b57600080fd5b614487888389016140d2565b9450604087015191508082111561449d57600080fd5b6144a988838901614136565b9350606087015191508082111561432157600080fd5b600081518084526020808501945080840160005b838110156144f257815160ff16875295820195908201906001016144d3565b509495945050505050565b600081518084526020808501945080840160005b838110156144f257815187529582019590820190600101614511565b6000815180845260208085019450848260051b860182860160005b8581101561457257838303895261456083835161433a565b98850198925090840190600101614548565b5090979650505050505050565b60608152600061459260608301866144bf565b82810360208401526145a481866144fd565b905082810360408401526145b8818561452d565b9695505050505050565b6000602082840312156145d457600080fd5b6130ad82613909565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561461e5761461e6145dd565b500390565b600181815b8085111561467c57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115614662576146626145dd565b8085161561466f57918102915b93841c9390800290614628565b509250929050565b6000826146935750600161313e565b816146a05750600061313e565b81600181146146b657600281146146c0576146dc565b600191505061313e565b60ff8411156146d1576146d16145dd565b50506001821b61313e565b5060208310610133831016604e8410600b84101617156146ff575081810a61313e565b6147098383614623565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561473b5761473b6145dd565b029392505050565b60006130ad60ff841683614684565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561478a5761478a6145dd565b500290565b6000826147c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b73ffffffffffffffffffffffffffffffffffffffff851681526080602082015260006147f960808301866144bf565b828103604084015261480b81866144fd565b90508281036060840152612f0b818561452d565b600061012061ffff8c1683528a602084015289604084015273ffffffffffffffffffffffffffffffffffffffff891660608401528760808401528660a08401528060c084015261487181840187614397565b905082810360e0840152614885818661433a565b905082810361010084015261489a818561433a565b9c9b505050505050505050505050565b600082198211156148bd576148bd6145dd565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156148f4576148f46145dd565b5060010190565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff831660408201526080606082015260006145b8608083018461433a565b80516dffffffffffffffffffffffffffff8116811461390457600080fd5b60008060006060848603121561496957600080fd5b61497284614936565b925061498060208501614936565b9150604084015163ffffffff8116811461499957600080fd5b809150509250925092565b600082516149b6818460208701613b6e565b919091019291505056fea264697066735822122039a50691651eac28e7d3e4fd13d06abd5a919070cc3734a2f823bfceccdb067c64736f6c634300080b0033",
  "devdoc": {
    "details": "Supports both BentoBox and Wallet. Supports both Trident and Legacy AMM. Uses Stargate as bridge.",
    "kind": "dev",
    "methods": {
      "approveToStargateRouter(address)": {
        "params": {
          "token": "token to approve"
        }
      },
      "cook(uint8[],uint256[],bytes[])": {
        "details": "The function gets invoked both at the src and dst chain.",
        "params": {
          "actions": "An array with a sequence of actions to execute (see ACTION_ declarations).",
          "datas": "A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.",
          "values": "A one-to-one mapped array to `actions`. Native token amount to send along action."
        }
      },
      "getFee(uint16,uint8,address,uint256,uint256,bytes)": {
        "params": {
          "_dstChainId": "stargate dst chainId",
          "_dustAmount": "dust amount to be received at the dst chain",
          "_functionType": "stargate Function type 1 for swap. See more at https://stargateprotocol.gitbook.io/stargate/developers/function-types",
          "_gas": "extra gas being sent",
          "_payload": "payload being sent at the dst chain",
          "_receiver": "sushiXswap on the dst chain"
        }
      },
      "sgReceive(uint16,bytes,uint256,address,uint256,bytes)": {
        "params": {
          "_token": "bridge token received",
          "amountLD": "amount received",
          "payload": "ABI-Encoded data received from src chain"
        }
      }
    },
    "title": "SushiXSwap",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveToStargateRouter(address)": {
        "notice": "Approves token to the Stargate Router"
      },
      "bentoBox()": {
        "notice": "BentoBox token vault"
      },
      "cook(uint8[],uint256[],bytes[])": {
        "notice": "Executes a set of actions and allows composability (contract calls) to other contracts."
      },
      "factory()": {
        "notice": "Sushiswap Legacy AMM Factory"
      },
      "getFee(uint16,uint8,address,uint256,uint256,bytes)": {
        "notice": "Get the fees to be paid in native token for the swap"
      },
      "pairCodeHash()": {
        "notice": "Sushiswap Legacy AMM PairCodeHash"
      },
      "sgReceive(uint16,bytes,uint256,address,uint256,bytes)": {
        "notice": "Receiver function on dst chain"
      },
      "stargateRouter()": {
        "notice": "Stargate Router for cross chain interaction"
      }
    },
    "notice": "Enables cross chain swap for sushiswap.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}